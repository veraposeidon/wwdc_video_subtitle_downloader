1
00:00:01,516 --> 00:00:04,500
[ Music ]


2
00:00:06,516 --> 00:00:09,016
[ Applause ]


3
00:00:09,516 --> 00:00:11,056
>> Good morning everyone, my


4
00:00:11,056 --> 00:00:12,736
name is Michael Gorbach and I'll


5
00:00:12,736 --> 00:00:13,666
be presenting today with my


6
00:00:13,666 --> 00:00:15,226
colleague John Nefulda from


7
00:00:15,226 --> 00:00:18,296
Apple's Accessibility team.


8
00:00:18,506 --> 00:00:20,536
I'm sure all of you are excited


9
00:00:20,576 --> 00:00:22,276
about SwiftUI and how it can


10
00:00:22,276 --> 00:00:24,086
help you build better apps


11
00:00:24,256 --> 00:00:25,886
faster and easier.


12
00:00:27,046 --> 00:00:29,176
I am also really excited about


13
00:00:29,176 --> 00:00:31,436
SwiftUI and specifically, I'm


14
00:00:31,436 --> 00:00:33,916
excited about its potential for


15
00:00:33,916 --> 00:00:34,676
Accessibility.


16
00:00:35,656 --> 00:00:36,566
We're going to tell you today


17
00:00:36,566 --> 00:00:38,476
how SwiftUI can help you build


18
00:00:38,686 --> 00:00:41,316
the next generation of apps for


19
00:00:41,316 --> 00:00:42,676
all of your users.


20
00:00:43,176 --> 00:00:46,496
We're going to kick it off with


21
00:00:46,546 --> 00:00:48,436
a quick introduction to


22
00:00:48,436 --> 00:00:50,506
Accessibility and our


23
00:00:50,506 --> 00:00:51,946
Accessibility technologies on


24
00:00:51,946 --> 00:00:52,716
our platforms.


25
00:00:55,216 --> 00:00:58,426
Then talk a little bit about how


26
00:00:58,426 --> 00:01:00,346
SwiftUI make your -- makes your


27
00:01:00,346 --> 00:01:02,676
apps more accessible by default.


28
00:01:03,246 --> 00:01:06,186
John is going to come in and


29
00:01:06,186 --> 00:01:07,266
take us through the


30
00:01:07,266 --> 00:01:09,306
Accessibility API that we are


31
00:01:09,306 --> 00:01:10,546
introducing today.


32
00:01:11,146 --> 00:01:13,616
And, also take us through the


33
00:01:13,616 --> 00:01:15,906
Accessibility Tree that SwiftUI


34
00:01:15,906 --> 00:01:17,446
generates for us in our


35
00:01:17,446 --> 00:01:17,976
applications.


36
00:01:21,556 --> 00:01:23,186
So, let's start with that


37
00:01:23,186 --> 00:01:23,706
introduction.


38
00:01:24,866 --> 00:01:26,896
What do we mean when we throw


39
00:01:26,896 --> 00:01:28,606
around this word Accessibility


40
00:01:28,606 --> 00:01:28,886
today?


41
00:01:30,066 --> 00:01:32,046
Well, all of you have put a ton


42
00:01:32,046 --> 00:01:33,726
of work into your applications


43
00:01:34,246 --> 00:01:36,166
to make them fun and functional,


44
00:01:36,546 --> 00:01:38,416
helpful and a joy to use.


45
00:01:39,766 --> 00:01:42,166
Given all of that work you want


46
00:01:42,166 --> 00:01:43,906
your apps to be useable by all


47
00:01:43,906 --> 00:01:45,606
of your potential customers.


48
00:01:45,796 --> 00:01:46,896
Not just some of them.


49
00:01:48,036 --> 00:01:49,566
That's really what Accessibility


50
00:01:49,566 --> 00:01:50,386
is all about.


51
00:01:50,496 --> 00:01:52,226
It's about giving customers with


52
00:01:52,226 --> 00:01:54,616
disabilities full access to the


53
00:01:54,616 --> 00:01:56,606
value that your app provides.


54
00:01:57,706 --> 00:01:59,076
And that means more happy


55
00:01:59,076 --> 00:02:00,176
customers for you.


56
00:02:01,546 --> 00:02:03,376
It is also especially great for


57
00:02:03,376 --> 00:02:04,486
your customers with


58
00:02:04,556 --> 00:02:05,126
disabilities.


59
00:02:06,386 --> 00:02:08,306
On our various devices like Macs


60
00:02:08,586 --> 00:02:10,626
and iPhones, Watches and


61
00:02:10,626 --> 00:02:12,866
HomePods, Apples technologies


62
00:02:12,916 --> 00:02:14,636
enable people with disabilities


63
00:02:14,846 --> 00:02:16,366
to live fuller lives.


64
00:02:17,626 --> 00:02:19,296
They open up possibilities for


65
00:02:19,296 --> 00:02:21,286
them that did not exist just a


66
00:02:21,286 --> 00:02:22,286
few years ago.


67
00:02:22,866 --> 00:02:25,436
A huge part of how that happens


68
00:02:25,436 --> 00:02:26,936
in practice is through your


69
00:02:26,936 --> 00:02:27,836
applications.


70
00:02:28,416 --> 00:02:30,086
Yes, your apps can change


71
00:02:30,086 --> 00:02:30,766
people's lives.


72
00:02:31,346 --> 00:02:32,556
But for that to happen you need


73
00:02:32,556 --> 00:02:34,376
to do a little work to make them


74
00:02:34,376 --> 00:02:35,416
fully accessible.


75
00:02:38,976 --> 00:02:41,076
When folks with disabilities


76
00:02:41,166 --> 00:02:43,056
interact with your applications,


77
00:02:43,156 --> 00:02:45,286
they will generally use Apple's


78
00:02:45,286 --> 00:02:47,336
built in Accessibility features.


79
00:02:48,066 --> 00:02:49,776
We've got a whole array of these


80
00:02:49,776 --> 00:02:50,966
shipping across our many


81
00:02:50,966 --> 00:02:51,686
platforms.


82
00:02:51,866 --> 00:02:53,426
I'm going to focus on one of


83
00:02:53,426 --> 00:02:54,936
them first called VoiceOver.


84
00:02:57,066 --> 00:02:58,836
VoiceOver is a screen reader


85
00:02:59,096 --> 00:03:00,576
available across all our


86
00:03:00,576 --> 00:03:01,166
platforms.


87
00:03:01,626 --> 00:03:03,236
It's a product that lets folks


88
00:03:03,296 --> 00:03:05,176
with low to no vision use their


89
00:03:05,176 --> 00:03:07,026
Apple devices without needing to


90
00:03:07,026 --> 00:03:08,216
see their screens.


91
00:03:09,316 --> 00:03:11,416
The way it does this is by


92
00:03:11,546 --> 00:03:12,186
reading to you.


93
00:03:12,866 --> 00:03:14,336
VoiceOver lets you step through


94
00:03:14,336 --> 00:03:15,496
the elements on your screen,


95
00:03:15,766 --> 00:03:17,166
taking each one of them in turn,


96
00:03:17,736 --> 00:03:19,216
and reads information to you


97
00:03:19,216 --> 00:03:20,726
about those elements like the


98
00:03:20,726 --> 00:03:22,656
titles of buttons, the names of


99
00:03:22,656 --> 00:03:24,796
images, and the values of text


100
00:03:24,796 --> 00:03:25,176
fields.


101
00:03:26,456 --> 00:03:28,406
It also lets you use gestures on


102
00:03:28,566 --> 00:03:30,576
iOS or keyboard keys on the Mac


103
00:03:31,116 --> 00:03:32,906
to interact with those elements


104
00:03:33,086 --> 00:03:34,976
and kick off their associated


105
00:03:35,046 --> 00:03:35,506
actions.


106
00:03:36,256 --> 00:03:37,616
Here's VoiceOver on the Mac


107
00:03:37,896 --> 00:03:39,236
interacting with Calculator.


108
00:03:39,906 --> 00:03:41,516
VoiceOver is reading to us here


109
00:03:41,646 --> 00:03:42,916
and it's showing what it's


110
00:03:42,916 --> 00:03:45,226
reading in the bottom right as


111
00:03:45,976 --> 00:03:46,136
well.


112
00:03:46,876 --> 00:03:49,236
There are also two really cool


113
00:03:49,236 --> 00:03:51,026
new items in this long list this


114
00:03:51,026 --> 00:03:51,226
year.


115
00:03:51,856 --> 00:03:53,536
The first is Voice Control.


116
00:03:53,536 --> 00:03:55,296
I'm sure you all have seen the


117
00:03:55,296 --> 00:03:56,426
amazing demos.


118
00:03:58,556 --> 00:04:00,856
The second -- yes, it is


119
00:04:00,856 --> 00:04:01,276
amazing.


120
00:04:03,646 --> 00:04:05,306
The second is Full Keyboard


121
00:04:05,476 --> 00:04:05,876
Access.


122
00:04:06,046 --> 00:04:07,996
Totally new on iOS this year and


123
00:04:08,056 --> 00:04:09,306
greatly enhanced on the Mac.


124
00:04:10,216 --> 00:04:11,576
Full Keyboard Access lets you


125
00:04:11,576 --> 00:04:13,646
use your Mac of iOS devices


126
00:04:13,646 --> 00:04:15,946
entirely with just a keyboard.


127
00:04:17,276 --> 00:04:19,326
It is a great, fast and fluid


128
00:04:19,326 --> 00:04:21,136
way to get things one on your


129
00:04:21,136 --> 00:04:21,856
Apple devices.


130
00:04:23,056 --> 00:04:24,446
We are confident that this


131
00:04:24,486 --> 00:04:25,666
feature is really going to get


132
00:04:25,666 --> 00:04:27,746
used not just for accessibility


133
00:04:27,816 --> 00:04:29,906
purposes, but also just by folks


134
00:04:29,906 --> 00:04:31,256
looking to be extra productive


135
00:04:31,526 --> 00:04:32,586
on their Apple devices.


136
00:04:32,826 --> 00:04:34,326
Move around screens, kick off


137
00:04:34,326 --> 00:04:34,776
commands.


138
00:04:35,996 --> 00:04:37,326
Here's Full Keyboard Access


139
00:04:37,326 --> 00:04:38,646
interacting with the Calculator


140
00:04:38,646 --> 00:04:39,116
on iOS.


141
00:04:39,826 --> 00:04:41,436
Notice the highlighted 8 key


142
00:04:41,436 --> 00:04:42,936
showing us where the keyboard


143
00:04:42,936 --> 00:04:44,266
focus is.


144
00:04:45,056 --> 00:04:47,016
These two great features are


145
00:04:47,016 --> 00:04:48,506
perfect examples of something


146
00:04:48,666 --> 00:04:50,596
we've learned on our team time


147
00:04:50,596 --> 00:04:51,166
and time again.


148
00:04:51,976 --> 00:04:53,866
Accessibility is for everyone.


149
00:04:54,336 --> 00:04:55,526
Not just for people with


150
00:04:55,526 --> 00:04:56,146
disabilities.


151
00:04:56,776 --> 00:04:57,996
That is why the little bit of


152
00:04:57,996 --> 00:04:59,416
work you do on your app for


153
00:04:59,416 --> 00:05:01,306
Accessibility has such a broad


154
00:05:04,346 --> 00:05:04,536
impact.


155
00:05:04,716 --> 00:05:06,536
Now, one of the best things


156
00:05:06,536 --> 00:05:09,346
about our platforms is that many


157
00:05:09,346 --> 00:05:10,786
of the features on this slide,


158
00:05:10,786 --> 00:05:11,986
including all the ones we just


159
00:05:11,986 --> 00:05:13,626
discussed, use the same


160
00:05:13,726 --> 00:05:15,196
underlying technologies.


161
00:05:16,026 --> 00:05:17,456
If you implement Accessibility


162
00:05:17,456 --> 00:05:18,826
in your app well it will work


163
00:05:18,826 --> 00:05:21,846
great with all of them.


164
00:05:22,056 --> 00:05:23,426
All these features ultimately


165
00:05:23,426 --> 00:05:24,766
rely on information that your


166
00:05:24,996 --> 00:05:26,956
app exposes to our platforms.


167
00:05:27,376 --> 00:05:28,906
The better this information, the


168
00:05:28,906 --> 00:05:29,926
better these features are going


169
00:05:29,926 --> 00:05:30,216
to work.


170
00:05:31,076 --> 00:05:32,696
We call this information your


171
00:05:32,696 --> 00:05:34,496
apps Accessibility User


172
00:05:34,496 --> 00:05:35,246
Interface.


173
00:05:35,766 --> 00:05:38,606
What actually goes into one of


174
00:05:38,606 --> 00:05:38,976
these?


175
00:05:39,146 --> 00:05:40,886
Well, let's take a quick look at


176
00:05:40,886 --> 00:05:42,506
Calculator just as a simple


177
00:05:42,506 --> 00:05:44,286
example, and take it apart.


178
00:05:45,636 --> 00:05:47,816
The Accessibility User Interface


179
00:05:47,816 --> 00:05:49,896
your app exposes to us consists


180
00:05:49,896 --> 00:05:51,526
of Accessibility elements.


181
00:05:52,116 --> 00:05:54,326
Each view in Calculator forms


182
00:05:54,436 --> 00:05:55,936
one Accessibility element here.


183
00:05:56,496 --> 00:05:59,036
In this case, most of these


184
00:05:59,036 --> 00:06:00,276
Accessibility elements are


185
00:06:00,356 --> 00:06:00,616
buttons.


186
00:06:01,176 --> 00:06:02,466
So, let's take a look at one of


187
00:06:02,496 --> 00:06:03,366
them in particular.


188
00:06:04,246 --> 00:06:06,476
Here is the X button on the left


189
00:06:06,836 --> 00:06:08,506
and its Accessibility element on


190
00:06:08,506 --> 00:06:08,816
the right.


191
00:06:10,066 --> 00:06:11,656
Notice that it's got a label for


192
00:06:11,656 --> 00:06:12,456
VoiceOver to read.


193
00:06:13,196 --> 00:06:14,016
You're going to want a label


194
00:06:14,016 --> 00:06:14,996
like this for all of your


195
00:06:14,996 --> 00:06:17,356
elements so a VoiceOver knows


196
00:06:17,496 --> 00:06:19,386
where they are in your app.


197
00:06:19,956 --> 00:06:21,916
In this case, the developers of


198
00:06:21,916 --> 00:06:22,926
the Calculator app have


199
00:06:22,976 --> 00:06:24,386
customized the default label


200
00:06:24,516 --> 00:06:26,216
from the simple X to the text


201
00:06:26,356 --> 00:06:26,876
multiply.


202
00:06:28,176 --> 00:06:29,866
This element also has a type.


203
00:06:30,436 --> 00:06:32,126
On iOS that's described using


204
00:06:32,186 --> 00:06:34,086
traits and on macOS it's


205
00:06:34,086 --> 00:06:35,486
described using roles.


206
00:06:35,976 --> 00:06:37,326
That type here is button.


207
00:06:38,236 --> 00:06:40,286
And finally, this button element


208
00:06:40,286 --> 00:06:41,616
has a default action.


209
00:06:42,156 --> 00:06:45,106
Press on macOS or tap on iOS.


210
00:06:45,456 --> 00:06:47,056
A VoiceOver user can use this


211
00:06:47,056 --> 00:06:49,146
action to interact with the


212
00:06:49,146 --> 00:06:49,586
element.


213
00:06:49,986 --> 00:06:53,616
Let's take a look at one more.


214
00:06:54,226 --> 00:06:55,776
This is the display at the top


215
00:06:55,876 --> 00:06:57,446
showing us the results of our


216
00:06:57,446 --> 00:06:58,136
calculation.


217
00:06:59,136 --> 00:07:00,446
We can see that the developers


218
00:07:00,446 --> 00:07:01,896
have given it a label named


219
00:07:01,896 --> 00:07:02,276
display.


220
00:07:03,376 --> 00:07:05,006
It is also exposing another


221
00:07:05,006 --> 00:07:06,736
important piece of information


222
00:07:06,926 --> 00:07:08,716
called a value, that holds the


223
00:07:08,716 --> 00:07:10,156
current text its showing.


224
00:07:11,556 --> 00:07:13,236
It has no default action since


225
00:07:13,236 --> 00:07:14,716
you can't right now interact


226
00:07:14,716 --> 00:07:15,366
with this element.


227
00:07:16,986 --> 00:07:18,786
Default actions though are not


228
00:07:18,786 --> 00:07:20,426
the only way your Accessibility


229
00:07:20,426 --> 00:07:22,026
customers are going to interact


230
00:07:22,406 --> 00:07:24,086
with your app and its elements.


231
00:07:24,686 --> 00:07:27,066
You can add custom named actions


232
00:07:27,266 --> 00:07:28,886
to any Accessibility element in


233
00:07:28,886 --> 00:07:29,116
your app.


234
00:07:29,876 --> 00:07:31,046
For example, we could add a


235
00:07:31,046 --> 00:07:32,456
Custom Action on this one called


236
00:07:32,496 --> 00:07:34,186
clear, which would clear the


237
00:07:34,186 --> 00:07:34,606
display.


238
00:07:34,646 --> 00:07:38,236
So that is Calculator's


239
00:07:38,236 --> 00:07:40,256
Accessibility User Interface.


240
00:07:41,146 --> 00:07:42,566
Your app has one too.


241
00:07:43,286 --> 00:07:44,386
A lot of it is going to get


242
00:07:44,386 --> 00:07:45,796
created for you automatically,


243
00:07:45,796 --> 00:07:46,986
but with a little bit of work


244
00:07:46,986 --> 00:07:49,006
you can make it a whole lot


245
00:07:50,116 --> 00:07:50,256
better.


246
00:07:50,436 --> 00:07:52,746
You relentlessly polish the


247
00:07:52,746 --> 00:07:54,496
visual user interfaces on your


248
00:07:54,706 --> 00:07:54,916
apps.


249
00:07:55,686 --> 00:07:56,906
In a similar way you should


250
00:07:56,906 --> 00:07:58,806
polish your Accessibility User


251
00:07:58,806 --> 00:07:59,936
Interface as well.


252
00:08:00,946 --> 00:08:02,626
Here are three key things to


253
00:08:02,626 --> 00:08:03,496
look for which we're going to


254
00:08:03,496 --> 00:08:04,836
show you how to do today.


255
00:08:06,176 --> 00:08:08,216
First, your Accessibility


256
00:08:08,216 --> 00:08:09,216
elements should be


257
00:08:09,216 --> 00:08:09,986
understandable.


258
00:08:10,546 --> 00:08:11,726
They should have reasonable


259
00:08:11,726 --> 00:08:13,746
labels, values, and other


260
00:08:13,746 --> 00:08:15,006
describing information.


261
00:08:15,176 --> 00:08:16,866
An example of this is how


262
00:08:16,926 --> 00:08:18,626
Calculator changed the label of


263
00:08:18,626 --> 00:08:20,666
the X button to multiple so it's


264
00:08:20,706 --> 00:08:21,626
easier to understand.


265
00:08:22,136 --> 00:08:25,066
Your elements should also be


266
00:08:25,106 --> 00:08:25,826
interactable.


267
00:08:26,416 --> 00:08:28,366
That means, appropriate default


268
00:08:28,366 --> 00:08:30,246
actions and Custom Actions


269
00:08:30,356 --> 00:08:31,496
wherever they are needed.


270
00:08:32,226 --> 00:08:33,736
Adding that clear action to the


271
00:08:33,736 --> 00:08:35,126
main display as we just talked


272
00:08:35,126 --> 00:08:36,756
about is an example of this.


273
00:08:37,996 --> 00:08:39,496
And finally, your elements


274
00:08:39,496 --> 00:08:40,676
should be navigable.


275
00:08:41,296 --> 00:08:42,726
Carefully thinking through the


276
00:08:42,756 --> 00:08:44,216
ordering of your Accessibility


277
00:08:44,216 --> 00:08:45,856
elements and grouping them as


278
00:08:45,856 --> 00:08:47,726
needed will really make your app


279
00:08:47,756 --> 00:08:49,536
more useable with our


280
00:08:49,536 --> 00:08:50,806
Accessibility features.


281
00:08:51,346 --> 00:08:54,486
So, if you're interested in how


282
00:08:54,486 --> 00:08:56,016
to do all this fun stuff with


283
00:08:56,096 --> 00:08:58,186
AppKit or UIKit we have some


284
00:08:58,186 --> 00:09:00,116
great sessions for you, but not


285
00:09:00,296 --> 00:09:00,676
this one.


286
00:09:01,516 --> 00:09:03,026
Today we are going to talk about


287
00:09:03,136 --> 00:09:03,636
SwiftUI.


288
00:09:04,356 --> 00:09:09,236
At Apple we have always deeply


289
00:09:09,236 --> 00:09:11,056
believed in the importance and


290
00:09:11,176 --> 00:09:12,676
power of Accessibility.


291
00:09:13,496 --> 00:09:14,776
That is why we all work


292
00:09:14,776 --> 00:09:16,066
extremely hard to make


293
00:09:16,066 --> 00:09:17,426
frameworks that let you folks


294
00:09:17,576 --> 00:09:19,596
make accessible apps easily and


295
00:09:19,596 --> 00:09:20,756
even automatically wherever


296
00:09:20,756 --> 00:09:21,226
possible.


297
00:09:22,636 --> 00:09:24,456
Today, because of the high level


298
00:09:24,456 --> 00:09:26,456
of declarative nature of SwiftUI


299
00:09:26,456 --> 00:09:27,916
and the way that it understands


300
00:09:27,916 --> 00:09:30,296
your state, we can take


301
00:09:30,296 --> 00:09:31,896
automatic Accessibility to a


302
00:09:31,896 --> 00:09:33,626
whole new level with this new


303
00:09:33,626 --> 00:09:34,056
framework.


304
00:09:35,206 --> 00:09:36,846
SwiftUI can make your apps more


305
00:09:36,846 --> 00:09:39,446
accessible by default and it


306
00:09:39,446 --> 00:09:40,636
also gives us a powerful


307
00:09:40,636 --> 00:09:42,526
foundation to do more of your


308
00:09:42,526 --> 00:09:44,596
Accessibility work for you going


309
00:09:44,596 --> 00:09:44,976
forward.


310
00:09:47,576 --> 00:09:49,966
SwiftUI is going to generate


311
00:09:49,966 --> 00:09:51,536
your Accessibility elements for


312
00:09:51,536 --> 00:09:53,046
you, just like it generates


313
00:09:53,046 --> 00:09:54,846
NSView and UIViews for you.


314
00:09:55,746 --> 00:09:57,096
Let's take a look at this simple


315
00:09:57,096 --> 00:09:57,966
SwiftUI code.


316
00:09:58,956 --> 00:10:00,306
It's creating a vertical stack,


317
00:10:01,056 --> 00:10:03,736
in that stack is a button, and


318
00:10:03,736 --> 00:10:05,446
it is sandwiched between some


319
00:10:05,446 --> 00:10:05,886
text.


320
00:10:08,346 --> 00:10:10,376
SwiftUI is going to create three


321
00:10:10,376 --> 00:10:12,016
Accessibility elements for you


322
00:10:12,016 --> 00:10:12,366
here.


323
00:10:12,796 --> 00:10:14,386
One for each of the two texts


324
00:10:14,386 --> 00:10:15,756
and of course one for the


325
00:10:15,756 --> 00:10:16,076
button.


326
00:10:17,436 --> 00:10:19,186
Keep in mind, the Accessibility


327
00:10:19,186 --> 00:10:20,856
elements that SwiftUI creates


328
00:10:20,856 --> 00:10:23,586
here are not UIViews or NSViews.


329
00:10:24,276 --> 00:10:26,476
Instead, they are SwiftUI's own


330
00:10:26,546 --> 00:10:27,886
Accessibility elements.


331
00:10:28,396 --> 00:10:31,136
We have all worked hard to make


332
00:10:31,136 --> 00:10:32,856
sure that SwiftUI's standard


333
00:10:32,886 --> 00:10:34,566
controls are as Accessible as


334
00:10:34,636 --> 00:10:36,136
possible by default.


335
00:10:37,106 --> 00:10:38,106
Notice that although these


336
00:10:38,106 --> 00:10:41,246
elements are simple, they


337
00:10:41,246 --> 00:10:42,896
already have all the important


338
00:10:42,896 --> 00:10:43,866
information we need.


339
00:10:44,186 --> 00:10:45,306
They're understandable because


340
00:10:45,346 --> 00:10:45,976
they have labels.


341
00:10:46,936 --> 00:10:48,746
They are intractable, the button


342
00:10:48,746 --> 00:10:49,436
has an action.


343
00:10:49,826 --> 00:10:51,166
And they're navigable because


344
00:10:51,166 --> 00:10:52,396
they're in the correct order.


345
00:10:52,956 --> 00:10:56,246
As I mentioned though, SwiftUI


346
00:10:56,246 --> 00:10:58,066
does have an Accessibility API


347
00:10:58,186 --> 00:10:59,626
to customize the elements it


348
00:10:59,626 --> 00:11:00,446
generates for you.


349
00:11:01,246 --> 00:11:02,656
Before we get into that though,


350
00:11:02,836 --> 00:11:04,086
I wanted to talk to you about


351
00:11:04,086 --> 00:11:05,516
the great Accessibility you get


352
00:11:05,826 --> 00:11:07,836
with SwiftUI before you write


353
00:11:08,006 --> 00:11:11,826
any Accessibility specific code.


354
00:11:12,696 --> 00:11:13,846
One thing you get for free in


355
00:11:13,846 --> 00:11:16,006
SwiftUI is notifications to help


356
00:11:16,006 --> 00:11:17,676
keep our Accessibility features


357
00:11:17,676 --> 00:11:19,836
like VoiceOver up to date


358
00:11:19,836 --> 00:11:21,066
regarding what is going on in


359
00:11:21,066 --> 00:11:22,526
your app.


360
00:11:22,566 --> 00:11:24,016
Remember, the Accessibility


361
00:11:24,016 --> 00:11:25,416
features I talked about earlier


362
00:11:25,416 --> 00:11:26,756
are all based on the


363
00:11:26,756 --> 00:11:28,666
Accessibility elements that your


364
00:11:28,666 --> 00:11:29,696
app exposes.


365
00:11:31,276 --> 00:11:32,876
While running, VoiceOver's going


366
00:11:32,876 --> 00:11:34,436
to ask your app for that list of


367
00:11:34,436 --> 00:11:35,606
Accessibility elements.


368
00:11:36,486 --> 00:11:37,876
For example, when the user opens


369
00:11:37,876 --> 00:11:39,986
Calculator it'll ask Calculator


370
00:11:39,986 --> 00:11:41,676
for the elements on screen and


371
00:11:41,676 --> 00:11:42,906
Calculator's going to respond


372
00:11:42,906 --> 00:11:44,126
with those buttons we talked


373
00:11:44,126 --> 00:11:44,686
about earlier.


374
00:11:45,996 --> 00:11:47,646
It's also going to send the


375
00:11:47,646 --> 00:11:49,426
element for the main display.


376
00:11:49,606 --> 00:11:50,956
It'll send a value with that.


377
00:11:50,956 --> 00:11:54,196
In this case, that value is 5.


378
00:11:54,336 --> 00:11:56,326
So, what happens if this


379
00:11:56,326 --> 00:11:57,536
information changes?


380
00:11:58,086 --> 00:11:59,606
For example, what happens when


381
00:11:59,606 --> 00:12:01,216
Calculator has gotten a press of


382
00:12:01,216 --> 00:12:02,716
the equals button and has


383
00:12:02,716 --> 00:12:04,326
updated the value of that main


384
00:12:04,326 --> 00:12:05,046
display?


385
00:12:05,626 --> 00:12:07,496
Let's say that value is now 10.


386
00:12:08,526 --> 00:12:10,636
Well, VoiceOver needs to know


387
00:12:10,636 --> 00:12:11,766
that the value of that element


388
00:12:11,766 --> 00:12:12,426
has changed.


389
00:12:13,226 --> 00:12:14,336
That's why our frameworks


390
00:12:14,336 --> 00:12:15,586
support Accessibility


391
00:12:15,716 --> 00:12:16,636
notifications.


392
00:12:17,096 --> 00:12:18,326
Your app can tell VoiceOver,


393
00:12:18,506 --> 00:12:20,806
hey, the value here has changed.


394
00:12:23,136 --> 00:12:25,106
We have been talking to you all


395
00:12:25,106 --> 00:12:27,326
conference about how SwiftUI is


396
00:12:27,326 --> 00:12:28,156
state driven.


397
00:12:28,926 --> 00:12:30,296
Well, this is where there are


398
00:12:30,296 --> 00:12:31,716
some huge benefits for


399
00:12:31,716 --> 00:12:32,416
Accessibility.


400
00:12:33,016 --> 00:12:34,346
Because SwiftUI really


401
00:12:34,346 --> 00:12:35,676
understands your state and is


402
00:12:35,796 --> 00:12:38,196
tracking when it changes, you


403
00:12:38,196 --> 00:12:39,446
never need to worry about


404
00:12:39,446 --> 00:12:40,826
Accessibility notifications


405
00:12:41,026 --> 00:12:41,606
again.


406
00:12:41,946 --> 00:12:43,426
Not even for custom controls.


407
00:12:44,886 --> 00:12:45,976
Yes, exactly.


408
00:12:49,066 --> 00:12:50,606
SwiftUI will track the state


409
00:12:50,766 --> 00:12:52,046
that you're using for your


410
00:12:52,046 --> 00:12:53,866
Accessibility and send them for


411
00:12:53,866 --> 00:12:54,136
you.


412
00:12:54,646 --> 00:12:55,606
Let's take a look at how this


413
00:12:55,606 --> 00:12:56,096
happens.


414
00:12:57,066 --> 00:12:58,626
We have a toggle here and a


415
00:12:58,626 --> 00:13:00,166
button that are linked to a


416
00:13:00,166 --> 00:13:01,236
single piece of state.


417
00:13:01,646 --> 00:13:02,886
It's a Boolean and we've called


418
00:13:02,886 --> 00:13:03,436
it Enabled.


419
00:13:03,956 --> 00:13:06,786
You can see there are two


420
00:13:06,786 --> 00:13:08,296
Accessibility elements created


421
00:13:08,296 --> 00:13:08,886
for us here.


422
00:13:09,206 --> 00:13:10,236
In this case, we'll have an


423
00:13:10,236 --> 00:13:11,656
Accessibility element for that


424
00:13:11,656 --> 00:13:12,076
toggle.


425
00:13:12,346 --> 00:13:13,656
It's got a correct label and


426
00:13:13,656 --> 00:13:13,876
type.


427
00:13:14,596 --> 00:13:15,886
Its value is going to start off


428
00:13:15,886 --> 00:13:16,556
as 0.


429
00:13:17,086 --> 00:13:19,796
When you click the button the


430
00:13:19,796 --> 00:13:21,386
value of that Boolean enabled


431
00:13:21,386 --> 00:13:22,606
state is going to change.


432
00:13:22,796 --> 00:13:25,656
It'll go from 0 to 1 or 1 to 0.


433
00:13:25,976 --> 00:13:26,946
That's why we've called that


434
00:13:26,946 --> 00:13:28,086
button Flip.


435
00:13:28,756 --> 00:13:30,346
So, what happens here with


436
00:13:30,346 --> 00:13:31,096
Accessibility?


437
00:13:31,876 --> 00:13:33,776
Well, the Accessibility value of


438
00:13:33,776 --> 00:13:35,066
that toggle has now changed.


439
00:13:35,066 --> 00:13:36,606
So, we need to let VoiceOver


440
00:13:36,606 --> 00:13:36,866
know.


441
00:13:37,546 --> 00:13:38,726
Because it understands that that


442
00:13:38,726 --> 00:13:40,316
value's changed, SwiftUI will


443
00:13:40,316 --> 00:13:41,226
automatically send a


444
00:13:41,226 --> 00:13:42,416
notification to VoiceOver


445
00:13:42,686 --> 00:13:43,596
telling it exactly what


446
00:13:43,596 --> 00:13:43,946
happened.


447
00:13:44,656 --> 00:13:46,306
Notice, there's no Accessibility


448
00:13:46,306 --> 00:13:47,896
specific code needed here.


449
00:13:48,286 --> 00:13:49,246
You don't need to worry about


450
00:13:49,246 --> 00:13:50,606
Accessibility notifications in


451
00:13:50,606 --> 00:13:52,566
SwiftUI, because we send them


452
00:13:52,566 --> 00:13:52,946
for you.


453
00:13:55,996 --> 00:13:58,006
Another area SwiftUI really


454
00:13:58,006 --> 00:14:00,036
improves on is Custom Controls.


455
00:14:00,896 --> 00:14:02,896
Often when you're designing your


456
00:14:03,166 --> 00:14:04,506
app, you may want to customize


457
00:14:04,506 --> 00:14:06,376
the look and feel of your UI.


458
00:14:06,656 --> 00:14:08,176
Maybe you want your app to have


459
00:14:08,176 --> 00:14:09,986
a unique visual style or you


460
00:14:09,986 --> 00:14:10,936
need to fit with a company


461
00:14:10,936 --> 00:14:11,256
theme.


462
00:14:12,686 --> 00:14:14,016
If you have done Accessibility


463
00:14:14,016 --> 00:14:15,886
work in the past you know that


464
00:14:15,886 --> 00:14:17,836
oftentimes the more custom your


465
00:14:17,836 --> 00:14:19,466
controls in this way, the more


466
00:14:19,466 --> 00:14:21,006
Accessibility work you have to


467
00:14:21,006 --> 00:14:21,656
put into them.


468
00:14:22,476 --> 00:14:24,846
Well, SwiftUI's control styles


469
00:14:24,846 --> 00:14:26,546
let you have complete control


470
00:14:26,546 --> 00:14:27,946
over the look and feel of your


471
00:14:27,946 --> 00:14:30,026
UI while still getting great


472
00:14:30,026 --> 00:14:31,516
accessibility out of the box.


473
00:14:32,296 --> 00:14:33,636
That means you can finally


474
00:14:33,666 --> 00:14:35,306
easily make custom controls that


475
00:14:35,306 --> 00:14:37,356
are beautiful and unique, but


476
00:14:37,356 --> 00:14:38,956
still immediately accessible


477
00:14:39,146 --> 00:14:40,536
just like the system ones.


478
00:14:40,996 --> 00:14:43,896
Here's an example of a custom


479
00:14:43,896 --> 00:14:45,536
button style built using


480
00:14:45,536 --> 00:14:46,016
SwiftUI.


481
00:14:47,436 --> 00:14:50,256
This API is giving us the style


482
00:14:50,256 --> 00:14:51,476
of the button including its


483
00:14:51,476 --> 00:14:53,466
label and whether it is pressed.


484
00:14:54,366 --> 00:14:55,736
Given that, we need to let the


485
00:14:55,736 --> 00:14:57,426
style know how we want this


486
00:14:57,426 --> 00:14:58,066
button to draw.


487
00:14:59,086 --> 00:15:01,086
So, let's go ahead and put that


488
00:15:01,086 --> 00:15:02,996
label within a rounded rectangle


489
00:15:03,396 --> 00:15:04,546
and set some background and


490
00:15:04,546 --> 00:15:05,746
foreground colors that are going


491
00:15:05,746 --> 00:15:06,926
to depend on whether we're


492
00:15:06,966 --> 00:15:07,306
pressed.


493
00:15:08,486 --> 00:15:09,766
We're also going to add a tiny


494
00:15:09,766 --> 00:15:11,406
bit of padding and set a nice


495
00:15:11,406 --> 00:15:13,456
big font and color as well.


496
00:15:14,996 --> 00:15:16,936
So, you can see the result here


497
00:15:16,936 --> 00:15:17,436
on the right.


498
00:15:18,086 --> 00:15:21,406
Now that we've defined this


499
00:15:21,406 --> 00:15:23,176
beautiful custom drawing, we of


500
00:15:23,176 --> 00:15:24,186
course need to use it.


501
00:15:25,216 --> 00:15:26,766
All we need to do is create a


502
00:15:26,766 --> 00:15:28,576
normal button and then use the


503
00:15:28,576 --> 00:15:30,266
button style modifier function


504
00:15:30,706 --> 00:15:31,926
to set the way we want the


505
00:15:31,926 --> 00:15:32,836
button to draw.


506
00:15:33,856 --> 00:15:34,986
This is going to create an


507
00:15:34,986 --> 00:15:36,706
Accessibility element for us,


508
00:15:36,706 --> 00:15:37,776
which you can see in the top


509
00:15:37,776 --> 00:15:38,216
right here.


510
00:15:38,976 --> 00:15:40,776
Notice that despite the totally


511
00:15:40,776 --> 00:15:42,106
custom drawing here this


512
00:15:42,106 --> 00:15:43,916
Accessibility element is good to


513
00:15:43,916 --> 00:15:44,536
go.


514
00:15:44,766 --> 00:15:46,466
It has a label, it's got the


515
00:15:46,466 --> 00:15:48,246
right type, and it has an


516
00:15:48,246 --> 00:15:48,566
action.


517
00:15:50,336 --> 00:15:51,526
Once again, we're doing this


518
00:15:51,526 --> 00:15:52,536
without writing any


519
00:15:52,626 --> 00:15:54,866
Accessibility specific code.


520
00:15:57,476 --> 00:16:00,196
SwiftUI also provides better and


521
00:16:00,196 --> 00:16:02,236
more intuitive Accessibility for


522
00:16:02,236 --> 00:16:02,996
your images.


523
00:16:03,446 --> 00:16:04,706
Specifically, I want to talk to


524
00:16:04,706 --> 00:16:06,276
you about illustrations and


525
00:16:06,276 --> 00:16:07,496
glyphs which often form


526
00:16:07,496 --> 00:16:08,816
important parts of our UI's.


527
00:16:10,426 --> 00:16:11,926
Imagine you have an app with a


528
00:16:11,926 --> 00:16:13,906
sign-up flow that ends in a


529
00:16:13,906 --> 00:16:17,826
green checkmark like this.


530
00:16:18,026 --> 00:16:19,376
Here are some simple SwiftUI


531
00:16:19,376 --> 00:16:20,576
code you might start with to


532
00:16:20,576 --> 00:16:21,886
create such a view.


533
00:16:21,936 --> 00:16:22,946
In this case, it's just a


534
00:16:22,946 --> 00:16:24,386
vertical stack with an image in


535
00:16:24,936 --> 00:16:25,006
it.


536
00:16:25,706 --> 00:16:27,606
After completing this sign up a


537
00:16:27,606 --> 00:16:29,066
sighted customer would look at


538
00:16:29,066 --> 00:16:30,736
this and say, oh sweet, that


539
00:16:30,736 --> 00:16:31,396
means I'm done.


540
00:16:31,516 --> 00:16:35,146
Great. But, a customer with


541
00:16:35,146 --> 00:16:36,436
VoiceOver will hear,


542
00:16:36,966 --> 00:16:37,796
CheckmarkGlyph.


543
00:16:39,036 --> 00:16:40,706
That is not super useful.


544
00:16:40,826 --> 00:16:42,646
That is your developer created


545
00:16:42,646 --> 00:16:43,606
name for the image.


546
00:16:43,866 --> 00:16:45,906
I don't know what a glyph is or


547
00:16:45,976 --> 00:16:46,916
what it's supposed to mean.


548
00:16:47,236 --> 00:16:48,526
As a VoiceOver user I'm


549
00:16:48,526 --> 00:16:49,046
confused.


550
00:16:49,046 --> 00:16:50,116
Am I finished or not?


551
00:16:50,436 --> 00:16:51,196
Was there an error?


552
00:16:52,616 --> 00:16:54,286
This is not understandable for


553
00:16:54,286 --> 00:16:54,456
me.


554
00:16:55,686 --> 00:16:57,116
The reason for that is that this


555
00:16:57,116 --> 00:16:59,116
image is not explicitly labeled.


556
00:16:59,986 --> 00:17:01,466
Here's the Accessibility element


557
00:17:01,466 --> 00:17:03,656
that's created by SwiftUI, which


558
00:17:03,656 --> 00:17:04,876
you can see it's got the right


559
00:17:04,876 --> 00:17:06,086
type but no label.


560
00:17:07,435 --> 00:17:08,906
What SwiftUI is going to have to


561
00:17:08,906 --> 00:17:10,935
do here is pull the label from


562
00:17:11,066 --> 00:17:12,856
the filename of the image or the


563
00:17:12,856 --> 00:17:13,626
name of the asset.


564
00:17:14,556 --> 00:17:15,996
That isn't really something we


565
00:17:15,996 --> 00:17:16,796
want to rely on.


566
00:17:17,006 --> 00:17:19,996
Because that name is for you the


567
00:17:19,996 --> 00:17:21,646
developer, not your customers.


568
00:17:23,316 --> 00:17:25,675
With SwiftUI you can label your


569
00:17:25,675 --> 00:17:27,326
images now with localizable


570
00:17:27,326 --> 00:17:29,216
accessibility information right


571
00:17:29,216 --> 00:17:30,746
as you create them, like so.


572
00:17:30,746 --> 00:17:33,476
All we need to do is use the


573
00:17:33,476 --> 00:17:35,686
Label Based Initializer to


574
00:17:35,686 --> 00:17:36,076
image.


575
00:17:37,036 --> 00:17:38,056
That way there's no need to


576
00:17:38,056 --> 00:17:39,466
remember to do this afterwards


577
00:17:39,706 --> 00:17:40,846
in some separate code.


578
00:17:41,866 --> 00:17:42,756
This is going to create an


579
00:17:42,756 --> 00:17:44,226
Accessibility User Interface


580
00:17:44,226 --> 00:17:45,646
that is understandable.


581
00:17:47,016 --> 00:17:48,366
Notice that this updated


582
00:17:48,366 --> 00:17:49,846
Accessibility element is now


583
00:17:49,936 --> 00:17:50,856
properly labeled.


584
00:17:51,176 --> 00:17:52,596
When I land on this image


585
00:17:52,596 --> 00:17:54,096
VoiceOver reads, sign up


586
00:17:54,126 --> 00:17:54,606
complete.


587
00:17:55,036 --> 00:17:59,586
On the other hand, sometimes


588
00:17:59,816 --> 00:18:01,256
your VoiceOver users don't need


589
00:18:01,256 --> 00:18:02,376
to land on an image.


590
00:18:02,916 --> 00:18:04,266
For example, maybe this


591
00:18:04,266 --> 00:18:05,376
checkmark is really just


592
00:18:05,376 --> 00:18:06,706
decoration and you've already


593
00:18:06,706 --> 00:18:08,566
got text below it that says,


594
00:18:08,666 --> 00:18:09,346
sign up complete.


595
00:18:10,496 --> 00:18:11,806
The SwiftUI code might look


596
00:18:11,806 --> 00:18:12,716
something like this.


597
00:18:13,056 --> 00:18:14,506
A vertical stack with an image


598
00:18:14,506 --> 00:18:15,836
and two lines of text.


599
00:18:17,236 --> 00:18:18,506
In this case, the image is


600
00:18:18,506 --> 00:18:19,576
really just decorative.


601
00:18:20,026 --> 00:18:21,336
You could create it like so,


602
00:18:21,526 --> 00:18:23,116
telling SwiftUI that with the


603
00:18:23,116 --> 00:18:23,966
right initializer.


604
00:18:25,076 --> 00:18:26,686
Now, VoiceOver users aren't


605
00:18:26,686 --> 00:18:28,086
going to land on this image.


606
00:18:28,396 --> 00:18:29,656
If we look at the Accessibility


607
00:18:29,656 --> 00:18:31,126
elements, we've got two for the


608
00:18:31,126 --> 00:18:33,456
text, but none for the image.


609
00:18:34,566 --> 00:18:36,186
This is now more navigable


610
00:18:36,276 --> 00:18:37,856
because your VoiceOver users


611
00:18:37,856 --> 00:18:39,466
aren't going to land on useless


612
00:18:39,646 --> 00:18:40,196
elements.


613
00:18:41,806 --> 00:18:45,026
There is one last area where


614
00:18:45,026 --> 00:18:46,256
SwiftUI can make your life


615
00:18:46,296 --> 00:18:47,496
easier with Accessibility.


616
00:18:47,776 --> 00:18:49,066
And that is labels.


617
00:18:49,646 --> 00:18:50,616
Let's take a look at this


618
00:18:50,616 --> 00:18:52,196
control which is actually in our


619
00:18:52,196 --> 00:18:53,036
System Preferences.


620
00:18:53,646 --> 00:18:55,156
Its purpose it to let you pick a


621
00:18:55,156 --> 00:18:55,606
voice.


622
00:18:56,136 --> 00:18:58,546
You can see the Accessibility


623
00:18:58,546 --> 00:19:00,146
element here in the top right.


624
00:19:00,396 --> 00:19:02,196
It has no label and a value of


625
00:19:02,196 --> 00:19:02,796
Alex.


626
00:19:03,946 --> 00:19:05,836
So, this is not understandable


627
00:19:05,836 --> 00:19:07,086
to me as a VoiceOver user.


628
00:19:07,236 --> 00:19:08,216
Because VoiceOver is going to


629
00:19:08,216 --> 00:19:10,496
read, Alex, and nothing else.


630
00:19:10,896 --> 00:19:12,636
Who is Alex and why do I care


631
00:19:12,636 --> 00:19:13,086
about him?


632
00:19:13,086 --> 00:19:14,506
If I'm using VoiceOver I don't


633
00:19:14,506 --> 00:19:14,706
know.


634
00:19:15,286 --> 00:19:16,496
I would have to scan around the


635
00:19:16,526 --> 00:19:17,976
rest of this screen to try to


636
00:19:17,976 --> 00:19:19,076
find some context.


637
00:19:19,556 --> 00:19:22,836
Let's take a look at the SwiftUI


638
00:19:22,836 --> 00:19:24,816
code instead for such a control.


639
00:19:25,656 --> 00:19:27,566
Here, we are using a standard


640
00:19:27,566 --> 00:19:29,436
SwiftUI picker which is being


641
00:19:29,436 --> 00:19:30,776
rendered as a popup button.


642
00:19:32,166 --> 00:19:33,846
Now, SwiftUI's picker has a


643
00:19:33,846 --> 00:19:35,496
built in label we can use.


644
00:19:35,586 --> 00:19:37,076
In this case, we've set System


645
00:19:37,076 --> 00:19:37,536
Voice.


646
00:19:38,436 --> 00:19:40,106
Many of SwiftUI's controls have


647
00:19:40,106 --> 00:19:41,716
labels like this and the rest


648
00:19:41,716 --> 00:19:42,466
will soon.


649
00:19:42,786 --> 00:19:44,426
Let's take a look at the


650
00:19:44,426 --> 00:19:46,286
appropriate Accessibility


651
00:19:46,286 --> 00:19:46,626
element.


652
00:19:47,076 --> 00:19:48,376
This time it's got a label.


653
00:19:48,826 --> 00:19:50,106
And if we look at what VoiceOver


654
00:19:50,106 --> 00:19:52,826
reads; we have Alex System Voice


655
00:19:53,226 --> 00:19:56,786
pop up button.


656
00:19:56,936 --> 00:19:59,076
In an upcoming seed of SwiftUI


657
00:19:59,176 --> 00:20:01,326
you'll be able to do even more


658
00:20:01,326 --> 00:20:01,546
here.


659
00:20:02,406 --> 00:20:03,796
What if you want one single


660
00:20:03,796 --> 00:20:05,406
label to show for all of your


661
00:20:05,436 --> 00:20:06,736
customers, regardless of whether


662
00:20:06,736 --> 00:20:07,966
they're using Accessibility?


663
00:20:09,056 --> 00:20:10,156
Well, you will be able to


664
00:20:10,156 --> 00:20:11,466
configure that label to show


665
00:20:11,606 --> 00:20:13,186
visual -- let's say on the left


666
00:20:13,186 --> 00:20:15,606
here, and when you do so we will


667
00:20:15,606 --> 00:20:17,376
set up Accessibility for you.


668
00:20:17,896 --> 00:20:19,276
Specifically, we will set up a


669
00:20:19,276 --> 00:20:20,656
connection between the label on


670
00:20:20,656 --> 00:20:22,616
the left and the popup button on


671
00:20:22,616 --> 00:20:22,906
the right.


672
00:20:23,796 --> 00:20:24,996
They'll each be their own


673
00:20:24,996 --> 00:20:26,286
Accessibility element, but


674
00:20:26,346 --> 00:20:27,836
VoiceOver will know that they're


675
00:20:27,836 --> 00:20:28,116
linked.


676
00:20:28,566 --> 00:20:29,716
And so, VoiceOver's going to


677
00:20:29,716 --> 00:20:32,176
read, Alex System Voice pop up


678
00:20:32,176 --> 00:20:32,436
button.


679
00:20:36,396 --> 00:20:39,576
So, here is what SwiftUI can do


680
00:20:39,576 --> 00:20:40,806
for you automatically.


681
00:20:41,496 --> 00:20:42,616
There are two things to


682
00:20:42,616 --> 00:20:43,816
highlight about all of these


683
00:20:43,856 --> 00:20:44,326
items.


684
00:20:44,696 --> 00:20:46,366
First, they're all consistent


685
00:20:46,536 --> 00:20:48,866
across SwiftUI's platforms.


686
00:20:49,646 --> 00:20:51,906
And second, to get all of this


687
00:20:51,976 --> 00:20:53,066
you don't need to write any


688
00:20:53,156 --> 00:20:54,836
Accessibility specific code.


689
00:20:56,186 --> 00:20:57,646
Sometimes though, no matter how


690
00:20:57,686 --> 00:20:59,646
good our automatic Accessibility


691
00:20:59,646 --> 00:21:00,886
might be, it might not be


692
00:21:00,886 --> 00:21:01,166
enough.


693
00:21:01,756 --> 00:21:03,036
That's why we provide an


694
00:21:03,036 --> 00:21:04,846
Accessibility API for you to


695
00:21:04,846 --> 00:21:05,246
use.


696
00:21:05,456 --> 00:21:06,686
I'm going to hand the show over


697
00:21:06,686 --> 00:21:08,126
to John now to take you through


698
00:21:08,126 --> 00:21:08,346
it.


699
00:21:08,836 --> 00:21:08,926
John.


700
00:21:09,516 --> 00:21:16,736
[ Applause ]


701
00:21:17,236 --> 00:21:17,666
>> Thanks Michael.


702
00:21:19,166 --> 00:21:20,226
So, we've shown you all of the


703
00:21:20,226 --> 00:21:21,816
great built-in Accessibility


704
00:21:22,176 --> 00:21:23,286
that SwiftUI provides.


705
00:21:23,816 --> 00:21:25,666
It was designed to give everyone


706
00:21:25,746 --> 00:21:26,856
a good experience out of the


707
00:21:26,856 --> 00:21:27,176
box.


708
00:21:28,036 --> 00:21:29,586
But we understand that this


709
00:21:29,586 --> 00:21:31,136
alone isn't enough to be a


710
00:21:31,136 --> 00:21:31,966
complete experience.


711
00:21:33,016 --> 00:21:34,926
This SwiftUI Accessibility API


712
00:21:35,866 --> 00:21:36,836
allows you to modify and


713
00:21:36,836 --> 00:21:38,736
ultimately create an even better


714
00:21:38,736 --> 00:21:39,826
experience for everyone.


715
00:21:43,376 --> 00:21:44,466
So, I want to start off by


716
00:21:44,466 --> 00:21:45,636
showing a couple simple use


717
00:21:45,636 --> 00:21:46,446
cases for the API.


718
00:21:46,446 --> 00:21:48,136
And let's go back to the


719
00:21:48,136 --> 00:21:49,506
Calculator example that Michael


720
00:21:49,506 --> 00:21:49,996
showed earlier.


721
00:21:50,836 --> 00:21:51,766
We'll start with the multiply


722
00:21:51,766 --> 00:21:53,786
button, which by default will


723
00:21:54,166 --> 00:21:55,356
read X.


724
00:21:55,956 --> 00:21:58,136
To change the label, I'll use


725
00:21:58,136 --> 00:21:59,366
the Accessibility modifier


726
00:21:59,406 --> 00:22:00,876
function with the label


727
00:22:00,876 --> 00:22:01,296
parameter.


728
00:22:02,066 --> 00:22:04,246
And with this change the button


729
00:22:04,246 --> 00:22:05,596
will now read, multiply.


730
00:22:05,596 --> 00:22:08,936
We also want to provide


731
00:22:08,996 --> 00:22:10,446
VoiceOver for the selected state


732
00:22:10,446 --> 00:22:10,936
of the button.


733
00:22:11,836 --> 00:22:13,256
Visually the button becomes


734
00:22:13,256 --> 00:22:14,256
white when selected.


735
00:22:14,916 --> 00:22:18,016
We have an Accessibility trait


736
00:22:18,106 --> 00:22:19,046
that can help out with this.


737
00:22:19,986 --> 00:22:20,796
And if you're not familiar,


738
00:22:21,046 --> 00:22:22,586
traits are a set of things that


739
00:22:22,586 --> 00:22:23,856
describe what your element is


740
00:22:24,056 --> 00:22:24,716
and what it can do.


741
00:22:26,106 --> 00:22:27,386
Buttons for example, will


742
00:22:27,386 --> 00:22:28,966
automatically have the isButton


743
00:22:28,966 --> 00:22:30,006
trait by default.


744
00:22:31,076 --> 00:22:32,326
VoiceOver will read, button,


745
00:22:32,906 --> 00:22:34,066
after reading out the elements


746
00:22:34,066 --> 00:22:34,326
label.


747
00:22:34,516 --> 00:22:37,296
For this example, we can add the


748
00:22:37,296 --> 00:22:38,996
isSelected state using the


749
00:22:38,996 --> 00:22:40,526
Accessibility function and add


750
00:22:40,526 --> 00:22:41,506
traits as the parameter.


751
00:22:42,526 --> 00:22:43,416
VoiceOver will now read,


752
00:22:43,496 --> 00:22:45,296
selected, when the button is in


753
00:22:46,046 --> 00:22:47,786
this state.


754
00:22:48,016 --> 00:22:48,946
So, let's see how we can improve


755
00:22:48,946 --> 00:22:51,226
the Accessibility of the result


756
00:22:52,106 --> 00:22:52,226
view.


757
00:22:52,676 --> 00:22:54,436
We'll change the label to result


758
00:22:54,836 --> 00:22:56,176
and add an Accessibility value.


759
00:22:57,016 --> 00:22:58,376
You can use Accessibility value


760
00:22:58,436 --> 00:22:59,836
to provide VoiceOver with a


761
00:22:59,836 --> 00:23:00,656
readable description.


762
00:23:00,656 --> 00:23:03,366
You might choose to include


763
00:23:03,366 --> 00:23:04,976
units or other additional


764
00:23:04,976 --> 00:23:05,446
context.


765
00:23:06,506 --> 00:23:07,856
But for our purposes, the number


766
00:23:07,856 --> 00:23:09,466
itself is sufficient.


767
00:23:10,956 --> 00:23:12,576
Finally, we'll add a Custom


768
00:23:12,576 --> 00:23:14,136
Action using the Accessibility


769
00:23:14,136 --> 00:23:14,826
action function.


770
00:23:16,246 --> 00:23:17,626
Using the name parameter, we'll


771
00:23:17,626 --> 00:23:19,466
create a Custom Action called


772
00:23:19,596 --> 00:23:19,836
Clear.


773
00:23:21,266 --> 00:23:22,566
VoiceOver will read that there


774
00:23:22,566 --> 00:23:23,756
are actions available when


775
00:23:23,756 --> 00:23:24,726
focused on this element.


776
00:23:25,856 --> 00:23:26,676
And this was just a quick


777
00:23:26,796 --> 00:23:28,066
overview of how to add


778
00:23:28,066 --> 00:23:29,186
Accessibility in SwiftUI.


779
00:23:29,986 --> 00:23:31,526
The Accessibility function adds


780
00:23:31,526 --> 00:23:32,676
information and the


781
00:23:32,676 --> 00:23:34,146
Accessibility action function


782
00:23:34,416 --> 00:23:35,506
allows you to add actions.


783
00:23:36,206 --> 00:23:37,286
But I want to talk a little bit


784
00:23:37,286 --> 00:23:38,826
more about when to use this API


785
00:23:38,826 --> 00:23:40,766
and how you can identify the


786
00:23:40,766 --> 00:23:42,346
areas of need within your app.


787
00:23:42,996 --> 00:23:45,976
And this comes back to what your


788
00:23:45,976 --> 00:23:49,026
customers need your apps to be.


789
00:23:49,306 --> 00:23:52,356
Understandable, interactable,


790
00:23:53,046 --> 00:23:54,796
and navigable.


791
00:23:56,596 --> 00:23:57,786
And here are a few questions to


792
00:23:57,786 --> 00:23:58,746
help you evaluate this.


793
00:24:01,186 --> 00:24:02,766
Do the displayed strings provide


794
00:24:02,766 --> 00:24:03,446
enough information?


795
00:24:07,166 --> 00:24:08,806
Will a Custom Action simplify


796
00:24:08,806 --> 00:24:09,386
the interaction?


797
00:24:13,046 --> 00:24:13,976
And can you speed up navigation?


798
00:24:18,046 --> 00:24:19,146
So now I'll show you a video of


799
00:24:19,146 --> 00:24:20,276
VoiceOver moving through an app


800
00:24:20,276 --> 00:24:20,916
that I created.


801
00:24:21,206 --> 00:24:22,646
And as it does, try to keep


802
00:24:22,686 --> 00:24:23,916
these three questions in mind.


803
00:24:27,436 --> 00:24:28,236
So, this is an app that


804
00:24:28,236 --> 00:24:29,646
calculates the contrast ratio


805
00:24:29,926 --> 00:24:31,386
between text and its background


806
00:24:31,386 --> 00:24:31,646
color.


807
00:24:32,286 --> 00:24:33,236
At the top you can see the


808
00:24:33,236 --> 00:24:35,516
current value of the ratio and


809
00:24:35,516 --> 00:24:36,726
at the bottom there are two


810
00:24:36,726 --> 00:24:38,036
areas where you can adjust the


811
00:24:38,036 --> 00:24:39,816
red, green, and blue values of


812
00:24:39,816 --> 00:24:41,006
the background color and the


813
00:24:41,006 --> 00:24:41,356
text color.


814
00:24:42,666 --> 00:24:43,816
I've also added a double tap


815
00:24:43,816 --> 00:24:45,436
gesture on the top view to swap


816
00:24:45,436 --> 00:24:45,996
the two colors.


817
00:24:47,596 --> 00:24:48,776
So, let's see how VoiceOver uses


818
00:24:48,776 --> 00:24:49,506
that by default.


819
00:24:52,836 --> 00:24:53,086
:50


820
00:24:53,086 --> 00:24:54,146
>> 11.7 1.


821
00:24:54,286 --> 00:25:01,146
11.7 1. 11.7 1.


822
00:25:02,896 --> 00:25:04,766
Reset colors button.


823
00:25:05,696 --> 00:25:06,656
Background.


824
00:25:07,556 --> 00:25:11,206
Red 76. 30 percent.


825
00:25:11,486 --> 00:25:12,246
Adjustable.


826
00:25:12,776 --> 00:25:14,946
Green 217.


827
00:25:15,656 --> 00:25:17,096
85 percent.


828
00:25:17,386 --> 00:25:18,136
Adjustable.


829
00:25:18,776 --> 00:25:22,576
Blue 100. 39 percent.


830
00:25:22,876 --> 00:25:23,626
Adjustable.


831
00:25:24,356 --> 00:25:26,796
39 -- 100 percent.


832
00:25:30,376 --> 00:25:31,376
>> So, there were a couple of


833
00:25:31,426 --> 00:25:32,576
things in the video that stood


834
00:25:32,576 --> 00:25:34,766
out to me with the label at the


835
00:25:35,636 --> 00:25:35,746
top.


836
00:25:35,956 --> 00:25:37,616
First, there was a symbol that


837
00:25:37,616 --> 00:25:38,216
wasn't read out.


838
00:25:39,106 --> 00:25:40,136
VoiceOver doesn't always read


839
00:25:40,136 --> 00:25:41,346
out your punctuation depending


840
00:25:41,346 --> 00:25:41,896
on settings.


841
00:25:42,266 --> 00:25:43,566
And in a situation like this,


842
00:25:43,916 --> 00:25:45,146
where the punctuation represents


843
00:25:45,146 --> 00:25:46,556
that this is a ratio, we should


844
00:25:46,556 --> 00:25:47,626
pass that information on to


845
00:25:47,626 --> 00:25:48,096
VoiceOver.


846
00:25:49,136 --> 00:25:51,536
So, 11.7 1 should read 11.7 to


847
00:25:51,566 --> 00:25:51,696
1.


848
00:25:53,126 --> 00:25:54,216
And secondly, the numbers were


849
00:25:54,216 --> 00:25:55,546
spoken without any context.


850
00:25:57,096 --> 00:25:58,186
It's probably a good idea to


851
00:25:58,186 --> 00:25:59,186
give this a proper label to


852
00:25:59,186 --> 00:25:59,986
describe its value.


853
00:26:00,896 --> 00:26:02,346
So, we can use contrast ratio.


854
00:26:04,786 --> 00:26:05,796
And we'll do this by calling the


855
00:26:05,796 --> 00:26:07,536
Accessibility function twice on


856
00:26:07,536 --> 00:26:08,536
a contrast ratio view.


857
00:26:09,176 --> 00:26:11,086
Once for the label and another


858
00:26:11,126 --> 00:26:14,676
to add the value.


859
00:26:15,246 --> 00:26:16,216
Another thing that stood out to


860
00:26:16,216 --> 00:26:17,926
me was the information provided


861
00:26:17,926 --> 00:26:18,506
by the slider.


862
00:26:19,466 --> 00:26:20,846
The value of the slider was a


863
00:26:20,846 --> 00:26:22,826
percentage, but in this case, it


864
00:26:22,826 --> 00:26:24,376
actually represents the color


865
00:26:24,376 --> 00:26:26,646
components value from 0 to 255.


866
00:26:27,496 --> 00:26:30,476
We can also hide the label above


867
00:26:30,476 --> 00:26:32,506
the slider and expose that


868
00:26:32,506 --> 00:26:33,716
information through the slider


869
00:26:33,956 --> 00:26:34,356
instead.


870
00:26:34,896 --> 00:26:35,936
So that'll group all the


871
00:26:35,936 --> 00:26:37,666
information into one element.


872
00:26:39,236 --> 00:26:41,346
So first let's hide the label.


873
00:26:42,286 --> 00:26:43,256
We'll call the Accessibility


874
00:26:43,256 --> 00:26:44,856
function with visibility as the


875
00:26:44,856 --> 00:26:45,286
parameter.


876
00:26:46,236 --> 00:26:47,966
Passing in .hidden will hide the


877
00:26:47,966 --> 00:26:50,566
element and any children that it


878
00:26:53,016 --> 00:26:53,186
may have.


879
00:26:53,346 --> 00:26:54,726
Next, we'll add the information


880
00:26:54,726 --> 00:26:55,946
of the label onto the slider.


881
00:26:56,886 --> 00:26:58,066
We'll give it the label of the


882
00:26:58,096 --> 00:26:59,876
color that it will modify and a


883
00:26:59,876 --> 00:27:04,166
proper value between 0 and 255.


884
00:27:05,826 --> 00:27:06,816
We also have a double tap


885
00:27:06,816 --> 00:27:07,526
gesture on the view.


886
00:27:08,366 --> 00:27:09,606
Gestures on iOS can be


887
00:27:09,606 --> 00:27:10,816
challenging to perform for


888
00:27:10,816 --> 00:27:12,266
customers who use our


889
00:27:12,266 --> 00:27:13,106
Accessibility products.


890
00:27:14,296 --> 00:27:15,586
Some of our products have a


891
00:27:15,586 --> 00:27:17,526
built-in gestures menu to help


892
00:27:17,526 --> 00:27:18,686
perform some of the more complex


893
00:27:18,686 --> 00:27:19,176
gestures.


894
00:27:20,296 --> 00:27:21,156
But we can do better here.


895
00:27:21,926 --> 00:27:23,316
An easy simplification for this


896
00:27:23,546 --> 00:27:24,806
is to create a Custom Action for


897
00:27:24,806 --> 00:27:25,266
the gesture.


898
00:27:26,176 --> 00:27:27,326
This helps in two ways.


899
00:27:28,166 --> 00:27:29,676
First, the name of the action


900
00:27:29,726 --> 00:27:30,606
will help describe what will


901
00:27:30,606 --> 00:27:31,796
happen when you activate it.


902
00:27:32,576 --> 00:27:33,806
And second, actions are


903
00:27:33,806 --> 00:27:35,656
available everywhere in iOS and


904
00:27:35,656 --> 00:27:36,646
they're discoverable in all of


905
00:27:36,646 --> 00:27:37,596
our Accessibility products.


906
00:27:41,216 --> 00:27:42,636
So, let's add the swap colors


907
00:27:42,636 --> 00:27:44,766
action to our contrast ratio


908
00:27:44,766 --> 00:27:45,806
view by calling the same


909
00:27:45,806 --> 00:27:47,306
Accessibility action modifier


910
00:27:47,306 --> 00:27:47,656
function.


911
00:27:48,206 --> 00:27:52,446
And finally, can we speed up


912
00:27:52,446 --> 00:27:53,096
navigation here?


913
00:27:54,596 --> 00:27:55,896
Looking at the view it can be


914
00:27:55,896 --> 00:27:57,716
divided into three main spaces;


915
00:27:58,596 --> 00:28:01,156
the contrast ratio, the


916
00:28:01,156 --> 00:28:03,976
background color, and the text


917
00:28:03,976 --> 00:28:04,196
color.


918
00:28:05,256 --> 00:28:06,716
So, these are good candidates


919
00:28:06,876 --> 00:28:08,306
for the isHeader Accessibility


920
00:28:08,306 --> 00:28:08,576
trait.


921
00:28:09,296 --> 00:28:10,616
This trait's used by VoiceOver


922
00:28:10,776 --> 00:28:11,966
to navigate quickly between


923
00:28:11,966 --> 00:28:12,996
different header elements in


924
00:28:12,996 --> 00:28:14,926
your app.


925
00:28:15,996 --> 00:28:17,426
So, let's add the trait to the


926
00:28:17,426 --> 00:28:19,366
contrast ratio view and the two


927
00:28:19,366 --> 00:28:20,636
text views in each of the color


928
00:28:20,636 --> 00:28:21,166
picker sections.


929
00:28:25,446 --> 00:28:26,216
So, let's take a look at the


930
00:28:26,216 --> 00:28:27,226
results of the changes that we


931
00:28:27,226 --> 00:28:28,496
made, starting off with the top


932
00:28:28,496 --> 00:28:28,616
view.


933
00:28:31,076 --> 00:28:33,966
>> Contrast ratio 11.7 to 1.


934
00:28:34,256 --> 00:28:34,736
Heading.


935
00:28:35,676 --> 00:28:37,026
>> So, the element now provides


936
00:28:37,026 --> 00:28:38,566
context and a proper description


937
00:28:38,636 --> 00:28:40,556
for the value.


938
00:28:40,696 --> 00:28:41,806
Let's move onto the sliders and


939
00:28:41,806 --> 00:28:42,856
we'll adjust the blue sliders


940
00:28:42,856 --> 00:28:43,106
value.


941
00:28:44,456 --> 00:28:46,306
>> Reset colors button.


942
00:28:47,316 --> 00:28:48,266
Background.


943
00:28:48,556 --> 00:28:52,366
Heading. Red 76.


944
00:28:52,366 --> 00:28:53,086
Adjustable.


945
00:28:53,086 --> 00:28:56,536
Swipe or down with one finger to


946
00:28:56,536 --> 00:28:57,546
adjust the value.


947
00:28:58,616 --> 00:29:00,876
Green 217.


948
00:29:01,186 --> 00:29:01,946
Adjustable.


949
00:29:02,556 --> 00:29:05,136
Blue 10. Adjustable.


950
00:29:05,136 --> 00:29:07,676
Swipe -- 100.


951
00:29:08,116 --> 00:29:11,546
255.


952
00:29:15,076 --> 00:29:16,126
>> And finally, let's use the


953
00:29:16,126 --> 00:29:17,896
VoiceOver rotor to navigate by


954
00:29:17,896 --> 00:29:19,446
headings and swap the colors


955
00:29:19,516 --> 00:29:20,536
using the Custom Action that we


956
00:29:20,536 --> 00:29:20,896
created.


957
00:29:22,086 --> 00:29:23,026
>> Adjust value.


958
00:29:23,276 --> 00:29:26,306
Headings. Text.


959
00:29:26,306 --> 00:29:28,226
Heading. Background.


960
00:29:28,516 --> 00:29:32,996
Heading. Contrast ratio 13.0 to


961
00:29:32,996 --> 00:29:33,426
1.


962
00:29:33,736 --> 00:29:36,076
Heading. Actions.


963
00:29:36,076 --> 00:29:39,516
Swap colors.


964
00:29:43,516 --> 00:29:48,556
[ Applause ]


965
00:29:49,056 --> 00:29:50,366
>> So, with just a few tweaks we


966
00:29:50,366 --> 00:29:51,596
were able to greatly improve the


967
00:29:51,596 --> 00:29:52,806
Accessibility experience of this


968
00:29:52,806 --> 00:29:53,036
app.


969
00:29:53,866 --> 00:29:54,896
And these are just the basics of


970
00:29:54,896 --> 00:29:55,166
the API.


971
00:29:55,166 --> 00:29:56,446
But I want to move onto


972
00:29:56,446 --> 00:29:57,416
something a little bit more


973
00:29:57,416 --> 00:29:57,906
conceptual.


974
00:29:58,796 --> 00:29:59,676
The Accessibility Tree.


975
00:30:01,196 --> 00:30:02,036
And you've seen how


976
00:30:02,036 --> 00:30:03,186
Accessibility elements are


977
00:30:03,186 --> 00:30:04,086
created from your views.


978
00:30:04,556 --> 00:30:05,316
But I want to go in a bit


979
00:30:05,316 --> 00:30:06,626
further and talk about this tree


980
00:30:06,626 --> 00:30:08,336
structure of these elements and


981
00:30:08,336 --> 00:30:09,376
how you can manipulate the


982
00:30:09,376 --> 00:30:11,556
structure to provide a better


983
00:30:11,556 --> 00:30:12,256
experience.


984
00:30:13,146 --> 00:30:14,046
So, we'll start with how this


985
00:30:14,046 --> 00:30:14,616
tree's created.


986
00:30:14,616 --> 00:30:19,126
Starts off with your view tree


987
00:30:19,306 --> 00:30:20,426
created directly from your code.


988
00:30:21,446 --> 00:30:23,006
On the left here is SwiftUI code


989
00:30:23,086 --> 00:30:23,956
for a table cell view.


990
00:30:24,936 --> 00:30:26,926
It has one label, a spacer, and


991
00:30:26,926 --> 00:30:27,386
two buttons.


992
00:30:28,366 --> 00:30:29,806
Arranged horizontally inside of


993
00:30:29,806 --> 00:30:30,216
an HStack.


994
00:30:31,626 --> 00:30:32,996
And this directly translates to


995
00:30:32,996 --> 00:30:33,906
the view tree structure on the


996
00:30:33,906 --> 00:30:35,756
right where the HStack is the


997
00:30:35,756 --> 00:30:37,546
parent node and the label,


998
00:30:37,636 --> 00:30:39,726
spacer, and buttons are its


999
00:30:39,726 --> 00:30:40,056
children.


1000
00:30:41,806 --> 00:30:42,526
Because of our built in


1001
00:30:42,526 --> 00:30:44,346
Accessibility, this view tree


1002
00:30:44,346 --> 00:30:45,846
will create three Accessibility


1003
00:30:45,846 --> 00:30:46,336
elements.


1004
00:30:46,746 --> 00:30:48,346
One from the text and two from


1005
00:30:48,346 --> 00:30:48,786
the buttons.


1006
00:30:51,046 --> 00:30:51,936
These elements will become


1007
00:30:51,936 --> 00:30:53,116
children of your platforms


1008
00:30:53,116 --> 00:30:54,676
hosting view and that's passed


1009
00:30:54,676 --> 00:30:55,726
on to our Accessibility


1010
00:30:55,726 --> 00:30:56,156
products.


1011
00:30:57,526 --> 00:31:00,076
This subtree may also be a part


1012
00:31:00,076 --> 00:31:01,646
of a larger Accessibility Tree,


1013
00:31:01,716 --> 00:31:03,666
mixed in with UiKit or AppKit


1014
00:31:03,666 --> 00:31:04,146
elements.


1015
00:31:04,836 --> 00:31:07,106
The SwiftUI tree can even be a


1016
00:31:07,106 --> 00:31:08,346
parent of other platform


1017
00:31:08,346 --> 00:31:10,166
elements bridged over using a UI


1018
00:31:10,166 --> 00:31:11,406
or NSViewRepresentable.


1019
00:31:12,026 --> 00:31:14,506
And you'll notice the levels of


1020
00:31:14,506 --> 00:31:15,966
hierarchy in this tree and you


1021
00:31:15,966 --> 00:31:17,116
might be thinking about how


1022
00:31:17,116 --> 00:31:18,506
quickly this can become complex.


1023
00:31:19,296 --> 00:31:20,556
But I'll show you how creating


1024
00:31:20,556 --> 00:31:21,576
hierarchy in this tree can


1025
00:31:21,576 --> 00:31:23,106
actually improve navigation.


1026
00:31:24,166 --> 00:31:24,916
So, let's take a look at our


1027
00:31:24,916 --> 00:31:26,286
example again.


1028
00:31:28,336 --> 00:31:31,156
The table cell itself has three


1029
00:31:31,156 --> 00:31:32,276
Accessibility elements.


1030
00:31:32,886 --> 00:31:34,056
VoiceOver will navigate these in


1031
00:31:34,056 --> 00:31:35,906
order and this works great if


1032
00:31:35,906 --> 00:31:36,856
you have only one cell.


1033
00:31:36,856 --> 00:31:39,156
But it's more likely that you'll


1034
00:31:39,156 --> 00:31:40,576
have hundreds of these in your


1035
00:31:40,576 --> 00:31:40,736
app.


1036
00:31:42,086 --> 00:31:43,206
And as you can see, there are a


1037
00:31:43,206 --> 00:31:44,316
ton of elements in this tree.


1038
00:31:44,846 --> 00:31:46,326
And it doesn't seem very useful


1039
00:31:46,326 --> 00:31:47,316
to have a lot of repetitive


1040
00:31:47,316 --> 00:31:48,566
information with the follow and


1041
00:31:48,566 --> 00:31:49,236
share buttons.


1042
00:31:49,996 --> 00:31:50,946
If you landed on this follow


1043
00:31:50,946 --> 00:31:52,536
button, how would you know if it


1044
00:31:52,536 --> 00:31:54,866
was for person 5 or person 6?


1045
00:31:55,306 --> 00:31:56,356
There's no context here unless


1046
00:31:56,356 --> 00:31:56,906
you look around.


1047
00:31:57,926 --> 00:31:58,766
But we can make this a lot


1048
00:31:58,766 --> 00:31:59,056
simpler.


1049
00:31:59,726 --> 00:32:02,956
And we'll do this by creating an


1050
00:32:02,956 --> 00:32:04,376
Accessibility element at a


1051
00:32:04,376 --> 00:32:05,456
higher level than in the view


1052
00:32:05,456 --> 00:32:05,696
tree.


1053
00:32:07,316 --> 00:32:08,556
We can find a view that is a


1054
00:32:08,616 --> 00:32:09,836
parent of our Accessibility


1055
00:32:09,836 --> 00:32:11,776
elements and create a new


1056
00:32:11,776 --> 00:32:12,356
element there.


1057
00:32:13,736 --> 00:32:15,986
In our case, we'll use the


1058
00:32:19,276 --> 00:32:19,396
HStack.


1059
00:32:19,616 --> 00:32:20,756
We can use the Accessibility


1060
00:32:20,756 --> 00:32:22,356
element function on our HStack


1061
00:32:22,526 --> 00:32:23,446
to create a new element.


1062
00:32:24,446 --> 00:32:26,496
Specifying .combine will merge


1063
00:32:26,546 --> 00:32:28,166
the Accessibility provided by


1064
00:32:28,166 --> 00:32:29,486
the children into one element.


1065
00:32:30,596 --> 00:32:32,806
In this case, the text view will


1066
00:32:32,806 --> 00:32:34,526
provide the elements label and


1067
00:32:34,526 --> 00:32:35,326
the two buttons will


1068
00:32:35,326 --> 00:32:36,696
automatically be converted into


1069
00:32:36,696 --> 00:32:37,446
Custom Actions.


1070
00:32:41,206 --> 00:32:42,706
And now, VoiceOver will see just


1071
00:32:42,706 --> 00:32:44,216
one element here which will read


1072
00:32:44,216 --> 00:32:46,596
the person's name and that there


1073
00:32:46,656 --> 00:32:49,086
are actions available.


1074
00:32:50,516 --> 00:32:55,596
[ Applause ]


1075
00:32:56,096 --> 00:32:57,026
And with these changes we've


1076
00:32:57,026 --> 00:32:58,456
significantly reduced the number


1077
00:32:58,456 --> 00:32:59,406
of elements in this tree.


1078
00:33:00,136 --> 00:33:01,376
You can navigate the cells one


1079
00:33:01,376 --> 00:33:02,456
by one as expected.


1080
00:33:03,876 --> 00:33:05,286
You can access the buttons


1081
00:33:05,476 --> 00:33:07,126
through Custom Actions.


1082
00:33:07,916 --> 00:33:09,606
So, grouping related UI like


1083
00:33:09,646 --> 00:33:11,476
this is a simple yet great way


1084
00:33:11,626 --> 00:33:14,156
to improve navigation in your


1085
00:33:15,266 --> 00:33:15,346
app.


1086
00:33:16,036 --> 00:33:17,156
Another important component of


1087
00:33:17,156 --> 00:33:18,886
navigation and Accessibility is


1088
00:33:18,886 --> 00:33:19,236
ordering.


1089
00:33:20,776 --> 00:33:21,856
There may be situations where


1090
00:33:21,856 --> 00:33:22,806
you find that the default


1091
00:33:22,806 --> 00:33:23,886
ordering isn't giving you the


1092
00:33:23,886 --> 00:33:24,976
experience that you'd expect.


1093
00:33:26,086 --> 00:33:26,886
So, you may have noticed from


1094
00:33:26,886 --> 00:33:28,506
the video earlier that the reset


1095
00:33:28,506 --> 00:33:30,076
colors button was actually the


1096
00:33:30,076 --> 00:33:31,166
second element in the swipe


1097
00:33:31,166 --> 00:33:31,386
order.


1098
00:33:32,936 --> 00:33:34,406
The two elements are arranged in


1099
00:33:34,406 --> 00:33:36,256
a ZStack which orders elements


1100
00:33:36,256 --> 00:33:37,626
from back to front by default.


1101
00:33:38,906 --> 00:33:40,176
Visually though, the button


1102
00:33:40,176 --> 00:33:41,686
appears above the contrast


1103
00:33:41,686 --> 00:33:42,026
ratio.


1104
00:33:42,686 --> 00:33:45,246
So, in this case we might want


1105
00:33:45,246 --> 00:33:46,566
to swap that.


1106
00:33:47,656 --> 00:33:49,056
To customize this order, we can


1107
00:33:49,056 --> 00:33:49,876
use sortPriority.


1108
00:33:53,386 --> 00:33:54,806
So, all elements have a default


1109
00:33:54,806 --> 00:33:55,736
sortPriority of 0.


1110
00:33:56,426 --> 00:33:58,156
And elements in a container are


1111
00:33:58,156 --> 00:33:59,496
sorted from highest to lowest


1112
00:33:59,496 --> 00:33:59,906
priority.


1113
00:34:01,216 --> 00:34:02,506
So, we can set the sortPriority


1114
00:34:02,826 --> 00:34:03,976
by calling the Accessibility


1115
00:34:03,976 --> 00:34:05,966
modifier function with the


1116
00:34:05,966 --> 00:34:06,996
sortPriority parameter.


1117
00:34:08,966 --> 00:34:09,835
So, we'll give our button a


1118
00:34:09,835 --> 00:34:12,315
sortPriority of 1 and since the


1119
00:34:12,315 --> 00:34:14,156
contrast ratio has a priority of


1120
00:34:14,156 --> 00:34:15,926
zero, the button will be scanned


1121
00:34:15,926 --> 00:34:18,186
first and the ratio will be


1122
00:34:18,186 --> 00:34:18,746
scanned second.


1123
00:34:23,315 --> 00:34:26,246
So, the Accessibility API helps


1124
00:34:26,246 --> 00:34:27,326
you make your apps more


1125
00:34:27,326 --> 00:34:27,896
understandable.


1126
00:34:29,216 --> 00:34:30,646
It lets you add context by


1127
00:34:30,646 --> 00:34:32,516
adding labels, values, and hints


1128
00:34:32,826 --> 00:34:33,726
using the Accessibility


1129
00:34:33,726 --> 00:34:34,126
function.


1130
00:34:34,676 --> 00:34:38,166
You can use the Accessibility


1131
00:34:38,166 --> 00:34:40,076
action function to add actions


1132
00:34:40,076 --> 00:34:40,886
and make your apps more


1133
00:34:40,886 --> 00:34:41,386
interactable.


1134
00:34:42,065 --> 00:34:45,606
And finally, you can use the


1135
00:34:45,606 --> 00:34:47,016
Accessibility element function


1136
00:34:47,306 --> 00:34:48,446
to group your elements together


1137
00:34:48,706 --> 00:34:49,696
and improve navigation.


1138
00:34:50,346 --> 00:34:55,156
With built in Accessibility and


1139
00:34:55,156 --> 00:34:56,406
simple enhancements with the


1140
00:34:56,406 --> 00:34:59,836
Accessibility API, SwiftUI lets


1141
00:34:59,836 --> 00:35:00,966
you make your apps accessible,


1142
00:35:01,236 --> 00:35:02,466
faster and easier than ever.


1143
00:35:03,616 --> 00:35:04,466
Now, back to Michael.


1144
00:35:05,516 --> 00:35:10,500
[ Applause ]


1145
00:35:14,346 --> 00:35:16,626
>> All right, so let us close


1146
00:35:16,666 --> 00:35:17,866
things up here.


1147
00:35:18,756 --> 00:35:20,086
One last thing before we do


1148
00:35:20,086 --> 00:35:20,236
that.


1149
00:35:21,196 --> 00:35:22,476
If you have put in all of this


1150
00:35:22,476 --> 00:35:24,036
work into the Accessibility of


1151
00:35:24,036 --> 00:35:25,616
your app, how do you know you're


1152
00:35:25,616 --> 00:35:26,856
actually being successful?


1153
00:35:27,796 --> 00:35:29,366
Well, we have two pieces of


1154
00:35:29,366 --> 00:35:30,106
advice for you here.


1155
00:35:31,006 --> 00:35:32,636
First, there is no substitute


1156
00:35:32,746 --> 00:35:34,336
for using your app.


1157
00:35:34,416 --> 00:35:35,586
That means trying it out with


1158
00:35:35,586 --> 00:35:37,446
our real Accessibility features


1159
00:35:37,446 --> 00:35:39,116
like VoiceOver, Full Keyboard


1160
00:35:39,116 --> 00:35:40,476
Access, and Voice Control.


1161
00:35:41,256 --> 00:35:42,926
For example, if you're using


1162
00:35:42,926 --> 00:35:44,586
your app with VoiceOver and


1163
00:35:44,586 --> 00:35:45,916
there's something you can't do


1164
00:35:45,956 --> 00:35:47,206
with just your voice or you --


1165
00:35:47,386 --> 00:35:49,286
there's something that you need


1166
00:35:49,286 --> 00:35:51,166
to look at the screen for, you


1167
00:35:51,166 --> 00:35:52,416
have some work to do.


1168
00:35:52,846 --> 00:35:54,096
Or if you're using your app with


1169
00:35:54,096 --> 00:35:55,216
Voice Control and there is


1170
00:35:55,216 --> 00:35:56,306
something you can't do with your


1171
00:35:56,306 --> 00:35:56,566
voice.


1172
00:35:56,966 --> 00:35:58,356
Or you're using your app with


1173
00:35:58,356 --> 00:35:59,646
Full Keyboard Access and there's


1174
00:35:59,646 --> 00:36:00,976
something you can't do with your


1175
00:36:00,976 --> 00:36:02,886
keyboard; you have some work


1176
00:36:02,886 --> 00:36:05,676
left to do.


1177
00:36:05,926 --> 00:36:07,416
Second, there is the


1178
00:36:07,416 --> 00:36:08,816
Accessibility Inspector.


1179
00:36:09,546 --> 00:36:10,796
This is a product that ships


1180
00:36:10,796 --> 00:36:12,316
with Xcode and can help you dig


1181
00:36:12,316 --> 00:36:14,126
deep into the Accessibility of


1182
00:36:14,126 --> 00:36:14,566
your app.


1183
00:36:15,156 --> 00:36:17,346
The Accessibility Inspector


1184
00:36:17,346 --> 00:36:19,126
doesn't replace testing your app


1185
00:36:19,126 --> 00:36:20,396
with our real Accessibility


1186
00:36:20,396 --> 00:36:22,276
features, but it can be a


1187
00:36:22,276 --> 00:36:24,186
powerful tool to understand your


1188
00:36:24,186 --> 00:36:26,486
Accessibility Tree and the debug


1189
00:36:26,536 --> 00:36:27,366
when things go wrong.


1190
00:36:28,256 --> 00:36:29,196
There are some great sessions


1191
00:36:29,196 --> 00:36:31,746
about the inspector on this


1192
00:36:33,316 --> 00:36:33,476
slide.


1193
00:36:33,646 --> 00:36:35,566
So, a few points to summarize


1194
00:36:35,566 --> 00:36:36,446
what we've talked about today.


1195
00:36:37,896 --> 00:36:39,646
We have worked super hard at


1196
00:36:39,816 --> 00:36:42,106
Apple to build SwiftUI so it can


1197
00:36:42,106 --> 00:36:44,016
make your apps as accessible as


1198
00:36:44,076 --> 00:36:45,316
possible by default.


1199
00:36:46,466 --> 00:36:48,396
And we've designed SwiftUI with


1200
00:36:48,396 --> 00:36:50,086
Accessibility in mind from the


1201
00:36:50,086 --> 00:36:50,886
very beginning.


1202
00:36:51,396 --> 00:36:54,056
We've talked today about what a


1203
00:36:54,056 --> 00:36:55,476
great Accessibility User


1204
00:36:55,476 --> 00:36:56,356
Interface is.


1205
00:36:56,486 --> 00:36:57,486
I know we've been drilling it


1206
00:36:57,486 --> 00:36:58,526
into you, but remember,


1207
00:36:58,756 --> 00:37:00,756
understandable, interactable,


1208
00:37:01,176 --> 00:37:02,056
and navigable.


1209
00:37:04,956 --> 00:37:07,236
To go beyond the basics and add


1210
00:37:07,356 --> 00:37:09,486
polish, SwiftUI has a powerful


1211
00:37:09,486 --> 00:37:11,326
Accessibility API for you to


1212
00:37:11,326 --> 00:37:11,956
use.


1213
00:37:12,906 --> 00:37:15,146
And that API is now finally


1214
00:37:15,246 --> 00:37:16,696
unified across all our


1215
00:37:16,726 --> 00:37:17,236
platforms.


1216
00:37:17,236 --> 00:37:18,706
So, you only have to learn it


1217
00:37:18,706 --> 00:37:19,126
once.


1218
00:37:20,516 --> 00:37:25,546
[ Applause ]


1219
00:37:26,046 --> 00:37:27,826
Two useful references going


1220
00:37:27,826 --> 00:37:28,286
forward.


1221
00:37:28,356 --> 00:37:29,796
First, we will be releasing


1222
00:37:29,796 --> 00:37:31,106
sample code for the session.


1223
00:37:31,106 --> 00:37:32,596
You can find it at the link


1224
00:37:32,596 --> 00:37:33,316
above.


1225
00:37:33,746 --> 00:37:35,336
And second, we have an


1226
00:37:35,336 --> 00:37:36,786
Accessibility lab coming up


1227
00:37:36,786 --> 00:37:38,336
immediately after this session.


1228
00:37:38,726 --> 00:37:40,846
Come join us to meet us, talk


1229
00:37:40,846 --> 00:37:41,896
about SwiftUI, and


1230
00:37:41,896 --> 00:37:42,706
Accessibility.


1231
00:37:43,196 --> 00:37:44,046
We are looking forward to


1232
00:37:44,046 --> 00:37:46,396
meeting all of you.


1233
00:37:46,616 --> 00:37:48,686
We're super excited of the new


1234
00:37:48,686 --> 00:37:50,176
era of accessible apps that you


1235
00:37:50,176 --> 00:37:51,926
folks will create with SwiftUI.


1236
00:37:52,506 --> 00:37:53,416
Thank you for listening.


1237
00:37:54,516 --> 00:37:57,500
[ Applause ]

