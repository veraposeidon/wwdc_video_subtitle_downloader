2
00:00:00.501 --> 00:00:08.509 line:-1 align:center
♪ ♪


3
00:00:09,977 --> 00:00:11,378 line:-1
Hello, everyone.


4
00:00:11,411 --> 00:00:15,649 line:-2
My name is Adrian, and I'll be talking
to you about how to set up your project


5
00:00:15.682 --> 00:00:19.119 line:-2 align:center
for a great debugging experience
with LLDB.


6
00:00:19,152 --> 00:00:23,857 line:-2
LLDB is the underlying debugging
technology that ships with Xcode.


7
00:00:23.891 --> 00:00:27.728 line:-2 align:center
LLDB allows you to set breakpoints
in your application,


8
00:00:27.761 --> 00:00:29.296 line:-1 align:center
pause its execution,


9
00:00:29,329 --> 00:00:32,266 line:-2
inspect the state of variables
and objects,


10
00:00:32,299 --> 00:00:35,669 line:-1
explore your code, and much more.


11
00:00:35,702 --> 00:00:39,473 line:-2
LLDB can help you understand
what your code is doing


12
00:00:39.506 --> 00:00:43.510 line:-2 align:center
and it enables you to find the point where
the behavior of your code


13
00:00:43,544 --> 00:00:46,513 line:-1
diverges from your expectation.


14
00:00:46,547 --> 00:00:51,185 line:-2
It's a powerful tool for
understanding and exploring code.


15
00:00:51,218 --> 00:00:54,922 align:center
If you want to learn more about LLDB,
please check out earlier videos,


16
00:00:54,955 --> 00:00:59,726 align:center
for example "Discover breakpoint
improvements" from WWDC21.


17
00:00:59.760 --> 00:01:02.729 line:-2 align:center
Today we are going to look at
some advanced workflows


18
00:01:02,763 --> 00:01:06,834 line:-2
that have unique implications
on debugging Swift code.


19
00:01:06.867 --> 00:01:10.871 line:-2 align:center
Maybe you are integrating
a third-party framework into your app.


20
00:01:10,904 --> 00:01:13,407 line:-2
Maybe your app and your team has grown
to the point


21
00:01:13,440 --> 00:01:18,245 line:-2
where most of your code is being built
by a continuous integration system.


22
00:01:18,278 --> 00:01:20,914 line:-2
Maybe you are using a custom
build system to integrate


23
00:01:20,948 --> 00:01:23,684 line:-1
with your company's infrastructure.


24
00:01:23,717 --> 00:01:28,088 line:-2
Maybe you are building software
for other software developers.


25
00:01:28,121 --> 00:01:30,924 line:-1
Or you just want to learn more about LLDB.


26
00:01:30,958 --> 00:01:35,295 line:-2
My goal is to provide a better
understanding of how LLDB works,


27
00:01:35.329 --> 00:01:39.967 line:-2 align:center
and what information it needs from
the build system in order to function.


28
00:01:40,000 --> 00:01:44,071 line:-2
I have a little project here that we are
going to use as our running example.


29
00:01:44,104 --> 00:01:47,407 line:-2
I'm a compiler engineer,
and I like games,


30
00:01:47,441 --> 00:01:50,677 line:-2
so in my spare time
I write parsers for text adventures.


31
00:01:50.711 --> 00:01:54.147 line:-1 align:center
This one I recently started in pure Swift.


32
00:01:54,181 --> 00:01:56,149 line:-1
Let me show you what I've got so far.


33
00:01:56.183 --> 00:02:00.120 line:-2 align:center
The game uses a text interface
so I'm running it in Terminal.


34
00:02:00,153 --> 00:02:04,324 line:-2
As in every good adventure,
we'll start by checking our inventory.


35
00:02:07.194 --> 00:02:10.030 line:-2 align:center
This game takes place
in a contemporary setting.


36
00:02:10.063 --> 00:02:12.199 line:-1 align:center
I see that I have an iPhone.


37
00:02:12.232 --> 00:02:15.569 line:-2 align:center
Next, let's have a look
at our surroundings.


38
00:02:17,538 --> 00:02:21,608 line:-1
Hmm, this sensor looks intriguing.


39
00:02:21,642 --> 00:02:24,711 line:-1
Maybe we can use the iPhone on the sensor?


40
00:02:30.350 --> 00:02:32.186 line:-1 align:center
I dropped the iPhone?


41
00:02:32,219 --> 00:02:35,255 line:-1
Uh, that's not what I wanted to show you.


42
00:02:35,289 --> 00:02:39,026 line:-1
I think that my game has a bug.


43
00:02:39,059 --> 00:02:41,028 line:-1
Good thing this is a debugger talk.


44
00:02:41.061 --> 00:02:45.332 line:-2 align:center
Let's set a breakpoint in the parser
and run our command again.


45
00:02:51,371 --> 00:02:55,375 line:-1
[typing sounds]


46
00:02:59,413 --> 00:03:03,283 line:-2
We should first verify
that the command was read correctly.


47
00:03:03.317 --> 00:03:06.854 line:-2 align:center
The "words" variable contains
the tokenized command.


48
00:03:11.859 --> 00:03:15.095 line:-1 align:center
Ah, this did not go as expected.


49
00:03:15.128 --> 00:03:17.231 line:-1 align:center
I don't know what's going on here.


50
00:03:17,264 --> 00:03:19,900 line:-2
Yesterday I was using the debugger
with no problems,


51
00:03:19,933 --> 00:03:22,803 line:-2
and then last night I integrated
this UI framework


52
00:03:22,836 --> 00:03:25,272 line:-1
for styling text on the terminal.


53
00:03:25.305 --> 00:03:28.775 line:-2 align:center
The developers of that framework
have a continuous integration system


54
00:03:28.809 --> 00:03:31.311 line:-2 align:center
that cranks out nightly builds
of the framework,


55
00:03:31.345 --> 00:03:34.381 line:-2 align:center
and I'm linking
directly against the latest one.


56
00:03:34.414 --> 00:03:39.319 line:-2 align:center
I wonder if this framework has something
to do with my debugging troubles.


57
00:03:39,353 --> 00:03:41,255 line:-1
Case in point, I already noticed


58
00:03:41.288 --> 00:03:44.191 line:-2 align:center
that I can't step
into the framework's source code,


59
00:03:44.224 --> 00:03:47.160 line:-2 align:center
even though I explicitly downloaded
the debug build.


60
00:03:47.194 --> 00:03:48.862 line:-1 align:center
Look at that.


61
00:03:51,732 --> 00:03:53,600 line:-1
I only see disassembly.


62
00:03:54,768 --> 00:03:56,770 line:-2
Let's try to understand
what happened there,


63
00:03:56,803 --> 00:04:01,475 line:-2
and let's start by figuring out
why I couldn't see any source code.


64
00:04:01.508 --> 00:04:05.746 line:-2 align:center
What does LLDB need
in order to show source code?


65
00:04:05.779 --> 00:04:09.416 line:-1 align:center
When the compiler compiles a function,


66
00:04:09.449 --> 00:04:12.119 line:-1 align:center
it generates machine code.


67
00:04:15,556 --> 00:04:18,892 line:-1
And it leaves breadcrumbs for the debugger


68
00:04:18.926 --> 00:04:22.496 line:-2 align:center
so an address in the executable
can be mapped to a source file


69
00:04:22.529 --> 00:04:24.865 line:-1 align:center
and line number and vice versa.


70
00:04:24,898 --> 00:04:28,502 line:-1
These breadcrumbs are called debug info.


71
00:04:28.535 --> 00:04:33.340 line:-2 align:center
On Apple platforms
debug info is stored in object files.


72
00:04:33.373 --> 00:04:39.213 line:-2 align:center
For archiving and distribution, debug info
can be linked into .dSYM bundles.


73
00:04:39,246 --> 00:04:43,617 line:-1
The debug info linker is called dsymutil.


74
00:04:43.650 --> 00:04:46.453 line:-2 align:center
LLDB uses Spotlight
to locate .dSYM bundles,


75
00:04:46,486 --> 00:04:50,090 line:-2
so it's quite flexible
in terms of where on disk they are.


76
00:04:50,123 --> 00:04:55,762 line:-2
Now that we know how debug info works,
let's get back to the example.


77
00:04:55.796 --> 00:05:01.502 line:-2 align:center
First, let's verify that LLDB has actually
found the dSYM for the framework.


78
00:05:01,535 --> 00:05:04,938 line:-2
We can do this
with the image list command.


79
00:05:04.972 --> 00:05:09.276 line:-2 align:center
The UI framework
is called "TerminalInterface".


80
00:05:15.516 --> 00:05:19.453 line:-2 align:center
Yes, LLDB did find the dSYM
for the framework.


81
00:05:19,486 --> 00:05:22,489 line:-2
That means it has access
to the debug info.


82
00:05:22.523 --> 00:05:26.560 line:-1 align:center
We can use "image lookup"


83
00:05:26,593 --> 00:05:29,530 line:-2
to get more info
about the current address.


84
00:05:30.697 --> 00:05:34.001 line:-2 align:center
By the way, if you want to learn more
about the various options,


85
00:05:34,034 --> 00:05:36,670 line:-1
LLDB has an excellent built-in help.


86
00:05:37.738 --> 00:05:40.974 line:-2 align:center
Ah, I think I see
why there is no source code:


87
00:05:41.008 --> 00:05:45.212 line:-2 align:center
This source path here points to where
the sources were on the build server,


88
00:05:45.245 --> 00:05:48.148 line:-1 align:center
not to where they are on my local machine.


89
00:05:48,182 --> 00:05:49,850 line:-1
We can fix that.


90
00:05:49,883 --> 00:05:55,622 line:-2
LLDB has a built-in source map
that we can use to redirect these paths.


91
00:06:04,531 --> 00:06:06,633 line:-1
We could type in the command right now,


92
00:06:06,667 --> 00:06:09,670 line:-2
but I'd rather make this change
more permanent.


93
00:06:09,703 --> 00:06:14,308 line:-2
In the Scheme editor, which you can
bring up by going to Product, Scheme,


94
00:06:14.341 --> 00:06:18.011 line:-1 align:center
Edit scheme,


95
00:06:18,045 --> 00:06:21,348 line:-2
or by just option-clicking
onto the play button,


96
00:06:21.381 --> 00:06:25.118 line:-2 align:center
you can define
a per-project LLDB init file.


97
00:06:25,152 --> 00:06:27,187 line:-1
I already added one for this project.


98
00:06:38.699 --> 00:06:43.103 line:-2 align:center
Now that we set up LLDB,
let's run our project again.


99
00:06:52.813 --> 00:06:55.883 line:-1 align:center
And we have source code.


100
00:06:58.852 --> 00:07:04.825 line:-2 align:center
LLDB can remap source paths
using "settings set target.source-map".


101
00:07:04,858 --> 00:07:08,028 line:-2
You can put this command
into your project's .lldbinit file


102
00:07:08.061 --> 00:07:10.764 line:-1 align:center
to have this run automatically.


103
00:07:10,797 --> 00:07:15,469 line:-2
Alternatively, each .dSYM bundle contains
a XML .plist file


104
00:07:15,502 --> 00:07:18,906 line:-2
where you can put a path prefix
remapping dictionary.


105
00:07:18,939 --> 00:07:22,876 line:-2
If you have a download script that
fetches the latest builds from a server,


106
00:07:22,910 --> 00:07:25,479 line:-2
you could modify that script
to automatically inject


107
00:07:25,512 --> 00:07:29,816 line:-2
the appropriate remapping dictionary
into the downloaded .dSYM.


108
00:07:29,850 --> 00:07:33,754 line:-2
You can learn more about this process
on the LLDB website.


109
00:07:35,289 --> 00:07:38,258 line:-2
Source paths
are not language-specific at all,


110
00:07:38,292 --> 00:07:44,231 line:-2
so this method works for Swift,
C++, and Objective-C projects alike.


111
00:07:44,264 --> 00:07:46,667 line:0
To learn more about
symbols on Apple platforms,


112
00:07:46,700 --> 00:07:52,339 align:center
check out "Symbolication:
Beyond the basics" from WWDC21.


113
00:07:52.372 --> 00:07:55.642 line:-2 align:center
When source code is compiled
on a build server farm,


114
00:07:55,676 --> 00:08:00,881 line:-2
the remote paths to source files could be
different from machine to machine.


115
00:08:00,914 --> 00:08:04,751 line:-2
To avoid having to define
one remap prefix per machine,


116
00:08:04,785 --> 00:08:07,955 line:-2
we can instruct the compiler
to canonicalize source paths


117
00:08:07,988 --> 00:08:10,691 line:-1
before putting them into the debug info.


118
00:08:10,724 --> 00:08:14,795 line:-2
This is done using
the -debug-prefix-map option.


119
00:08:14.828 --> 00:08:18.465 line:-2 align:center
This way the machine-specific
path prefix can be replaced


120
00:08:18,498 --> 00:08:21,001 line:-1
by a unique, canonical placeholder name


121
00:08:21,034 --> 00:08:24,905 line:-2
that can then be remapped
to the local path in LLDB.


122
00:08:24,938 --> 00:08:26,807 line:-1
Before we went on the source tangent,


123
00:08:26,840 --> 00:08:30,143 line:-2
I was trying to print
the object description of "words".


124
00:08:33.981 --> 00:08:35.449 line:-1 align:center
That did not work.


125
00:08:35.482 --> 00:08:39.553 line:-2 align:center
In fact, even just evaluating
the expression "words" did not work.


126
00:08:45.559 --> 00:08:49.029 line:-2 align:center
At least we can see the variables
in the variables view.


127
00:08:51.932 --> 00:08:55.235 line:-2 align:center
The console equivalent
of the Xcode variable view


128
00:08:55,269 --> 00:08:58,572 line:-1
is the "frame variable" or "v" command.


129
00:09:05,712 --> 00:09:09,650 line:-2
If you want to learn more about
the nuances between these commands,


130
00:09:09,683 --> 00:09:14,288 line:0
check out "LLDB: Beyond 'po'"
from WWDC19.


131
00:09:14.321 --> 00:09:18.258 line:-2 align:center
So what is po
and why is it still not working?


132
00:09:18.292 --> 00:09:21.962 line:-2 align:center
To understand what this means,
we need to learn more about LLDB.


133
00:09:21,995 --> 00:09:25,666 line:-1
As a reminder, LLDB is a debugger.


134
00:09:25,699 --> 00:09:27,901 line:-1
But LLDB is not just a debugger.


135
00:09:27.935 --> 00:09:30.170 line:-1 align:center
It is also a compiler!


136
00:09:30,204 --> 00:09:32,973 line:-2
In addition to the functionality
of a debugger,


137
00:09:33,006 --> 00:09:37,945 line:-2
LLDB also includes a fully functioning
copy of the Swift and Clang compilers.


138
00:09:37.978 --> 00:09:41.748 line:-2 align:center
These compilers power
LLDB's expression evaluator,


139
00:09:41,782 --> 00:09:45,652 line:-2
which you may know through
p and po command aliases.


140
00:09:45,686 --> 00:09:49,423 line:-2
With the expression evaluator
we can go beyond looking at variables,


141
00:09:49,456 --> 00:09:52,693 line:-2
we can perform computation,
call functions,


142
00:09:52.726 --> 00:09:55.596 line:-1 align:center
and even change the state of the program.


143
00:09:55,629 --> 00:10:00,567 line:0
Check out "Advanced Debugging
with Xcode and LLDB" from WWDC18


144
00:10:00,601 --> 00:10:04,671 line:0
to get some ideas for what's possible
with those commands.


145
00:10:04.705 --> 00:10:09.042 line:-2 align:center
How does a debugger format
a local variable?


146
00:10:09.076 --> 00:10:12.346 line:-2 align:center
The debug info provided by the compiler
tells the debugger


147
00:10:12,379 --> 00:10:15,282 line:-1
where in memory a variable is stored.


148
00:10:15,315 --> 00:10:19,653 line:-2
But with that information alone,
LLDB would only be able to show us


149
00:10:19.686 --> 00:10:22.422 line:-1 align:center
a random assortment of raw bytes.


150
00:10:22,456 --> 00:10:26,460 line:-2
So how does LLDB turn that into
nicely formatted output?


151
00:10:26,493 --> 00:10:28,395 line:-1
The answer is types.


152
00:10:28.428 --> 00:10:32.032 line:-2 align:center
Type information allows LLDB
to understand the structure


153
00:10:32.065 --> 00:10:34.868 line:-1 align:center
and memory layout of a source variable.


154
00:10:34.902 --> 00:10:39.339 line:-2 align:center
With type information, LLDB knows
what fields an aggregate type has


155
00:10:39,373 --> 00:10:43,277 line:-2
and types allow LLDB to use
the appropriate data formatters


156
00:10:43,310 --> 00:10:45,279 line:-1
to pretty-print them.


157
00:10:45,312 --> 00:10:49,983 line:-2
Now let's look at
where type information comes from.


158
00:10:50.017 --> 00:10:54.621 line:-2 align:center
On the debugger side, where the frame
variable and v commands live,


159
00:10:54,655 --> 00:10:59,059 line:-2
LLDB gets type information
from Debug Info.


160
00:10:59.092 --> 00:11:04.298 line:-2 align:center
And LLDB also gets types
from Swift reflection metadata.


161
00:11:04,331 --> 00:11:08,869 line:-2
On the compiler side, where the expression
evaluator and po live,


162
00:11:08,902 --> 00:11:12,039 line:-1
LLDB gets type information from Modules.


163
00:11:12.072 --> 00:11:15.576 line:-1 align:center
This clean separation is new in Xcode 14


164
00:11:15.609 --> 00:11:18.278 line:-2 align:center
and explains why the variable view
can be fully functional


165
00:11:18,312 --> 00:11:21,048 line:-1
even if the expression evaluator isn't.


166
00:11:21,081 --> 00:11:24,785 line:-2
Modules are how the compiler organizes
type declarations.


167
00:11:24.818 --> 00:11:28.055 line:-2 align:center
The Swift compiler knows
many ways of importing modules,


168
00:11:28.088 --> 00:11:31.491 line:-2 align:center
but before we dive into that,
I want to show you a handy new feature.


169
00:11:32.826 --> 00:11:37.097 line:-2 align:center
How do we start diagnosing an issue
that is happening on the compiler side?


170
00:11:38,031 --> 00:11:42,603 line:-2
This year LLDB has added
a new "swift-healthcheck" command.


171
00:11:42,636 --> 00:11:47,241 line:-2
It's your first stop for figuring out
if a module import failed.


172
00:11:47,274 --> 00:11:49,243 line:-1
Let me show you how this works.


173
00:11:49.276 --> 00:11:52.980 line:-2 align:center
By running swift-healthcheck
after a problem occurred,


174
00:11:53,013 --> 00:11:57,651 line:-2
we can get access to a log of the Swift
expression evaluator configuration.


175
00:12:05,292 --> 00:12:08,896 line:-2
At the end of the log
we see that LLDB had trouble importing


176
00:12:08.929 --> 00:12:11.698 line:-1 align:center
the "TerminalUI" Swift module.


177
00:12:11,732 --> 00:12:14,902 line:-2
Based on the name, I assume
that this is an implementation detail


178
00:12:14.935 --> 00:12:18.338 line:-1 align:center
of the TerminalInterface framework.


179
00:12:18,372 --> 00:12:23,944 line:-2
This missing module is a problem
because the type of self is generic


180
00:12:23,977 --> 00:12:28,315 line:-2
over the UI implementation and
without the module containing that type,


181
00:12:28.348 --> 00:12:33.587 line:-2 align:center
the expression evaluator cannot realize
the dynamic type of "self".


182
00:12:33,620 --> 00:12:35,956 line:-2
I'm sending a message
to the developers of the framework


183
00:12:35,989 --> 00:12:37,858 line:-1
and ask them to investigate.


184
00:12:37,891 --> 00:12:41,228 line:-2
In my experience,
they have always been very responsive.


185
00:12:41,261 --> 00:12:45,832 line:-2
Who knows, maybe we can even find
a solution before the end of this video.


186
00:12:45.866 --> 00:12:51.405 line:-2 align:center
In the meantime, let's take a look at
how LLDB's compiler finds Swift modules.


187
00:12:52,940 --> 00:12:55,943 line:-1
My app has its own Swift module.


188
00:12:55,976 --> 00:13:00,180 line:-2
It may import a system framework,
such as Foundation.


189
00:13:00.214 --> 00:13:06.353 line:-2 align:center
System frameworks are textual stable Swift
interface files that live in the SDK.


190
00:13:06.386 --> 00:13:09.823 line:-2 align:center
Any Swift module
might import a Clang module,


191
00:13:09,857 --> 00:13:13,527 line:-2
which is a fancy name for one or more
header files that are grouped together


192
00:13:13.560 --> 00:13:16.964 line:-1 align:center
with the help of a module map file.


193
00:13:16.997 --> 00:13:20.100 line:-2 align:center
Clang modules
can depend on other Clang modules.


194
00:13:21,902 --> 00:13:26,507 line:-2
My app might also import a Swift module
that belongs to a locally built framework.


195
00:13:26.540 --> 00:13:29.977 line:-2 align:center
It could also import textual
Swift interface files


196
00:13:30,010 --> 00:13:32,913 line:-1
that are not part of the SDK.


197
00:13:32,946 --> 00:13:39,553 align:center
If you want to learn how, check out
"Binary Frameworks in Swift" from WWDC19.


198
00:13:39.586 --> 00:13:44.124 line:-2 align:center
My app might also link against
a static library that contains Swift code,


199
00:13:44.157 --> 00:13:47.327 line:-2 align:center
and then that comes
with a Swift module too.


200
00:13:47,361 --> 00:13:48,996 line:-1
Hmm, we're not done, though.


201
00:13:49,029 --> 00:13:51,532 line:-2
I should mention there are also
bridging headers,


202
00:13:51,565 --> 00:13:54,635 line:-1
which can also import Clang modules.


203
00:13:54,668 --> 00:13:58,005 line:-2
Finally, as a special feature
in LLDB only,


204
00:13:58.038 --> 00:14:02.476 line:-2 align:center
some module contents can be reconstructed
from debug info alone.


205
00:14:02,509 --> 00:14:04,077 line:-1
That's a lot of sources!


206
00:14:04,111 --> 00:14:05,879 line:-1
How does LLDB find them all?


207
00:14:07.514 --> 00:14:12.586 line:-2 align:center
It's the build system's job to package up
the modules so LLDB can find them.


208
00:14:12,619 --> 00:14:16,657 line:-2
Modules from system frameworks
stay in the SDK.


209
00:14:16.690 --> 00:14:22.563 line:-2 align:center
LLDB will find a matching SDK to read them
from as it's attaching to your program.


210
00:14:22.596 --> 00:14:25.265 line:-2 align:center
When debugging
straight from the object files,


211
00:14:25.299 --> 00:14:29.703 line:-2 align:center
LLDB will find all non-SDK modules
where they were at build time.


212
00:14:29.736 --> 00:14:33.707 line:-2 align:center
Dsymutil can package a debug info archive
called a .DSYM bundle


213
00:14:33.740 --> 00:14:38.612 line:-2 align:center
for every dynamic library,
framework or dylib, and executable.


214
00:14:40.013 --> 00:14:43.483 line:-2 align:center
Each .dSYM bundle can contain
binary Swift modules,


215
00:14:43.517 --> 00:14:45.686 line:-1 align:center
which may contain bridging headers,


216
00:14:45.719 --> 00:14:47.788 line:-1 align:center
textual Swift interface files,


217
00:14:47.821 --> 00:14:49.923 line:-1 align:center
and most importantly, debug info.


218
00:14:49.957 --> 00:14:51.892 line:-1 align:center
That covers everything.


219
00:14:51,925 --> 00:14:53,527 line:-1
Everything?


220
00:14:53.560 --> 00:14:57.497 line:-2 align:center
Everything except Swift modules
that belong to static archives.


221
00:14:59,032 --> 00:15:02,202 line:-2
In order for a Swift module
to be picked up by dsymutil,


222
00:15:02.236 --> 00:15:05.005 line:-1 align:center
it needs to be registered with the linker.


223
00:15:05,038 --> 00:15:07,207 line:-1
For dynamic libraries and executables,


224
00:15:07.241 --> 00:15:10.444 line:-2 align:center
the build system will do this
automatically for you.


225
00:15:10.477 --> 00:15:14.014 line:-2 align:center
But static archives are
not produced by the linker,


226
00:15:14,047 --> 00:15:18,385 line:-2
they are just collections of object files,
like a zip file.


227
00:15:18.418 --> 00:15:22.489 line:-2 align:center
That means that the responsibility
for registering any Swift modules


228
00:15:22,523 --> 00:15:25,559 line:-2
with the linker
falls onto every executable


229
00:15:25,592 --> 00:15:29,763 line:-2
or dynamic library
that links the static archive.


230
00:15:29,796 --> 00:15:34,168 line:-2
In many cases, Xcode's build system
will do this for you.


231
00:15:34.201 --> 00:15:37.037 line:-2 align:center
But if you are maintaining
your own custom build system,


232
00:15:37.070 --> 00:15:40.274 line:-1 align:center
or if you have defined custom build rules,


233
00:15:40,307 --> 00:15:42,309 line:-1
this is something to be aware of.


234
00:15:44.478 --> 00:15:46.580 line:-1 align:center
When using the Apple linker,


235
00:15:46,613 --> 00:15:52,352 line:-2
Swift modules need to be registered
with the -add-ast-path option.


236
00:15:52,386 --> 00:15:57,124 line:-2
Check your build log to verify
that this is the case.


237
00:15:57,157 --> 00:16:01,662 line:-2
You can also use dsymutil to dump
the symbol table of your executable


238
00:16:01.695 --> 00:16:05.132 line:-2 align:center
and grep for "swiftmodule"
to verify that it worked.


239
00:16:08,202 --> 00:16:10,404 line:-1
On other platforms like Linux,


240
00:16:10.437 --> 00:16:13.507 line:-2 align:center
the swift driver supports
a -modulewrap action


241
00:16:13,540 --> 00:16:16,677 line:-2
that converts binary Swift module files
into objects


242
00:16:16,710 --> 00:16:20,848 line:-2
that you can link into your binary
together with the rest of the debug info.


243
00:16:20.881 --> 00:16:23.617 line:-1 align:center
LLDB will find it there.


244
00:16:23.650 --> 00:16:27.054 line:-2 align:center
The developers of the framework
were incredibly responsive.


245
00:16:27.087 --> 00:16:31.692 line:-2 align:center
As we suspected, it turns out that
as a part of the framework's build system


246
00:16:31.725 --> 00:16:33.594 line:-1 align:center
a static archive is used.


247
00:16:33.627 --> 00:16:36.830 line:-2 align:center
And it was the Swift module
that belongs to that static archive


248
00:16:36,864 --> 00:16:38,866 line:-1
that was missing from the dSYM bundle.


249
00:16:38,899 --> 00:16:41,835 line:-2
I have now installed a fixed version
of the framework.


250
00:16:41.869 --> 00:16:45.205 line:-2 align:center
It has registered the missing
static module with the linker


251
00:16:45,239 --> 00:16:47,941 line:-1
and so dsymutil was able to collect it.


252
00:16:49,543 --> 00:16:52,012 line:-1
Now self can be resolved.


253
00:16:54,815 --> 00:16:58,118 line:-2
And we can print the object description
of "words".


254
00:17:01,755 --> 00:17:04,958 line:-2
Since we're using the console anyway,
I'm using the s alias


255
00:17:04.992 --> 00:17:07.728 line:-1 align:center
to step into the parseFrom function.


256
00:17:12,399 --> 00:17:14,401 line:-1
And now we can also easily find the bug,


257
00:17:14.434 --> 00:17:16.737 line:-1 align:center
which is just a copy-and-paste error here.


258
00:17:26,780 --> 00:17:33,787 line:-1
[typing sounds]


259
00:17:44.865 --> 00:17:49.036 line:-2 align:center
And with that, we not only solved
the puzzle of the missing Swift module,


260
00:17:49,069 --> 00:17:51,505 line:-1
but also the first puzzle of the game.


261
00:17:53,173 --> 00:17:57,511 line:-2
Before we wrap up,
I have one more detail to watch out for.


262
00:17:57.544 --> 00:18:00.981 line:-2 align:center
The Swift compiler will serialize
Clang header search paths


263
00:18:01.014 --> 00:18:04.852 line:-2 align:center
and other related options into
the binary .swiftmodule files.


264
00:18:04,885 --> 00:18:08,589 line:-2
This is great because it makes
importing their Clang module dependencies


265
00:18:08,622 --> 00:18:11,425 line:-1
just work during the build.


266
00:18:11,458 --> 00:18:16,330 line:-2
But when building on a different machine,
these local paths can be detrimental.


267
00:18:16.363 --> 00:18:20.567 line:-2 align:center
So before shipping a binary .swiftmodule
to another machine,


268
00:18:20.601 --> 00:18:22.035 line:-1 align:center
consider building with the


269
00:18:22.069 --> 00:18:25.706 line:-2 align:center
-no-serialize-debugging-options
Compiler flag.


270
00:18:25.739 --> 00:18:27.741 line:-1 align:center
In Xcode this is controlled via the


271
00:18:27,774 --> 00:18:30,644 line:-2
SWIFT_SERIALIZE_DEBUGGING_OPTIONS
setting.


272
00:18:32,045 --> 00:18:38,252 line:-2
You can reintroduce these search paths in
LLDB with one of the following settings.


273
00:18:38.285 --> 00:18:40.120 line:-1 align:center
Let's recap what we learned.


274
00:18:40,153 --> 00:18:43,190 line:-2
If you want to ship code
from one machine to another,


275
00:18:43.223 --> 00:18:47.361 line:-2 align:center
you should ask yourself what level of
debugging you expect to be doing.


276
00:18:47,394 --> 00:18:51,565 line:-2
For example, if you ship
a binary framework to another developer


277
00:18:51,598 --> 00:18:55,402 line:-2
and you don't expect them
to step into your code in the debugger,


278
00:18:55,435 --> 00:18:59,873 line:-2
it's best to just ship the Swift module
as a textual .swiftinterface file.


279
00:18:59.907 --> 00:19:03.877 line:-2 align:center
But if you are setting up a build server
or a continuous integration system,


280
00:19:03.911 --> 00:19:08.582 line:-2 align:center
where developers are expected to debug
the downloaded build artifacts,


281
00:19:08.615 --> 00:19:11.485 line:-2 align:center
you will want to make sure to build
a binary Swift module


282
00:19:11,518 --> 00:19:15,022 line:-2
and consider turning off
search path serialization.


283
00:19:15,055 --> 00:19:18,292 line:-2
You can also canonicalize the source paths
on the server


284
00:19:18.325 --> 00:19:21.895 line:-2 align:center
in the debug info
using the -debug-prefix-map option.


285
00:19:21,929 --> 00:19:24,331 line:-1
That's all I have for you.


286
00:19:24,364 --> 00:19:30,003 line:-2
Today we learned about LLDB's dual nature
as a debugger and a compiler.


287
00:19:30.037 --> 00:19:34.441 line:-2 align:center
The debugger needs debug info
and reflection metadata to function


288
00:19:34,474 --> 00:19:38,912 line:-2
and provides the Xcode variable view,
and the v command.


289
00:19:38,946 --> 00:19:43,517 line:-2
The compiler needs Modules
and is sensitive to search paths.


290
00:19:43,550 --> 00:19:47,654 line:-1
It's behind the expr, p, and po commands.


291
00:19:47,688 --> 00:19:50,057 line:-2
A good way to get at
the compiler diagnostics


292
00:19:50,090 --> 00:19:54,695 line:-2
is the new swift-healthcheck command
in LLDB.


293
00:19:54,728 --> 00:19:56,430 line:-1
Thank you for watching!  ♪ ♪

