2
00:00:00.000 --> 00:00:03.403 line:-1 position:50%
♪ Mellow instrumental
hip-hop music ♪


3
00:00:03,403 --> 00:00:09,476 size:2% align:right position:90%
♪


4
00:00:09.476 --> 00:00:11.111 line:-1 position:50%
Kevin Ferrell: Hi,
my name is Kevin,


5
00:00:11.111 --> 00:00:14.348 line:-1 position:50%
and I'm an engineer working on
the new PushToTalk framework,


6
00:00:14,348 --> 00:00:16,950 line:-1
which enables a walkie-talkie
system experience


7
00:00:16,950 --> 00:00:19,052 line:-1
for apps on iOS.


8
00:00:19.052 --> 00:00:21.188 line:-1 position:50%
Later I'll be joined
by my colleague Trevor


9
00:00:21.188 --> 00:00:24.057 line:-1 position:50%
to talk about how you can
enhance voice communication


10
00:00:24.057 --> 00:00:27.261 line:-1 position:50%
in your apps
with this new framework.


11
00:00:27.261 --> 00:00:29.496 line:-1 position:50%
First, I'll introduce
the PushToTalk framework


12
00:00:29,496 --> 00:00:32,432 line:-1
and explain how it fits
into your app.


13
00:00:32.432 --> 00:00:34.935 line:-1 position:50%
Next, we'll go over
how to configure your app


14
00:00:34.935 --> 00:00:37.237 line:-1 position:50%
for PushToTalk.


15
00:00:37.237 --> 00:00:38.972 line:-1 position:50%
After that,
Trevor will walk through


16
00:00:38.972 --> 00:00:43.010 line:-1 position:50%
how to transmit and receive
audio using the framework.


17
00:00:43.010 --> 00:00:46.013 line:-1 position:50%
Finally, Trevor will wrap up
with best practices


18
00:00:46,013 --> 00:00:48,582 line:-1
for enhancing
the Push To Talk user experience


19
00:00:48.582 --> 00:00:52.486 line:-1 position:50%
while preserving battery life
for your users.


20
00:00:52,486 --> 00:00:54,588 line:-1
I'll get started
by introducing key features


21
00:00:54,588 --> 00:00:57,457 line:-1
of the new PushToTalk framework.


22
00:00:57.457 --> 00:00:59.693 line:-1 position:50%
The PushToTalk framework
enables you to build


23
00:00:59.693 --> 00:01:03.196 line:-1 position:50%
a new class of audio
communication app on iOS


24
00:01:03.196 --> 00:01:07.768 line:-1 position:50%
that provides a walkie-talkie
style experience for your users.


25
00:01:07.768 --> 00:01:09.603 line:-1 position:50%
Push To Talk apps have many uses


26
00:01:09.603 --> 00:01:12.739 line:-1 position:50%
in fields where rapid
communication is essential


27
00:01:12.739 --> 00:01:15.976 line:-1 position:50%
such as health care
and emergency services.


28
00:01:15,976 --> 00:01:18,412 line:-1
To provide a great
Push To Talk experience,


29
00:01:18.412 --> 00:01:20.347 line:-1 position:50%
users need a way
to quickly access


30
00:01:20,347 --> 00:01:23,784 line:-1
audio transmission features
while also being able to see


31
00:01:23.784 --> 00:01:26.186 line:-1 position:50%
who is responding to them.


32
00:01:26,186 --> 00:01:28,221 line:-1
At the same time,
a Push To Talk app


33
00:01:28.221 --> 00:01:30.824 line:-1 position:50%
must be power efficient
to ensure that users


34
00:01:30.824 --> 00:01:35.195 line:-1 position:50%
can maintain all-day battery
life while using the app.


35
00:01:35.195 --> 00:01:38.098 line:-1 position:50%
The PushToTalk framework
provides you with APIs


36
00:01:38.098 --> 00:01:39.833 line:-1 position:50%
to utilize a system UI


37
00:01:39,833 --> 00:01:42,436 line:-1
that users can access
anywhere on the system


38
00:01:42,436 --> 00:01:45,572 line:-1
without having to directly
launch your app.


39
00:01:45,572 --> 00:01:48,508 line:-1
The system UI allows a user
to quickly activate


40
00:01:48.508 --> 00:01:51.111 line:-1 position:50%
an audio transmission,
which will launch your app


41
00:01:51,111 --> 00:01:55,615 line:-1
in the background to record
and stream audio to your server.


42
00:01:55.615 --> 00:01:58.251 line:-1 position:50%
The system provides transparency
to users


43
00:01:58.251 --> 00:01:59.586 line:-1 position:50%
by showing who's speaking


44
00:01:59.586 --> 00:02:02.522 line:-1 position:50%
when your app plays audio
from your server.


45
00:02:02.522 --> 00:02:04.624 line:-1 position:50%
The PushToTalk framework
accomplishes this


46
00:02:04,624 --> 00:02:07,627 line:-1
by introducing
a new push notification type


47
00:02:07,627 --> 00:02:11,965 line:-1
that notifies your app when new
audio is available for playback.


48
00:02:11.965 --> 00:02:14.368 line:-1 position:50%
When your app receives
this notification,


49
00:02:14.368 --> 00:02:15.902 line:-1 position:50%
it is launched in the background


50
00:02:15.902 --> 00:02:19.272 line:-1 position:50%
so that it can stream
and play audio.


51
00:02:19,272 --> 00:02:22,075 line:-1
The PushToTalk framework
is designed to be compatible


52
00:02:22,075 --> 00:02:25,012 line:-1
with existing end-to-end
communication solutions


53
00:02:25,012 --> 00:02:27,147 line:-1
and backend infrastructure.


54
00:02:27,147 --> 00:02:28,648 line:-1
If you've already implemented


55
00:02:28,648 --> 00:02:30,851 line:-1
a Push To Talk workflow
in your app,


56
00:02:30,851 --> 00:02:32,386 line:-1
it should be easy for you
to integrate


57
00:02:32.386 --> 00:02:36.590 line:-1 position:50%
the PushToTalk framework
into your existing code.


58
00:02:36.590 --> 00:02:38.525 line:-1 position:50%
The framework allows
your app to implement


59
00:02:38.525 --> 00:02:41.261 line:-1 position:50%
its own audio encoding
and streaming process


60
00:02:41.261 --> 00:02:43.897 line:-1 position:50%
to transmit audio between users.


61
00:02:43.897 --> 00:02:46.400 line:-1 position:50%
This provides flexibility
in how audio transmission


62
00:02:46.400 --> 00:02:49.536 line:-1 position:50%
is handled by your app
and enables compatibility


63
00:02:49,536 --> 00:02:51,905 line:-1
with other platforms.


64
00:02:51,905 --> 00:02:53,907 line:-1
Finally, many Push To Talk apps


65
00:02:53,907 --> 00:02:56,043 line:-1
rely on wireless
Bluetooth accessories


66
00:02:56,043 --> 00:02:59,146 line:-1
to trigger audio recording
and transmission.


67
00:02:59.146 --> 00:03:02.015 line:-1 position:50%
Your apps can continue to
integrate with these accessories


68
00:03:02.015 --> 00:03:04.151 line:-1 position:50%
using the CoreBluetooth
framework


69
00:03:04,151 --> 00:03:07,654 line:-1
and can trigger audio recording
in PushToTalk.


70
00:03:07.654 --> 00:03:10.123 line:-1 position:50%
If you are building your first
Push To Talk app,


71
00:03:10.123 --> 00:03:12.426 line:-1 position:50%
keep these integration
considerations in mind


72
00:03:12,426 --> 00:03:15,262 line:-1
as you begin architecting
your code.


73
00:03:15,262 --> 00:03:17,164 line:-1
Before we begin
walking through the code


74
00:03:17.164 --> 00:03:18.999 line:-1 position:50%
for the new
PushToTalk framework,


75
00:03:18.999 --> 00:03:21.435 line:-1 position:50%
we want to demonstrate
how the Push To Talk experience


76
00:03:21.435 --> 00:03:24.771 line:-1 position:50%
can work in your app.


77
00:03:24,771 --> 00:03:26,239 line:-1
Trevor and I have built
a demo app


78
00:03:26.239 --> 00:03:28.508 line:-1 position:50%
to show how PushToTalk works.


79
00:03:28,508 --> 00:03:30,343 line:-1
To start,
I'll tap the join button


80
00:03:30,343 --> 00:03:32,179 line:-1
to connect to
a Push To Talk session,


81
00:03:32.179 --> 00:03:36.316 line:-1 position:50%
which we call a channel.


82
00:03:36.316 --> 00:03:37.617 line:-1 position:50%
Once I'm joined to the channel,


83
00:03:37.617 --> 00:03:41.588 line:-1 position:50%
I can transmit and receive audio
to other members of the channel.


84
00:03:41.588 --> 00:03:42.989 line:-1 position:50%
Trevor and a few
of our colleagues


85
00:03:42,989 --> 00:03:44,658 line:-1
have joined the same channel


86
00:03:44,658 --> 00:03:47,627 line:-1
so that we can communicate
throughout the day.


87
00:03:47,627 --> 00:03:49,963 line:-1
I can transmit audio
directly from the app


88
00:03:49,963 --> 00:03:52,566 line:-1
using the microphone button,
but the PushToTalk framework


89
00:03:52.566 --> 00:03:54.868 line:-1 position:50%
allows me to access
the transmit feature


90
00:03:54.868 --> 00:03:59.072 line:-1 position:50%
from anywhere in the system.


91
00:03:59,072 --> 00:04:00,974 line:-1
When there is an active
Push To Talk channel,


92
00:04:00.974 --> 00:04:03.643 line:-1 position:50%
a blue pill will appear
in the status bar.


93
00:04:03,643 --> 00:04:08,949 line:-1
Tapping that pill
shows the system UI.


94
00:04:08.949 --> 00:04:11.918 line:-1 position:50%
The system UI displays the name
of the Push To Talk channel


95
00:04:11,918 --> 00:04:14,721 line:-1
that I've joined
and an image provided by the app


96
00:04:14,721 --> 00:04:18,892 line:-1
to help users
quickly identify the channel.


97
00:04:18.892 --> 00:04:20.560 line:-1 position:50%
I can transmit audio
to the channel


98
00:04:20.560 --> 00:04:22.729 line:-1 position:50%
by pressing and holding
the Talk button


99
00:04:22.729 --> 00:04:24.998 line:-1 position:50%
and then waiting for
the system chime to indicate


100
00:04:24,998 --> 00:04:27,267 line:-1
that I can begin speaking.


101
00:04:29,069 --> 00:04:32,072 line:-1
[CHIME]
Hey, Trevor.


102
00:04:32,072 --> 00:04:37,444 line:-1
>> Are you ready to cover
your WWDC slides? Over. <<


103
00:04:37,444 --> 00:04:39,746 line:-1
Trevor Sheridan: When my device
received Kevin's message,


104
00:04:39.746 --> 00:04:42.716 line:-1 position:50%
it displayed a notice that
contained his name and image,


105
00:04:42.716 --> 00:04:48.788 line:-1 position:50%
providing transparency into
who I'm receiving messages from.


106
00:04:48.788 --> 00:04:50.724 line:-1 position:50%
Once I launch the system UI,


107
00:04:50,724 --> 00:04:52,859 line:-1
I can quickly respond
to Kevin's message


108
00:04:52,859 --> 00:04:56,196 line:-1
or leave the channel without
having to stop what I'm doing.


109
00:04:56.196 --> 00:05:01.001 line:-1 position:50%
I don't want to leave Kevin
waiting, so I'll reply now.


110
00:05:01.001 --> 00:05:04.104 line:-1 position:50%
[CHIME] Hey, Kevin.
I'll be ready in a few minutes.


111
00:05:04.104 --> 00:05:07.240 line:-1 position:50%
>> Over. <<


112
00:05:07.240 --> 00:05:09.809 line:-1 position:50%
Kevin: The PushToTalk system UI
can also be accessed


113
00:05:09,809 --> 00:05:13,213 line:-1
from the Lock Screen so a user
can receive and respond


114
00:05:13,213 --> 00:05:16,316 line:-1
to messages without
having to unlock their device.


115
00:05:21,288 --> 00:05:27,160 line:-1
[CHIME] OK, see you soon!
Over. [CHIME]


116
00:05:27.160 --> 00:05:29.429 line:-1 position:50%
Now that we've discussed
how PushToTalk works,


117
00:05:29,429 --> 00:05:33,099 line:-1
we'll review how to integrate
the framework in your own app.


118
00:05:33.099 --> 00:05:35.335 line:-1 position:50%
There are a few modifications
that you need to make


119
00:05:35,335 --> 00:05:39,439 line:-1
to your Xcode project to support
the PushToTalk framework.


120
00:05:39.439 --> 00:05:43.176 line:-1 position:50%
First, you need to add the new
Push To Talk background mode.


121
00:05:43.176 --> 00:05:45.378 line:-1 position:50%
This enables your app
to run in the background


122
00:05:45.378 --> 00:05:48.982 line:-1 position:50%
when responding
to Push To Talk events.


123
00:05:48.982 --> 00:05:52.018 line:-1 position:50%
Next, you must also add
the Push To Talk capability


124
00:05:52.018 --> 00:05:55.689 line:-1 position:50%
to your app to enable
the framework features.


125
00:05:55.689 --> 00:05:59.292 line:-1 position:50%
The push notification capability
is required to allow APNS


126
00:05:59.292 --> 00:06:01.027 line:-1 position:50%
to wake your app
in the background


127
00:06:01.027 --> 00:06:04.097 line:-1 position:50%
to play received audio.


128
00:06:04,097 --> 00:06:06,833 line:-1
Finally, your app must request
recording permission


129
00:06:06.833 --> 00:06:10.136 line:-1 position:50%
from the user and include
a microphone purpose string


130
00:06:10,136 --> 00:06:12,973 line:-1
in its Info.plist file.


131
00:06:12.973 --> 00:06:16.076 line:-1 position:50%
Now we're ready to begin
integrating the code.


132
00:06:16.076 --> 00:06:18.211 line:-1 position:50%
The first step in
the Push To Talk workflow


133
00:06:18.211 --> 00:06:19.946 line:-1 position:50%
is to join a channel.


134
00:06:19.946 --> 00:06:21.881 line:-1 position:50%
The channel represents
and describes


135
00:06:21.881 --> 00:06:24.784 line:-1 position:50%
the Push To Talk session
to the system.


136
00:06:24.784 --> 00:06:28.388 line:-1 position:50%
Your app interacts with channels
through a channel manager.


137
00:06:28.388 --> 00:06:31.424 line:-1 position:50%
The channel manager is the
primary interface for your app


138
00:06:31,424 --> 00:06:33,860 line:-1
to join channels
and perform actions


139
00:06:33.860 --> 00:06:37.230 line:-1 position:50%
like transmitting
and receiving audio.


140
00:06:37,230 --> 00:06:39,866 line:-1
When you join a channel,
the Push To Talk system UI


141
00:06:39.866 --> 00:06:43.903 line:-1 position:50%
becomes available and your app
receives an APNS device token


142
00:06:43,903 --> 00:06:47,207 line:-1
that can be used throughout
the life of the channel.


143
00:06:47.207 --> 00:06:49.943 line:-1 position:50%
You must join a channel before
you can begin transmitting


144
00:06:49.943 --> 00:06:52.579 line:-1 position:50%
and receiving audio.


145
00:06:52,579 --> 00:06:54,881 line:-1
The first step is to create
a channel manager


146
00:06:54.881 --> 00:06:57.450 line:-1 position:50%
using the class initializer.


147
00:06:57,450 --> 00:06:59,452 line:-1
This initializer requires
that you provide


148
00:06:59.452 --> 00:07:04.057 line:-1 position:50%
a channel manager delegate and
a channel restoration delegate.


149
00:07:04.057 --> 00:07:05.992 line:-1 position:50%
Multiple calls
to the initializer


150
00:07:05.992 --> 00:07:08.795 line:-1 position:50%
result in the same shared
instance being returned,


151
00:07:08,795 --> 00:07:11,131 line:-1
but we recommend that
you store the channel manager


152
00:07:11.131 --> 00:07:13.233 line:-1 position:50%
in an instance variable.


153
00:07:13.233 --> 00:07:15.635 line:-1 position:50%
It is important to initialize
your channel manager


154
00:07:15.635 --> 00:07:17.871 line:-1 position:50%
as soon as possible
during app start up


155
00:07:17.871 --> 00:07:19.572 line:-1 position:50%
in your ApplicationDelegate's


156
00:07:19,572 --> 00:07:22,776 line:-1
didFinishLaunchingWithOptions
method.


157
00:07:22.776 --> 00:07:26.212 line:-1 position:50%
This ensures that the channel
manager is initialized quickly


158
00:07:26,212 --> 00:07:28,415 line:-1
so that existing channels
can be restored


159
00:07:28.415 --> 00:07:30.750 line:-1 position:50%
and push notifications
will be delivered to your app


160
00:07:30,750 --> 00:07:33,653 line:-1
when it launches
in the background.


161
00:07:33.653 --> 00:07:35.722 line:-1 position:50%
Now we're ready
to join a channel.


162
00:07:35,722 --> 00:07:37,557 line:-1
When someone joins
a channel from your app,


163
00:07:37.557 --> 00:07:40.527 line:-1 position:50%
you must provide a UUID
to identify the channel


164
00:07:40,527 --> 00:07:44,297 line:-1
and a descriptor that describes
the channel to the system.


165
00:07:44.297 --> 00:07:47.701 line:-1 position:50%
The same UUID will be used when
interacting with the manager


166
00:07:47,701 --> 00:07:50,103 line:-1
throughout the life
of this channel.


167
00:07:50,103 --> 00:07:53,340 line:-1
The descriptor includes
a name and an image.


168
00:07:53,340 --> 00:07:56,142 line:-1
Providing a unique image
to represent the channel


169
00:07:56,142 --> 00:07:58,878 line:-1
makes it easier for your users
to identify the channel


170
00:07:58,878 --> 00:08:01,614 line:-1
when interacting
with the system.


171
00:08:01.614 --> 00:08:04.818 line:-1 position:50%
Your app joins a channel by
calling the requestJoin method


172
00:08:04.818 --> 00:08:06.720 line:-1 position:50%
on the channel manager.


173
00:08:06.720 --> 00:08:09.022 line:-1 position:50%
Note that it is only possible
to join a channel


174
00:08:09,022 --> 00:08:12,125 line:-1
when your app is running
in the foreground.


175
00:08:12.125 --> 00:08:15.028 line:-1 position:50%
When your app joins a channel,
the channel manager delegate's


176
00:08:15.028 --> 00:08:18.198 line:-1 position:50%
didJoinChannel method
will be called.


177
00:08:18.198 --> 00:08:20.367 line:-1 position:50%
This delegate method
is your indication


178
00:08:20.367 --> 00:08:23.069 line:-1 position:50%
that your app
has joined the channel.


179
00:08:23,069 --> 00:08:24,471 line:-1
In addition,
the delegate's


180
00:08:24.471 --> 00:08:27.607 line:-1 position:50%
receivedEphemeralPushToken
method will be called


181
00:08:27.607 --> 00:08:30.276 line:-1 position:50%
with the APNS push token
that can be used


182
00:08:30.276 --> 00:08:34.180 line:-1 position:50%
to send Push To Talk
notifications to this device.


183
00:08:34,180 --> 00:08:35,849 line:-1
This token will only be active


184
00:08:35,849 --> 00:08:38,685 line:-1
for the life of
the Push To Talk channel.


185
00:08:38,685 --> 00:08:41,888 line:-1
Keep in mind that APNS
push tokens are variable length


186
00:08:41,888 --> 00:08:45,859 line:-1
and that you should not hardcode
their length into your app.


187
00:08:45.859 --> 00:08:49.129 line:-1 position:50%
It is possible for the
channel join request to fail,


188
00:08:49.129 --> 00:08:51.030 line:-1 position:50%
such as when attempting
to join a channel


189
00:08:51.030 --> 00:08:53.833 line:-1 position:50%
when another channel
is already active.


190
00:08:53.833 --> 00:08:56.636 line:-1 position:50%
If this occurs,
the error handler will be called


191
00:08:56,636 --> 00:09:00,373 line:-1
and the error will indicate
the reason for the failure.


192
00:09:00,373 --> 00:09:01,941 line:-1
When the user leaves a channel,


193
00:09:01,941 --> 00:09:04,944 line:-1
the delegate's didLeaveChannel
method will be called.


194
00:09:04,944 --> 00:09:07,313 line:-1
Your user may leave the channel
as a result of either


195
00:09:07,313 --> 00:09:10,250 line:-1
your app requesting to leave
programmatically


196
00:09:10,250 --> 00:09:12,552 line:-1
or the user can tap
the Leave Channel button


197
00:09:12.552 --> 00:09:14.320 line:-1 position:50%
in the system UI.


198
00:09:14.320 --> 00:09:16.656 line:-1 position:50%
The channel manager delegate
has an associated


199
00:09:16.656 --> 00:09:19.626 line:-1 position:50%
LeaveChannel error-handling
method that will be called


200
00:09:19,626 --> 00:09:23,229 line:-1
if the request to leave
the channel fails.


201
00:09:23,229 --> 00:09:25,632 line:-1
PushToTalk supports
restoring previous channels


202
00:09:25,632 --> 00:09:28,201 line:-1
whenever your app is relaunched
after being terminated


203
00:09:28.201 --> 00:09:30.770 line:-1 position:50%
or after a device reboot.


204
00:09:30.770 --> 00:09:33.006 line:-1 position:50%
In order for the system
to accomplish this,


205
00:09:33.006 --> 00:09:37.076 line:-1 position:50%
you must provide a channel
descriptor to update the system.


206
00:09:37.076 --> 00:09:39.145 line:-1 position:50%
Here we have a helper method
that will fetch


207
00:09:39.145 --> 00:09:43.516 line:-1 position:50%
our cached channel descriptor
in our restoration delegate.


208
00:09:43,516 --> 00:09:45,852 line:-1
In order to keep the system
responsive,


209
00:09:45.852 --> 00:09:48.721 line:-1 position:50%
you should return from this
method as quickly as possible


210
00:09:48,721 --> 00:09:51,891 line:-1
and should not perform any
long-running or blocking tasks


211
00:09:51,891 --> 00:09:53,359 line:-1
such as a network request


212
00:09:53.359 --> 00:09:56.229 line:-1 position:50%
to retrieve
your channel descriptor.


213
00:09:56.229 --> 00:09:59.165 line:-1 position:50%
Throughout the lifecycle
of your Push To Talk session,


214
00:09:59,165 --> 00:10:01,067 line:-1
you should provide updates
to the descriptor


215
00:10:01.067 --> 00:10:04.904 line:-1 position:50%
whenever information
about the channel changes.


216
00:10:04,904 --> 00:10:06,973 line:-1
You should also inform
the system about changes


217
00:10:06,973 --> 00:10:09,576 line:-1
to your network connection
or server availability


218
00:10:09.576 --> 00:10:12.312 line:-1 position:50%
using the service status object.


219
00:10:12.312 --> 00:10:15.548 line:-1 position:50%
Here we're updating
the descriptor for the channel.


220
00:10:15,548 --> 00:10:16,716 line:-1
You can call this method


221
00:10:16.716 --> 00:10:20.653 line:-1 position:50%
whenever you need to update
the channel name or image.


222
00:10:20.653 --> 00:10:22.856 line:-1 position:50%
In this example,
we are providing an update


223
00:10:22,856 --> 00:10:25,258 line:-1
to the system to indicate
that the app's connection


224
00:10:25,258 --> 00:10:28,461 line:-1
to its sever is in
a reconnecting state.


225
00:10:28.461 --> 00:10:30.730 line:-1 position:50%
This updates
the system UI accordingly


226
00:10:30,730 --> 00:10:32,832 line:-1
and prevents the user
from transmitting audio


227
00:10:32,832 --> 00:10:37,103 line:-1
if the service status is
connecting or disconnected.


228
00:10:37.103 --> 00:10:38.938 line:-1 position:50%
Once a connection
is reestablished,


229
00:10:38.938 --> 00:10:42.242 line:-1 position:50%
you should update
the service status to "ready."


230
00:10:42.242 --> 00:10:44.844 line:-1 position:50%
Now let's review
how to send and receive audio


231
00:10:44,844 --> 00:10:46,779 line:-1
using PushToTalk.


232
00:10:46.779 --> 00:10:49.582 line:-1 position:50%
[CHIME] Trevor, are you ready
to walk through


233
00:10:49,582 --> 00:10:51,451 line:-1
the rest of the API?


234
00:10:51.451 --> 00:10:52.652 line:-1 position:50%
>> Over. <<


235
00:10:55.088 --> 00:10:59.325 line:-1 position:50%
[CHIME] Trevor: Yep.
Send them over. Over.


236
00:10:59.325 --> 00:11:00.326 line:-1 position:50%
[CHIME]


237
00:11:01,861 --> 00:11:03,463 line:-1
Now that we've seen
how to configure


238
00:11:03.463 --> 00:11:05.098 line:-1 position:50%
the PushToTalk framework,


239
00:11:05.098 --> 00:11:09.669 line:-1 position:50%
let's explore how to transmit
and receive audio.


240
00:11:09,669 --> 00:11:12,171 line:-1
A core capability
of the PushToTalk framework


241
00:11:12.171 --> 00:11:16.209 line:-1 position:50%
is to allow your users
to quickly transmit audio.


242
00:11:16.209 --> 00:11:18.044 line:-1 position:50%
Users can begin
audio transmission


243
00:11:18.044 --> 00:11:19.579 line:-1 position:50%
from within your app,


244
00:11:19.579 --> 00:11:22.615 line:-1 position:50%
or from the system
Push To Talk UI.


245
00:11:22,615 --> 00:11:25,151 line:-1
If your app supports
Bluetooth accessories


246
00:11:25.151 --> 00:11:26.753 line:-1 position:50%
through CoreBluetooth,


247
00:11:26.753 --> 00:11:29.656 line:-1 position:50%
you can also begin transmission
in the background


248
00:11:29,656 --> 00:11:33,927 line:-1
in response to a peripheral's
characteristic change.


249
00:11:33,927 --> 00:11:36,663 line:-1
When transmitting,
the PushToTalk framework


250
00:11:36,663 --> 00:11:39,032 line:-1
unlocks the device's microphone


251
00:11:39.032 --> 00:11:41.668 line:-1 position:50%
and activates
your app's audio session


252
00:11:41,668 --> 00:11:44,771 line:-1
to enable audio recording
in the background.


253
00:11:44.771 --> 00:11:48.107 line:-1 position:50%
Let's review this process
in detail.


254
00:11:48.107 --> 00:11:51.311 line:-1 position:50%
To begin transmission from
within your app, you can call


255
00:11:51.311 --> 00:11:54.814 line:-1 position:50%
the requestBeginTransmitting
function.


256
00:11:54,814 --> 00:11:57,951 line:-1
This can be called whenever your
app is running in the foreground


257
00:11:57.951 --> 00:11:59.719 line:-1 position:50%
or when reacting
to a change


258
00:11:59,719 --> 00:12:03,489 line:-1
of a Bluetooth peripheral's
characteristic.


259
00:12:03,489 --> 00:12:06,426 line:-1
If the system is not able
to begin transmitting,


260
00:12:06.426 --> 00:12:07.660 line:-1 position:50%
the delegate's


261
00:12:07.660 --> 00:12:11.197 line:-1 position:50%
failedToBeginTransmitting
InChannel method will be called


262
00:12:11.197 --> 00:12:13.466 line:-1 position:50%
with the reason
for the failure.


263
00:12:13.466 --> 00:12:17.737 line:-1 position:50%
For example, if the user has
an ongoing cellular call active,


264
00:12:17,737 --> 00:12:22,408 line:-1
they will not be able to begin
a Push To Talk transmission.


265
00:12:22.408 --> 00:12:23.943 line:-1 position:50%
To stop transmitting,


266
00:12:23.943 --> 00:12:28.247 line:-1 position:50%
call the channel manager's
stopTransmitting method.


267
00:12:28,247 --> 00:12:31,784 position:50%
To handle failures when
attempting to stop transmitting,


268
00:12:31,784 --> 00:12:34,887 line:0
such as when the user
was not in a transmitting state,


269
00:12:34,887 --> 00:12:37,757 position:50%
the channel manager delegate
has an associated


270
00:12:37,757 --> 00:12:41,527 line:0
failedToStopTransmitting
InChannel method.


271
00:12:41,527 --> 00:12:44,897 line:-1
Whether you begin transmission
from within your app


272
00:12:44.897 --> 00:12:48.067 line:-1 position:50%
or if the user starts
from the system UI,


273
00:12:48.067 --> 00:12:50.470 line:-1 position:50%
your channel manager delegate
will receive


274
00:12:50.470 --> 00:12:53.673 line:-1 position:50%
a "Did begin transmitting"
callback.


275
00:12:53,673 --> 00:12:56,576 line:-1
The transmission source
will be passed to the method


276
00:12:56,576 --> 00:12:58,544 line:-1
and indicate whether
the transmission


277
00:12:58.544 --> 00:13:00.346 line:-1 position:50%
was started
from the system UI,


278
00:13:00,346 --> 00:13:04,684 line:-1
the programmatic API,
or a hardware button event.


279
00:13:04,684 --> 00:13:06,486 line:-1
Once transmission begins,


280
00:13:06.486 --> 00:13:10.123 line:-1 position:50%
the system will activate
the audio session for your app.


281
00:13:10,123 --> 00:13:13,660 line:-1
This is your signal that
you can now begin recording.


282
00:13:13.660 --> 00:13:19.432 line:-1 position:50%
You should not start or stop
your own audio session.


283
00:13:19,432 --> 00:13:23,102 line:-1
When transmission ends,
your channel manager delegate


284
00:13:23.102 --> 00:13:25.171 line:-1 position:50%
will receive
the end transmission


285
00:13:25,171 --> 00:13:29,108 line:-1
and audio session
deactivation events.


286
00:13:29,108 --> 00:13:32,311 line:-1
Keep in mind that while
your transmission is active,


287
00:13:32.311 --> 00:13:36.015 line:-1 position:50%
your audio session may be
interrupted by other sources,


288
00:13:36.015 --> 00:13:38.851 line:-1 position:50%
such as phone
and FaceTime calls


289
00:13:38,851 --> 00:13:42,455 line:-1
for which you need to handle
within your app.


290
00:13:42.455 --> 00:13:45.224 line:-1 position:50%
The PushToTalk framework
also allows your app


291
00:13:45,224 --> 00:13:48,061 line:-1
to receive and play audio
from other users


292
00:13:48.061 --> 00:13:49.962 line:-1 position:50%
while in the background.


293
00:13:49.962 --> 00:13:53.766 line:-1 position:50%
This process relies on a new
Apple Push Notification type


294
00:13:53,766 --> 00:13:56,936 line:-1
that is specific
to Push To Talk apps.


295
00:13:56.936 --> 00:13:59.739 line:-1 position:50%
When your Push To Talk server
has new audio


296
00:13:59,739 --> 00:14:02,642 line:-1
for a user to receive,
it should send the user


297
00:14:02.642 --> 00:14:06.446 line:-1 position:50%
a Push To Talk notification
using the device push token


298
00:14:06,446 --> 00:14:09,582 line:-1
you received
when joining the channel.


299
00:14:09.582 --> 00:14:12.952 line:-1 position:50%
When the push notification
is received by your app,


300
00:14:12.952 --> 00:14:16.422 line:-1 position:50%
it must report an active speaker
to the framework,


301
00:14:16.422 --> 00:14:18.191 line:-1 position:50%
which will cause the system
to activate


302
00:14:18,191 --> 00:14:23,296 line:-1
your app's audio session
and allow it to begin playback.


303
00:14:23,296 --> 00:14:25,031 line:-1
The new Push To Talk
notification


304
00:14:25.031 --> 00:14:28.568 line:-1 position:50%
is similar to other
notification types on iOS


305
00:14:28,568 --> 00:14:31,437 line:-1
and there are specific
attributes that you must set


306
00:14:31.437 --> 00:14:34.941 line:-1 position:50%
to enable delivery
to your Push To Talk app.


307
00:14:34.941 --> 00:14:39.612 line:-1 position:50%
First, the APNS push type
must be set to "pushtotalk"


308
00:14:39.612 --> 00:14:41.948 line:-1 position:50%
in the request header.


309
00:14:41.948 --> 00:14:45.351 line:-1 position:50%
Next, the APNS topic header
must be set


310
00:14:45.351 --> 00:14:47.553 line:-1 position:50%
to your app's bundle identifier


311
00:14:47.553 --> 00:14:52.291 line:-1 position:50%
with a ".voip-ptt" suffix
appended to the end.


312
00:14:52,291 --> 00:14:55,128 line:-1
The push payload
can contain custom keys


313
00:14:55.128 --> 00:14:57.296 line:-1 position:50%
that are relevant to your app,


314
00:14:57.296 --> 00:14:59.398 line:-1 position:50%
such the name
of an active speaker


315
00:14:59,398 --> 00:15:02,335 line:-1
or an indication
that the session has ended


316
00:15:02,335 --> 00:15:05,538 line:-1
and the app should leave
the Push To Talk channel.


317
00:15:05,538 --> 00:15:10,009 line:-1
The body of the "aps" property
can be left blank.


318
00:15:10.009 --> 00:15:13.012 line:-1 position:50%
Additionally, like other
communication-related


319
00:15:13,012 --> 00:15:14,213 line:-1
push types,


320
00:15:14.213 --> 00:15:18.618 line:-1 position:50%
Push To Talk payloads should
have an APNS priority of 10


321
00:15:18.618 --> 00:15:20.820 line:-1 position:50%
to request immediate delivery


322
00:15:20.820 --> 00:15:25.625 line:-1 position:50%
and an APNS expiration of zero
to prevent older pushes


323
00:15:25,625 --> 00:15:29,562 line:-1
that are no longer relevant
from being delivered later.


324
00:15:29,562 --> 00:15:32,698 line:-1
When your server sends
a Push To Talk notification,


325
00:15:32,698 --> 00:15:35,134 line:-1
your app will be started
in the background


326
00:15:35.134 --> 00:15:39.172 line:-1 position:50%
and the incoming push
delegate method will be called.


327
00:15:39,172 --> 00:15:41,107 line:-1
When you receive
a push payload,


328
00:15:41,107 --> 00:15:43,943 line:-1
you will need to construct
a push result type


329
00:15:43.943 --> 00:15:46.479 line:-1 position:50%
to indicate what action
should be performed


330
00:15:46.479 --> 00:15:50.016 line:-1 position:50%
as a result
of the push notification.


331
00:15:50,016 --> 00:15:52,819 position:50%
To indicate that
a remote user is speaking,


332
00:15:52,819 --> 00:15:54,554 line:0
return a push result
that includes


333
00:15:54,554 --> 00:15:57,123 position:50%
the active participant's
information,


334
00:15:57,123 --> 00:16:01,127 line:0
including their name
and an optional image.


335
00:16:01,127 --> 00:16:02,428 position:50%
This will cause the system


336
00:16:02,428 --> 00:16:05,097 position:50%
to set the active participant
on the channel


337
00:16:05,097 --> 00:16:08,734 position:50%
and indicate that the channel
is in receive mode.


338
00:16:08.734 --> 00:16:11.571 line:-1 position:50%
The system will then activate
your audio session,


339
00:16:11.571 --> 00:16:13.906 line:-1 position:50%
and call the
didActivateaudioSession


340
00:16:13.906 --> 00:16:15.341 line:-1 position:50%
delegate method.


341
00:16:15,341 --> 00:16:17,543 line:-1
You should wait for this method
to be called


342
00:16:17.543 --> 00:16:19.846 line:-1 position:50%
before beginning playback.


343
00:16:19,846 --> 00:16:21,848 line:-1
If your server decides
that a user


344
00:16:21,848 --> 00:16:24,283 line:-1
should no longer
be joined to a channel,


345
00:16:24.283 --> 00:16:27.053 line:-1 position:50%
it may indicate this
in the push payload,


346
00:16:27,053 --> 00:16:31,557 line:-1
for which you can return
a leaveChannel push result.


347
00:16:31.557 --> 00:16:33.593 line:-1 position:50%
It's important to note
that you should return


348
00:16:33,593 --> 00:16:36,028 line:-1
a PTPushResult from this method
as quickly as possible


349
00:16:36.028 --> 00:16:40.433 line:-1 position:50%
and not block the thread.


350
00:16:40,433 --> 00:16:43,202 line:-1
If you are attempting to set
the active remote participant


351
00:16:43.202 --> 00:16:45.872 line:-1 position:50%
and do not have their image
stored locally,


352
00:16:45.872 --> 00:16:48.608 line:-1 position:50%
you can return
an activeRemoteParticipant


353
00:16:48.608 --> 00:16:50.910 line:-1 position:50%
with only the speaker's name.


354
00:16:50,910 --> 00:16:53,746 line:-1
Then download their image
on a separate thread,


355
00:16:53.746 --> 00:16:55.781 line:-1 position:50%
and once the image is retrieved,


356
00:16:55.781 --> 00:16:57.950 line:-1 position:50%
update the
activeRemoteParticipant


357
00:16:57,950 --> 00:17:00,786 line:-1
by calling
setActiveRemoteParticipant


358
00:17:00,786 --> 00:17:03,322 line:-1
on the channel manager.


359
00:17:03.322 --> 00:17:05.725 line:-1 position:50%
When the remote participant
has finished speaking,


360
00:17:05.725 --> 00:17:08.694 line:-1 position:50%
you should set the
activeRemoteParticipant to nil.


361
00:17:08.694 --> 00:17:11.664 line:-1 position:50%
This indicates to the system
that you are no longer


362
00:17:11,664 --> 00:17:13,766 line:-1
receiving audio
on the channel


363
00:17:13,766 --> 00:17:17,770 line:-1
and that the system should
deactivate your audio session.


364
00:17:17,770 --> 00:17:20,940 line:-1
This will also update
the system Push To Talk UI


365
00:17:20,940 --> 00:17:24,277 line:-1
and allow the user
to transmit again.


366
00:17:24,277 --> 00:17:25,711 line:-1
Now that we've covered
the basics


367
00:17:25,711 --> 00:17:28,781 line:-1
of how to integrate PushToTalk
into your app,


368
00:17:28.781 --> 00:17:30.783 line:-1 position:50%
let's review some best practices


369
00:17:30,783 --> 00:17:32,818 line:-1
for optimizing
the user experience


370
00:17:32.818 --> 00:17:35.488 line:-1 position:50%
and preserving battery life.


371
00:17:37.290 --> 00:17:39.992 line:-1 position:50%
The PushToTalk framework
provides a system UI


372
00:17:39.992 --> 00:17:42.395 line:-1 position:50%
for users to begin
a transmission


373
00:17:42,395 --> 00:17:46,065 line:-1
and leave a channel from
anywhere within the system.


374
00:17:46.065 --> 00:17:50.002 line:-1 position:50%
Additionally, it is flexible
and allows you to implement


375
00:17:50,002 --> 00:17:52,672 line:-1
your own custom
Push To Talk UI


376
00:17:52.672 --> 00:17:56.142 line:-1 position:50%
when your app
is in the foreground.


377
00:17:56.142 --> 00:17:57.343 line:-1 position:50%
The PushToTalk framework


378
00:17:57,343 --> 00:18:00,146 line:-1
utilizes shared system
resources.


379
00:18:00.146 --> 00:18:02.548 line:-1 position:50%
Only one Push To Talk app
can be active


380
00:18:02,548 --> 00:18:04,383 line:-1
on the system at a time,


381
00:18:04.383 --> 00:18:07.620 line:-1 position:50%
and Push To Talk communication
will be superseded


382
00:18:07.620 --> 00:18:11.757 line:-1 position:50%
by cellular, FaceTime,
and VoIP calls.


383
00:18:11.757 --> 00:18:14.460 line:-1 position:50%
Your app should handle
PushToTalk failures gracefully


384
00:18:14.460 --> 00:18:18.831 line:-1 position:50%
and respond accordingly.


385
00:18:18,831 --> 00:18:21,200 line:-1
As mentioned earlier,
the PushToTalk framework


386
00:18:21.200 --> 00:18:23.336 line:-1 position:50%
handles activating
and deactivating


387
00:18:23.336 --> 00:18:25.638 line:-1 position:50%
your audio session for you.


388
00:18:25.638 --> 00:18:27.707 line:-1 position:50%
However,
you should still configure


389
00:18:27,707 --> 00:18:30,943 line:-1
your audio session's category
to play and record


390
00:18:30,943 --> 00:18:33,980 line:-1
when your app launches.


391
00:18:33.980 --> 00:18:36.382 line:-1 position:50%
The system provides
built-in sound effects


392
00:18:36.382 --> 00:18:39.618 line:-1 position:50%
to alert the user that
the microphone is activated


393
00:18:39.618 --> 00:18:42.388 line:-1 position:50%
and deactivated
when transmitting.


394
00:18:42.388 --> 00:18:44.190 line:-1 position:50%
You should not provide
your own sound effects


395
00:18:44.190 --> 00:18:46.692 line:-1 position:50%
for these events.


396
00:18:46.692 --> 00:18:49.395 line:-1 position:50%
It is also important
for your app to monitor


397
00:18:49,395 --> 00:18:53,132 line:-1
and respond to AVAudioSession
notifications,


398
00:18:53.132 --> 00:18:54.900 line:-1 position:50%
such as session interruptions,


399
00:18:54.900 --> 00:18:57.470 line:-1 position:50%
route changes,
and failures.


400
00:18:57,470 --> 00:18:59,805 line:-1
Your Push To Talk app
can be affected


401
00:18:59.805 --> 00:19:01.774 line:-1 position:50%
by these audio session events


402
00:19:01.774 --> 00:19:05.611 line:-1 position:50%
just like any other audio app
on the system.


403
00:19:05,611 --> 00:19:07,613 line:-1
It's important
to optimize your app


404
00:19:07.613 --> 00:19:09.582 line:-1 position:50%
to preserve battery life.


405
00:19:09,582 --> 00:19:11,784 line:-1
The PushToTalk framework
provides your app


406
00:19:11.784 --> 00:19:13.886 line:-1 position:50%
with background runtime
when needed,


407
00:19:13,886 --> 00:19:17,189 line:-1
such as when transmitting
and receiving audio.


408
00:19:17,189 --> 00:19:19,458 line:-1
When your app is not being used
by the user,


409
00:19:19,458 --> 00:19:24,030 line:-1
it will be suspended by the
system to preserve battery life.


410
00:19:24,030 --> 00:19:26,632 line:-1
You should not activate
or deactivate


411
00:19:26,632 --> 00:19:28,567 line:-1
your own audio sessions.


412
00:19:28,567 --> 00:19:32,038 line:-1
The system will handle
audio session activation for you


413
00:19:32.038 --> 00:19:34.340 line:-1 position:50%
at the appropriate times.


414
00:19:34.340 --> 00:19:36.142 line:-1 position:50%
This ensures
that your audio session


415
00:19:36.142 --> 00:19:38.944 line:-1 position:50%
has the proper priority
within the system


416
00:19:38,944 --> 00:19:43,382 line:-1
and can be suspended
when it is not being used.


417
00:19:43,382 --> 00:19:45,084 line:-1
Your Push To Talk server


418
00:19:45.084 --> 00:19:47.620 line:-1 position:50%
should use the new
push notification type


419
00:19:47.620 --> 00:19:51.157 line:-1 position:50%
to alert your app that there is
new audio to be played,


420
00:19:51.157 --> 00:19:54.560 line:-1 position:50%
or that the Push To Talk
session has ended.


421
00:19:54,560 --> 00:19:56,529 position:50%
For more information
about improving


422
00:19:56,529 --> 00:19:59,065 line:0
the battery life in your app,
refer to the


423
00:19:59,065 --> 00:20:03,536 line:0
"Power down: Improve battery
consumption" session.


424
00:20:03,536 --> 00:20:05,905 line:-1
When your Push To Talk app
is in the background


425
00:20:05,905 --> 00:20:09,275 line:-1
and the app is not
transmitting or receiving audio,


426
00:20:09.275 --> 00:20:11.944 line:-1 position:50%
it will be suspended
by the system.


427
00:20:11,944 --> 00:20:13,479 line:-1
When your app is suspended,


428
00:20:13,479 --> 00:20:17,249 line:-1
any network connections
will be disconnected.


429
00:20:17.249 --> 00:20:19.785 line:-1 position:50%
You should consider adopting
Network.framework


430
00:20:19,785 --> 00:20:22,688 line:-1
and QUIC to reduce
the steps needed


431
00:20:22.688 --> 00:20:25.558 line:-1 position:50%
to establish a secure
TLS connection


432
00:20:25,558 --> 00:20:28,894 line:-1
and improve initial
connection speed.


433
00:20:28,894 --> 00:20:31,864 line:-1
Network.framework
has built-in support for QUIC.


434
00:20:31,864 --> 00:20:32,898 position:50%
Check out the


435
00:20:32,898 --> 00:20:36,902 line:0
"Reduce networking delays for
a more responsive app" session


436
00:20:36,902 --> 00:20:40,673 position:50%
for more information
about how to use QUIC.


437
00:20:40.673 --> 00:20:43.042 line:-1 position:50%
The PushToTalk framework
enables you to build


438
00:20:43,042 --> 00:20:44,877 line:-1
robust and power-efficient


439
00:20:44.877 --> 00:20:47.513 line:-1 position:50%
walkie-talkie style
communication experiences


440
00:20:47,513 --> 00:20:49,448 line:-1
within your apps.


441
00:20:49.448 --> 00:20:51.650 line:-1 position:50%
If you already have an app
that implements


442
00:20:51.650 --> 00:20:54.787 line:-1 position:50%
a walk-talkie style experience
on iOS,


443
00:20:54.787 --> 00:20:57.123 line:-1 position:50%
you should begin updating
your existing app


444
00:20:57.123 --> 00:20:59.892 line:-1 position:50%
to use the new API.


445
00:20:59,892 --> 00:21:02,094 line:-1
If you're implementing
a new walkie-talkie app,


446
00:21:02.094 --> 00:21:05.998 line:-1 position:50%
you should use
the PushToTalk framework now.


447
00:21:05.998 --> 00:21:07.967 line:-1 position:50%
Finally,
please submit feedback


448
00:21:07.967 --> 00:21:10.035 line:-1 position:50%
as you begin testing
the new framework


449
00:21:10,035 --> 00:21:12,638 line:-1
and integrating it
with your app.


450
00:21:12,638 --> 00:21:15,808 line:-1
Thank you
and have a great WWDC!


451
00:21:15.808 --> 00:21:17.343 line:-1 position:50%
Over and out!


452
00:21:17,343 --> 00:21:21,814 position:90% align:right size:2%
♪

