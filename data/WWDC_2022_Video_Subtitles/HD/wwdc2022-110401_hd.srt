2
00:00:00.767 --> 00:00:06.773 line:-1 align:center
♪ instrumental hip hop music ♪


3
00:00:09,309 --> 00:00:11,078 line:-1
Hi, my name is Boris,


4
00:00:11.111 --> 00:00:13.714 line:-2 align:center
and welcome to the session
"Create Swift package plugins."


5
00:00:14,848 --> 00:00:18,252 line:-2
We introduced support for Swift packages
in Xcode 11


6
00:00:18.285 --> 00:00:21.588 line:-2 align:center
to offer a straightforward approach
to distributing libraries as source code.


7
00:00:22.523 --> 00:00:26.527 line:-2 align:center
In Xcode 14, we want to bring
that same great way to structure and share


8
00:00:26,560 --> 00:00:28,729 line:-1
components to development workflows,


9
00:00:28.762 --> 00:00:31.765 line:-2 align:center
such as generating source code
or automating release tasks,


10
00:00:31.798 --> 00:00:33.834 line:-1 align:center
with Swift package plugins.


11
00:00:34,701 --> 00:00:36,870 line:-1
First, a quick overview of the talk.


12
00:00:36,904 --> 00:00:38,839 line:-1
After learning the basics of plugins,


13
00:00:38.872 --> 00:00:42.242 line:-2 align:center
we'll build our first custom
command plugin in a demo.


14
00:00:42,276 --> 00:00:45,612 line:-2
Next, we'll look at more details
about creating plugins,


15
00:00:45,646 --> 00:00:49,416 line:-2
followed by building both an in-build
and a pre-build command plugin


16
00:00:49.449 --> 00:00:50.751 line:-1 align:center
in further demos.


17
00:00:51.818 --> 00:00:56.356 line:-2 align:center
A package plugin is Swift code
that uses the PackagePlugin API,


18
00:00:56.390 --> 00:00:58.725 line:-1 align:center
similar to a package manifest.


19
00:00:58.759 --> 00:01:01.028 line:-2 align:center
Plugins can extend
the functionality of Xcode


20
00:01:01,061 --> 00:01:04,598 line:-2
or the Swift Package Manager
through well-defined extension points.


21
00:01:06,567 --> 00:01:09,002 line:-1
How do package plugins work?


22
00:01:09,036 --> 00:01:12,539 line:-1
Xcode will compile and run your plugin,


23
00:01:12,573 --> 00:01:15,709 line:-2
which can use information
about available executables


24
00:01:15.742 --> 00:01:18.178 line:-1 align:center
and input files to construct commands


25
00:01:18,212 --> 00:01:19,913 line:-1
which it communicates back to Xcode


26
00:01:19.947 --> 00:01:22.182 line:-1 align:center
in order to execute them as needed.


27
00:01:24.718 --> 00:01:27.254 line:-2 align:center
Package plugins can contribute
custom build tasks


28
00:01:27,287 --> 00:01:29,556 line:-1
that run before or during the build,


29
00:01:29.590 --> 00:01:32.226 line:-2 align:center
for example, to generate
source code or resource files.


30
00:01:33,493 --> 00:01:37,030 line:-2
They can also add custom commands
to SwiftPM's command line interface


31
00:01:37,064 --> 00:01:39,666 line:-1
or menu items to Xcode.


32
00:01:39,700 --> 00:01:43,103 line:-5
For more information on the basics
of plugins, I would recommend watching


33
00:01:43.136 --> 00:01:44.938 line:-5 align:center
"Meet swift package plugins" first,


34
00:01:44.972 --> 00:01:47.841 line:-5 align:center
and in case you are new
to packages entirely,


35
00:01:47,875 --> 00:01:51,645 line:-5
you can watch the WWDC19 session
Creating Swift Packages.


36
00:01:53.547 --> 00:01:57.084 line:-2 align:center
Let's look at building
our first custom command plugin.


37
00:01:58.886 --> 00:02:01.388 line:-2 align:center
I'm working
on the tools-support-core package


38
00:02:01.421 --> 00:02:02.723 line:-1 align:center
from Swift open source,


39
00:02:02.756 --> 00:02:04.224 line:-1 align:center
and I'd like to add a text file


40
00:02:04.258 --> 00:02:06.793 line:-2 align:center
that lists
all the contributors to the project.


41
00:02:06,827 --> 00:02:10,731 line:-2
I also want to regenerate it as needed
from the Git history of the package.


42
00:02:12.065 --> 00:02:13.967 line:-2 align:center
Previously,
I might have written a shell script


43
00:02:14,001 --> 00:02:15,536 line:-1
or a makefile to do this,


44
00:02:15,569 --> 00:02:17,804 line:-2
but I'd like to create
a custom command plugin


45
00:02:17.838 --> 00:02:20.807 line:-2 align:center
so that I can re-generate
the file without having to leave Xcode.


46
00:02:22.943 --> 00:02:26.813 line:-2 align:center
First, we have to create
the directory structure for our plugin.


47
00:02:26,847 --> 00:02:31,018 line:-2
We open the context menu
on the package


48
00:02:31.051 --> 00:02:33.887 line:-1 align:center
and select New Folder


49
00:02:33.921 --> 00:02:38.792 line:-2 align:center
to create a top-level folder
called Plugins


50
00:02:38,825 --> 00:02:41,862 line:-2
similar to the existing Sources
and Tests.


51
00:02:43.697 --> 00:02:48.535 line:-1 align:center
Next, we will create another nested folder


52
00:02:48,569 --> 00:02:51,505 line:-2
for the plugin target,
called "GenerateContributors."


53
00:02:57,110 --> 00:03:00,747 line:-2
And inside there, we create a new file
and call it "plugin.swift."


54
00:03:12.426 --> 00:03:15.629 line:-2 align:center
Next, we need to make some changes
to the package manifest


55
00:03:15,662 --> 00:03:18,298 line:-1
to declare our new target there.


56
00:03:18.332 --> 00:03:22.336 line:-2 align:center
But first, we need to bump
the tools version for our package to 5.6


57
00:03:22.369 --> 00:03:25.205 line:-2 align:center
since plugins are only available
since that version.


58
00:03:33.046 --> 00:03:35.516 line:-1 align:center
Next, we can insert our plugin target.


59
00:03:44.791 --> 00:03:47.761 line:-2 align:center
Let's take a look
at the new manifest API here.


60
00:03:49.496 --> 00:03:50.931 line:-1 align:center
We are creating a plugin target


61
00:03:50,964 --> 00:03:53,567 line:-2
which corresponds to a folder
inside the Plugins folder,


62
00:03:53,600 --> 00:03:55,402 line:-1
similar to source module targets.


63
00:03:56,904 --> 00:03:59,940 line:-2
It gets a name that is both relevant
for naming the folder


64
00:03:59.973 --> 00:04:02.209 line:-2 align:center
as well as a menu
item in Xcode.


65
00:04:03.477 --> 00:04:05.145 line:-1 align:center
We specify the capability,


66
00:04:05.179 --> 00:04:07.648 line:-2 align:center
so what type of extension point
we want to use.


67
00:04:07,681 --> 00:04:10,417 line:-2
In this case, we are making
a custom command.


68
00:04:12,119 --> 00:04:15,522 line:-2
The intent can define a verb
for the SwiftPM command line


69
00:04:15.556 --> 00:04:19.459 line:-2 align:center
as well as a description
of what the plugin does,


70
00:04:19,493 --> 00:04:22,729 line:-2
and finally, we can declare permissions
that the plugin requires.


71
00:04:24,264 --> 00:04:27,467 line:-2
In this case, we want to write a new file
to the root of the package,


72
00:04:27,501 --> 00:04:30,304 line:-2
so we need permissions
to write to that directory.


73
00:04:30,337 --> 00:04:33,106 line:-2
The reason string will be shown
to the user of the plugin


74
00:04:33.140 --> 00:04:35.909 line:-2 align:center
so that they know whether
or not to grant the permission,


75
00:04:35.943 --> 00:04:39.179 line:-2 align:center
similar to how permissions
work in the OS itself.


76
00:04:39.213 --> 00:04:43.650 line:-2 align:center
Now that we have declared the plugin,
let's go back to actually implement it.


77
00:04:45,686 --> 00:04:49,890 line:-2
The plugin will shell out to Git
to get the commit history.


78
00:04:49,923 --> 00:04:52,793 line:-2
It will read the history from standardout
of the external Git command


79
00:04:52.826 --> 00:04:55.229 line:-1 align:center
and parse the results


80
00:04:55.262 --> 00:04:57.998 line:-2 align:center
and finally write them out to a text
file.


81
00:04:59.399 --> 00:05:04.571 line:-2 align:center
We'll open our plugin source file
we created earlier


82
00:05:04,605 --> 00:05:06,173 line:-1
and import PackagePlugin.


83
00:05:09,109 --> 00:05:10,377 line:-1
This is a built-in module,


84
00:05:10.410 --> 00:05:13.614 line:-2 align:center
much like PackageDescription,
that gives us access to the APIs


85
00:05:13.647 --> 00:05:15.816 line:-1 align:center
we can use to implement plugins.


86
00:05:17,751 --> 00:05:24,491 line:-1
We define a struct GenerateContributors


87
00:05:24.525 --> 00:05:26.360 line:-1 align:center
and conform it to CommandPlugin.


88
00:05:32.165 --> 00:05:35.369 line:-1 align:center
We'll accept the fix-it here,


89
00:05:35.402 --> 00:05:39.506 line:-2 align:center
to get the missing stubs for implementing
the protocol.


90
00:05:39,540 --> 00:05:42,042 line:-2
We also need to mark our struct
as @main


91
00:05:42.075 --> 00:05:44.945 line:-2 align:center
since it will be the main function
of the plugin executable.


92
00:05:46,180 --> 00:05:49,016 line:-2
performCommand is the entry point
for our command,


93
00:05:49.049 --> 00:05:50.984 line:-1 align:center
and we receive two arguments:


94
00:05:51,018 --> 00:05:54,788 line:-2
context, which gives us access
to the resolved package graph


95
00:05:54.821 --> 00:05:58.292 line:-2 align:center
and other information about the context
we are being executed in,


96
00:05:58.325 --> 00:06:00.427 line:-1 align:center
as well as arguments.


97
00:06:00.460 --> 00:06:03.597 line:-2 align:center
Since custom commands
are invoked by the user,


98
00:06:03.630 --> 00:06:06.567 line:-2 align:center
they can provide input
in the form of arguments.


99
00:06:06,600 --> 00:06:08,735 line:-1
We are creating a simple command,


100
00:06:08.769 --> 00:06:10.571 line:-1 align:center
so we won't actually provide any options


101
00:06:10.604 --> 00:06:12.039 line:-1 align:center
to the user at this time.


102
00:06:20,113 --> 00:06:21,582 line:-1
Since we want to shell out to Git


103
00:06:21.615 --> 00:06:24.251 line:-2 align:center
in order to get information
about the commit history,


104
00:06:24,284 --> 00:06:25,586 line:-1
we are importing Foundation


105
00:06:25.619 --> 00:06:28.255 line:-2 align:center
because we want to use the Process API
to do so.


106
00:06:35,329 --> 00:06:39,333 line:-2
Next, we'll define a process instance
and set it to execute Git log


107
00:06:39,366 --> 00:06:41,401 line:-1
with some formatting arguments.


108
00:06:45,239 --> 00:06:48,509 line:-2
We need to create a pipe to capture
the process output.


109
00:06:48.542 --> 00:06:51.144 line:-2 align:center
Then we can run it and wait
until it exits.


110
00:06:55,015 --> 00:06:56,617 line:-1
After the process has finished,


111
00:06:56.650 --> 00:06:58.819 line:-1 align:center
we read all the data from the pipe


112
00:06:58,852 --> 00:07:01,822 line:-2
and convert it to a string which will have
all the git log output.


113
00:07:05.926 --> 00:07:07.828 line:-1 align:center
We do some string manipulation to trim


114
00:07:07.861 --> 00:07:10.697 line:-2 align:center
the output down to a list
without duplicates,


115
00:07:10.731 --> 00:07:12.232 line:-1 align:center
and finally, we can write it


116
00:07:12.266 --> 00:07:14.168 line:-1 align:center
to a file called "CONTRIBUTORS.txt,"


117
00:07:14.201 --> 00:07:16.503 line:-1 align:center
and since the custom command is executed


118
00:07:16,537 --> 00:07:18,105 line:-1
in the package's root directory,


119
00:07:18.138 --> 00:07:19.506 line:-1 align:center
we'll store the file there.


120
00:07:22,276 --> 00:07:24,778 line:-2
Now, if we save and then
right-click on the package


121
00:07:24.811 --> 00:07:29.049 line:-1 align:center
in the project navigator,


122
00:07:29.082 --> 00:07:32.085 line:-2 align:center
there is a new entry for our command
in the context menu.


123
00:07:32.119 --> 00:07:33.520 line:-1 align:center
Let's execute it!


124
00:07:37,391 --> 00:07:40,427 line:-2
In the following dialog,
we can select the packages or targets


125
00:07:40,460 --> 00:07:43,997 line:-2
that should be the input
for our plugin as well as any arguments,


126
00:07:44,031 --> 00:07:47,234 line:-2
but since our plugin doesn't react
to these options, we can click Run.


127
00:07:51,538 --> 00:07:55,609 line:-2
Next we'll be asked for permissions,
as we defined in the manifest earlier.


128
00:07:55,642 --> 00:07:59,379 line:-2
Since we just wrote the plugin ourselves,
we can go ahead and run it,


129
00:07:59,413 --> 00:08:03,116 line:-2
but you should make sure that you only give
extra permissions to plugins you trust.


130
00:08:08,288 --> 00:08:11,992 line:-2
After running, the CONTRIBUTORS.txt
file shows up in the project navigator.


131
00:08:14.828 --> 00:08:18.198 line:-2 align:center
So now after we extended
Xcode with our first plugin,


132
00:08:18.232 --> 00:08:20.334 line:-2 align:center
let's go a bit deeper
into how plugins work


133
00:08:20,367 --> 00:08:22,736 line:-2
and what to look out
for when creating one.


134
00:08:26.240 --> 00:08:28.342 line:-1 align:center
Package plugins run in a sandbox,


135
00:08:28.375 --> 00:08:31.912 line:-2 align:center
similar to the evaluation
of the package manifest itself.


136
00:08:31,945 --> 00:08:34,915 line:-2
Network access and writing
to non-temporary locations


137
00:08:34.948 --> 00:08:38.218 line:-2 align:center
other than the plugin's own work directory
is prohibited.


138
00:08:38.252 --> 00:08:41.722 line:-2 align:center
Custom commands can optionally declare
that they'd like to write


139
00:08:41.755 --> 00:08:44.525 line:-2 align:center
to the package's root directory,
as shown earlier.


140
00:08:45.459 --> 00:08:47.895 line:-2 align:center
If you are wrapping
an existing third-party tool,


141
00:08:47,928 --> 00:08:51,098 line:-2
you may have to look into how
to confine it to the sandbox model,


142
00:08:51,131 --> 00:08:54,234 line:-2
for example, by configuring
where generated files get written to.


143
00:08:55,669 --> 00:08:58,338 line:-2
I talked about the different types
of plugins in the introduction,


144
00:08:58.372 --> 00:09:00.607 line:-2 align:center
and it should be clear whether a problem
is better solved


145
00:09:00,641 --> 00:09:02,476 line:-1
by a custom command or a build tool,


146
00:09:02.509 --> 00:09:05.546 line:-2 align:center
but let's take a look at the structure
of build tool plugins.


147
00:09:07.014 --> 00:09:09.283 line:-2 align:center
These plugins allow you
to extend the build system


148
00:09:09.316 --> 00:09:13.086 line:-2 align:center
by providing a description
on which executables to run during a build


149
00:09:13.120 --> 00:09:15.155 line:-1 align:center
and specifying their inputs and outputs


150
00:09:15,189 --> 00:09:18,725 line:-2
which helps with scheduling your work
at the appropriate time during a build.


151
00:09:19.726 --> 00:09:21.562 line:-1 align:center
You might be familiar with the basics here


152
00:09:21.595 --> 00:09:23.263 line:-2 align:center
if you have been creating
run script phases


153
00:09:23,297 --> 00:09:24,498 line:-1
in Xcode projects.


154
00:09:26,400 --> 00:09:29,469 line:-2
There are also two different types
of build tool plugins.


155
00:09:29.503 --> 00:09:33.273 line:-2 align:center
The distinguishing factor here is whether
your tool has a defined set of outputs.


156
00:09:34,541 --> 00:09:37,411 line:-2
If it does, you should create
an in-build command


157
00:09:37,444 --> 00:09:39,980 line:-2
which will automatically be re-run
by the build system


158
00:09:40.013 --> 00:09:43.684 line:-2 align:center
if your outputs
are out-of-date compared to your inputs.


159
00:09:43.717 --> 00:09:47.154 line:-2 align:center
If you don't have a clear set of outputs,
you can create a pre-build command


160
00:09:47.187 --> 00:09:49.556 line:-1 align:center
which runs at the start of every build.


161
00:09:49.590 --> 00:09:51.625 line:-2 align:center
Because of this,
you should be careful about doing


162
00:09:51,658 --> 00:09:53,794 line:-1
expensive work in pre-build commands


163
00:09:53.827 --> 00:09:56.630 line:-2 align:center
or come up with a custom strategy
for caching results


164
00:09:56.663 --> 00:09:58.532 line:-1 align:center
that's appropriate to your use case.


165
00:10:02.336 --> 00:10:04.972 line:-2 align:center
For our second demo,
I want to create a new library


166
00:10:05,005 --> 00:10:08,942 line:-2
that encapsulates icons I'd like to share
between different tools I am working on.


167
00:10:11,044 --> 00:10:13,447 line:-2
Let's get started and create
a new package from template


168
00:10:13,480 --> 00:10:15,115 line:-1
and call it "IconLibrary."


169
00:10:15.148 --> 00:10:19.987 line:-2 align:center
And I'm going to drag in some icon assets
I already have into my library's target.


170
00:10:20.020 --> 00:10:24.591 line:-2 align:center
Let's also add a basic SwiftUI view
and a preview to my library.


171
00:10:24,625 --> 00:10:28,328 line:-2
First, we need to add the required minimum
deployment targets to the manifest.


172
00:10:33.800 --> 00:10:37.171 line:-2 align:center
Next, let's actually add
that basic view and preview.


173
00:10:37,204 --> 00:10:40,407 line:-2
Here we can use our assets we dragged
in before.


174
00:10:44.978 --> 00:10:46.380 line:-1 align:center
I think it would be nice if,


175
00:10:46,413 --> 00:10:48,815 line:-2
instead
of having to deal with strings here,


176
00:10:48,849 --> 00:10:52,252 line:-2
we would have a type-safe way
to reference these images.


177
00:10:52.286 --> 00:10:55.289 line:-2 align:center
This seems like a great use case
for an in-build command plugin


178
00:10:55,322 --> 00:10:56,924 line:-1
which looks at asset catalogs


179
00:10:56.957 --> 00:10:59.560 line:-2 align:center
and generates some Swift code
based on them.


180
00:10:59,593 --> 00:11:01,995 line:-2
Let's take a look at an asset catalog
in Finder


181
00:11:02.029 --> 00:11:05.432 line:-2 align:center
to find out how we can extract
the information we need for the plugin.


182
00:11:06,466 --> 00:11:11,338 line:-2
Each image gets its own imageset directory
with the name of the asset...


183
00:11:15.709 --> 00:11:18.946 line:-2 align:center
And there's a JSON file
which describes the basic contents.


184
00:11:21,815 --> 00:11:24,284 line:-2
In-build commands work a little different
from custom commands


185
00:11:24,318 --> 00:11:27,120 line:-2
in that they're providing
a description of executables to run


186
00:11:27,154 --> 00:11:28,589 line:-1
as well as their inputs and outputs.


187
00:11:30,157 --> 00:11:32,559 line:-2
The executables
can be provided by the system,


188
00:11:32,593 --> 00:11:36,463 line:-2
third party packages, or you can create
one tailor-made for your plugin.


189
00:11:36,496 --> 00:11:38,298 line:-1
We want to take the third approach here.


190
00:11:40.300 --> 00:11:42.569 line:-2 align:center
Plugins get run
at the start of the build process


191
00:11:42.603 --> 00:11:45.239 line:-2 align:center
in order to participate in
computing the build graph.


192
00:11:46.807 --> 00:11:50.577 line:-2 align:center
Based on that, executables get scheduled
as part of build execution.


193
00:11:52,279 --> 00:11:54,915 line:-2
Now back
to the executable we're building.


194
00:11:54.948 --> 00:11:59.453 line:-2 align:center
We'd like to have a compile-time constant
for each image in an asset catalog


195
00:11:59.486 --> 00:12:03.123 line:-2 align:center
so that, instead of needing to remember
the correct strings for each image,


196
00:12:03.156 --> 00:12:05.392 line:-2 align:center
we'll get them autocompleted
as Swift symbols.


197
00:12:07.294 --> 00:12:09.229 line:-2 align:center
We want to loop
over the directory contents


198
00:12:09.263 --> 00:12:12.366 line:-2 align:center
of the asset catalog
to find all the image sets.


199
00:12:12.399 --> 00:12:15.469 line:-2 align:center
For each image set, we parse its metadata
to determine


200
00:12:15,502 --> 00:12:17,137 line:-1
if it actually contains any images


201
00:12:17.171 --> 00:12:19.740 line:-2 align:center
and should therefore get code generated
for it.


202
00:12:21,408 --> 00:12:24,278 line:-2
Then we can generate the code
and write to a file.


203
00:12:24,311 --> 00:12:27,381 line:-2
Since we declared those files as outputs
of our plugin,


204
00:12:27.414 --> 00:12:30.417 line:-2 align:center
they will automatically be incorporated
into the build of the target


205
00:12:30.450 --> 00:12:31.919 line:-1 align:center
the plugin is being applied to.


206
00:12:33,887 --> 00:12:35,789 line:-1
We'll need a way to deal with arguments


207
00:12:35.822 --> 00:12:39.126 line:-2 align:center
since that is how we communicate
between the plugin and the executable.


208
00:12:40.827 --> 00:12:46.200 line:-2 align:center
The first argument will be the path
to the asset catalog we are processing,


209
00:12:46.233 --> 00:12:49.903 line:-2 align:center
and the second one will be a path provided
by the plugin for our generated code.


210
00:12:51,605 --> 00:12:55,976 line:-2
Next we need some model objects
for decoding the contents.json files.


211
00:12:57,010 --> 00:13:00,948 line:-2
We use Decodable to take advantage
of Swift's built-in JSON decoding.


212
00:13:02.416 --> 00:13:06.720 line:-2 align:center
The only information we
are interested in are the list of images


213
00:13:06,753 --> 00:13:09,990 line:-2
and their filenames, which are optional
because there might not be


214
00:13:10.023 --> 00:13:13.493 line:-1 align:center
an image for each pixel density.


215
00:13:13.527 --> 00:13:15.762 line:-2 align:center
We'll generate code
in a simplistic manner here


216
00:13:15,796 --> 00:13:17,898 line:-1
by just building up a string.


217
00:13:17.931 --> 00:13:20.234 line:-2 align:center
We start it with imports
of the frameworks we need,


218
00:13:20.267 --> 00:13:21.735 line:-1 align:center
Foundation and SwiftUI.


219
00:13:23,637 --> 00:13:25,506 line:-2
We want to loop
over the directory contents


220
00:13:25,539 --> 00:13:26,773 line:-1
of the asset catalog


221
00:13:26,807 --> 00:13:29,543 line:-1
to find all the image sets


222
00:13:29.576 --> 00:13:32.546 line:-1 align:center
We need to parse the JSON next.


223
00:13:32.579 --> 00:13:35.916 line:-1 align:center
The filename uses the input parameter.


224
00:13:35,949 --> 00:13:39,353 line:-2
And we decode using
Foundation's 'JSONDecoder' API.


225
00:13:41,121 --> 00:13:43,357 line:-2
The main piece of information
we're interested in


226
00:13:43,390 --> 00:13:47,728 line:-2
is whether there is a defined image
for a given image set,


227
00:13:47,761 --> 00:13:50,631 line:-2
which we determine by checking
whether there's at least one image


228
00:13:50,664 --> 00:13:53,967 line:-1
with a non-empty filename.


229
00:13:54,001 --> 00:13:55,903 line:-1
If the given image set has an image,


230
00:13:55,936 --> 00:13:57,838 line:-1
we'd like to generate a SwiftUI image


231
00:13:57,871 --> 00:14:00,307 line:-2
which loads that image
from the package's bundle.


232
00:14:02.109 --> 00:14:05.579 line:-2 align:center
We do that by building a string
with the base name of each image


233
00:14:05,612 --> 00:14:07,748 line:-2
that loads the given image
from the module bundle,


234
00:14:07,781 --> 00:14:10,184 line:-2
which is the resource bundle
that the build system creates


235
00:14:10.217 --> 00:14:12.186 line:-1 align:center
for each package with resources.


236
00:14:13,620 --> 00:14:17,824 line:-2
We can wrap up the work of the executable
by writing the generated code to a file,


237
00:14:17,858 --> 00:14:19,426 line:-1
as given to us by arguments.


238
00:14:21.528 --> 00:14:24.231 line:-2 align:center
Let's go back to Xcode
and create the executable.


239
00:14:30.904 --> 00:14:33.473 line:-1 align:center
We call it "AssetConstantsExec"...


240
00:14:40,447 --> 00:14:41,782 line:-1
And add a main file.


241
00:14:51.358 --> 00:14:53.961 line:-2 align:center
Now we have to declare
it in the package manifest.


242
00:15:00,067 --> 00:15:03,070 line:-2
And we can add the code we just discussed
in its main file.


243
00:15:09.243 --> 00:15:11.945 line:-2 align:center
Now that we have
an executable that can generate code,


244
00:15:11.979 --> 00:15:14.681 line:-2 align:center
we can bring it
into the build system using a plugin.


245
00:15:41,408 --> 00:15:43,076 line:-1
Let's add the required target


246
00:15:43.110 --> 00:15:46.380 line:-2 align:center
and also add a usage of the plugin
from our library target.


247
00:16:09.436 --> 00:16:13.473 line:-2 align:center
As before, we're importing
the PackagePlugin library


248
00:16:13.507 --> 00:16:14.808 line:-1 align:center
and create a struct,


249
00:16:14,842 --> 00:16:17,578 line:-2
this time conforming it
to the BuildTool plugin protocol.


250
00:16:37.564 --> 00:16:41.068 line:-2 align:center
The entry point looks similar,
but instead of user arguments,


251
00:16:41.101 --> 00:16:42.903 line:-1 align:center
we are giving a target here.


252
00:16:42,936 --> 00:16:45,739 line:-2
This is the target that the plugin is
being applied to,


253
00:16:45.772 --> 00:16:49.643 line:-2 align:center
and the entry point will be called once
per target that uses the given plugin.


254
00:16:55,649 --> 00:16:59,353 line:-2
This plugin will care particularly
about source module targets,


255
00:16:59.386 --> 00:17:02.256 line:-2 align:center
which are any targets
which actually carry source files,


256
00:17:02,289 --> 00:17:05,492 line:-1
in contrast to, for example, a binary target.


257
00:17:05.526 --> 00:17:07.561 line:-1 align:center
To build up the array of build commands,


258
00:17:07.594 --> 00:17:11.164 line:-2 align:center
we loop over all xcasset bundles
in the target.


259
00:17:11.198 --> 00:17:13.534 line:-2 align:center
We'll extract a string
for the display name


260
00:17:13.567 --> 00:17:15.469 line:-1 align:center
that will show up in the build log,


261
00:17:15,502 --> 00:17:18,705 line:-2
as well as construct suitable
input and output paths.


262
00:17:19.473 --> 00:17:23.544 line:-2 align:center
We can also look up our executable here
using the plugin API


263
00:17:23.577 --> 00:17:25.579 line:-1 align:center
and then put our build command together.


264
00:17:27.047 --> 00:17:29.950 line:-2 align:center
With this, we're ready
to build the project again.


265
00:17:29,983 --> 00:17:32,719 line:-2
We can take a look at the build log
for the new build steps


266
00:17:32,753 --> 00:17:33,754 line:-1
that are happening.


267
00:17:40,727 --> 00:17:44,598 line:-2
The plugin is being compiled
and run at the start of the build,


268
00:17:44,631 --> 00:17:47,601 line:-2
from where it adds any generated
commands to the build graph.


269
00:17:52,472 --> 00:17:55,342 line:-2
Looking at the target,
our new build command ran.


270
00:17:59,279 --> 00:18:02,015 line:-2
And finally, the generated source file
shows up


271
00:18:02.049 --> 00:18:04.451 line:-1 align:center
as part of compiling Swift files.


272
00:18:05.919 --> 00:18:12.359 line:-1 align:center
Let's go back to our preview,


273
00:18:12,392 --> 00:18:16,430 line:-2
where we can replace the stringly typed
image construction with our new constants.


274
00:18:20,000 --> 00:18:23,203 line:-2
We also get autocompletion
for the other image names.


275
00:18:28,141 --> 00:18:30,344 line:-2
This is nice.
With relatively little code,


276
00:18:30.377 --> 00:18:32.479 line:-1 align:center
we have been able to improve our workflow,


277
00:18:32.513 --> 00:18:36.683 line:-2 align:center
all using familiar Swift APIs
and without having to leave Xcode.


278
00:18:39.386 --> 00:18:42.289 line:-2 align:center
So far, we have looked
into making plugins for our own use,


279
00:18:42,322 --> 00:18:45,125 line:-2
as part of libraries we were already
working on,


280
00:18:45,158 --> 00:18:47,461 line:-1
but another powerful attribute of plugins


281
00:18:47,494 --> 00:18:49,696 line:-2
is that we can share them
in a straightforward way,


282
00:18:49,730 --> 00:18:51,198 line:-1
similar to libraries.


283
00:18:53.033 --> 00:18:54.968 line:-2 align:center
For the next demo,
I'd like to automate


284
00:18:55.002 --> 00:18:56.336 line:-1 align:center
some pre-build processing


285
00:18:56.370 --> 00:18:58.705 line:-2 align:center
using the genstrings tool
that ships with Xcode.


286
00:18:59.473 --> 00:19:02.042 line:-2 align:center
The tool extracts localized strings
from your code


287
00:19:02,075 --> 00:19:05,078 line:-2
into a localization directory
for further use.


288
00:19:05,112 --> 00:19:07,014 line:-1
Since that seems generally useful,


289
00:19:07.047 --> 00:19:09.249 line:-2 align:center
I'd like to make the plugin
a separate package


290
00:19:09,283 --> 00:19:11,251 line:-1
so that it can be shared independently.


291
00:19:12.886 --> 00:19:14.054 line:-4 align:center
If you'd like to learn more


292
00:19:14,087 --> 00:19:16,523 line:-5
about resources and localization
in packages,


293
00:19:16,557 --> 00:19:20,661 line:-5
I would recommend
the WWDC20 session on that topic.


294
00:19:20.694 --> 00:19:23.263 line:-5 align:center
For more information
about localization in general,


295
00:19:23,297 --> 00:19:26,633 line:-5
check out Localize your SwiftUI app
from WWDC21.


296
00:19:28.936 --> 00:19:32.272 line:-2 align:center
For this plugin, we'll start
by computing the output directory


297
00:19:32.306 --> 00:19:34.942 line:-1 align:center
for localizations.


298
00:19:34,975 --> 00:19:36,343 line:-1
We'll compute the input files,


299
00:19:36,376 --> 00:19:41,215 line:-2
which are all the Swift or Objective-C
source files in a given target,


300
00:19:41,248 --> 00:19:42,783 line:-1
and then construct the pre-build command


301
00:19:42,816 --> 00:19:46,220 line:-2
for executing the genstrings tool
provided by Xcode.


302
00:19:46.253 --> 00:19:49.323 line:-2 align:center
Note that the biggest difference between
pre- and in-build commands


303
00:19:49,356 --> 00:19:52,059 line:-2
is that we don't declare
a well-defined set of outputs,


304
00:19:52.092 --> 00:19:54.528 line:-2 align:center
which means these commands run
on every build.


305
00:19:56.063 --> 00:19:58.532 line:-2 align:center
The tool will extract
all the localized strings


306
00:19:58.565 --> 00:20:00.834 line:-1 align:center
from the user's source code


307
00:20:00,868 --> 00:20:04,371 line:-2
and then write all those strings into
a localization directory,


308
00:20:04,404 --> 00:20:07,407 line:-2
which can be used as the basis
for the actual localization work


309
00:20:07.441 --> 00:20:08.408 line:-1 align:center
for the user's project.


310
00:20:11.078 --> 00:20:13.847 line:-2 align:center
To start, I have created
the scaffolding here already.


311
00:20:13.881 --> 00:20:16.383 line:-1 align:center
Now in the package manifest,


312
00:20:16.416 --> 00:20:21.255 line:-1 align:center
let’s add a target as before,


313
00:20:21,288 --> 00:20:23,724 line:-1
but we will also add a plugin product.


314
00:20:29,296 --> 00:20:32,299 line:-2
Similar to library products,
this is the way to make a plugin


315
00:20:32.332 --> 00:20:35.536 line:-2 align:center
available to clients of a package
instead of just privately.


316
00:20:38,572 --> 00:20:42,276 line:-2
We can write the code
That we discussed earlier...


317
00:20:50,384 --> 00:20:51,818 line:-1
Now that we have built our plugin,


318
00:20:51,852 --> 00:20:55,155 line:-2
we'd like to test it out
in a separate example package.


319
00:21:00,694 --> 00:21:03,297 line:-2
For that, let's create
a new package from template.


320
00:21:04.731 --> 00:21:08.268 line:-2 align:center
We'll add an API that provides
a localized string to the package...


321
00:21:14.608 --> 00:21:17.578 line:-2 align:center
And add a use of that
in the generated test.


322
00:21:35,729 --> 00:21:40,701 line:-2
As expected, the test works,
as our API returns the string "World."


323
00:21:40.734 --> 00:21:44.271 line:-2 align:center
Let's add a path-based dependency
on the plugin package...


324
00:21:51.745 --> 00:21:54.348 line:-2 align:center
and a use of the plugin
to the library target.


325
00:22:03.757 --> 00:22:05.492 line:-1 align:center
We can now run again...


326
00:22:10.864 --> 00:22:17.804 line:-1 align:center
and if we look at the build log,


327
00:22:17,838 --> 00:22:23,410 line:-2
our plugin gets executed
at the start of the build


328
00:22:23.443 --> 00:22:26.547 line:-2 align:center
and the generated files
get added to our target,


329
00:22:26.580 --> 00:22:30.017 line:-1 align:center
so we're getting a resource bundle built


330
00:22:30.050 --> 00:22:34.288 line:-1 align:center
and a resource accessor being generated,


331
00:22:34,321 --> 00:22:38,859 line:-2
just as if the resource was part
of our target from the beginning.


332
00:22:38.892 --> 00:22:42.462 line:-2 align:center
Now let's change our code to actually use
the resource bundle.


333
00:22:53,073 --> 00:22:55,075 line:-1
Finally, if we change the code...


334
00:23:10.757 --> 00:23:12.993 line:-2 align:center
and take a peek
at the generated bundle...


335
00:23:26,974 --> 00:23:29,343 line:-1
we can see the changes reflected here.


336
00:23:30,811 --> 00:23:32,946 line:-2
Now that we have a test bed
for the plugin,


337
00:23:32.980 --> 00:23:34.314 line:-1 align:center
we could flesh out the test suite


338
00:23:34.348 --> 00:23:36.583 line:-2 align:center
and eventually share
the plugin package with others.


339
00:23:37.184 --> 00:23:42.456 line:-2 align:center
To recap, plugins can be used
to automate and share developer tooling,


340
00:23:42.489 --> 00:23:46.293 line:-2 align:center
custom commands provide a way
to automate common tasks,


341
00:23:46.326 --> 00:23:47.561 line:-1 align:center
and build tools can be used


342
00:23:47.594 --> 00:23:51.465 line:-2 align:center
to generate files during
the build process.


343
00:23:51,498 --> 00:23:53,400 line:-1
Thanks for listening!


344
00:23:53,433 --> 00:23:56,236 line:-1
♪ instrumental hip hop music ♪

