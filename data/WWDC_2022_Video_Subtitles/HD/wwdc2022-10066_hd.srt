2
00:00:00.501 --> 00:00:08.509 line:-1 align:center
♪ ♪


3
00:00:09.643 --> 00:00:11.812 line:-2 align:center
Tarun Belagodu:
Hello and welcome to Metal 3.


4
00:00:11.845 --> 00:00:13.514 line:-1 align:center
My name is Tarun Belagodu


5
00:00:13.547 --> 00:00:17.050 line:-2 align:center
and I'll be sharing the latest
in Metal's evolution.


6
00:00:17.084 --> 00:00:19.520 line:-1 align:center
First, let's start with the basics.


7
00:00:19.553 --> 00:00:23.991 line:-2 align:center
Metal is Apple's low-overhead
graphics and compute API.


8
00:00:24.024 --> 00:00:27.160 line:-2 align:center
It's designed to be the fastest
and most efficient way


9
00:00:27.194 --> 00:00:31.565 line:-2 align:center
to drive the incredibly powerful GPUs
behind Apple products.


10
00:00:31.598 --> 00:00:34.101 line:-2 align:center
It offers multi-threaded
and direct control


11
00:00:34.134 --> 00:00:36.270 line:-1 align:center
over the commands sent to the GPU,


12
00:00:36,303 --> 00:00:40,874 line:-2
a rich shading language that supports
explicit shader compilation,


13
00:00:40.908 --> 00:00:42.876 line:-1 align:center
and deeply integrated tools


14
00:00:42.910 --> 00:00:47.214 line:-2 align:center
to help debug and profile
complex applications and games.


15
00:00:48.916 --> 00:00:51.318 line:-2 align:center
Since its introduction,
Metal has added


16
00:00:51,351 --> 00:00:53,921 line:-2
many advanced graphics
and compute features,


17
00:00:53.954 --> 00:00:56.156 line:-1 align:center
with a focus on GPU-driven rendering,


18
00:00:56,190 --> 00:00:58,926 line:-1
machine learning, and ray tracing.


19
00:00:58,959 --> 00:01:02,329 line:-2
Apple silicon paves the way
for incredible graphics performance


20
00:01:02,362 --> 00:01:05,132 line:-1
and efficiency on every new Mac.


21
00:01:05,165 --> 00:01:08,035 line:-1
And Metal unlocks these capabilities.


22
00:01:08.068 --> 00:01:13.273 line:-2 align:center
This year, Metal is making a leap
to the next level with Metal 3.


23
00:01:15.342 --> 00:01:19.847 line:-2 align:center
Metal 3 is a powerful set of new features
that enable even higher performance


24
00:01:19.880 --> 00:01:23.784 line:-2 align:center
and rendering quality to help your apps
and games run faster


25
00:01:23.817 --> 00:01:25.586 line:-1 align:center
and look amazing.


26
00:01:25,619 --> 00:01:27,921 line:-1
Let's start with fast resource loading.


27
00:01:28,655 --> 00:01:32,359 line:-2
Modern games and apps have demanding
asset loading requirements,


28
00:01:32.392 --> 00:01:37.297 line:-2 align:center
and streaming many small asset requests
quickly from files to your Metal resources


29
00:01:37.331 --> 00:01:40.834 line:-1 align:center
is often the key to high quality visuals.


30
00:01:40,868 --> 00:01:45,272 line:-2
But existing storage APIs
are designed for large, bulk requests.


31
00:01:47,074 --> 00:01:51,478 line:-2
Metal 3's fast resource loading
lets you request many small loads


32
00:01:51.512 --> 00:01:56.917 line:-2 align:center
using the same explicit, multi-threaded
command model as graphics and compute.


33
00:01:56,950 --> 00:02:00,287 line:-2
Each request is a command,
and many commands can be queued


34
00:02:00,320 --> 00:02:03,056 line:-1
for asynchronous submission.


35
00:02:03.090 --> 00:02:07.895 line:-2 align:center
It loads directly into your Metal buffers
and textures without additional steps,


36
00:02:07,928 --> 00:02:11,565 line:-2
saving you both development effort
and transfer time.


37
00:02:11,598 --> 00:02:14,735 line:-2
Fast resource loading also makes it easy
to coordinate


38
00:02:14.768 --> 00:02:18.005 line:-2 align:center
between GPU operations
and loading operations,


39
00:02:18.038 --> 00:02:22.276 line:-2 align:center
using the Metal synchronization primitives
that you already know.


40
00:02:22,309 --> 00:02:26,380 line:-2
Texture streaming systems
really benefit from fast resource loading.


41
00:02:26,413 --> 00:02:27,915 line:-1
Let's look at an example.


42
00:02:29.082 --> 00:02:34.488 line:-2 align:center
Metal Sparse Textures allow applications
to stream textures at a tile granularity.


43
00:02:34.521 --> 00:02:37.624 line:-2 align:center
The texture streaming system
built on Metal sparse textures


44
00:02:37,658 --> 00:02:39,526 line:-1
consists of four steps:


45
00:02:39,560 --> 00:02:44,464 line:-2
First, decide what to load
based on feedback from the previous frame.


46
00:02:44,498 --> 00:02:48,202 line:-1
Second, load tiles from file storage.


47
00:02:48.235 --> 00:02:52.840 line:-2 align:center
Third, copy from your staging area
to your sparse textures.


48
00:02:52.873 --> 00:02:55.275 line:-1 align:center
And finally, draw your frame.


49
00:02:56.977 --> 00:03:00.113 line:-2 align:center
The longer it takes to load and copy
means the more time


50
00:03:00,147 --> 00:03:02,649 line:-1
your app draws with lower quality.


51
00:03:04.451 --> 00:03:07.321 line:-2 align:center
Fast resource loading
minimizes loading overhead


52
00:03:07,354 --> 00:03:10,991 line:-2
and ensures the storage hardware has
enough requests in its queues


53
00:03:11.024 --> 00:03:12.960 line:-1 align:center
to maximize throughput.


54
00:03:12.993 --> 00:03:16.263 line:-2 align:center
This provides faster
and more consistent performance


55
00:03:16,296 --> 00:03:19,833 line:-2
so that more time is spent
drawing at high quality.


56
00:03:22,269 --> 00:03:25,672 align:center
Fast resource loading will greatly
simplify the code you need to write


57
00:03:25,706 --> 00:03:28,876 align:center
to achieve high quality asset streaming.


58
00:03:28,909 --> 00:03:31,512 align:center
To learn more about fast resource loading,


59
00:03:31,545 --> 00:03:35,382 line:0
check out the "Load resources faster
with Metal 3" session.


60
00:03:36,350 --> 00:03:40,454 line:-2
Next, let me tell you how
the new offline compilation workflow


61
00:03:40.487 --> 00:03:44.691 line:-2 align:center
will help you reduce load times
and stutters in your apps.


62
00:03:44,725 --> 00:03:47,661 line:-2
Shader binaries
are GPU-specific machine code


63
00:03:47.694 --> 00:03:50.597 line:-2 align:center
that are traditionally generated
while the app is running


64
00:03:50,631 --> 00:03:53,734 line:-2
as part of the Metal pipeline
creation process.


65
00:03:53,767 --> 00:03:56,603 line:-2
Generating these binaries
is an expensive operation


66
00:03:56.637 --> 00:04:00.974 line:-2 align:center
that is usually hidden behind
a loading screen during app launch.


67
00:04:01,008 --> 00:04:03,644 line:-2
However, sometimes
they need to happen in-frame,


68
00:04:03.677 --> 00:04:06.847 line:-1 align:center
which in turn causes frame rate stutters.


69
00:04:06.880 --> 00:04:09.116 line:-1 align:center
These binaries are cached by Metal


70
00:04:09.149 --> 00:04:11.552 line:-1 align:center
so that you don't pay the cost often,


71
00:04:11.585 --> 00:04:14.922 line:-2 align:center
but their cost is still observed
on the app's first launch


72
00:04:14,955 --> 00:04:18,091 line:-1
or whenever the binary is first needed.


73
00:04:18,125 --> 00:04:21,929 line:-2
With offline compilation, you can
eliminate shader binary generation


74
00:04:21.962 --> 00:04:23.497 line:-1 align:center
at run time.


75
00:04:25,299 --> 00:04:28,268 line:-2
By moving binary generation
to project build time,


76
00:04:28,302 --> 00:04:33,006 line:-2
you can dramatically reduce the time spent
creating Metal pipelines at load time,


77
00:04:33,040 --> 00:04:37,678 line:-2
and reduce stutters in your app when
those pipelines are created just-in-time.


78
00:04:37.711 --> 00:04:41.048 line:-2 align:center
Let's take a closer look at
what it means to reduce stutters.


79
00:04:42.049 --> 00:04:44.384 line:-2 align:center
Here's an example of a game
that needs to create


80
00:04:44,418 --> 00:04:47,921 line:-2
a Metal pipeline state object
during encoding.


81
00:04:47,955 --> 00:04:51,225 line:-2
Since this is a pipeline
that Metal hasn't seen before,


82
00:04:51.258 --> 00:04:54.528 line:-1 align:center
it generates the needed shader binary.


83
00:04:54,561 --> 00:04:58,265 line:-2
This is a long operation that interrupts
encoding the rest of the frame,


84
00:04:58,298 --> 00:05:01,368 line:-2
and causes the app
to miss its frame rate target.


85
00:05:01,401 --> 00:05:03,437 line:-1
This only happens once,


86
00:05:03,470 --> 00:05:07,107 line:-2
but it's enough for your users
to notice a frame stutter.


87
00:05:07,140 --> 00:05:11,545 line:0
In contrast, offline compilation
means the shader binary can be generated


88
00:05:11,578 --> 00:05:17,985 line:0
at build-time so that every pipeline state
creation is fast, and execution is smooth.


89
00:05:18,018 --> 00:05:22,656 align:center
Offline compilation can have a dramatic
effect on your app loading times too.


90
00:05:22,689 --> 00:05:24,424 align:center
Let's look at an example.


91
00:05:25,726 --> 00:05:28,829 line:-2
Most apps create the majority
of Metal pipeline state objects


92
00:05:28.862 --> 00:05:31.098 line:-1 align:center
in a dedicated loading phase.


93
00:05:31.131 --> 00:05:34.101 line:-2 align:center
And shader binaries
are generated on first load.


94
00:05:34,134 --> 00:05:39,273 line:-2
This can be a long wait for your users
if your app creates many such pipelines.


95
00:05:39,306 --> 00:05:42,309 line:0
With offline compilation,
shader binary generation can again


96
00:05:42,342 --> 00:05:46,213 line:0
be moved to project build time,
resulting in smaller load times


97
00:05:46,246 --> 00:05:49,550 line:0
and getting users
into your app more quickly.


98
00:05:50,184 --> 00:05:55,255 line:0
Offline compilation is a game changer
for apps with many complex pipelines.


99
00:05:55,289 --> 00:05:58,625 line:0
To learn more about offline compilation
and other improvements,


100
00:05:58,659 --> 00:06:02,629 align:center
check out the "Target and optimize
GPU binaries with Metal 3" session.


101
00:06:04,164 --> 00:06:06,567 line:-1
Now, let's move on to MetalFX,


102
00:06:06.600 --> 00:06:09.336 line:-2 align:center
which provides platform-optimized
graphics effects


103
00:06:09,369 --> 00:06:11,738 line:-1
for Metal applications.


104
00:06:11.772 --> 00:06:16.343 line:-2 align:center
MetalFX Upscaling helps render
high-quality graphics in less time


105
00:06:16,376 --> 00:06:20,480 line:-2
through high-performance upscaling
and anti-aliasing.


106
00:06:20,514 --> 00:06:24,618 line:-2
You can choose a combination
of temporal or spatial algorithms


107
00:06:24,651 --> 00:06:26,987 line:-1
to help boost performance.


108
00:06:27.020 --> 00:06:29.223 line:-1 align:center
Here's why it matters.


109
00:06:29,256 --> 00:06:32,025 line:-2
While Retina resolution
provides crisp detail


110
00:06:32,059 --> 00:06:35,195 line:-2
that you want your apps
and games to take advantage of,


111
00:06:35,229 --> 00:06:39,132 line:-2
generating all those pixels
can also affect performance.


112
00:06:39,166 --> 00:06:40,901 line:-1
With MetalFX Upscaling,


113
00:06:40.934 --> 00:06:43.303 line:-2 align:center
you can generate pixels
at a lower resolution


114
00:06:43.337 --> 00:06:45.606 line:-2 align:center
and then let the framework
generate a high-quality,


115
00:06:45.639 --> 00:06:50.344 line:-2 align:center
high-resolution image at a lower cost
for a much higher frame rate.


116
00:06:50,377 --> 00:06:54,047 line:0
MetalFX is a powerful framework
that makes high-performance,


117
00:06:54,081 --> 00:06:56,450 align:center
high-quality upscaling a reality.


118
00:06:56,483 --> 00:06:58,952 line:0
To learn more
about MetalFX Upscaling,


119
00:06:58,986 --> 00:07:03,390 line:0
check out the "Boost performance
with MetalFX Upscaling" session.


120
00:07:03,423 --> 00:07:06,693 line:-2
Next up is Metal's new flexible
geometry pipeline:


121
00:07:06,727 --> 00:07:08,996 line:-1
Mesh Shaders.


122
00:07:09.029 --> 00:07:12.533 line:-2 align:center
The traditional programmable graphics
pipeline lets you transform vertices


123
00:07:12.566 --> 00:07:15.769 line:-2 align:center
in a shader,
that are then assembled into primitives


124
00:07:15,802 --> 00:07:18,772 line:-2
for rasterization
by fixed-function hardware.


125
00:07:18,805 --> 00:07:20,974 line:-1
That's enough for most applications,


126
00:07:21.008 --> 00:07:25.746 line:-2 align:center
but some use cases like culling
require access to the entire primitive.


127
00:07:25.779 --> 00:07:27.948 line:-1 align:center
Each vertex is also read,


128
00:07:27.981 --> 00:07:30.884 line:-1 align:center
transformed, and output independently.


129
00:07:30.918 --> 00:07:35.589 line:-2 align:center
So you can't add vertices or primitives
in the middle of your draw.


130
00:07:35.622 --> 00:07:39.359 line:-2 align:center
Advanced geometry processing
requires more flexibility.


131
00:07:39,393 --> 00:07:42,196 line:-2
And traditionally
that meant pre-processing your geometry


132
00:07:42.229 --> 00:07:43.931 line:-1 align:center
in a compute pass.


133
00:07:43,964 --> 00:07:47,034 line:-2
But that requires storing a variable
amount of intermediate geometry


134
00:07:47.067 --> 00:07:51.104 line:-2 align:center
to device memory,
which might be hard for you to budget for.


135
00:07:51.138 --> 00:07:55.108 line:-2 align:center
Metal mesh shaders introduce an
alternative geometry processing pipeline,


136
00:07:56,276 --> 00:08:00,948 line:-2
It replaces the traditional vertex stage
with a flexible 2-stage model


137
00:08:00,981 --> 00:08:05,152 line:-2
and enables hierarchical processing
of your geometry.


138
00:08:05,185 --> 00:08:09,623 line:-2
The first stage analyzes whole objects
to decide whether to expand,


139
00:08:09.656 --> 00:08:13.560 line:-2 align:center
contract, or refine geometry
in the second stage.


140
00:08:13.594 --> 00:08:17.798 line:-2 align:center
It achieves this by providing
compute capabilities in the render pass,


141
00:08:17.831 --> 00:08:21.902 line:-2 align:center
without the need
for intermediate device memory storage.


142
00:08:21,935 --> 00:08:26,673 line:-2
Mesh shaders are a great fit for apps
that perform GPU-driven culling,


143
00:08:26.707 --> 00:08:30.577 line:-2 align:center
LOD selection,
and procedural geometry generation.


144
00:08:30,611 --> 00:08:32,880 line:-1
Let's take a closer look.


145
00:08:32,913 --> 00:08:36,316 line:-2
In this example,
a compute pass evaluates the surface


146
00:08:36.350 --> 00:08:38.685 line:-1 align:center
and then generates its geometry.


147
00:08:38,719 --> 00:08:41,955 line:-2
That geometry and its draw commands
are then written to device memory


148
00:08:41.989 --> 00:08:44.758 line:-1 align:center
for consumption by a later render pass.


149
00:08:44.791 --> 00:08:48.061 line:-2 align:center
With high expansion factors
and indirect draw calls,


150
00:08:48,095 --> 00:08:51,064 line:-2
it can be hard to predict
the amount of memory needed.


151
00:08:53,367 --> 00:08:56,904 line:-2
Mesh shaders improve efficiency
by running two compute-like stages


152
00:08:56.937 --> 00:08:59.306 line:-1 align:center
inline in the render pipeline.


153
00:09:00,641 --> 00:09:04,011 line:-2
The Object stage evaluates the input
to decide how many meshes


154
00:09:04.044 --> 00:09:05.979 line:-1 align:center
need to be generated.


155
00:09:07.314 --> 00:09:10.751 line:-2 align:center
And the Mesh stage then
generates the actual geometry.


156
00:09:10,784 --> 00:09:13,487 line:-2
These meshes are sent directly
to the rasterizer,


157
00:09:13.520 --> 00:09:16.123 line:-1 align:center
bypassing the roundtrip to device memory,


158
00:09:16.156 --> 00:09:18.825 line:-1 align:center
and the need for vertex processing.


159
00:09:20.127 --> 00:09:23.564 line:-2 align:center
Mesh shaders will let you build
efficient procedural geometry,


160
00:09:23.597 --> 00:09:26.633 line:-1 align:center
culling, and LODing systems for your apps.


161
00:09:26.667 --> 00:09:28.402 line:-1 align:center
To learn more about mesh shaders,


162
00:09:28,435 --> 00:09:32,506 align:center
check out the "Transform your geometry
with Metal mesh shaders" session.


163
00:09:34.107 --> 00:09:39.012 line:-2 align:center
Metal 3 also brings significant speedup
to the ray tracing pipeline.


164
00:09:39,046 --> 00:09:41,648 line:-2
Everything from
acceleration structure builds,


165
00:09:41,682 --> 00:09:45,385 line:-2
intersection
and shading have been optimized.


166
00:09:45,419 --> 00:09:49,089 line:-2
Metal also adds support for
GPU-driven ray tracing pipelines


167
00:09:49.122 --> 00:09:52.259 line:-1 align:center
to further optimize your app.


168
00:09:52.292 --> 00:09:55.896 line:-2 align:center
Let's compare Metal 3's ray tracing
to what was previously available.


169
00:09:56.964 --> 00:10:01.902 line:-2 align:center
Metal 3 ray tracing saves
a significant amount of CPU and GPU time.


170
00:10:01,935 --> 00:10:05,138 align:center
First, acceleration structures
build in less time,


171
00:10:05,172 --> 00:10:08,375 align:center
giving you more GPU time
to draw and trace rays.


172
00:10:08,408 --> 00:10:12,246 align:center
Second, CPU operations such as culling
can move to the GPU


173
00:10:12,279 --> 00:10:16,283 line:0
thanks to the new Indirect Command Buffer
support for Ray Tracing.


174
00:10:16,316 --> 00:10:20,187 line:0
Finally, Metal 3 ray tracing
supports direct access to primitive data


175
00:10:20,220 --> 00:10:24,458 line:0
to streamline and optimize
intersection and shading.


176
00:10:24,491 --> 00:10:29,630 line:-2
Metal 3 ray tracing continues to become
better and more powerful than before.


177
00:10:29,663 --> 00:10:31,431 align:center
To learn more about ray tracing,


178
00:10:31,465 --> 00:10:36,203 align:center
head over to the "Maximize your Metal
ray tracing performance" session.


179
00:10:36,236 --> 00:10:42,009 align:center
Now, I'll show you how Metal 3 accelerates
machine learning inference and training.


180
00:10:42,042 --> 00:10:45,279 line:-2
Metal 3 has major improvements
to accelerate machine learning,


181
00:10:45.312 --> 00:10:49.283 line:-2 align:center
with additional support for
accelerating network training on the Mac,


182
00:10:49.316 --> 00:10:53.053 line:-2 align:center
and significant optimizations
for ML inference optimizations


183
00:10:53,086 --> 00:10:56,857 line:-2
in graphics
and media processing applications.


184
00:10:56.890 --> 00:10:59.693 line:-2 align:center
TensorFlow is a popular framework
for machine learning


185
00:10:59,726 --> 00:11:02,563 line:-1
that is GPU-accelerated on the Mac.


186
00:11:02.596 --> 00:11:06.934 line:-2 align:center
The recently released Mac Studio
provides up to a 16 times speedup


187
00:11:06.967 --> 00:11:10.137 line:-1 align:center
on M1 Ultra versus training on the CPU,


188
00:11:10.170 --> 00:11:13.006 line:-1 align:center
across a variety of networks.


189
00:11:13.040 --> 00:11:17.711 line:-2 align:center
And Metal 3 also accelerates
many new TensorFlow operations.


190
00:11:17,744 --> 00:11:20,480 line:-2
That means less synchronization
with the CPU


191
00:11:20.514 --> 00:11:24.852 line:-1 align:center
for even more scalable performance.


192
00:11:24.885 --> 00:11:28.622 line:-2 align:center
PyTorch is another very popular
ML framework for network training


193
00:11:28.655 --> 00:11:32.292 line:-2 align:center
that recently gained GPU acceleration
using Metal.


194
00:11:32.326 --> 00:11:34.862 line:-1 align:center
And on Mac Studio with an M1 Ultra


195
00:11:34,895 --> 00:11:39,933 line:-2
you can achieve significant training
speedups compared to the CPU.


196
00:11:39.967 --> 00:11:44.872 line:-2 align:center
For example, you can train the BERT model
up to 6.5 times faster


197
00:11:44,905 --> 00:11:49,943 line:-1
and train ResNet50 up to 8.5 times faster.


198
00:11:49,977 --> 00:11:53,413 line:-2
Metal optimizes ML inference across
Apple silicon


199
00:11:53.447 --> 00:11:55.682 line:-1 align:center
to maximize performance.


200
00:11:55,716 --> 00:11:59,419 line:-2
This is especially useful for
Metal-based high performance video


201
00:11:59.453 --> 00:12:01.555 line:-1 align:center
and image processing applications,


202
00:12:01,588 --> 00:12:04,992 line:-1
like BlackMagic Design's DaVinci Resolve.


203
00:12:05,025 --> 00:12:08,762 line:-2
DaVinci Resolve is a color-grading-focussed
video production platform


204
00:12:08,795 --> 00:12:13,867 line:-2
that uses Metal and machine learning
extensively in their workflows.


205
00:12:13,901 --> 00:12:16,103 line:-1
And the results are incredible.


206
00:12:16.136 --> 00:12:19.006 line:-2 align:center
With Metal's support
for accelerated machine learning,


207
00:12:19,039 --> 00:12:22,476 line:-2
BlackMagic Design achieved dramatic
performance improvements


208
00:12:22,509 --> 00:12:25,045 line:-2
to their editing and color grading
workflows


209
00:12:25.078 --> 00:12:28.448 line:-1 align:center
and their ML-based tools.


210
00:12:28,482 --> 00:12:30,918 align:center
To learn more about updates
to machine learning,


211
00:12:30,951 --> 00:12:35,789 line:0
head over to the "Accelerate
machine learning with Metal" session.


212
00:12:35.822 --> 00:12:39.193 line:-2 align:center
Now let me tell you what hardware
supports the Metal 3 features


213
00:12:39.226 --> 00:12:41.461 line:-1 align:center
that I just described.


214
00:12:41,495 --> 00:12:44,898 line:-1
Metal 3 is supported on all modern iOS,


215
00:12:44.932 --> 00:12:47.367 line:-1 align:center
iPadOS, and macOS devices,


216
00:12:47,401 --> 00:12:53,707 line:-2
including iPhone and iPad with A13 Bionic
or M1 chips or newer,


217
00:12:53,740 --> 00:12:56,109 line:-1
and all Apple silicon Mac systems


218
00:12:56.143 --> 00:12:58.011 line:-2 align:center
and Mac systems with recent AMD
and Intel GPUs.


219
00:13:03.784 --> 00:13:07.154 line:-2 align:center
And to find out whether
a given device supports Metal 3,


220
00:13:07.187 --> 00:13:10.824 line:-2 align:center
use the supportsFamily query
on the Metal device.


221
00:13:12.526 --> 00:13:15.062 line:-1 align:center
Metal 3 is much more than features;


222
00:13:15,095 --> 00:13:18,999 line:-2
it also includes a comprehensive set
of advanced developer tools.


223
00:13:19,032 --> 00:13:20,901 line:-1
Let me show you a few now.


224
00:13:20,934 --> 00:13:24,471 line:-2
The Metal Dependency Viewer
in Xcode 14 makes it even easier


225
00:13:24.505 --> 00:13:26.707 line:-1 align:center
to visualize your entire renderer


226
00:13:26,740 --> 00:13:30,244 line:-1
or zoom into a single pass.


227
00:13:30,277 --> 00:13:33,580 line:-2
And to make it easier to adopt
GPU-driven pipelines


228
00:13:33,614 --> 00:13:36,850 line:-2
or synchronize with fast resource loading
for example,


229
00:13:36,884 --> 00:13:40,287 line:-2
the Dependency Viewer now includes
synchronization edges


230
00:13:40,320 --> 00:13:44,157 line:-2
to help you analyze
and validate your dependencies.


231
00:13:44,191 --> 00:13:47,294 line:-2
The improved Acceleration
Structure Viewer in Xcode 14


232
00:13:47,327 --> 00:13:51,164 line:-2
helps you get the most out
of Metal 3's optimized ray tracing.


233
00:13:51.198 --> 00:13:55.235 line:-2 align:center
First, you can now highlight
individual primitives in the scene.


234
00:13:57,037 --> 00:14:00,574 line:-2
And selecting a primitive
shows its associated primitive data


235
00:14:00.607 --> 00:14:02.743 line:-1 align:center
in the outline on the left.


236
00:14:05.646 --> 00:14:08.916 line:-2 align:center
Last, if your scene has
motion information,


237
00:14:08.949 --> 00:14:13.654 line:-2 align:center
the Acceleration Structure Viewer can
now visualize different points in time.


238
00:14:18.225 --> 00:14:22.596 line:-2 align:center
And that's just a quick look at a few of
the Developer Tools updates in Xcode 14.


239
00:14:22,629 --> 00:14:26,500 line:-2
There are a host of other new features
such as Dylib support,


240
00:14:26,533 --> 00:14:28,402 line:-1
a new resource list,


241
00:14:28,435 --> 00:14:30,737 line:-1
file navigation in the Shader editor,


242
00:14:30,771 --> 00:14:34,474 line:-2
custom Buffer Viewer layouts
and many more.


243
00:14:34,508 --> 00:14:38,278 align:center
To learn more about tools and
how to get the most out of advancements


244
00:14:38,312 --> 00:14:41,915 align:center
in Metal 3,
be sure to check out these other sessions,


245
00:14:41,949 --> 00:14:46,486 line:0
which will help you build
advanced graphics, games and pro apps.


246
00:14:48.288 --> 00:14:51.225 line:-2 align:center
Today, I introduced you
to Metal 3's advanced features


247
00:14:51.258 --> 00:14:54.027 line:-1 align:center
for improving performance and quality:


248
00:14:54.061 --> 00:14:58.031 line:-2 align:center
fast resource loading
for higher-quality texture streaming;


249
00:14:58,065 --> 00:15:02,336 line:-2
Offline compilation for shorter load times
and less stuttering;


250
00:15:02.369 --> 00:15:06.874 line:-2 align:center
MetalFX Upscaling to render
at high resolution in less time;


251
00:15:06,907 --> 00:15:10,878 line:-2
Mesh shaders
for advanced geometry processing;


252
00:15:10.911 --> 00:15:12.913 line:-1 align:center
faster acceleration structure builds,


253
00:15:12.946 --> 00:15:16.283 line:-2 align:center
intersections,
and shading for ray tracing;


254
00:15:16,316 --> 00:15:19,253 line:-1
and more accelerated machine learning.


255
00:15:19,286 --> 00:15:22,589 line:0
Finally, I showed you some of
advanced tools that help you


256
00:15:22,623 --> 00:15:27,294 line:0
use advanced features such as
GPU-driven pipelines and ray tracing.


257
00:15:28.629 --> 00:15:31.698 line:-2 align:center
To learn more with new code samples
and documentation,


258
00:15:31,732 --> 00:15:34,434 line:-1
head over to developer.apple.com/Metal.


259
00:15:34,968 --> 00:15:36,970 line:-1
Thank you for joining.

