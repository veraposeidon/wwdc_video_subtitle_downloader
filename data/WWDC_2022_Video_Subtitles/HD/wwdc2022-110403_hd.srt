2
00:00:00.033 --> 00:00:03.003 line:-1 position:50%
♪ Mellow instrumental
hip-hop music ♪


3
00:00:03,003 --> 00:00:09,543 align:right size:2% position:90%
♪


4
00:00:09.543 --> 00:00:11.144 line:-1 position:50%
Hi! My name is Jared,


5
00:00:11,144 --> 00:00:13,347 line:-1
and I'm a software engineer
here at Apple.


6
00:00:13.347 --> 00:00:15.182 line:-1 position:50%
Today I'd like to talk you
about a new framework


7
00:00:15,182 --> 00:00:19,119 line:-1
we are introducing this year
to iOS, iPadOS, and macOS.


8
00:00:19,119 --> 00:00:21,021 line:-1
This new framework is called
Background Assets,


9
00:00:21.021 --> 00:00:23.223 line:-1 position:50%
and we believe it will greatly
enrich the user experience


10
00:00:23.223 --> 00:00:25.325 line:-1 position:50%
of the apps that we all
know and love,


11
00:00:25.325 --> 00:00:27.861 line:-1 position:50%
and more importantly,
that you develop.


12
00:00:27.861 --> 00:00:29.596 line:-1 position:50%
To get started,
I'll be introducing you


13
00:00:29,596 --> 00:00:32,566 line:-1
to the new
Background Assets framework.


14
00:00:32,566 --> 00:00:34,701 line:-1
Afterwards, I'll show you
how to adopt the new framework


15
00:00:34.701 --> 00:00:36.670 line:-1 position:50%
into your app.


16
00:00:36.670 --> 00:00:38.805 line:-1 position:50%
This will be followed by a quick
overview of the extension


17
00:00:38,805 --> 00:00:41,575 line:-1
and what new capabilities
it provides.


18
00:00:41.575 --> 00:00:43.410 line:-1 position:50%
Then we'll finish
with some best practices


19
00:00:43,410 --> 00:00:45,946 line:-1
and everything we've learned.


20
00:00:45.946 --> 00:00:47.381 line:-1 position:50%
Before we begin,
let's talk about


21
00:00:47,381 --> 00:00:48,949 line:-1
what we're trying to solve here.


22
00:00:48,949 --> 00:00:50,851 line:-1
The truth is,
waiting is not fun.


23
00:00:50,851 --> 00:00:53,253 line:-1
Anytime we find ourselves asking
those that use our software


24
00:00:53.253 --> 00:00:55.756 line:-1 position:50%
to wait, we're increasing
frustration and taking away


25
00:00:55,756 --> 00:00:58,292 line:-1
from the experience
we want our apps to provide.


26
00:00:58.292 --> 00:01:00.260 line:-1 position:50%
For instance, how often
have you found yourself


27
00:01:00,260 --> 00:01:02,095 line:-1
browsing endlessly
through the App Store


28
00:01:02,095 --> 00:01:03,497 line:-1
looking for that perfect app?


29
00:01:03.497 --> 00:01:06.667 line:-1 position:50%
You finally find it,
and oh does it look so perfect!


30
00:01:06,667 --> 00:01:08,402 line:-1
You then tap that GET button.


31
00:01:08.402 --> 00:01:12.005 line:-1 position:50%
With every moment, your level
of excitement increases.


32
00:01:12.005 --> 00:01:13.573 line:-1 position:50%
Then you shortly realize
that depending


33
00:01:13.573 --> 00:01:15.943 line:-1 position:50%
on your network connection
or the size of the app,


34
00:01:15.943 --> 00:01:19.112 line:-1 position:50%
you may find yourself having
to wait as the app downloads.


35
00:01:19.112 --> 00:01:20.814 line:-1 position:50%
Then after a few seconds
of waiting,


36
00:01:20.814 --> 00:01:22.983 line:-1 position:50%
you find yourself
putting your phone down,


37
00:01:22,983 --> 00:01:26,920 line:-1
grabbing a cup of coffee,
reading your favorite book


38
00:01:26.920 --> 00:01:28.655 line:-1 position:50%
about the benefits
of practicing mindfulness


39
00:01:28.655 --> 00:01:31.358 line:-1 position:50%
and mastering patience.


40
00:01:31.358 --> 00:01:35.629 line:-1 position:50%
Then a few hours pass, and you
finally pick up your phone.


41
00:01:35.629 --> 00:01:37.664 line:-1 position:50%
Your excitement levels rise
as you're ready to dive into


42
00:01:37.664 --> 00:01:41.301 line:-1 position:50%
the perfect app that you've been
waiting to use all day.


43
00:01:41,301 --> 00:01:44,171 line:-1
Just to launch the app and be
immediately greeted with this:


44
00:01:44.171 --> 00:01:45.639 line:-1 position:50%
more downloading.


45
00:01:45,639 --> 00:01:46,606 line:-1
It's confusing.


46
00:01:46,606 --> 00:01:48,241 line:-1
You've been away
from your phone all day.


47
00:01:48.241 --> 00:01:51.178 line:-1 position:50%
Why is this app now
making you wait even longer?


48
00:01:51,178 --> 00:01:52,679 line:-1
Couldn't this app have
downloaded this content


49
00:01:52,679 --> 00:01:55,148 line:-1
automatically after the app
was installed?


50
00:01:55,148 --> 00:01:57,284 line:-1
For anyone on a slower
internet connection,


51
00:01:57.284 --> 00:02:00.520 line:-1 position:50%
this might frustrate them
to close and remove the app.


52
00:02:00,520 --> 00:02:02,255 line:-1
The truth is,
this is not the experience


53
00:02:02.255 --> 00:02:03.724 line:-1 position:50%
any of us want to have.


54
00:02:03,724 --> 00:02:04,891 line:-1
We know this isn't your fault,


55
00:02:04.891 --> 00:02:07.728 line:-1 position:50%
and we believe we can make
this experience so much better!


56
00:02:07.728 --> 00:02:09.930 line:-1 position:50%
This is why we're proud
to introduce to you this year,


57
00:02:09,930 --> 00:02:11,231 line:-1
Background Assets.


58
00:02:11.231 --> 00:02:12.466 line:-1 position:50%
This framework was developed


59
00:02:12,466 --> 00:02:15,635 line:-1
to help you enrich the user
experience of your apps.


60
00:02:15,635 --> 00:02:17,170 line:-1
So that the moment
your app is launched,


61
00:02:17,170 --> 00:02:19,740 line:-1
it is providing a phenomenal
first impression!


62
00:02:19.740 --> 00:02:21.475 line:-1 position:50%
Background Assets
is designed to be flexible


63
00:02:21,475 --> 00:02:23,310 line:-1
with your existing workflows.


64
00:02:23,310 --> 00:02:24,711 line:-1
A lot of you
have already developed


65
00:02:24.711 --> 00:02:26.747 line:-1 position:50%
complex asset management
systems,


66
00:02:26.747 --> 00:02:29.583 line:-1 position:50%
and we wanted this new framework
to easily fit into the solutions


67
00:02:29.583 --> 00:02:31.385 line:-1 position:50%
that you have already developed.


68
00:02:31.385 --> 00:02:34.154 line:-1 position:50%
We also know that you want to
be able to push updated content


69
00:02:34,154 --> 00:02:37,024 line:-1
to your apps without having to
require an additional submission


70
00:02:37.024 --> 00:02:38.191 line:-1 position:50%
to the App Store.


71
00:02:38.191 --> 00:02:40.193 line:-1 position:50%
It's not uncommon
for games or other apps


72
00:02:40,193 --> 00:02:43,463 line:-1
to need additional content after
the app has already shipped.


73
00:02:43.463 --> 00:02:47.067 line:-1 position:50%
Think updated art textures
or a bug fix in game-level data.


74
00:02:47.067 --> 00:02:49.536 line:-1 position:50%
Background Assets provides you
with the ability to schedule


75
00:02:49.536 --> 00:02:52.606 line:-1 position:50%
and update your assets
outside of your app's lifecycle.


76
00:02:52.606 --> 00:02:54.641 line:-1 position:50%
We believe it's important
that assets are present


77
00:02:54.641 --> 00:02:56.009 line:-1 position:50%
before first app launch,


78
00:02:56,009 --> 00:02:58,311 line:-1
or whenever the app
is updated overnight.


79
00:02:58.311 --> 00:03:00.714 line:-1 position:50%
So we've worked to create
a mechanism to help ensure


80
00:03:00,714 --> 00:03:03,216 line:-1
that your content is present by
the time your app is launched.


81
00:03:03.216 --> 00:03:06.119 line:-1 position:50%
And finally, the easier
a framework is to adopt,


82
00:03:06,119 --> 00:03:08,989 line:-1
the more we can encourage you
to use it in your apps.


83
00:03:08.989 --> 00:03:11.191 line:-1 position:50%
We want Background Assets
to be used in any place


84
00:03:11.191 --> 00:03:13.727 line:-1 position:50%
where large assets
need to be predownloaded.


85
00:03:13,727 --> 00:03:16,596 line:-1
That way, we can minimize
the time your app is waiting


86
00:03:16.596 --> 00:03:20.067 line:-1 position:50%
and showing a progress bar
before its content is available.


87
00:03:20,067 --> 00:03:21,501 line:-1
So you may be wondering,


88
00:03:21.501 --> 00:03:23.970 line:-1 position:50%
how is this new framework
helping you solve this problem?


89
00:03:23,970 --> 00:03:26,807 line:-1
Well, in order to be
as extensible as possible,


90
00:03:26,807 --> 00:03:28,408 line:-1
we've created
a new app extension


91
00:03:28.408 --> 00:03:30.544 line:-1 position:50%
for downloading content
in the background.


92
00:03:30.544 --> 00:03:32.646 line:-1 position:50%
This new extension is built
on top of the powerful


93
00:03:32,646 --> 00:03:34,681 line:-1
app extension technology
that other extensions


94
00:03:34,681 --> 00:03:36,450 line:-1
on our platforms use.


95
00:03:36.450 --> 00:03:38.452 line:-1 position:50%
This provides an opportunity
to run code


96
00:03:38.452 --> 00:03:40.353 line:-1 position:50%
outside of the app's lifecycle.


97
00:03:40.353 --> 00:03:42.456 line:-1 position:50%
For instance, the extension
will run whenever the user


98
00:03:42.456 --> 00:03:45.225 line:-1 position:50%
first installs your app
but has yet to launch it.


99
00:03:45,225 --> 00:03:47,694 line:-1
The extension will also run
whenever the app is updated


100
00:03:47,694 --> 00:03:49,529 line:-1
automatically in the background.


101
00:03:49,529 --> 00:03:51,998 line:-1
This helps to ensure that
your content can be scheduled


102
00:03:51.998 --> 00:03:54.768 line:-1 position:50%
and downloaded before the user
opens the application


103
00:03:54,768 --> 00:03:56,570 line:-1
after it has been updated.


104
00:03:56.570 --> 00:03:59.473 line:-1 position:50%
Finally, the extension will run
periodically in the background,


105
00:03:59.473 --> 00:04:01.341 line:-1 position:50%
allowing you to check
for updated assets


106
00:04:01,341 --> 00:04:03,577 line:-1
and schedule them
periodically over time.


107
00:04:03.577 --> 00:04:04.845 line:-1 position:50%
Though it is important to note,


108
00:04:04,845 --> 00:04:06,680 line:-1
that extension runtime
is short-lived,


109
00:04:06,680 --> 00:04:09,149 line:-1
so all work will need to be
scheduled by your extension


110
00:04:09.149 --> 00:04:10.417 line:-1 position:50%
with haste.


111
00:04:10.417 --> 00:04:12.319 line:-1 position:50%
If downloads are not
scheduled quickly,


112
00:04:12,319 --> 00:04:14,387 line:-1
the system may terminate
the extension.


113
00:04:14,387 --> 00:04:16,289 position:50%
It's also important to be aware
that the frequency


114
00:04:16,289 --> 00:04:18,291 position:50%
of the extension's
ability to run periodically


115
00:04:18,291 --> 00:04:20,260 line:0
will back off
based on app usage.


116
00:04:20,260 --> 00:04:22,295 line:-1
If your app isn't being used
very much,


117
00:04:22.295 --> 00:04:25.132 line:-1 position:50%
then the extension will receive
less frequent runtime.


118
00:04:25,132 --> 00:04:27,634 line:-1
So that's an overview of the
new Background Assets framework.


119
00:04:27.634 --> 00:04:29.703 line:-1 position:50%
It provides you with the tools
you need to ensure that


120
00:04:29,703 --> 00:04:32,672 line:-1
your assets are available by
the time your app is launched.


121
00:04:32,672 --> 00:04:34,241 line:-1
This is done
with an extension that runs


122
00:04:34,241 --> 00:04:36,309 line:-1
whenever your app
is installed or updated,


123
00:04:36,309 --> 00:04:38,411 line:-1
but before the user
has launched your app.


124
00:04:38.411 --> 00:04:39.946 line:-1 position:50%
Now, let's take a look
at adopting


125
00:04:39.946 --> 00:04:41.781 line:-1 position:50%
the Background Assets framework
into your project


126
00:04:41.781 --> 00:04:43.049 line:-1 position:50%
and getting started!


127
00:04:43,049 --> 00:04:44,618 line:-1
The download manager
within the framework


128
00:04:44,618 --> 00:04:46,286 line:-1
is the primary vehicle
used to communicate


129
00:04:46.286 --> 00:04:49.356 line:-1 position:50%
with the Background Assets
system service.


130
00:04:49,356 --> 00:04:50,724 line:-1
The manager
is a singleton object


131
00:04:50.724 --> 00:04:52.492 line:-1 position:50%
that can be used
throughout your app.


132
00:04:52.492 --> 00:04:54.327 line:-1 position:50%
Using the manager, you can
schedule the download


133
00:04:54.327 --> 00:04:57.197 line:-1 position:50%
of your assets in either
the foreground or background.


134
00:04:57,197 --> 00:04:59,733 line:-1
You can also retrieve downloads
that are currently in flight,


135
00:04:59,733 --> 00:05:01,735 line:-1
which might have started
before your application


136
00:05:01.735 --> 00:05:03.103 line:-1 position:50%
was ever launched.


137
00:05:03,103 --> 00:05:04,905 line:-1
Downloads can also be canceled.


138
00:05:04.905 --> 00:05:06.506 line:-1 position:50%
This is useful if they were
already scheduled


139
00:05:06.506 --> 00:05:08.642 line:-1 position:50%
or are in the middle of being
downloaded and you no longer


140
00:05:08,642 --> 00:05:10,977 line:-1
need that asset that you
originally requested.


141
00:05:10,977 --> 00:05:13,180 line:-1
We've also introduced
a synchronization mechanism


142
00:05:13,180 --> 00:05:14,781 line:-1
for managing exclusive access


143
00:05:14,781 --> 00:05:17,484 line:-1
between your app
and the extension


144
00:05:17.484 --> 00:05:19.986 line:-1 position:50%
so that both the extension
and application do not end up


145
00:05:19,986 --> 00:05:24,090 line:-1
scheduling or modifying existing
downloads at the same time.


146
00:05:24,090 --> 00:05:27,027 line:-1
I have an example to show you,
but for now, more on this later!


147
00:05:27.027 --> 00:05:29.429 line:-1 position:50%
Let's take a look at just
how easy it is to start using


148
00:05:29.429 --> 00:05:31.097 line:-1 position:50%
Background Assets.


149
00:05:31,097 --> 00:05:32,732 line:-1
I'm going to begin
by walking you through


150
00:05:32.732 --> 00:05:34.701 line:-1 position:50%
some of the basics of the API.


151
00:05:34.701 --> 00:05:36.937 line:-1 position:50%
I'll then follow that up later
by showing you how to tie


152
00:05:36,937 --> 00:05:39,406 line:-1
all of this together
into an app extension.


153
00:05:39,406 --> 00:05:41,775 line:-1
To get started, you'll import
the Background Assets


154
00:05:41,775 --> 00:05:43,076 line:-1
framework module.


155
00:05:43.076 --> 00:05:45.679 line:-1 position:50%
Then, it's as easy
as defining a URL that points


156
00:05:45.679 --> 00:05:48.515 line:-1 position:50%
to the location of where
your remote asset is located.


157
00:05:48.515 --> 00:05:50.717 line:-1 position:50%
We then follow that up by
defining an app group container


158
00:05:50.717 --> 00:05:53.253 line:-1 position:50%
that your extension
and app are both members of.


159
00:05:53,253 --> 00:05:55,322 line:-1
Having your app and extension
in the same group


160
00:05:55,322 --> 00:05:57,824 line:-1
allows them to manage
your assets during the download


161
00:05:57.824 --> 00:05:59.459 line:-1 position:50%
and after completion.


162
00:05:59,459 --> 00:06:01,261 position:50%
If you're not already
familiar with app groups,


163
00:06:01,261 --> 00:06:03,930 line:0
you can easily add one from
the Signing & Capability section


164
00:06:03,930 --> 00:06:05,565 line:0
of Xcode 14.


165
00:06:05,565 --> 00:06:08,468 line:0
They're a powerful feature that
allows two or more applications


166
00:06:08,468 --> 00:06:10,870 line:0
to access the same resources,
or in this case,


167
00:06:10,870 --> 00:06:12,639 position:50%
your app and its extension.


168
00:06:12,639 --> 00:06:15,342 line:0
The next thing to do is create
your download object.


169
00:06:15.342 --> 00:06:17.410 line:-1 position:50%
The Background Assets framework
is designed to support


170
00:06:17.410 --> 00:06:19.512 line:-1 position:50%
multiple different types
of download objects.


171
00:06:19.512 --> 00:06:21.414 line:-1 position:50%
However, in this example,


172
00:06:21.414 --> 00:06:25.652 line:-1 position:50%
we'll be focusing on the most
common one: BAURLDownload.


173
00:06:25.652 --> 00:06:28.688 line:-1 position:50%
Immediately, you'll notice that
the initializer takes in the URL


174
00:06:28.688 --> 00:06:30.924 line:-1 position:50%
and the app group identifier.


175
00:06:30.924 --> 00:06:32.425 line:-1 position:50%
This information
tells the system


176
00:06:32,425 --> 00:06:33,827 line:-1
both what we're downloading


177
00:06:33,827 --> 00:06:35,629 line:-1
and where the resulting file
will end up.


178
00:06:35.629 --> 00:06:37.564 line:-1 position:50%
It also takes an identifier.


179
00:06:37.564 --> 00:06:39.666 line:-1 position:50%
You'll use this identifier
to track your download


180
00:06:39.666 --> 00:06:43.870 line:-1 position:50%
across multiple launches of your
app, and within the extension.


181
00:06:43,870 --> 00:06:46,106 line:-1
The engine will not allow
more than one download


182
00:06:46,106 --> 00:06:48,842 line:-1
to be scheduled
with the same identifier.


183
00:06:48.842 --> 00:06:51.711 line:-1 position:50%
Therefore, you should make
these identifiers unique.


184
00:06:51.711 --> 00:06:54.547 line:-1 position:50%
Next, we'll grab a reference
to the BADownloaderManager


185
00:06:54,547 --> 00:06:56,049 line:-1
shared object.


186
00:06:56.049 --> 00:06:57.884 line:-1 position:50%
The download manager
is your single interface


187
00:06:57,884 --> 00:06:59,386 line:-1
into Background Assets.


188
00:06:59,386 --> 00:07:03,189 line:-1
It's what allows you to observe,
cancel, and schedule downloads.


189
00:07:03.189 --> 00:07:05.125 line:-1 position:50%
We'll then pass it a weak
reference to a delegate


190
00:07:05.125 --> 00:07:07.427 line:-1 position:50%
that conforms to the
BADownloadManagerDelegate


191
00:07:07.427 --> 00:07:08.628 line:-1 position:50%
protocol.


192
00:07:08.628 --> 00:07:10.230 line:-1 position:50%
I'll go more into
this protocol shortly,


193
00:07:10,230 --> 00:07:12,699 line:-1
but the most important part
to know now is that it receives


194
00:07:12.699 --> 00:07:15.101 line:-1 position:50%
messages about downloads
that have been scheduled.


195
00:07:15,101 --> 00:07:17,504 position:50%
The only thing left to do
is to ask the download manager


196
00:07:17,504 --> 00:07:19,039 position:50%
to schedule the download.


197
00:07:19,039 --> 00:07:21,107 position:50%
If for any reason the download
cannot be scheduled,


198
00:07:21,107 --> 00:07:22,609 position:50%
then an error is thrown.


199
00:07:22,609 --> 00:07:24,778 line:0
In addition to scheduling
downloads in the background,


200
00:07:24,778 --> 00:07:27,547 position:50%
we also provide API for doing
foreground downloads.


201
00:07:27,547 --> 00:07:28,882 line:0
Running in the foreground


202
00:07:28,882 --> 00:07:30,750 position:50%
not only gives you
increased priority,


203
00:07:30,750 --> 00:07:34,120 position:50%
but it also enables your
download to begin immediately.


204
00:07:34,120 --> 00:07:36,656 position:50%
This is similar to using the
default session configuration


205
00:07:36,656 --> 00:07:38,224 position:50%
within URLSession.


206
00:07:38,224 --> 00:07:40,260 position:50%
We provide this API
so that your app can promote


207
00:07:40,260 --> 00:07:42,395 line:0
any downloads scheduled by your
extension in the background


208
00:07:42,395 --> 00:07:43,596 position:50%
to the foreground.


209
00:07:43,596 --> 00:07:45,165 line:-1
One thing to keep in mind:


210
00:07:45.165 --> 00:07:47.200 line:-1 position:50%
performing a foreground
download is not available


211
00:07:47,200 --> 00:07:48,568 line:-1
from within the extension;


212
00:07:48,568 --> 00:07:51,104 line:-1
it can only be initiated
from the app.


213
00:07:51.104 --> 00:07:53.206 line:-1 position:50%
Since extensions
never present UI,


214
00:07:53.206 --> 00:07:55.275 line:-1 position:50%
and the user doesn't notice
that they are running,


215
00:07:55.275 --> 00:07:58.178 line:-1 position:50%
extensions may only schedule
downloads in the background.


216
00:07:58.178 --> 00:07:59.612 line:-1 position:50%
If your app
would like to promote


217
00:07:59.612 --> 00:08:01.681 line:-1 position:50%
existing background downloads
to the foreground,


218
00:08:01.681 --> 00:08:03.717 line:-1 position:50%
this can easily be accomplished
by fetching the list


219
00:08:03,717 --> 00:08:06,319 line:-1
of currently active downloads
from the manager.


220
00:08:06,319 --> 00:08:08,254 line:-1
The list that is returned
contains all downloads


221
00:08:08,254 --> 00:08:10,657 line:-1
the are currently scheduled,
which may include downloads


222
00:08:10.657 --> 00:08:12.726 line:-1 position:50%
in flight or queued up
in the scheduler.


223
00:08:12,726 --> 00:08:14,994 line:-1
Next, your app can begin
the promotion process


224
00:08:14.994 --> 00:08:17.564 line:-1 position:50%
by calling
startForegroundDownload.


225
00:08:17,564 --> 00:08:19,399 line:-1
If a download is already
in the foreground,


226
00:08:19.399 --> 00:08:22.035 line:-1 position:50%
calling this method
will effectively do nothing.


227
00:08:22.035 --> 00:08:24.270 line:-1 position:50%
However, if the download
was backgrounded,


228
00:08:24.270 --> 00:08:27.173 line:-1 position:50%
it will first be paused,
then resumed in the foreground


229
00:08:27,173 --> 00:08:29,676 line:-1
without requiring any content
that was already downloaded


230
00:08:29.676 --> 00:08:31.945 line:-1 position:50%
up until this point
to be redownloaded.


231
00:08:31,945 --> 00:08:33,646 line:-1
Together,
this provides an effective


232
00:08:33,646 --> 00:08:35,648 line:-1
and simple illustration
for how easy it is


233
00:08:35.648 --> 00:08:37.617 line:-1 position:50%
to use Background Assets to
promote downloads


234
00:08:37.617 --> 00:08:39.886 line:-1 position:50%
scheduled in the background
to the foreground.


235
00:08:39.886 --> 00:08:41.688 line:-1 position:50%
It really is as simple as that!


236
00:08:41,688 --> 00:08:43,857 line:-1
The download manager is your
primary interface that is used


237
00:08:43.857 --> 00:08:46.626 line:-1 position:50%
to schedule and monitor
background downloads.


238
00:08:46,626 --> 00:08:48,795 line:-1
As these download objects
are processed by the system,


239
00:08:48.795 --> 00:08:51.231 line:-1 position:50%
you'll receive messages
in your delegate object.


240
00:08:51,231 --> 00:08:52,632 line:-1
Let's walk through
the delegate now.


241
00:08:52,632 --> 00:08:54,634 line:-1
The delegate receives messages
for all downloads


242
00:08:54,634 --> 00:08:56,536 line:-1
that have been scheduled
by either the extension


243
00:08:56,536 --> 00:08:58,071 line:-1
or your app.


244
00:08:58,071 --> 00:09:00,140 line:-1
If there are numerous downloads
that were scheduled,


245
00:09:00,140 --> 00:09:02,709 line:-1
callbacks will be received
for all of them.


246
00:09:02,709 --> 00:09:04,711 line:-1
This is where you use
the download object's


247
00:09:04.711 --> 00:09:07.247 line:-1 position:50%
unique identifier
to distinguish between them.


248
00:09:07.247 --> 00:09:08.882 line:-1 position:50%
Your app will begin
to receive callbacks


249
00:09:08.882 --> 00:09:10.583 line:-1 position:50%
the moment the delegate
is established


250
00:09:10.583 --> 00:09:12.152 line:-1 position:50%
on BADownloadManager.


251
00:09:12,152 --> 00:09:14,387 line:-1
Callbacks are not enqueued
by the system.


252
00:09:14,387 --> 00:09:16,623 line:-1
If your app does not handle
one of the delegate methods


253
00:09:16.623 --> 00:09:18.558 line:-1 position:50%
or your delegate
is not established,


254
00:09:18.558 --> 00:09:21.361 line:-1 position:50%
then your extension will wake
to process the message.


255
00:09:21.361 --> 00:09:23.363 line:-1 position:50%
This means that you should
fully expect your extension


256
00:09:23.363 --> 00:09:26.232 line:-1 position:50%
to be sent messages if you have
not established a delegate


257
00:09:26,232 --> 00:09:29,002 line:-1
onto BADownloadManager
within your app.


258
00:09:29.002 --> 00:09:30.570 line:-1 position:50%
If your app is currently
in the foreground


259
00:09:30,570 --> 00:09:32,038 line:-1
being presented to the user


260
00:09:32,038 --> 00:09:33,807 line:-1
and its delegate
has been established,


261
00:09:33.807 --> 00:09:35.642 line:-1 position:50%
then callbacks will be sent
to your app


262
00:09:35,642 --> 00:09:37,243 line:-1
and the extension
will not be woken.


263
00:09:37,243 --> 00:09:38,645 line:-1
The extension will only wake


264
00:09:38.645 --> 00:09:41.414 line:-1 position:50%
if your app does not handle
its delegate callback.


265
00:09:41.414 --> 00:09:43.516 line:-1 position:50%
If a download finishes,
or fails,


266
00:09:43,516 --> 00:09:45,418 line:-1
and the app does not
process this message,


267
00:09:45.418 --> 00:09:46.920 line:-1 position:50%
then the extension will wake.


268
00:09:46,920 --> 00:09:49,289 line:-1
Keep in mind,
the extension is not woken


269
00:09:49.289 --> 00:09:50.957 line:-1 position:50%
for all types of callbacks.


270
00:09:50,957 --> 00:09:52,892 line:-1
Only callbacks that share
common interfaces


271
00:09:52.892 --> 00:09:54.894 line:-1 position:50%
between
BADownloadManagerDelegate


272
00:09:54.894 --> 00:09:57.363 line:-1 position:50%
and the BADownloaderExtension
protocol.


273
00:09:57.363 --> 00:09:59.999 line:-1 position:50%
A download succeeding or failing
is an example


274
00:09:59,999 --> 00:10:02,969 line:-1
of a common interface between
the delegate and the protocol.


275
00:10:02.969 --> 00:10:04.971 line:-1 position:50%
Although your app extension
has its own entry points


276
00:10:04.971 --> 00:10:06.473 line:-1 position:50%
that cause it to wake,


277
00:10:06,473 --> 00:10:08,107 line:-1
if the extension
is currently running,


278
00:10:08,107 --> 00:10:11,244 line:-1
it can use BADownloadManager
and establish a delegate.


279
00:10:11,244 --> 00:10:13,346 line:-1
This will allow both
the app and extension


280
00:10:13.346 --> 00:10:16.115 line:-1 position:50%
to receive duplicate messages
to their delegates.


281
00:10:16,115 --> 00:10:17,884 line:-1
Keep in mind
that extensions do not wake


282
00:10:17.884 --> 00:10:19.586 line:-1 position:50%
to process delegate messages.


283
00:10:19.586 --> 00:10:22.288 line:-1 position:50%
They only wake at extension
entry points defined in the


284
00:10:22.288 --> 00:10:24.290 line:-1 position:50%
BADownloaderExtension protocol.


285
00:10:24.290 --> 00:10:25.725 line:-1 position:50%
Let's take a look
at the protocol


286
00:10:25,725 --> 00:10:27,260 line:-1
for the download manager's
delegate.


287
00:10:27,260 --> 00:10:29,295 line:-1
The first function
is for receiving messages


288
00:10:29,295 --> 00:10:31,164 line:-1
whenever a download starts.


289
00:10:31.164 --> 00:10:33.399 line:-1 position:50%
This is useful for tracking when
the device has finally chosen


290
00:10:33.399 --> 00:10:35.201 line:-1 position:50%
to schedule a specific download.


291
00:10:35.201 --> 00:10:38.004 line:-1 position:50%
You may also be notified
if a download pauses.


292
00:10:38,004 --> 00:10:40,173 line:-1
An example of
a pause occurring would be


293
00:10:40,173 --> 00:10:42,542 line:-1
if the extension starts
a download in the background


294
00:10:42.542 --> 00:10:45.378 line:-1 position:50%
and then your app asks us
to promote it to the foreground.


295
00:10:45.378 --> 00:10:47.514 line:-1 position:50%
During this promotion
there will be a small window


296
00:10:47.514 --> 00:10:50.149 line:-1 position:50%
where the download pauses
before it is resumed.


297
00:10:50,149 --> 00:10:52,218 line:-1
The download manager
also allows you to monitor


298
00:10:52.218 --> 00:10:55.221 line:-1 position:50%
active progress of your download
as it is being downloaded


299
00:10:55,221 --> 00:10:56,589 line:-1
in the foreground.


300
00:10:56.589 --> 00:10:59.225 line:-1 position:50%
We also provide a mechanism
to answer a challenge request,


301
00:10:59.225 --> 00:11:02.028 line:-1 position:50%
which is useful for validating
the authenticity of a connection


302
00:11:02.028 --> 00:11:04.664 line:-1 position:50%
or for providing credentials
to authorize a connection.


303
00:11:04,664 --> 00:11:06,866 line:0
The most important functions
are for dealing with a failed


304
00:11:06,866 --> 00:11:08,268 line:0
or finished download.


305
00:11:08,268 --> 00:11:10,436 line:0
If a download fails,
you may need to reschedule it


306
00:11:10,436 --> 00:11:12,338 line:0
or determine the cause.


307
00:11:12,338 --> 00:11:13,673 line:0
For a successful download,


308
00:11:13,673 --> 00:11:15,575 line:0
the system has placed
the file in a location


309
00:11:15,575 --> 00:11:17,443 line:0
that is managed
by the operating system.


310
00:11:17,443 --> 00:11:19,546 line:0
If the device ends up
low on space,


311
00:11:19,546 --> 00:11:21,981 line:0
then the system
will delete the file for you.


312
00:11:21,981 --> 00:11:24,584 line:-1
We strongly recommend that you
leave the file at the location


313
00:11:24,584 --> 00:11:26,519 line:-1
that the system has provided.


314
00:11:26.519 --> 00:11:28.688 line:-1 position:50%
Only move the file
if you absolutely must


315
00:11:28,688 --> 00:11:30,256 line:-1
and please do not duplicate it


316
00:11:30.256 --> 00:11:33.192 line:-1 position:50%
unless you delete
the originating file afterwards.


317
00:11:33.192 --> 00:11:36.129 line:-1 position:50%
As a reminder, the protocol for
the download manager's delegate


318
00:11:36.129 --> 00:11:38.331 line:-1 position:50%
is for receiving messages
related to downloads


319
00:11:38,331 --> 00:11:40,733 line:-1
that your app or extension
has scheduled.


320
00:11:40.733 --> 00:11:42.969 line:-1 position:50%
It is not the entry point
for your extension,


321
00:11:42,969 --> 00:11:44,704 line:-1
which brings us
to our next topic.


322
00:11:44.704 --> 00:11:47.140 line:-1 position:50%
Now we'll be taking a look
at the most exciting part


323
00:11:47,140 --> 00:11:49,208 line:-1
of Background Assets,
the extension!


324
00:11:49.208 --> 00:11:51.277 line:-1 position:50%
The extension enables you
to schedule the downloads


325
00:11:51,277 --> 00:11:54,080 line:-1
of your assets before the user
has launched your app.


326
00:11:54,080 --> 00:11:56,416 line:-1
This enables you to ensure
that your assets are in place


327
00:11:56,416 --> 00:11:58,251 line:-1
and ready to go
in order to provide


328
00:11:58.251 --> 00:12:01.721 line:-1 position:50%
the best possible experience in
your app with minimal wait time.


329
00:12:01.721 --> 00:12:05.258 line:-1 position:50%
As discussed earlier, we're
introducing a new app extension.


330
00:12:05,258 --> 00:12:07,527 line:-1
This extension can be created
from within Xcode


331
00:12:07.527 --> 00:12:09.462 line:-1 position:50%
inside of your existing project.


332
00:12:09.462 --> 00:12:11.431 line:-1 position:50%
As a quick reminder,
the extension runs


333
00:12:11.431 --> 00:12:13.833 line:-1 position:50%
whenever your app
is installed or updated.


334
00:12:13.833 --> 00:12:16.536 line:-1 position:50%
Giving you the flexibility
to make sure changes to your app


335
00:12:16,536 --> 00:12:18,738 line:-1
always has its latest assets.


336
00:12:18.738 --> 00:12:20.340 line:-1 position:50%
The extension
also runs periodically


337
00:12:20,340 --> 00:12:22,575 line:-1
based on how often
a user uses your app.


338
00:12:22.575 --> 00:12:24.377 line:-1 position:50%
If someone uses your app
everyday,


339
00:12:24.377 --> 00:12:25.912 line:-1 position:50%
then the system
learns this behavior


340
00:12:25,912 --> 00:12:28,281 line:-1
and your extension
will run more frequently.


341
00:12:28.281 --> 00:12:30.617 line:-1 position:50%
However, if the app
is never launched,


342
00:12:30.617 --> 00:12:33.653 line:-1 position:50%
then the frequency of this
periodic check will subside.


343
00:12:33,653 --> 00:12:35,788 line:-1
The new extension
also has a short lifecycle


344
00:12:35.788 --> 00:12:38.324 line:-1 position:50%
and a tight sandbox to ensure
that its usage is limited


345
00:12:38,324 --> 00:12:40,360 line:-1
to just downloading assets.


346
00:12:40.360 --> 00:12:42.929 line:-1 position:50%
You are encouraged to make
quick decisions in the extension


347
00:12:42.929 --> 00:12:45.598 line:-1 position:50%
and to limit the extension to
the Background Assets framework.


348
00:12:45,598 --> 00:12:47,367 line:-1
Before we start navigating
through the extension,


349
00:12:47.367 --> 00:12:48.935 line:-1 position:50%
there are a couple of
configurations


350
00:12:48,935 --> 00:12:51,104 line:-1
that you need to make
before the extension can launch.


351
00:12:51,104 --> 00:12:53,106 line:-1
These changes are
also a requirement


352
00:12:53.106 --> 00:12:56.376 line:-1 position:50%
for your app to be approved for
distribution on the App Store.


353
00:12:56,376 --> 00:12:58,578 line:-1
In your app's
information property list,


354
00:12:58.578 --> 00:13:01.047 line:-1 position:50%
you'll need to define
a couple of additional keys.


355
00:13:01,047 --> 00:13:03,816 line:-1
These keys should not be placed
in the extension's Info.plist,


356
00:13:03.816 --> 00:13:05.251 line:-1 position:50%
only the app's.


357
00:13:05,251 --> 00:13:08,187 line:-1
The first key is
BAInitialDownloadRestrictions.


358
00:13:08.187 --> 00:13:10.723 line:-1 position:50%
This is a dictionary where you
will be specifying restrictions


359
00:13:10.723 --> 00:13:12.859 line:-1 position:50%
that will be placed
upon your extension.


360
00:13:12.859 --> 00:13:14.894 line:-1 position:50%
These restrictions are reviewed
by App Review,


361
00:13:14.894 --> 00:13:17.130 line:-1 position:50%
so try to be as accurate
as possible.


362
00:13:17,130 --> 00:13:19,499 line:-1
Now, let's dig into
each individual key


363
00:13:19.499 --> 00:13:21.234 line:-1 position:50%
inside the dictionary.


364
00:13:21,234 --> 00:13:23,670 line:-1
The first restriction
is the download allowance.


365
00:13:23,670 --> 00:13:26,439 line:-1
This is represented in bytes
and is the maximum download size


366
00:13:26,439 --> 00:13:28,541 line:-1
you're requesting to make
within the extension


367
00:13:28.541 --> 00:13:30.643 line:-1 position:50%
during an initial app install.


368
00:13:30.643 --> 00:13:33.112 line:-1 position:50%
This size pertains to the sum
of all files combined


369
00:13:33.112 --> 00:13:34.814 line:-1 position:50%
that you are requesting
to download,


370
00:13:34,814 --> 00:13:37,050 line:-1
not the size
of each individual file.


371
00:13:37.050 --> 00:13:38.818 line:-1 position:50%
The next item is
the domain AllowList,


372
00:13:38,818 --> 00:13:41,721 line:-1
which takes an array of domains
represented as strings.


373
00:13:41,721 --> 00:13:44,724 line:-1
The domain AllowList supports
prefix wildcards and takes in


374
00:13:44.724 --> 00:13:46.426 line:-1 position:50%
a list of host names
that your extension


375
00:13:46.426 --> 00:13:48.027 line:-1 position:50%
is permitted to download from.


376
00:13:48,027 --> 00:13:49,162 line:-1
It's important to note


377
00:13:49.162 --> 00:13:51.931 line:-1 position:50%
that the keys in the
BAInitialDownloadRestrictions,


378
00:13:51.931 --> 00:13:55.334 line:-1 position:50%
such as the DownloadAllowance
and AllowList are only enforced


379
00:13:55,334 --> 00:13:57,370 line:-1
after first app install.


380
00:13:57.370 --> 00:13:58.771 line:-1 position:50%
Whenever your app is launched,


381
00:13:58,771 --> 00:14:01,307 line:-1
these restrictions
are no longer enforced.


382
00:14:01,307 --> 00:14:02,575 position:50%
The last required key,


383
00:14:02,575 --> 00:14:04,343 position:50%
which sits at the root
of your Info.plist


384
00:14:04,343 --> 00:14:06,479 line:0
is the maximum size
that your app will require


385
00:14:06,479 --> 00:14:09,182 position:50%
in additional storage
for these assets.


386
00:14:09,182 --> 00:14:11,651 position:50%
We expect that you might want
to download compressed assets,


387
00:14:11,651 --> 00:14:13,686 line:0
so this value should be
the final extracted


388
00:14:13,686 --> 00:14:15,588 line:0
uncompressed size.


389
00:14:15,588 --> 00:14:17,023 position:50%
The number that is placed here


390
00:14:17,023 --> 00:14:18,424 position:50%
will be presented
on the App Store


391
00:14:18,424 --> 00:14:19,992 line:0
before the app is downloaded.


392
00:14:19.992 --> 00:14:21.761 line:-1 position:50%
Now that we've gone over
some housekeeping,


393
00:14:21,761 --> 00:14:23,930 line:-1
let's talk about the entry
points into your extension


394
00:14:23,930 --> 00:14:25,998 line:-1
in more detail.


395
00:14:25.998 --> 00:14:27.734 line:-1 position:50%
The functions that you define
from the protocol


396
00:14:27,734 --> 00:14:30,737 line:-1
will be called by the system
and not by your app.


397
00:14:30.737 --> 00:14:32.371 line:-1 position:50%
Unlike other app extensions,


398
00:14:32.371 --> 00:14:33.940 line:-1 position:50%
where the application
is responsible


399
00:14:33.940 --> 00:14:35.575 line:-1 position:50%
for talking to the extension,


400
00:14:35,575 --> 00:14:36,843 line:-1
the background
download extension


401
00:14:36.843 --> 00:14:39.011 line:-1 position:50%
is brokered by the system.


402
00:14:39,011 --> 00:14:41,414 line:-1
Since the system is maintaining
the lifecycle of the extension,


403
00:14:41.414 --> 00:14:43.850 line:-1 position:50%
it should be viewed
as an ephemeral service.


404
00:14:43,850 --> 00:14:44,951 line:-1
Whenever any of the functions


405
00:14:44.951 --> 00:14:46.686 line:-1 position:50%
inside of the protocol
are invoked,


406
00:14:46.686 --> 00:14:48.988 line:-1 position:50%
it's important to keep
the work that is done there


407
00:14:48,988 --> 00:14:50,223 line:-1
to a minimum.


408
00:14:50.223 --> 00:14:52.058 line:-1 position:50%
The extension will be terminated
rather quickly


409
00:14:52.058 --> 00:14:53.326 line:-1 position:50%
after it is launched.


410
00:14:53.326 --> 00:14:55.361 line:-1 position:50%
This is not the place
to kick off decompression


411
00:14:55,361 --> 00:14:58,898 line:-1
or other complex operations
that may take a while.


412
00:14:58,898 --> 00:15:01,300 line:-1
One of the great parts
of working in the extension


413
00:15:01.300 --> 00:15:03.469 line:-1 position:50%
is that all of the
BackgroundAssets APIs


414
00:15:03,469 --> 00:15:07,206 line:-1
available to your app are also
available within the extension.


415
00:15:07.206 --> 00:15:10.376 line:-1 position:50%
With the only exception being
the ForegroundDownload API.


416
00:15:10.376 --> 00:15:12.378 line:-1 position:50%
This means that you'll use
BADownloadManager


417
00:15:12.378 --> 00:15:14.580 line:-1 position:50%
just like you would in your app.


418
00:15:14.580 --> 00:15:16.482 line:-1 position:50%
As a matter of fact,
it's entirely likely


419
00:15:16,482 --> 00:15:18,417 line:-1
that you'll discover
the ability to create something


420
00:15:18.417 --> 00:15:21.487 line:-1 position:50%
that uses the same code to
schedule and manage your assets


421
00:15:21,487 --> 00:15:25,658 line:-1
in both your app
and its extension.


422
00:15:25.658 --> 00:15:27.860 line:-1 position:50%
Also, when creating
your extension,


423
00:15:27,860 --> 00:15:30,630 line:-1
it's important to ensure that
both are in a common app group.


424
00:15:30,630 --> 00:15:32,465 line:-1
You'll want to use
the same group identifier


425
00:15:32,465 --> 00:15:34,767 line:-1
so that content can be read
and written by your app


426
00:15:34.767 --> 00:15:36.169 line:-1 position:50%
and its extension.


427
00:15:36.169 --> 00:15:38.471 line:-1 position:50%
Now let's take a look at the
downloader extension protocol


428
00:15:38.471 --> 00:15:41.174 line:-1 position:50%
that you will be conforming
your extension to.


429
00:15:41.174 --> 00:15:43.142 line:-1 position:50%
The first thing you'll notice
is how similar it looks


430
00:15:43,142 --> 00:15:45,778 line:-1
to the download manager
delegate protocol.


431
00:15:45.778 --> 00:15:49.115 line:-1 position:50%
As I stated earlier,
you can use BADownloadManager


432
00:15:49.115 --> 00:15:51.951 line:-1 position:50%
and construct a delegate
from within the extension.


433
00:15:51.951 --> 00:15:55.421 line:-1 position:50%
However, only these entry points
can actually wake the extension.


434
00:15:55.421 --> 00:15:56.756 line:-1 position:50%
The first function is invoked


435
00:15:56,756 --> 00:15:59,292 line:-1
whenever your application
is first installed.


436
00:15:59,292 --> 00:16:02,028 line:-1
The app hasn't launched yet,
but your extension has.


437
00:16:02,028 --> 00:16:04,897 line:-1
This is the perfect opportunity
to start scheduling downloads


438
00:16:04.897 --> 00:16:07.333 line:-1 position:50%
that your app needs
to provide the best experience


439
00:16:07.333 --> 00:16:09.402 line:-1 position:50%
once your app has been launched.


440
00:16:09.402 --> 00:16:12.104 line:-1 position:50%
It's also important to recall
that during initial app install,


441
00:16:12,104 --> 00:16:14,207 line:-1
download restrictions
are in effect.


442
00:16:14,207 --> 00:16:16,676 line:-1
You'll want to consult
the BADownloadRestrictions key


443
00:16:16.676 --> 00:16:18.945 line:-1 position:50%
that you defined
in your Info.plist


444
00:16:18,945 --> 00:16:21,047 line:-1
to know what your maximum
permitted download size


445
00:16:21,047 --> 00:16:22,381 line:-1
and allowed domains are.


446
00:16:22,381 --> 00:16:23,783 line:-1
This next function is invoked


447
00:16:23.783 --> 00:16:25.718 line:-1 position:50%
whenever the App Store
updates your app.


448
00:16:25.718 --> 00:16:28.554 line:-1 position:50%
As long as the user hasn't quit
your app in the app switcher,


449
00:16:28,554 --> 00:16:30,489 line:-1
your newly updated
extension will wake


450
00:16:30,489 --> 00:16:31,991 line:-1
and you can begin
scheduling work.


451
00:16:31,991 --> 00:16:33,926 line:-1
The checkForUpdates function
provides support


452
00:16:33.926 --> 00:16:35.695 line:-1 position:50%
for your extension being
periodically awoken


453
00:16:35,695 --> 00:16:38,698 line:-1
by the system, so that you
can check for any updates


454
00:16:38,698 --> 00:16:40,800 line:-1
that need to be background
downloaded.


455
00:16:40,800 --> 00:16:42,869 line:-1
This function is invoked
by the system based on


456
00:16:42,869 --> 00:16:44,637 line:-1
how often a user uses your app.


457
00:16:44,637 --> 00:16:46,205 line:-1
We also have support
for responding


458
00:16:46.205 --> 00:16:48.441 line:-1 position:50%
to an authentication
challenge request.


459
00:16:48.441 --> 00:16:49.976 line:-1 position:50%
So that you can better
restrict and ensure


460
00:16:49.976 --> 00:16:51.410 line:-1 position:50%
that the files
you are downloading


461
00:16:51,410 --> 00:16:53,346 line:-1
have come from a trusted source.


462
00:16:53,346 --> 00:16:54,881 line:0
Finally, just like the delegate,


463
00:16:54,881 --> 00:16:57,950 line:0
you'll be informed if the
download failed or succeeded.


464
00:16:57,950 --> 00:16:59,986 position:50%
You'll notice that in the
backgroundDownloadDidFail


465
00:16:59,986 --> 00:17:02,121 position:50%
function,
there is no error returned.


466
00:17:02,121 --> 00:17:04,390 position:50%
The error can be retrieved
along with its state


467
00:17:04,390 --> 00:17:07,426 line:0
in a variable inside of
the returned BADownload object.


468
00:17:07.426 --> 00:17:09.662 line:-1 position:50%
It's also important to note
that the last three functions


469
00:17:09,662 --> 00:17:11,397 line:-1
can be invoked
even if your extension


470
00:17:11.397 --> 00:17:13.232 line:-1 position:50%
isn't what scheduled
the download.


471
00:17:13.232 --> 00:17:14.867 line:-1 position:50%
If your app scheduled
a download,


472
00:17:14,867 --> 00:17:17,236 line:-1
but hasn’t become backgrounded,
then the extension


473
00:17:17.236 --> 00:17:19.405 line:-1 position:50%
will be expected
to service the download.


474
00:17:19,405 --> 00:17:21,607 line:-1
Now that we understand
how to use BADownloaderManager


475
00:17:21.607 --> 00:17:24.243 line:-1 position:50%
from our app and its extension,
we have to start thinking about


476
00:17:24.243 --> 00:17:26.479 line:-1 position:50%
what it means if both the app
and its extension


477
00:17:26,479 --> 00:17:28,114 line:-1
are running simultaneously.


478
00:17:28.114 --> 00:17:30.249 line:-1 position:50%
For instance, let's say
the system has decided


479
00:17:30.249 --> 00:17:31.851 line:-1 position:50%
that it's time
to wake the extension


480
00:17:31.851 --> 00:17:35.154 line:-1 position:50%
to have it periodically
check for updates.


481
00:17:35,154 --> 00:17:37,490 line:-1
And of course, since the
extension needs to access


482
00:17:37.490 --> 00:17:39.458 line:-1 position:50%
the network to do this check,
it's going to use


483
00:17:39,458 --> 00:17:42,795 line:-1
BADownloaderManager to schedule
the download of a catalog


484
00:17:42,795 --> 00:17:45,398 line:-1
or some other type of metadata
that provides a list


485
00:17:45,398 --> 00:17:48,100 line:-1
of updated assets
that are available.


486
00:17:48,100 --> 00:17:51,570 line:-1
For instance, let's say the file
is a small 100KB catalog


487
00:17:51.570 --> 00:17:54.140 line:-1 position:50%
that contains a list
of large multi-gigabyte assets


488
00:17:54,140 --> 00:17:55,508 line:-1
that we need to download.


489
00:17:55,508 --> 00:17:56,776 line:-1
Since the extension
needs to know


490
00:17:56,776 --> 00:18:00,012 line:-1
when the download it has
scheduled finished, or failed,


491
00:18:00,012 --> 00:18:03,149 line:-1
it's going to attach a delegate
onto the download manager.


492
00:18:03,149 --> 00:18:04,717 line:-1
The download manager's
delegate is used


493
00:18:04.717 --> 00:18:06.652 line:-1 position:50%
over its extension entry points


494
00:18:06.652 --> 00:18:08.487 line:-1 position:50%
since its downloading
a small file to determine


495
00:18:08,487 --> 00:18:10,957 line:-1
what larger assets it
will be scheduling,


496
00:18:10.957 --> 00:18:12.858 line:-1 position:50%
and extension entry points
are not guaranteed


497
00:18:12,858 --> 00:18:14,327 line:-1
to be invoked immediately.


498
00:18:14,327 --> 00:18:15,628 position:50%
After the download
has finished,


499
00:18:15,628 --> 00:18:18,431 position:50%
the extension receives this
message through its delegate.


500
00:18:18,431 --> 00:18:20,433 position:50%
Your extension now has access
to the catalog file


501
00:18:20,433 --> 00:18:21,801 position:50%
and has to make a choice


502
00:18:21,801 --> 00:18:23,536 position:50%
with what it plans to do
with the downloaded file.


503
00:18:23,536 --> 00:18:25,271 position:50%
You could imagine that the
extension will read the file


504
00:18:25,271 --> 00:18:27,106 position:50%
to determine which of the assets
in the catalog


505
00:18:27,106 --> 00:18:28,841 line:0
need to be downloaded
to the device.


506
00:18:28,841 --> 00:18:31,310 position:50%
Then the extension could
schedule background downloads


507
00:18:31,310 --> 00:18:32,778 position:50%
of those larger assets.


508
00:18:32,778 --> 00:18:35,081 position:50%
Now that the downloaded file
is no longer necessary,


509
00:18:35,081 --> 00:18:37,116 line:0
the extension should delete
the file.


510
00:18:37.116 --> 00:18:38.417 line:-1 position:50%
While this seems appropriate,


511
00:18:38,417 --> 00:18:40,453 line:-1
what happens if your app
launches while your extension


512
00:18:40.453 --> 00:18:42.688 line:-1 position:50%
is running and creates its own
BADownloadManager?


513
00:18:42.688 --> 00:18:44.423 line:-1 position:50%
Well, let's take a look!


514
00:18:44.423 --> 00:18:46.359 line:-1 position:50%
The app launches
and immediately wants to know


515
00:18:46.359 --> 00:18:48.794 line:-1 position:50%
if it has updated content.


516
00:18:48.794 --> 00:18:50.830 line:-1 position:50%
Perhaps a version number
is stored in the app group


517
00:18:50,830 --> 00:18:54,200 line:-1
that both consult to determine
if their assets are up to date.


518
00:18:54,200 --> 00:18:56,235 line:-1
Since the app was launched
before the newer catalog


519
00:18:56.235 --> 00:18:58.070 line:-1 position:50%
finished downloading,
it's going to fetch


520
00:18:58,070 --> 00:18:59,872 line:-1
the current downloads
from the manager


521
00:18:59.872 --> 00:19:01.640 line:-1 position:50%
and realize that a download
of the catalog


522
00:19:01,640 --> 00:19:04,143 line:-1
is currently in flight
and wait for it to be finished


523
00:19:04,143 --> 00:19:05,311 line:-1
in its delegate.


524
00:19:05,311 --> 00:19:06,712 line:-1
But we have a problem.


525
00:19:06,712 --> 00:19:08,781 position:50%
Both the extension
and the app will receive


526
00:19:08,781 --> 00:19:11,417 line:0
a download finished message
in their respective delegates


527
00:19:11,417 --> 00:19:13,619 position:50%
that were hooked into
the download manager.


528
00:19:13,619 --> 00:19:16,856 position:50%
This means we have a data race
on the file being downloaded.


529
00:19:16,856 --> 00:19:20,059 position:50%
Both the app and extension will
try to read and delete the file


530
00:19:20,059 --> 00:19:21,894 position:50%
at the same time;
this is not good.


531
00:19:21,894 --> 00:19:23,796 position:50%
This means that either
your app or extension


532
00:19:23,796 --> 00:19:26,766 line:0
could try to read the file
and it might be missing.


533
00:19:26,766 --> 00:19:28,768 line:0
This means that you will need
think about your app


534
00:19:28,768 --> 00:19:31,170 line:0
and extension in a similar way
that you would think about


535
00:19:31,170 --> 00:19:33,539 line:0
two threads within your app.


536
00:19:33,539 --> 00:19:36,042 position:50%
Luckily, Background Assets
provides a way to synchronize


537
00:19:36,042 --> 00:19:38,110 position:50%
between your app
and its extension.


538
00:19:38,110 --> 00:19:39,345 line:0
Let's talk about that now!


539
00:19:39,345 --> 00:19:41,414 line:-1
Synchronizing between
your app and its extension


540
00:19:41.414 --> 00:19:44.283 line:-1 position:50%
is extremely simple
with Background Assets.


541
00:19:44,283 --> 00:19:46,552 line:-1
What we're currently looking at
is the download manager's


542
00:19:46.552 --> 00:19:49.755 line:-1 position:50%
delegate function for when
a download has completed.


543
00:19:49.755 --> 00:19:52.491 line:-1 position:50%
A URL is provided that contains
a local path to the file


544
00:19:52.491 --> 00:19:55.828 line:-1 position:50%
that your app or extension
has access to.


545
00:19:55.828 --> 00:19:58.197 line:-1 position:50%
In this example, we'll be
ensuring mutual exclusion


546
00:19:58,197 --> 00:19:59,432 line:-1
of this file.


547
00:19:59.432 --> 00:20:01.600 line:-1 position:50%
Next, we grab a reference
to the download manager


548
00:20:01.600 --> 00:20:03.736 line:-1 position:50%
and use the
withExclusiveControl function,


549
00:20:03.736 --> 00:20:05.805 line:-1 position:50%
which takes
a completion handler.


550
00:20:05.805 --> 00:20:08.340 line:-1 position:50%
All code that is executed within
the completion handler scope


551
00:20:08.340 --> 00:20:11.010 line:-1 position:50%
is guaranteed to be mutually
exclusive with other calls


552
00:20:11,010 --> 00:20:13,179 line:-1
that require exclusive control.


553
00:20:13.179 --> 00:20:16.348 line:-1 position:50%
Meaning if your extension calls
withExclusiveControl


554
00:20:16.348 --> 00:20:19.185 line:-1 position:50%
while you app has not returned
from its completion handler,


555
00:20:19.185 --> 00:20:21.220 line:-1 position:50%
then the extension will wait.


556
00:20:21.220 --> 00:20:23.155 line:-1 position:50%
This applies in the other
direction as well.


557
00:20:23,155 --> 00:20:25,925 line:-1
If the extension acquires
exclusive control first,


558
00:20:25.925 --> 00:20:28.294 line:-1 position:50%
then the app will wait until
the extension is terminated


559
00:20:28,294 --> 00:20:30,863 line:-1
or releases control
by exiting scope.


560
00:20:30.863 --> 00:20:32.298 line:-1 position:50%
An important thing
to keep in mind


561
00:20:32.298 --> 00:20:35.067 line:-1 position:50%
is that acquiring exclusive
control can fail.


562
00:20:35,067 --> 00:20:37,336 line:-1
It is extremely unlikely
that this will occur,


563
00:20:37,336 --> 00:20:40,072 line:-1
but in the event it does,
your code should handle it.


564
00:20:40.072 --> 00:20:42.475 line:-1 position:50%
You can detect if exclusive
control could not be acquired


565
00:20:42.475 --> 00:20:44.376 line:-1 position:50%
by checking if the error
provided by the function


566
00:20:44.376 --> 00:20:45.611 line:-1 position:50%
is not nil.


567
00:20:45,611 --> 00:20:47,947 position:50%
From this point on,
you are guaranteed that your app


568
00:20:47,947 --> 00:20:51,383 position:50%
or extension has exclusive
access within its context.


569
00:20:51,383 --> 00:20:53,052 position:50%
So based on our
earlier example,


570
00:20:53,052 --> 00:20:55,588 position:50%
it is now perfectly valid to
read the contents of the file


571
00:20:55,588 --> 00:20:58,524 line:0
and then clean it up,
if you so choose.


572
00:20:58,524 --> 00:21:01,861 position:50%
Just make sure to be aware that
when your other app or extension


573
00:21:01,861 --> 00:21:04,396 position:50%
gets its opportunity
to enter exclusive control


574
00:21:04,396 --> 00:21:07,166 line:0
that it knows that you have
already processed the file.


575
00:21:07,166 --> 00:21:09,835 position:50%
One way this can be accomplished
is by first checking


576
00:21:09,835 --> 00:21:12,738 position:50%
if the file exists or writing
to a database or plist.


577
00:21:12.738 --> 00:21:15.374 line:-1 position:50%
As a reminder, the background
downloader extension


578
00:21:15.374 --> 00:21:18.177 line:-1 position:50%
is for collecting and scheduling
the downloads of large assets


579
00:21:18.177 --> 00:21:19.578 line:-1 position:50%
for your app.


580
00:21:19.578 --> 00:21:21.080 line:-1 position:50%
Its runtime is short lived,


581
00:21:21.080 --> 00:21:22.715 line:-1 position:50%
so please keep
the work that is done


582
00:21:22,715 --> 00:21:24,550 line:-1
within the extension
to a minimum.


583
00:21:24.550 --> 00:21:26.318 line:-1 position:50%
You should also place
your extension and app


584
00:21:26.318 --> 00:21:28.787 line:-1 position:50%
within a shared app group
so that both can access files


585
00:21:28.787 --> 00:21:30.923 line:-1 position:50%
that are downloaded
by one another.


586
00:21:30.923 --> 00:21:33.592 line:-1 position:50%
And finally, the extension
is brokered by the system


587
00:21:33.592 --> 00:21:34.693 line:-1 position:50%
and not your app.


588
00:21:34.693 --> 00:21:36.095 line:-1 position:50%
Now that you know
how to develop


589
00:21:36.095 --> 00:21:38.130 line:-1 position:50%
a basic background
download extension,


590
00:21:38.130 --> 00:21:39.932 line:-1 position:50%
you have everything you need
to start implementing


591
00:21:39.932 --> 00:21:41.700 line:-1 position:50%
Background Assets into your app.


592
00:21:41.700 --> 00:21:43.469 line:-1 position:50%
Now, let's go over
what we've learned.


593
00:21:43.469 --> 00:21:45.604 line:-1 position:50%
The download manager is used
to coordinate and schedule


594
00:21:45,604 --> 00:21:48,707 line:-1
downloads between your app
and its extension,


595
00:21:48.707 --> 00:21:50.809 line:-1 position:50%
therefore you should be using
the download manager


596
00:21:50.809 --> 00:21:52.244 line:-1 position:50%
in both places.


597
00:21:52,244 --> 00:21:55,347 line:-1
Your extension runs even if your
app is not in the foreground.


598
00:21:55.347 --> 00:21:58.083 line:-1 position:50%
This can occur during
app installation, update,


599
00:21:58.083 --> 00:22:01.053 line:-1 position:50%
or periodically at an interval
determined by the system.


600
00:22:01.053 --> 00:22:02.388 line:-1 position:50%
If your app is launched


601
00:22:02,388 --> 00:22:04,290 line:-1
and content that was being
downloaded in the background


602
00:22:04,290 --> 00:22:05,925 line:-1
is now be waited on,


603
00:22:05.925 --> 00:22:08.961 line:-1 position:50%
please immediately promote those
downloads to the foreground.


604
00:22:08.961 --> 00:22:11.897 line:-1 position:50%
The extension can only schedule
downloads in the background.


605
00:22:11,897 --> 00:22:14,233 line:-1
By having your app promote them
to the foreground,


606
00:22:14.233 --> 00:22:17.203 line:-1 position:50%
ensures that your content will
arrive as quickly as possible.


607
00:22:17,203 --> 00:22:19,271 line:-1
If you ever find yourself
needing exclusive access


608
00:22:19.271 --> 00:22:23.075 line:-1 position:50%
to the download manager, please
use the exclusive control APIs.


609
00:22:23.075 --> 00:22:25.678 line:-1 position:50%
This will ensure that only
your app or extension


610
00:22:25.678 --> 00:22:27.913 line:-1 position:50%
will have runtime
within that window.


611
00:22:27.913 --> 00:22:30.683 line:-1 position:50%
This is extremely useful so that
you don't have to think about


612
00:22:30.683 --> 00:22:33.485 line:-1 position:50%
your extension racing your app
when accessing its container


613
00:22:33.485 --> 00:22:34.820 line:-1 position:50%
or managing downloads.


614
00:22:34.820 --> 00:22:37.456 line:-1 position:50%
If there is anything you should
take from this presentation,


615
00:22:37.456 --> 00:22:39.925 line:-1 position:50%
it's that waiting results
in a poor app experience.


616
00:22:39.925 --> 00:22:42.161 line:-1 position:50%
Minimize waiting
by making your app usable


617
00:22:42,161 --> 00:22:45,164 line:-1
while the task
you are waiting on is underway.


618
00:22:45.164 --> 00:22:47.333 line:-1 position:50%
One of the ways you can
minimize waiting in your app


619
00:22:47.333 --> 00:22:49.235 line:-1 position:50%
is to adopt the new
Background Assets framework


620
00:22:49.235 --> 00:22:51.804 line:-1 position:50%
along with the underlying
background download extension.


621
00:22:51,804 --> 00:22:53,772 line:-1
This helps to ensure
that your app will have


622
00:22:53,772 --> 00:22:57,176 line:-1
all of its content ready
before the app is launched.


623
00:22:57.176 --> 00:22:59.044 line:-1 position:50%
Make sure to also check out
the documentation,


624
00:22:59.044 --> 00:23:01.547 line:-1 position:50%
which includes extra information
that may not have been


625
00:23:01.547 --> 00:23:03.649 line:-1 position:50%
incorporated into
this presentation;


626
00:23:03.649 --> 00:23:05.718 line:-1 position:50%
including how to test
your extension


627
00:23:05.718 --> 00:23:08.387 line:-1 position:50%
and to simulate
its entry points.


628
00:23:08.387 --> 00:23:10.122 line:-1 position:50%
We're really excited
to get to share


629
00:23:10.122 --> 00:23:12.691 line:-1 position:50%
Background Assets with you,
and we value your feedback.


630
00:23:12.691 --> 00:23:14.827 line:-1 position:50%
Please use Feedback Assistant
to let us know


631
00:23:14,827 --> 00:23:17,896 line:-1
what is working for you
and what you'd like us improve.


632
00:23:17.896 --> 00:23:20.332 line:-1 position:50%
This is a new framework
and we have the opportunity


633
00:23:20.332 --> 00:23:23.369 line:-1 position:50%
to make adjustments
during seeding.


634
00:23:23.369 --> 00:23:24.837 line:-1 position:50%
We have
some additional sessions


635
00:23:24.837 --> 00:23:26.438 line:-1 position:50%
that we think you might
find interesting


636
00:23:26.438 --> 00:23:28.340 line:-1 position:50%
and we encourage you
to check them out.


637
00:23:28,340 --> 00:23:31,810 line:0
"Accelerating networking with
HTTP3" is a fantastic session


638
00:23:31,810 --> 00:23:33,912 line:0
that pairs well with
Background Assets.


639
00:23:33,912 --> 00:23:37,082 position:50%
Also, I encourage you
to check out another session:


640
00:23:37,082 --> 00:23:39,952 line:0
the "Introducing on demand
resources" presentation


641
00:23:39,952 --> 00:23:41,920 line:0
covers an alternative
to Background Assets


642
00:23:41,920 --> 00:23:44,023 line:0
where your content
is hosted by Apple


643
00:23:44,023 --> 00:23:46,659 line:0
and files are downloaded
at your request.


644
00:23:46,659 --> 00:23:48,260 position:50%
Both of these sessions
are really engaging


645
00:23:48,260 --> 00:23:49,895 position:50%
and have a lot to offer.


646
00:23:49,895 --> 00:23:51,597 line:-1
Thank you for spending
your time with me,


647
00:23:51,597 --> 00:23:53,032 line:-1
and on behalf of everyone
at Apple,


648
00:23:53.032 --> 00:23:55.000 line:-1 position:50%
we hope you have
a fantastic WWDC!


649
00:23:55,000 --> 00:23:59,004 position:90% size:2% align:right
♪

