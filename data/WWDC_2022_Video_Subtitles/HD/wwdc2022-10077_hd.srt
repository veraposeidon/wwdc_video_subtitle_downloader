2
00:00:00,501 --> 00:00:08,509 line:-1
♪ ♪


3
00:00:09.843 --> 00:00:12.212 line:-1 align:center
Tommy Pauly: Hi, I'm Tommy Pauly,


4
00:00:12,246 --> 00:00:16,483 line:-2
and I'm excited to share how your apps
and websites can work together


5
00:00:16,517 --> 00:00:21,021 line:-2
with Apple and fraud prevention providers
across the industry


6
00:00:21,054 --> 00:00:23,857 line:-1
to reduce the need for CAPTCHAs.


7
00:00:23.891 --> 00:00:27.027 line:-2 align:center
Today, I'll talk about:
Private Access Tokens,


8
00:00:27,060 --> 00:00:31,431 line:-2
and how they can be powerful tools
for fraud prevention;


9
00:00:31,465 --> 00:00:34,334 line:-2
how to enable support
for Private Access Tokens


10
00:00:34.368 --> 00:00:37.171 line:-1 align:center
on the servers you operate;


11
00:00:37.204 --> 00:00:40.908 line:-2 align:center
and, how you can use these tokens
in your apps.


12
00:00:42.276 --> 00:00:44.678 line:-1 align:center
To introduce Private Access Tokens,


13
00:00:44,711 --> 00:00:49,583 line:-2
I'll start by explaining why
CAPTCHAs are used in the first place.


14
00:00:49,616 --> 00:00:53,954 line:-2
Chances are, if you've signed up
for a new account on a website,


15
00:00:53,987 --> 00:00:56,857 line:-2
or tried to sign in
with an existing account,


16
00:00:56,890 --> 00:01:00,694 line:-2
you've encountered CAPTCHAs like these
at some point.


17
00:01:00.727 --> 00:01:03.897 line:-2 align:center
Sometimes,
a CAPTCHA is just a button to press,


18
00:01:03,931 --> 00:01:06,466 line:-1
but others can be a challenge to fill out.


19
00:01:07.768 --> 00:01:11.004 line:-2 align:center
You likely don't enjoy being
interrupted by these.


20
00:01:11,038 --> 00:01:13,473 line:-1
I certainly don't.


21
00:01:13,507 --> 00:01:16,276 line:-1
The reason these experiences exist


22
00:01:16,310 --> 00:01:19,179 line:-1
is to prevent fraudulent activity.


23
00:01:20,380 --> 00:01:25,185 line:-2
If you run a server, you don't want it
to be overwhelmed by fraud.


24
00:01:25,219 --> 00:01:29,089 line:-2
Some attempts to create accounts
or buy products


25
00:01:29,122 --> 00:01:31,592 line:-1
come from legitimate users.


26
00:01:31.625 --> 00:01:36.096 line:-2 align:center
But other attempts
may be from attackers or bots.


27
00:01:36,129 --> 00:01:39,733 line:-2
Unfortunately,
the common tools to prevent fraud,


28
00:01:39,766 --> 00:01:41,468 line:-1
like CAPTCHAs,


29
00:01:41,502 --> 00:01:45,405 line:-2
often make it harder
for people to use your app or website.


30
00:01:45,973 --> 00:01:49,009 line:-2
Finding the right balance
between a good experience


31
00:01:49,042 --> 00:01:52,379 line:-1
and preventing fraud is a challenge.


32
00:01:53,881 --> 00:01:58,886 line:-2
CAPTCHAs often lead to a slower
and more complex user experience.


33
00:01:58.919 --> 00:02:00.954 line:-1 align:center
By trying to prevent attacks,


34
00:02:00.988 --> 00:02:03.624 line:-1 align:center
you may also lose valuable customers.


35
00:02:04.992 --> 00:02:08.595 line:-1 align:center
CAPTCHAs can also pose a privacy risk.


36
00:02:08.629 --> 00:02:11.465 line:-2 align:center
In order to determine
if a client is trusted


37
00:02:11,498 --> 00:02:13,734 line:-1
and can get an easier CAPTCHA,


38
00:02:13,767 --> 00:02:17,738 line:-2
servers often rely on tracking
or fingerprinting clients


39
00:02:17,771 --> 00:02:20,941 line:-1
by using their IP address.


40
00:02:20,974 --> 00:02:25,279 line:-2
This kind of tracking is at odds
with the direction of internet privacy


41
00:02:25,312 --> 00:02:29,316 line:-2
being taken by Safari,
Mail Privacy Protection,


42
00:02:29,349 --> 00:02:31,418 line:-1
and iCloud Private Relay.


43
00:02:32,886 --> 00:02:37,024 line:-2
And CAPTCHAs can pose a serious problem
for accessibility.


44
00:02:37,057 --> 00:02:39,927 line:-1
By trying to prevent access from bots,


45
00:02:39.960 --> 00:02:43.864 line:-2 align:center
they also block out real humans
who have disabilities


46
00:02:43,897 --> 00:02:46,133 line:-1
or language barriers.


47
00:02:46,166 --> 00:02:48,635 line:-1
There is a better way.


48
00:02:48.669 --> 00:02:52.840 line:-2 align:center
Even if someone is interacting
with your website for the first time,


49
00:02:52,873 --> 00:02:56,710 line:-2
if they are loading it through an app
or browser like Safari,


50
00:02:56,743 --> 00:03:02,482 line:-2
they've already performed many actions
that are hard for a bot to imitate.


51
00:03:02,516 --> 00:03:06,286 line:-1
First, they have an iPhone, iPad, or Mac,


52
00:03:06.320 --> 00:03:09.323 line:-2 align:center
and they've unlocked the device
with their password,


53
00:03:09.356 --> 00:03:12.092 line:-1 align:center
Touch ID, or Face ID.


54
00:03:12.125 --> 00:03:16.697 line:-2 align:center
They're almost always signed in
to the device with their Apple ID.


55
00:03:16,730 --> 00:03:19,399 line:-1
And they've launched a code-signed app.


56
00:03:20.767 --> 00:03:25.239 line:-2 align:center
This information can help your servers
trust legitimate clients


57
00:03:25.272 --> 00:03:28.976 line:-2 align:center
and prevent fraud,
without relying on CAPTCHAs,


58
00:03:29,009 --> 00:03:34,181 line:-2
and without compromising privacy
by tracking clients.


59
00:03:34.214 --> 00:03:37.784 line:-2 align:center
Private Access Tokens
are what allow your servers


60
00:03:37,818 --> 00:03:40,420 line:-1
to automatically trust clients,


61
00:03:40.454 --> 00:03:44.725 line:-1 align:center
new in iOS 16 and macOS Ventura.


62
00:03:44.758 --> 00:03:47.561 line:-1 align:center
Before explaining how these tokens work,


63
00:03:47,594 --> 00:03:49,863 line:-1
I'm going to show them in action.


64
00:03:49,897 --> 00:03:52,032 line:-1
You're going to love this.


65
00:03:52.065 --> 00:03:55.602 line:-2 align:center
I want to read an article
on the Financial Times website.


66
00:03:55,636 --> 00:03:58,639 line:-2
I'm very excited
about these cinnamon buns.


67
00:03:58.672 --> 00:04:01.408 line:-2 align:center
And I've loaded the site
on two different phones:


68
00:04:01,441 --> 00:04:06,280 line:-2
one running iOS 15
and one running iOS 16,


69
00:04:06.313 --> 00:04:09.683 line:-1 align:center
which supports Private Access Tokens.


70
00:04:09,716 --> 00:04:12,119 line:-1
Starting with the iOS 15 phone,


71
00:04:12.152 --> 00:04:14.221 line:-1 align:center
I click Sign In,


72
00:04:14.254 --> 00:04:17.558 line:-1 align:center
and fill out my account and password.


73
00:04:17,591 --> 00:04:20,494 line:-1
But then, I get hit with a CAPTCHA.


74
00:04:20.527 --> 00:04:25.265 line:-2 align:center
I need to type in the letters
before being able to read that article.


75
00:04:26,800 --> 00:04:30,470 line:-2
When I do the exact same thing
on the iOS 16 phone


76
00:04:30,504 --> 00:04:33,740 line:-1
that supports Private Access Tokens,


77
00:04:33,774 --> 00:04:36,610 line:-1
I get right through.


78
00:04:36.643 --> 00:04:40.781 line:-2 align:center
This is going to save a lot of people,
a lot of time,


79
00:04:40,814 --> 00:04:44,685 line:-2
and your customers
will appreciate being trusted.


80
00:04:44.718 --> 00:04:50.224 line:-2 align:center
Private Access Tokens let servers
avoid CAPTCHAs, like you just saw,


81
00:04:50,257 --> 00:04:56,663 line:-2
by using technology being standardized
in the IETF Privacy Pass working group.


82
00:04:56,697 --> 00:05:00,801 line:-2
Apple is working with companies
across the industry to make this possible.


83
00:05:02,302 --> 00:05:06,139 line:-2
Using this protocol,
servers can request tokens


84
00:05:06.173 --> 00:05:09.443 line:-1 align:center
using a new HTTP authentication method,


85
00:05:09.476 --> 00:05:11.612 line:-1 align:center
PrivateToken.


86
00:05:11,645 --> 00:05:14,982 line:-1
These tokens use RSA Blind Signatures


87
00:05:15.015 --> 00:05:17.284 line:-1 align:center
to cryptographically sign the fact


88
00:05:17.317 --> 00:05:21.488 line:-2 align:center
that a client was able to pass
an attestation check.


89
00:05:21.522 --> 00:05:23.991 line:-1 align:center
These signatures are "unlinkable",


90
00:05:24,024 --> 00:05:27,027 line:-2
which means that servers
that receive tokens


91
00:05:27.060 --> 00:05:29.296 line:-1 align:center
can only check that they are valid,


92
00:05:29,329 --> 00:05:35,469 line:-2
but they cannot discover client identities
or recognize clients over time.


93
00:05:35,502 --> 00:05:37,504 line:-1
Here's how the protocol works.


94
00:05:39,206 --> 00:05:45,712 line:1
First, when the iOS or macOS client
accesses a server over HTTP,


95
00:05:45,746 --> 00:05:48,348 align:center
the server sends back a challenge using


96
00:05:48,382 --> 00:05:51,785 line:1
the PrivateToken authentication scheme.


97
00:05:51,818 --> 00:05:56,089 line:1
This specifies a token issuer
that is trusted by the server.


98
00:05:58,292 --> 00:06:00,627 align:center
When the client needs to fetch a token,


99
00:06:00,661 --> 00:06:03,063 line:1
it contacts an iCloud attester


100
00:06:03,096 --> 00:06:05,566 align:center
and sends a token request.


101
00:06:05,599 --> 00:06:07,734 align:center
This token request is "blinded"


102
00:06:07,768 --> 00:06:11,805 align:center
so it can't be linked
to the server challenge.


103
00:06:11,839 --> 00:06:14,608 line:1
The attester performs device attestation,


104
00:06:14,641 --> 00:06:18,879 line:1
using certificates stored
in the device's Secure Enclave,


105
00:06:18,912 --> 00:06:21,982 line:1
and verifies
that the account is in good standing.


106
00:06:23,116 --> 00:06:25,819 line:1
This attester
can also perform rate-limiting,


107
00:06:25,853 --> 00:06:30,190 align:center
to recognize if the client device
is following normal patterns,


108
00:06:30,224 --> 00:06:34,962 line:1
or may have been compromised
or used as part of a farm of devices.


109
00:06:36,129 --> 00:06:38,098 align:center
If the client can be validated,


110
00:06:38,131 --> 00:06:42,436 line:1
the attester sends the request
for a new token to the issuer.


111
00:06:44,204 --> 00:06:46,507 line:-1
When the token issuer gets the request,


112
00:06:46,540 --> 00:06:49,309 line:-1
it doesn't know anything about the client.


113
00:06:49.343 --> 00:06:52.012 line:-1 align:center
But since it trusts the iCloud attester,


114
00:06:52,045 --> 00:06:53,747 line:-1
it signs the token.


115
00:06:56,216 --> 00:07:00,020 line:-2
The client then receives the signed token,
and transforms it


116
00:07:00.053 --> 00:07:02.389 line:-1 align:center
in a process called "unblinding"


117
00:07:02,422 --> 00:07:05,158 line:-1
so the original server can verify it.


118
00:07:06,393 --> 00:07:11,365 line:-2
And finally, the client presents
the signed token to the server.


119
00:07:11.398 --> 00:07:15.035 line:-2 align:center
The server can check
that this token is signed by the Issuer,


120
00:07:15,068 --> 00:07:19,940 line:-2
but it cannot use the token
to identify or recognize the client.


121
00:07:19.973 --> 00:07:26.146 line:-2 align:center
So how can you take advantage
of this technology on your servers?


122
00:07:26.180 --> 00:07:31.351 line:-2 align:center
There are three steps to adopting
Private Access Tokens on your server.


123
00:07:31,385 --> 00:07:34,588 line:-2
First, you'll need to select
a token issuer.


124
00:07:34,621 --> 00:07:39,993 line:-2
Second, your server will need to send out
HTTP authentication challenges


125
00:07:40,027 --> 00:07:42,629 line:-1
when you want to validate clients.


126
00:07:42.663 --> 00:07:47.935 line:-2 align:center
And third, your server will need
to validate the tokens sent by clients.


127
00:07:48,836 --> 00:07:52,406 align:center
The token issuer you select
is a trusted provider


128
00:07:52,439 --> 00:07:55,943 align:center
that can sign tokens
that your server validates.


129
00:07:55,976 --> 00:07:58,745 line:1
This may be your existing
CAPTCHA provider,


130
00:07:58,779 --> 00:08:00,747 line:1
your web hosting service,


131
00:08:00,781 --> 00:08:03,350 align:center
or your content delivery network,


132
00:08:03,383 --> 00:08:06,453 align:center
also called a CDN.


133
00:08:06.486 --> 00:08:10.490 line:-1 align:center
In the iOS 16 and macOS Ventura betas,


134
00:08:10.524 --> 00:08:15.262 line:-2 align:center
there are two token issuers
that you can already start testing with.


135
00:08:15,295 --> 00:08:18,899 line:-1
Fastly and Cloudflare are two CDNs


136
00:08:18,932 --> 00:08:22,336 line:-2
that have been developing
the Privacy Pass standards,


137
00:08:22.369 --> 00:08:27.274 line:-2 align:center
and have already made
their issuer services available.


138
00:08:27,307 --> 00:08:32,079 line:-2
Other CAPTCHA providers,
web hosting services, and CDNs


139
00:08:32,112 --> 00:08:37,751 line:-2
will also be able to run token issuers
that will work with Apple devices.


140
00:08:37,784 --> 00:08:43,457 line:-2
Issuers will be able to sign up
later this year at register.apple.com.


141
00:08:44.992 --> 00:08:48.395 line:-2 align:center
It's important that the use
of a specific token issuer


142
00:08:48.428 --> 00:08:53.267 line:-2 align:center
doesn't become a way to identify
what websites a client is accessing–


143
00:08:53,300 --> 00:08:56,069 line:-1
that would be a problem for privacy.


144
00:08:56,103 --> 00:09:00,407 line:-2
So each token issuer needs to be
a large service


145
00:09:00.440 --> 00:09:03.410 line:-2 align:center
that work with
at least hundreds of servers.


146
00:09:06.446 --> 00:09:08.849 line:-1 align:center
When a client accesses your server,


147
00:09:08,882 --> 00:09:13,487 line:-2
you can request tokens by sending
an HTTP authentication challenge


148
00:09:13,520 --> 00:09:16,290 line:-1
with the PrivateToken scheme.


149
00:09:16,323 --> 00:09:19,126 line:-1
To do this, you have two options:


150
00:09:19.159 --> 00:09:23.664 line:-2 align:center
Either you can work with your existing
CAPTCHA or fraud prevention provider


151
00:09:23,697 --> 00:09:26,400 line:-1
to build the challenge into their scripts,


152
00:09:26,433 --> 00:09:29,503 line:-1
so it is handled automatically for you,


153
00:09:29,536 --> 00:09:34,041 line:-2
or you can choose to send these challenges
directly from your server.


154
00:09:35,342 --> 00:09:37,845 line:-2
If you're doing this
as part of your website,


155
00:09:37.878 --> 00:09:41.114 line:-2 align:center
the challenge must come from
a first-party domain–


156
00:09:41.148 --> 00:09:43.817 line:-1 align:center
a subdomain of your main URL


157
00:09:43,851 --> 00:09:48,121 line:-2
and not a separate third-party domain
embedded on your site.


158
00:09:50,023 --> 00:09:52,326 line:-1
When clients return tokens to you,


159
00:09:52,359 --> 00:09:57,264 line:-2
you'll need to check their validity
using your issuer's public key.


160
00:09:57,297 --> 00:10:01,001 line:-2
You may also want to enforce checks
to prevent replay attacks,


161
00:10:01.034 --> 00:10:05.138 line:-2 align:center
where a client could try to present
a token multiple times.


162
00:10:05,172 --> 00:10:09,042 line:-1
Tokens are meant to be one-time use only.


163
00:10:09,076 --> 00:10:12,479 line:-2
You can prevent replay attacks
either by remembering


164
00:10:12,513 --> 00:10:15,249 line:-1
what tokens were sent previously,


165
00:10:15,282 --> 00:10:21,121 line:-2
or requiring that tokens sign
a unique value sent in your challenge.


166
00:10:23,323 --> 00:10:25,993 line:-2
Your site still needs to work
with legacy clients


167
00:10:26,026 --> 00:10:29,563 line:-2
that won't respond
to this authentication challenge.


168
00:10:29,596 --> 00:10:34,434 line:-2
So it's important that the authentication
should not block your main page load,


169
00:10:34.468 --> 00:10:38.972 line:-2 align:center
but instead be treated
as an optional way to trust a client.


170
00:10:39,006 --> 00:10:44,578 line:-2
Web servers that are accessed through
Safari and WebKit will work automatically,


171
00:10:44,611 --> 00:10:49,116 line:-2
but you can also use Private Access Tokens
within your app directly.


172
00:10:49,149 --> 00:10:54,488 line:-2
Private Access Tokens require iOS 16
or macOS Ventura


173
00:10:54.521 --> 00:10:58.258 line:-2 align:center
on a device that has
an Apple ID signed in.


174
00:10:58,292 --> 00:11:01,461 line:-2
This Apple ID is only used
for attestation,


175
00:11:01,495 --> 00:11:05,999 line:-2
and is not shared with the servers
that receive tokens.


176
00:11:06,033 --> 00:11:11,738 line:-2
Within your app, tokens are available
if you use WebKit or URLSession


177
00:11:11,772 --> 00:11:15,275 line:-1
to contact your servers using HTTP.


178
00:11:15.309 --> 00:11:19.680 line:-2 align:center
Then anytime your app receives
a challenge while it's in the foreground,


179
00:11:19,713 --> 00:11:23,617 line:-2
the system will automatically send a token
as authentication.


180
00:11:25,118 --> 00:11:27,187 line:-1
If you're using URLSession,


181
00:11:27.221 --> 00:11:29.389 line:-1 align:center
you don't need to do anything explicitly


182
00:11:29.423 --> 00:11:32.392 line:-1 align:center
to make Private Access Tokens work.


183
00:11:32.426 --> 00:11:35.996 line:-2 align:center
URLSession will automatically respond
to challenges


184
00:11:36.029 --> 00:11:41.034 line:-2 align:center
using the PrivateToken HTTP
authentication scheme.


185
00:11:41.068 --> 00:11:44.171 line:-2 align:center
However, if there's an error
in fetching a token,


186
00:11:44.204 --> 00:11:46.773 line:-2 align:center
such as if your app
isn't in the foreground


187
00:11:46,807 --> 00:11:50,043 line:-2
or the device doesn't have
an Apple ID signed in,


188
00:11:50.077 --> 00:11:53.847 line:-2 align:center
your app will receive
the 401 HTTP response


189
00:11:53.881 --> 00:11:56.316 line:-1 align:center
that included the token challenge.


190
00:11:56.350 --> 00:12:00.454 line:-2 align:center
This allows your app to know
that the token challenge was received,


191
00:12:00.487 --> 00:12:05.425 line:-2 align:center
and provides a chance to handle the error
correctly for your use case.


192
00:12:05,459 --> 00:12:08,996 line:-2
Make apps and websites better
experiences for everyone


193
00:12:09.029 --> 00:12:13.734 line:-2 align:center
by avoiding CAPTCHAs whenever
Private Access Tokens are available.


194
00:12:13,767 --> 00:12:19,540 line:-2
Go and enable your servers to
send token challenges and validate tokens.


195
00:12:19,573 --> 00:12:23,377 line:-2
And, in your apps,
use URLSession or WebKit


196
00:12:23.410 --> 00:12:27.014 line:-2 align:center
to automatically support
Private Access Tokens.


197
00:12:27,047 --> 00:12:31,518 line:-2
I'm looking forward to the CAPTCHA-free
experiences you will build.

