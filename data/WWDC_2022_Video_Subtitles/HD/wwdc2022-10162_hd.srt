2
00:00:01,034 --> 00:00:07,040 line:-1
[upbeat music]


3
00:00:09.309 --> 00:00:11.411 line:-1 align:center
- Hi! My name is Andrei.


4
00:00:11.445 --> 00:00:15.282 line:-2 align:center
I'm a GPU software engineer
with Metal Frameworks team.


5
00:00:15,315 --> 00:00:19,686 line:-2
Today, I'm excited to introduce to you
Metal mesh shaders.


6
00:00:19.720 --> 00:00:23.290 line:-2 align:center
Mesh shaders is the new
flexible pipeline in Metal


7
00:00:23,323 --> 00:00:26,927 line:-2
for GPU-driven
geometry creation and processing.


8
00:00:26.960 --> 00:00:31.231 line:-2 align:center
It improves on the vertex/fragment
pipeline, adding a lot of flexibility


9
00:00:31.265 --> 00:00:34.968 line:-2 align:center
and removing the limitations
of per-vertex processing.


10
00:00:35.002 --> 00:00:38.605 line:-2 align:center
It has multiple applications,
, but not limited to:


11
00:00:38,639 --> 00:00:41,108 line:-1
fine-grained geometry culling,


12
00:00:41,141 --> 00:00:44,478 line:-2
scalable procedural geometry
creation on the GPU,


13
00:00:44.511 --> 00:00:47.080 line:-1 align:center
and allowing custom geometry inputs


14
00:00:47,114 --> 00:00:49,283 line:-1
such as compressed vertex streams,


15
00:00:49.316 --> 00:00:52.553 line:-2 align:center
meshlets and complex procedural
algorithms.


16
00:00:52,586 --> 00:00:55,289 line:-2
I would like to
cover these three things today.


17
00:00:55,322 --> 00:00:59,359 line:-2
First, I will go over what
Metal mesh shaders are.


18
00:00:59.393 --> 00:01:03.430 line:-2 align:center
Then, I would like to tell you about
two mesh shaders use cases.


19
00:01:03.463 --> 00:01:06.800 line:-2 align:center
Mesh shaders are great
for generating procedural geometry


20
00:01:06.834 --> 00:01:09.102 line:-1 align:center
such as rendering procedural hair.


21
00:01:09,136 --> 00:01:13,207 line:-2
Mesh shaders also help
improve scene processing and rendering.


22
00:01:13.240 --> 00:01:15.909 line:-2 align:center
A primary example of this
is using mesh shaders


23
00:01:15.943 --> 00:01:18.979 line:-2 align:center
to implement
GPU-driven meshlet culling.


24
00:01:19,012 --> 00:01:21,348 line:-1
Let's start with introducing mesh shaders.


25
00:01:21.381 --> 00:01:23.383 line:-1 align:center
Here is the Stanford Bunny,


26
00:01:23,417 --> 00:01:27,855 line:-2
which represents a typical mesh
that you could render on the GPU.


27
00:01:27.888 --> 00:01:31.458 line:-2 align:center
In order to render this mesh,
the vertex and index data


28
00:01:31,491 --> 00:01:34,962 line:-2
would first have to be placed
in the device memory.


29
00:01:34.995 --> 00:01:39.733 line:-2 align:center
You would then have to use render
command encoder to execute a draw call.


30
00:01:39,766 --> 00:01:44,304 line:-2
A traditional rendering pipeline
consists of three fundamental stages:


31
00:01:44,338 --> 00:01:49,176 line:-2
A programmable vertex shader stage,
a fixed-function rasterization stage,


32
00:01:49,209 --> 00:01:52,346 line:-2
and a programmable fragment shader
stage.


33
00:01:52.379 --> 00:01:54.848 line:-2 align:center
The vertex shader stage
would take geometry


34
00:01:54.882 --> 00:01:57.751 line:-2 align:center
from device memory
as an input and process it.


35
00:01:57,784 --> 00:02:00,888 line:-2
The rasterizer would produce
screen space fragments,


36
00:02:00.921 --> 00:02:04.391 line:-2 align:center
and the fragment shader would
shade them to produce the final image.


37
00:02:04,424 --> 00:02:08,862 line:-2
This pipeline has been, and still is,
serving its purpose extremely well.


38
00:02:08,896 --> 00:02:13,300 line:-2
However, it lacks flexibility
and has certain limitations.


39
00:02:13.333 --> 00:02:15.335 line:-1 align:center
Let's step through an example.


40
00:02:15,369 --> 00:02:19,606 line:-2
Imagine that you want to generate
some procedural geometry on the GPU.


41
00:02:19,640 --> 00:02:25,179 line:-2
For example, you've decided
to add procedural fur to this bunny.


42
00:02:25.212 --> 00:02:30.117 line:-2 align:center
Let me show you how this task is handled
by the traditional geometry pipeline.


43
00:02:30.150 --> 00:02:33.487 line:-2 align:center
Traditionally,
in order to generate procedural geometry,


44
00:02:33,520 --> 00:02:37,057 line:0
you would also need to have
a compute command encoder


45
00:02:37,090 --> 00:02:40,627 align:center
that would perform
a compute kernel dispatch.


46
00:02:40,661 --> 00:02:44,064 align:center
The compute kernel would take
the original mesh as an input,


47
00:02:44,097 --> 00:02:49,036 align:center
generate procedural geometry and
output it back into device memory.


48
00:02:49,069 --> 00:02:52,806 line:0
You would then use a render command
encoder to execute a draw call


49
00:02:52,840 --> 00:02:57,444 align:center
that would take procedural geometry
as an input and produce a final image .


50
00:02:57,477 --> 00:03:00,547 align:center
Not only does this approach require
two command encoders,


51
00:03:00,581 --> 00:03:03,050 line:0
it also requires you
to allocate additional memory


52
00:03:03,083 --> 00:03:05,519 line:0
to store the procedural geometry.


53
00:03:05,552 --> 00:03:09,056 align:center
In case of indirect draw calls
or high expansion factors,


54
00:03:09,089 --> 00:03:13,327 align:center
the amount of this memory can
be quite high and hard to predict.


55
00:03:13,360 --> 00:03:18,799 line:0
There is also a barrier between the two
encoders, serializing work across the GPU.


56
00:03:18,832 --> 00:03:21,735 line:0
Metal mesh shaders addresses all
of those issues.


57
00:03:21.768 --> 00:03:24.538 line:-1 align:center
Mesh shaders is a new geometry pipeline


58
00:03:24.571 --> 00:03:29.209 line:-2 align:center
that replaces the vertex shader stage
with two new programmable stages--


59
00:03:29.243 --> 00:03:32.179 line:-2 align:center
the object shader stage
and the mesh shader stage.


60
00:03:32,212 --> 00:03:36,383 line:-2
In this example, the object shader
would take geometry as an input ,


61
00:03:36,416 --> 00:03:40,087 line:-2
process it and output some data--
which we call "payload"--


62
00:03:40.120 --> 00:03:41.955 line:-1 align:center
to the mesh shader.


63
00:03:41.989 --> 00:03:45.058 line:-2 align:center
It is up to you
to decide what this data is.


64
00:03:45.092 --> 00:03:50.264 line:-2 align:center
The mesh shader, in turn, would use
this data to generate procedural geometry.


65
00:03:50.297 --> 00:03:54.635 line:-2 align:center
This procedural geometry
would only exist inside the draw call,


66
00:03:54,668 --> 00:03:58,338 line:-2
so it would not require you
to allocate any device memory.


67
00:03:58,372 --> 00:04:02,075 line:-2
It would be pipelined
straight to the rasterizer


68
00:04:02.109 --> 00:04:06.613 line:-2 align:center
and then to a fragment shader
that would produce the final image.


69
00:04:06,647 --> 00:04:10,517 line:-2
Mesh draw calls are performed using
the same type of render command encoder


70
00:04:10.551 --> 00:04:12.819 line:-1 align:center
as the traditional draw calls.


71
00:04:12.853 --> 00:04:16.924 line:-2 align:center
Mesh draw calls and traditional
draw calls can be mixed and matched.


72
00:04:16.957 --> 00:04:20.527 line:-2 align:center
Now, let's take a look at
two new programmable stages.


73
00:04:22,029 --> 00:04:23,964 align:center
In contrast to vertex shaders,


74
00:04:23,997 --> 00:04:27,634 align:center
object and mesh shaders
are similar to compute kernels.


75
00:04:27,668 --> 00:04:30,571 line:0
They are launched
in grids of thread groups.


76
00:04:30,604 --> 00:04:33,941 line:0
Each thread group is a grid
of individual threads that,


77
00:04:33,974 --> 00:04:37,878 line:0
like compute threads,
can communicate with each other.


78
00:04:37,911 --> 00:04:41,949 align:center
Additionally, each object thread group
can spawn a mesh grid


79
00:04:41,982 --> 00:04:45,819 align:center
and programmatically define the size of
the mesh grid it launches,


80
00:04:45,853 --> 00:04:48,255 align:center
providing plenty of flexibility.


81
00:04:48,288 --> 00:04:53,293 line:0
Each object thread group passes
payload data to the mesh grid it spawns.


82
00:04:53.327 --> 00:04:57.231 line:-2 align:center
As the name suggests,
the object stage processes objects.


83
00:04:57.264 --> 00:05:01.201 line:-2 align:center
Object is an abstract concept that
you can define according to your needs.


84
00:05:01,235 --> 00:05:04,705 line:-2
It can be a scene model,
a part of a scene model or,


85
00:05:04.738 --> 00:05:09.743 line:-2 align:center
for example, a region of space where
you want to generate procedural geometry.


86
00:05:09.776 --> 00:05:12.546 line:-2 align:center
The mesh stage is designed
to build meshes


87
00:05:12,579 --> 00:05:15,516 line:-2
and send geometry data
directly to the rasterizer.


88
00:05:15,549 --> 00:05:19,987 line:-2
The next two examples will cover
the relation between objects and meshes.


89
00:05:20.020 --> 00:05:23.657 line:-2 align:center
The first one is using mesh shaders
to implement hair rendering.


90
00:05:23.690 --> 00:05:28.262 line:-2 align:center
To simplify this task, instead of
the Bunny model, I'll use a simple plane.


91
00:05:28,295 --> 00:05:32,432 line:-2
To generate a patch of hair,
I'll divide the input geometry into tiles,


92
00:05:32.466 --> 00:05:35.636 line:-2 align:center
where each tile will calculate
a level of detail


93
00:05:35.669 --> 00:05:38.405 line:-2 align:center
and the number of strands
it needs to produce,


94
00:05:38.438 --> 00:05:41.742 line:-2 align:center
and then generate
each individual strand of hair.


95
00:05:41,775 --> 00:05:45,112 line:-2
Let me show you how to
procedurally generate hair on this plane


96
00:05:45.145 --> 00:05:46.780 line:-1 align:center
using mesh shaders.


97
00:05:46.813 --> 00:05:49.016 line:-1 align:center
The plane can be split into tiles,


98
00:05:49.049 --> 00:05:52.252 line:-2 align:center
where each tile corresponds
to an object threadgroup.


99
00:05:52.286 --> 00:05:55.722 line:-2 align:center
Each object threadgroup will
calculate the number of hair strands


100
00:05:55.756 --> 00:05:59.693 line:-2 align:center
and generate the curve control
points for each strand.


101
00:05:59.726 --> 00:06:01.762 line:-1 align:center
This will become the payload.


102
00:06:01.795 --> 00:06:04.765 line:-2 align:center
Our object threadgroup then launches
a mesh grid,


103
00:06:04.798 --> 00:06:08.202 line:-2 align:center
where each mesh threadgroup
represents a single strand of hair.


104
00:06:08,235 --> 00:06:11,538 line:-2
Each mesh threadgroup
outputs the mesh to the rasterizer.


105
00:06:11.572 --> 00:06:14.308 line:-2 align:center
The new geometry pipeline
allows you to map


106
00:06:14,341 --> 00:06:16,476 line:-2
your geometry processing
closely to hardware


107
00:06:16.510 --> 00:06:21.782 line:-2 align:center
and enables you to take full advantage
of all the threads your GPU offers.


108
00:06:21,815 --> 00:06:25,552 line:0
In a mesh render pipeline,
input geometry is split into tiles


109
00:06:25,586 --> 00:06:27,487 line:0
for the object shader grid.


110
00:06:27,521 --> 00:06:31,525 align:center
Each object shader threadgroup
can independently generate a payload


111
00:06:31,558 --> 00:06:33,260 line:0
and launch a mesh grid.


112
00:06:33,293 --> 00:06:37,464 align:center
Each mesh shader threadgroup from
the grid generates a metal::mesh


113
00:06:37,497 --> 00:06:41,034 align:center
which is further processed in
the rest of the rendering pipeline.


114
00:06:41,068 --> 00:06:46,006 align:center
Let's take a closer look at
the data produced by each of those stages.


115
00:06:46,039 --> 00:06:48,709 line:0
The payload is defined
in the object shader.


116
00:06:48,742 --> 00:06:51,245 line:0
Each object threadgroup
passes the customized payload


117
00:06:51,278 --> 00:06:55,349 line:0
to the generated mesh grid
that an object threadgroup spawns.


118
00:06:55,382 --> 00:07:00,187 align:center
In the case of hair rendering, the payload
consists of the curve control points.


119
00:07:00,220 --> 00:07:03,924 align:center
Meanwhile, the mesh shader
outputs vertex and primitive data


120
00:07:03,957 --> 00:07:08,795 align:center
through a new metal::mesh type, which
I will discuss in further detail in a bit.


121
00:07:09,963 --> 00:07:12,332 align:center
The object and mesh stages
output mesh data


122
00:07:12,366 --> 00:07:15,369 line:0
that is consumed by rest of the pipeline.


123
00:07:15.402 --> 00:07:18.572 line:-2 align:center
Similar to the vertex output
from the traditional pipeline,


124
00:07:18.605 --> 00:07:21.708 line:-2 align:center
the mesh data is first
consumed by the rasterizer,


125
00:07:21.742 --> 00:07:25.546 line:-1 align:center
then the fragment shader executes.


126
00:07:25,579 --> 00:07:30,184 line:-2
Let's take a deeper dive into how
to set up a hair rendering mesh pipeline.


127
00:07:30.217 --> 00:07:34.755 line:-2 align:center
First, the plane that is to be
covered in hair is split into tiles,


128
00:07:34.788 --> 00:07:38.025 line:-2 align:center
where each tile corresponds
to an object threadgroup.


129
00:07:38,058 --> 00:07:41,228 line:-2
The object threadgroup
determines the mesh grid size


130
00:07:41.261 --> 00:07:45.332 line:-2 align:center
and initializes the payload data
that it passes to the mesh grid.


131
00:07:45.365 --> 00:07:50.771 line:-2 align:center
In this case, the tile has six strands
of hair and generates a 3x2 mesh grid,


132
00:07:50,804 --> 00:07:53,740 line:-2
along with a curve
payload data for each strand.


133
00:07:54,408 --> 00:07:57,077 align:center
Each threadgroup can generate
unique mesh grid sizes.


134
00:07:57,110 --> 00:07:59,913 align:center
For the next threadgroup,
only four strands of hair


135
00:07:59,947 --> 00:08:01,615 line:0
need to be generated,


136
00:08:01,648 --> 00:08:03,750 align:center
so a 2x2 mesh grid is set


137
00:08:03,784 --> 00:08:07,654 align:center
along with initializing curve
payload data for 4 strands.


138
00:08:07,688 --> 00:08:11,592 align:center
This is how the object shader
that implements this approach looks like.


139
00:08:11,625 --> 00:08:14,361 line:-2
The object attribute
has been added to Metal


140
00:08:14,394 --> 00:08:17,564 line:-2
to specify what code
is an object shader.


141
00:08:17.598 --> 00:08:21.235 line:-2 align:center
In addition to the payload
attribute and object_data address space,


142
00:08:21.268 --> 00:08:24.738 line:-2 align:center
allow payload arguments
to be used in shaders.


143
00:08:26.139 --> 00:08:31.378 line:-2 align:center
The mesh grid properties argument
is used to encode the mesh grid size.


144
00:08:31,411 --> 00:08:34,214 line:-1
The next step is pipeline initialization.


145
00:08:34.248 --> 00:08:38.018 line:-2 align:center
First, allocate the
mesh render pipeline descriptor,


146
00:08:38.051 --> 00:08:43.991 line:-2 align:center
then initialize the object function and
specify the desired payload length,


147
00:08:44,024 --> 00:08:47,494 line:-2
along with the maximum number
of threads per threadgroup.


148
00:08:47,528 --> 00:08:50,430 line:-2
There are certain
constraints on object shaders.


149
00:08:50.464 --> 00:08:54.434 line:-2 align:center
Payload format and contents
are fully customizable.


150
00:08:54,468 --> 00:08:58,939 line:-2
However, payload size can't exceed
the limit of 16 kilobytes.


151
00:08:58.972 --> 00:09:01.542 line:-2 align:center
Also, the maximum number of
mesh threadgroups


152
00:09:01,575 --> 00:09:06,013 line:-2
that each object threadgroup
produces can't exceed 1024.


153
00:09:06.046 --> 00:09:08.882 line:-2 align:center
The next step after getting
the object shader stage ready


154
00:09:08,916 --> 00:09:11,718 line:-1
is initializing the mesh shader stage.


155
00:09:11,752 --> 00:09:15,222 line:-2
The mesh shader has the user
defined payload as an input.


156
00:09:15.255 --> 00:09:19.860 line:-2 align:center
In this example, the payload
is the set of curve control points.


157
00:09:19,893 --> 00:09:22,529 align:center
Each mesh threadgroup produces
a metal::mesh,


158
00:09:22,563 --> 00:09:25,098 align:center
which is a single strand of hair.


159
00:09:25,132 --> 00:09:29,236 line:0
The output mesh of the mesh shader
must have a metal::mesh type.


160
00:09:29,269 --> 00:09:33,640 align:center
A metal::mesh is a built-in structure
in Metal that provides you an interface


161
00:09:33,674 --> 00:09:38,879 align:center
to output vertex and primitive data
to the rasterizer and fragment shader.


162
00:09:38,912 --> 00:09:43,784 line:0
Each metal::mesh defines a vertex
data type, much like the output type


163
00:09:43,817 --> 00:09:45,319 line:0
of a vertex shader,


164
00:09:45,352 --> 00:09:49,356 align:center
a primitive data type,
the maximum number of vertices,


165
00:09:49,389 --> 00:09:51,725 align:center
the maximum number of primitives,


166
00:09:51,758 --> 00:09:57,364 align:center
and finally, the mesh topology--
either point, line, or triangle.


167
00:09:57,397 --> 00:10:00,968 line:0
The mesh attribute was added to
Metal shading language


168
00:10:01,001 --> 00:10:04,004 line:0
to specify what code is a mesh shader.


169
00:10:04,037 --> 00:10:07,841 align:center
Metal::mesh is used as an output
structure in the mesh shader.


170
00:10:09.943 --> 00:10:13.213 line:-2 align:center
Mesh shaders are great for GPU-driven
geometry processing


171
00:10:13.247 --> 00:10:15.849 line:-2 align:center
as they allow you to produce
these metal::meshes on the fly


172
00:10:15,883 --> 00:10:18,318 line:-1
for the rasterizer to consume.


173
00:10:18.352 --> 00:10:21.455 line:-2 align:center
Mesh shaders leverage the metal::mesh
to their advantage


174
00:10:21.488 --> 00:10:24.324 line:-2 align:center
so you can put more
processing into render commands


175
00:10:24.358 --> 00:10:27.027 line:-1 align:center
without having additional compute passes.


176
00:10:27.060 --> 00:10:31.265 line:-2 align:center
Encoding a mesh is done across threads
within the same thread group.


177
00:10:31.298 --> 00:10:35.836 line:-2 align:center
In this example, the first 9 threads
of a thread group will encode the vertex,


178
00:10:35,869 --> 00:10:39,873 line:-2
index,
and primitive data of this hair strand.


179
00:10:39.907 --> 00:10:45.279 line:-2 align:center
Threads 0 through 4
each encode one vertex in the mesh.


180
00:10:45,312 --> 00:10:50,017 line:-2
The remaining threads in the thread
group do not encode vertices in the mesh.


181
00:10:50.050 --> 00:10:55.355 line:-2 align:center
Next, all 9 threads encode one index
into the mesh indices.


182
00:10:57,291 --> 00:11:03,697 line:0
Next, the first three threads encode
primitive data for the three triangles.


183
00:11:03,730 --> 00:11:07,234 line:0
The rest of the threads
don't encode any primitive data.


184
00:11:07,267 --> 00:11:12,940 align:center
And lastly, one thread shall encode
the primitive count for the metal::mesh.


185
00:11:12,973 --> 00:11:16,076 line:-2
Let me show you the source code
for this mesh shader.


186
00:11:16.109 --> 00:11:19.780 line:-2 align:center
The mesh shader is organized to avoid
as much divergence in threads


187
00:11:19.813 --> 00:11:23.283 line:-2 align:center
as possible--following the
same steps to encode vertex,


188
00:11:23.317 --> 00:11:26.486 line:-1 align:center
index and primitive data,


189
00:11:26,520 --> 00:11:28,856 line:-1
and finally the primitive count.


190
00:11:30.858 --> 00:11:34.394 line:-2 align:center
Let's switch back to initializing
the mesh pipeline descriptor.


191
00:11:34,428 --> 00:11:37,764 line:-2
On the mesh pipeline descriptor,
the mesh function


192
00:11:37,798 --> 00:11:41,301 line:-2
along with the maximum threads
per mesh thread group, is set.


193
00:11:41.335 --> 00:11:45.239 line:-2 align:center
There are limits that metal::mesh
structure needs to adhere to.


194
00:11:45.272 --> 00:11:47.841 line:-2 align:center
Metal::mesh shaders
have the following limits:


195
00:11:47.875 --> 00:11:54.414 line:-2 align:center
metal::mesh supports up to 256
vertices and up to 512 primitives.


196
00:11:54,448 --> 00:11:58,352 line:-2
The total size of metal::mesh
cannot exceed 16 kilobytes.


197
00:11:58.385 --> 00:12:01.255 line:-2 align:center
Now that the mesh grid has
generated the metal::meshes,


198
00:12:01,288 --> 00:12:06,493 line:0
these are then fed to the rasterizer
and finally the fragment shader is run.


199
00:12:06,527 --> 00:12:09,530 line:0
So, similar to the traditional
render pipeline,


200
00:12:09,563 --> 00:12:13,066 align:center
the fragment function
is set on the mesh pipeline descriptor.


201
00:12:13,100 --> 00:12:15,502 line:-2
Now that the descriptor has
been initialized,


202
00:12:15.536 --> 00:12:18.572 line:-1 align:center
the pipeline state is created


203
00:12:18.605 --> 00:12:22.209 line:-2 align:center
through the "make render pipeline
state with mesh descriptor" method


204
00:12:22,242 --> 00:12:23,744 line:-1
on the Metal device.


205
00:12:23,777 --> 00:12:29,082 line:0
Encoding a mesh pipeline is very similar
to encoding a traditional draw call.


206
00:12:29,116 --> 00:12:31,718 line:0
The pipeline state is set on the encoder.


207
00:12:31,752 --> 00:12:34,788 align:center
Each stage in the pipeline
can have resources bound.


208
00:12:34,821 --> 00:12:38,258 align:center
In this example the bound resources are:


209
00:12:38,292 --> 00:12:40,861 align:center
an object buffer to an object stage,


210
00:12:40,894 --> 00:12:42,629 align:center
a texture to a mesh stage,


211
00:12:42,663 --> 00:12:46,667 align:center
and a fragment buffer to a fragment stage.


212
00:12:46.700 --> 00:12:51.872 line:-2 align:center
Next, I'm defining a few constants that
I'll need to launch the mesh pipeline:


213
00:12:51,905 --> 00:12:54,141 line:0
object grid dimensions,


214
00:12:54,174 --> 00:12:56,643 line:0
number of threads per object threadgroup,


215
00:12:56,677 --> 00:12:59,546 line:0
number of threads per mesh threadgroup,


216
00:12:59,580 --> 00:13:02,149 line:0
and use these constants to encode the draw


217
00:13:02,182 --> 00:13:04,718 line:0
through the new
"draw mesh threadgroups" method.


218
00:13:04,751 --> 00:13:07,754 align:center
The same approach that is used to
render a plane of hair


219
00:13:07.788 --> 00:13:09.823 line:-1 align:center
can be applied to the whole bunny


220
00:13:09,857 --> 00:13:13,360 line:-2
to procedurally generate fur
through a mesh pipeline.


221
00:13:13,393 --> 00:13:16,630 line:-2
Next, let's look at another way
to use mesh shaders.


222
00:13:16.663 --> 00:13:19.233 line:-2 align:center
Mesh shaders can be used to
efficiently process


223
00:13:19.266 --> 00:13:23.003 line:-2 align:center
and render large amounts of
geometry using meshlet culling.


224
00:13:23,036 --> 00:13:26,373 line:-2
The basis for this technique
is splitting the scene meshes up


225
00:13:26.406 --> 00:13:28.909 line:-1 align:center
into smaller pieces called meshlets.


226
00:13:33.213 --> 00:13:36.884 line:-2 align:center
Splitting scene geometry into meshlets
increases the granularity of the scene,


227
00:13:36,917 --> 00:13:39,753 line:-2
allowing more
efficient and fine-grained culling.


228
00:13:39.786 --> 00:13:42.856 line:-2 align:center
This allows you to greatly
reduce geometry overhead.


229
00:13:42.890 --> 00:13:44.858 line:-1 align:center
Leveraging meshlet granularity processing


230
00:13:44,892 --> 00:13:47,594 line:-2
allows for efficient occlusion
and culling algorithms


231
00:13:47,628 --> 00:13:51,632 line:-2
such as screen space
occlusion culling and normal filtering.


232
00:13:51,665 --> 00:13:54,835 line:-2
You can use mesh shaders to
implement a fully GPU-driven culling


233
00:13:54,868 --> 00:13:56,069 line:-1
and rendering pipeline.


234
00:13:56,937 --> 00:13:59,873 align:center
Here is a traditional GPU-driven pipeline


235
00:13:59,907 --> 00:14:02,476 align:center
that performs scene processing and
rendering


236
00:14:02,509 --> 00:14:05,779 align:center
using one compute and one render pass.


237
00:14:05,812 --> 00:14:07,748 align:center
The scene data is split into meshlets


238
00:14:07,781 --> 00:14:10,150 line:0
and fed into the compute pass,


239
00:14:10,184 --> 00:14:12,853 line:0
which is responsible for frustum culling,


240
00:14:12,886 --> 00:14:14,188 line:0
LOD selection,


241
00:14:14,221 --> 00:14:17,157 align:center
and encoding the draws to device memory.


242
00:14:17,191 --> 00:14:20,561 align:center
The render pass then executes
the draw commands for the scene


243
00:14:20,594 --> 00:14:23,030 align:center
and produces the final image.


244
00:14:23.063 --> 00:14:27.334 line:-2 align:center
Using mesh shaders, it is possible
to remove synchronization points


245
00:14:27.367 --> 00:14:31.138 line:-2 align:center
and avoid the intermediate
draw commands by merging two passes


246
00:14:31,171 --> 00:14:33,607 line:-1
into a single mesh shader dispatch.


247
00:14:33.640 --> 00:14:35.375 line:-1 align:center
Let me show you how it can be done.


248
00:14:35,409 --> 00:14:37,878 line:-1
Here is a single render pass


249
00:14:37.911 --> 00:14:39.947 line:-1 align:center
that executes a mesh shader dispatch.


250
00:14:39,980 --> 00:14:42,149 line:-1
The object shader performs frustum culling


251
00:14:42.182 --> 00:14:45.586 line:-2 align:center
and calculates LODs for
each of the visible meshlets.


252
00:14:45,619 --> 00:14:50,257 line:-2
The payload to the mesh shader is a list
of meshlet IDs that should be encoded.


253
00:14:50.290 --> 00:14:53.527 line:-2 align:center
The mesh shader then encodes
the metal::mesh objects


254
00:14:53,560 --> 00:14:55,863 line:-1
that shall be rasterized and shaded.


255
00:14:55.896 --> 00:14:58.465 line:-2 align:center
The final image is then
shaded in the fragment shader,


256
00:14:58.498 --> 00:15:00.801 line:-1 align:center
identical to the traditional pipeline.


257
00:15:00.834 --> 00:15:02.536 line:-1 align:center
The geometry processing is done entirely


258
00:15:02.569 --> 00:15:04.304 line:-1 align:center
within the mesh threadgroups command


259
00:15:04,338 --> 00:15:05,973 line:-1
and within a single encoder.


260
00:15:06,006 --> 00:15:08,242 line:-2
There is no longer a need
for an intermediate buffer


261
00:15:08.275 --> 00:15:09.810 line:-1 align:center
to store these draw commands,


262
00:15:09.843 --> 00:15:12.746 line:-2 align:center
as the triangle data
is encoded in the mesh shader.


263
00:15:13,881 --> 00:15:15,983 line:-1
Let's turn our attention to culling now--


264
00:15:16,016 --> 00:15:19,152 line:-2
specifically,
an implementation of meshlet culling.


265
00:15:19.186 --> 00:15:22.956 line:-2 align:center
The scene consists of models
represented by the shapes here.


266
00:15:22.990 --> 00:15:27.628 line:-2 align:center
In this implementation, each model of the
scene will become part of the object grid.


267
00:15:27.661 --> 00:15:30.564 line:-2 align:center
The mesh grids spawned by
the object shader threadgroups


268
00:15:30,597 --> 00:15:32,299 line:-1
will consist of meshlets--


269
00:15:32,332 --> 00:15:35,636 line:-2
patches of triangles
that make up the surface of the model.


270
00:15:35,669 --> 00:15:38,038 line:-2
The new geometry pipeline
is very flexible.


271
00:15:38,071 --> 00:15:41,708 line:-2
It is up to you to decide how to
map your scene onto an object grid.


272
00:15:41,742 --> 00:15:45,379 line:-2
In this example, I'm mapping
each model to an object threadgroup,


273
00:15:45.412 --> 00:15:48.982 line:-2 align:center
but you can use the mapping
that better suits your task.


274
00:15:49,016 --> 00:15:51,919 line:-2
Now, the object shader will determine
the visibility of meshlets


275
00:15:51,952 --> 00:15:53,554 line:-1
using the viewing frustum


276
00:15:53,587 --> 00:15:58,058 line:-2
and dispatch work only for
what will be presented in the final image.


277
00:15:58.091 --> 00:16:00.794 line:-1 align:center
Let's focus on two models from the scene.


278
00:16:00.827 --> 00:16:04.498 line:-2 align:center
The object shader launches mesh grids
based on determined visibility.


279
00:16:04.531 --> 00:16:09.570 line:-2 align:center
The mesh shader then processes
the meshlets and constructs metal::meshes.


280
00:16:09,603 --> 00:16:12,773 line:-2
The programmable mesh grid
size enables flexible dispatching


281
00:16:12,806 --> 00:16:16,410 line:-2
so only visible meshlets
get processed by the mesh shader.


282
00:16:16.443 --> 00:16:21.315 line:-2 align:center
This reduces the time spent processing
unseen geometry later in the pipeline.


283
00:16:21,348 --> 00:16:25,485 line:-2
The fixed function rasterizer only
receives surfaces that are known to be


284
00:16:25.519 --> 00:16:27.621 line:-1 align:center
visible and will reduce time spent


285
00:16:27,654 --> 00:16:29,957 line:-2
processing and clipping out
unseen geometry.


286
00:16:30,791 --> 00:16:35,262 line:-2
Finally, the programmable fragment shader
is invoked and produces the final image.


287
00:16:35.996 --> 00:16:38.465 line:-2 align:center
As you can see,
there are a wide variety of problems


288
00:16:38,498 --> 00:16:41,101 line:-2
that the new geometry pipeline
allows you to address


289
00:16:41.134 --> 00:16:45.439 line:-2 align:center
such as creating procedural meshes or
making your draw calls more efficient,


290
00:16:45,472 --> 00:16:48,308 line:-2
as demonstrated
in this meshlet culling example.


291
00:16:48,342 --> 00:16:52,346 line:-2
Metal now includes a new geometry
pipeline that is modern and flexible.


292
00:16:52,379 --> 00:16:56,283 line:-2
It is now easier than ever before
to create procedural geometry,


293
00:16:56,316 --> 00:16:59,253 line:-2
as demonstrated
in the hair rendering example.


294
00:16:59.286 --> 00:17:02.489 line:-2 align:center
Additionally,
the possibilities for GPU-driven work


295
00:17:02.523 --> 00:17:04.691 line:-1 align:center
in a single render pass have expanded


296
00:17:04.725 --> 00:17:08.529 line:-2 align:center
without requiring additional compute
passes or intermediate buffers,


297
00:17:08.562 --> 00:17:10.964 line:-1 align:center
as seen in the meshlet culling demo.


298
00:17:11,899 --> 00:17:16,270 align:center
This new geometry pipeline is available
in Family7 and Mac2 devices.


299
00:17:18,138 --> 00:17:21,575 line:-2
To help you start learning and
experimenting with mesh shaders,


300
00:17:21.608 --> 00:17:24.344 line:-2 align:center
a sample code is available
on Apple developer web site


301
00:17:24.378 --> 00:17:27.080 line:-1 align:center
that shows how to use the new API.


302
00:17:27.114 --> 00:17:29.583 line:-2 align:center
I'm excited to see
how you use this feature


303
00:17:29,616 --> 00:17:32,853 line:-2
and utilize the massively
parallel nature of Apple GPUs


304
00:17:32,886 --> 00:17:35,022 line:-1
to fit your geometry processing needs.


305
00:17:35.055 --> 00:17:36.857 line:-1 align:center
Thank you so much for watching!

