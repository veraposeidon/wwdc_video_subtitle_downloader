2
00:00:00,501 --> 00:00:08,509 line:-1
♪ ♪


3
00:00:09.309 --> 00:00:12.045 line:-2 align:center
Hello, everyone.
I'm Elliot Garner.


4
00:00:12,079 --> 00:00:14,848 line:-2
I'm an engineer
on the Internet Technologies team,


5
00:00:14.882 --> 00:00:18.852 line:-2 align:center
and today I'm going to be discussing
how to build device-to-device experiences


6
00:00:18.886 --> 00:00:20.420 line:-1 align:center
using Network framework,


7
00:00:20.454 --> 00:00:23.924 line:-2 align:center
and its new companion framework,
DeviceDiscoveryUI.


8
00:00:23.957 --> 00:00:26.960 line:-2 align:center
We'll start off by learning
about cross-device connectivity,


9
00:00:26.994 --> 00:00:30.197 line:-1 align:center
and how it can improve your apps.


10
00:00:30,230 --> 00:00:33,600 line:-2
We'll explore how a new framework,
DeviceDiscoveryUI,


11
00:00:33,634 --> 00:00:39,306 line:-2
which pairs with Network framework to make
that connectivity as simple as possible.


12
00:00:39,339 --> 00:00:42,075 line:-2
We'll walk through a code example
of how to update your apps


13
00:00:42.109 --> 00:00:44.311 line:-1 align:center
to use DeviceDiscoveryUI,


14
00:00:44.344 --> 00:00:47.381 line:-2 align:center
including an in-depth look
at how to discover devices


15
00:00:47,414 --> 00:00:50,117 line:-1
using the new system device picker,


16
00:00:50.150 --> 00:00:55.255 line:-2 align:center
And how to connect to those devices
using Network framework.


17
00:00:55,289 --> 00:00:58,258 line:-2
So let's start
with cross-device connectivity.


18
00:00:58,292 --> 00:01:00,894 line:-2
Connecting to,
and exchanging data between,


19
00:01:00,928 --> 00:01:04,064 line:-2
nearby devices is often essential
for building seamless,


20
00:01:04.097 --> 00:01:07.067 line:-1 align:center
integrated experiences within your apps.


21
00:01:07.100 --> 00:01:10.737 line:-2 align:center
Fitness and meditation apps
often work best on a large screen


22
00:01:10.771 --> 00:01:13.307 line:-1 align:center
where a coach can demonstrate moves.


23
00:01:13.340 --> 00:01:15.576 line:-2 align:center
People benefit
from seeing their heart rate,


24
00:01:15.609 --> 00:01:20.848 line:-2 align:center
calorie burn, and movement data
collected from their Apple Watch.


25
00:01:20,881 --> 00:01:24,685 line:-2
Likewise, gaming experiences
can be made more immersive


26
00:01:24,718 --> 00:01:27,855 line:-2
with input and actions
from a connected iPhone,


27
00:01:27,888 --> 00:01:33,126 line:-2
or augmented by extending a second-screen
experience to a nearby iPad.


28
00:01:33.160 --> 00:01:38.332 line:-2 align:center
All of these experiences–
games, fitness, and wellness apps–


29
00:01:38,365 --> 00:01:43,270 line:-2
all share a need for reliable and
easy-to-use cross-device connectivity.


30
00:01:43.303 --> 00:01:46.039 line:-2 align:center
And that all starts
with discovering a device.


31
00:01:46,073 --> 00:01:50,944 line:-2
To help kickstart that discovery,
we're introducing DeviceDiscoveryUI–


32
00:01:50,978 --> 00:01:53,647 line:-1
a new framework that provides secure,


33
00:01:53,680 --> 00:01:57,885 line:-2
privacy-preserving discovery
of nearby devices.


34
00:01:57,918 --> 00:02:02,756 line:-2
New in iOS 16, DeviceDiscoveryUI
pairs with Network framework


35
00:02:02.789 --> 00:02:05.092 line:-1 align:center
to enable device-to-device connectivity


36
00:02:05.125 --> 00:02:10.631 line:-2 align:center
between your Apple TV apps and nearby
iPhones, iPads, and Apple Watches.


37
00:02:12,432 --> 00:02:19,139 line:-2
DeviceDiscoveryUI provides system UI
for easy discovery of nearby devices.


38
00:02:19,173 --> 00:02:21,074 line:-1
Once a device has been discovered,


39
00:02:21.108 --> 00:02:24.545 line:-2 align:center
your app can easily open a connection
to that device.


40
00:02:24.578 --> 00:02:27.848 line:-2 align:center
Because this connection was established
using system UI,


41
00:02:27.881 --> 00:02:32.386 line:-2 align:center
you don't need to worry about managing
permissions for local network access.


42
00:02:32,419 --> 00:02:36,723 line:-2
And because the system handles
securely establishing this connection,


43
00:02:36,757 --> 00:02:39,459 line:-2
you no longer need to implement
your own key exchange,


44
00:02:39.493 --> 00:02:42.963 line:-2 align:center
because the platform encrypts
transmitted data for you.


45
00:02:42,996 --> 00:02:45,899 line:-1
Here we can see that system UI in action.


46
00:02:45.933 --> 00:02:48.936 line:-1 align:center
On the left, your app's icon is displayed,


47
00:02:48,969 --> 00:02:51,839 line:-2
along with a required
usage description string


48
00:02:51,872 --> 00:02:55,542 line:-2
explaining what your app does
with cross-device connectivity.


49
00:02:55,576 --> 00:02:59,379 line:-2
On the right
is the list of discovered devices.


50
00:02:59.413 --> 00:03:02.950 line:-2 align:center
Because some apps may only be available
on specific platforms,


51
00:03:02.983 --> 00:03:05.986 line:-2 align:center
you can filter discovered devices
by platform.


52
00:03:08,488 --> 00:03:10,924 line:-1
Upon selection of "Adam's iPhone",


53
00:03:10.958 --> 00:03:13.393 line:-2 align:center
the system prompts for permission
to create a connection


54
00:03:13.427 --> 00:03:15.562 line:-1 align:center
between those devices.


55
00:03:15.596 --> 00:03:19.566 line:-2 align:center
With this explicit user consent,
you no longer need to request access


56
00:03:19.600 --> 00:03:21.668 line:-1 align:center
to the entire local network.


57
00:03:21,702 --> 00:03:23,904 line:-1
And once permission has been granted,


58
00:03:23,937 --> 00:03:26,039 line:-2
your app will be launched
on the selected device


59
00:03:26.073 --> 00:03:28.375 line:-1 align:center
to handle incoming connections.


60
00:03:29.977 --> 00:03:33.213 line:-2 align:center
This means your app no longer needs
to be running on both devices


61
00:03:33,247 --> 00:03:35,382 line:-1
before a connection can be established.


62
00:03:35.415 --> 00:03:38.285 line:-2 align:center
When permission is granted on
"Joe's Apple Watch",


63
00:03:38.318 --> 00:03:42.823 line:-2 align:center
the system immediately launches your app
so the two devices can connect.


64
00:03:44.358 --> 00:03:46.760 line:-2 align:center
And if your app isn't installed
on that device,


65
00:03:46,793 --> 00:03:49,630 line:-2
the system offers to take people
to the App Store.


66
00:03:49.663 --> 00:03:51.899 line:-2 align:center
That way they can immediately
download your app


67
00:03:51.932 --> 00:03:54.635 line:-1 align:center
and begin using your new features.


68
00:03:54.668 --> 00:03:57.204 line:-1 align:center
Here's how that looks on watchOS.


69
00:03:57.237 --> 00:04:01.808 line:-2 align:center
Tapping the button will immediately launch
your app's page in the App Store,


70
00:04:01.842 --> 00:04:03.977 line:-1 align:center
for a quick and easy download.


71
00:04:04,011 --> 00:04:08,682 line:-2
So now that we've discussed what
DeviceDiscoveryUI can do for your apps,


72
00:04:08.715 --> 00:04:11.952 line:-2 align:center
let's look at how to adopt
this new framework.


73
00:04:13.187 --> 00:04:16.323 line:-2 align:center
In previous sessions,
we built the Tic-Tac-Toe app


74
00:04:16.356 --> 00:04:18.058 line:-1 align:center
using Network framework.


75
00:04:18.091 --> 00:04:21.995 line:-2 align:center
Today we're gonna be updating it
to use DeviceDiscoveryUI


76
00:04:22.029 --> 00:04:26.099 line:-2 align:center
for discovery of
and connections to nearby devices.


77
00:04:26.133 --> 00:04:29.069 line:-2 align:center
In earlier iterations,
our app only supported


78
00:04:29.102 --> 00:04:31.538 line:-1 align:center
playing games between iOS devices.


79
00:04:31.572 --> 00:04:35.709 line:-2 align:center
So to start, we've updated our project
for Universal Purchase


80
00:04:35,742 --> 00:04:40,981 line:-2
and added a tvOS and watchOS target
that all share the same bundle ID.


81
00:04:41.014 --> 00:04:45.285 line:-2 align:center
And we've changed the app so that instead
of competing against another player,


82
00:04:45.319 --> 00:04:49.356 line:-2 align:center
you're using your device
to play against an AI on the TV.


83
00:04:49.389 --> 00:04:52.292 line:-2 align:center
Next, we need to make additions
to the Info.plist


84
00:04:52.326 --> 00:04:56.163 line:-2 align:center
on both our tvOS application
as well as the other platforms


85
00:04:56.196 --> 00:05:00.000 line:-2 align:center
to declare our new Tic-Tac-Toe
application service.


86
00:05:00,033 --> 00:05:04,071 line:-2
Finally, we'll present the new device
picker and use the resulting endpoints


87
00:05:04,104 --> 00:05:05,706 line:-1
to make our connection.


88
00:05:05.739 --> 00:05:07.841 line:-1 align:center
Now I'm gonna shift over to Xcode


89
00:05:07,875 --> 00:05:10,644 line:-2
and show you
what those new Info.plist keys are,


90
00:05:10.677 --> 00:05:14.014 line:-1 align:center
and how they need to be added to the app.


91
00:05:14.047 --> 00:05:19.019 line:-2 align:center
On tvOS, our app needs to tell the system
what application services to discover,


92
00:05:19.052 --> 00:05:22.022 line:-2 align:center
and what the platforms
those services support.


93
00:05:22,055 --> 00:05:26,894 line:-2
To do that, we need to add our new
"Application Services" Info.plist.


94
00:05:28.595 --> 00:05:32.266 line:-2 align:center
This dictionary will map to
one of two different arrays.


95
00:05:32,299 --> 00:05:36,303 line:-2
On tvOS, we need to declare
the "Browses" array,


96
00:05:36.336 --> 00:05:40.541 line:-2 align:center
which contains all of the application
services that our app discovers.


97
00:05:40.574 --> 00:05:44.411 line:-2 align:center
Each entry represents
a different application service.


98
00:05:44,444 --> 00:05:48,682 line:-2
Our first item represents
our Tic-Tac-Toe application service.


99
00:05:48.715 --> 00:05:51.552 line:-2 align:center
It is a dictionary
containing our service identifier,


100
00:05:51.585 --> 00:05:55.789 line:-2 align:center
usage description,
and platforms this service supports.


101
00:05:55.822 --> 00:06:00.227 line:-2 align:center
The service identifier is the name
of our service, "TicTacToe".


102
00:06:00.260 --> 00:06:04.431 line:-2 align:center
The usage description is a string that
will be displayed in the device picker


103
00:06:04.464 --> 00:06:08.869 line:-2 align:center
to explain why our app needs access
to other local devices.


104
00:06:08.902 --> 00:06:11.772 line:-1 align:center
Finally, we have our platform support.


105
00:06:11,805 --> 00:06:15,209 line:-2
This array contains the platforms
supported by the service,


106
00:06:15.242 --> 00:06:18.145 line:-2 align:center
and the system will filter
discovered devices accordingly.


107
00:06:18,178 --> 00:06:24,017 line:-2
You can see here that our service supports
iOS, iPadOS, and watchOS devices.


108
00:06:24,051 --> 00:06:28,222 line:-2
We've already updated the Info.plist
used for iOS and iPadOS


109
00:06:28.255 --> 00:06:31.491 line:-2 align:center
with the corresponding "Application
Services" dictionary.


110
00:06:31.525 --> 00:06:35.062 line:-2 align:center
Now we're gonna update
the plist for watchOS.


111
00:06:35.095 --> 00:06:38.532 line:-2 align:center
This time,
we declare the "Advertises" array.


112
00:06:38.565 --> 00:06:42.636 line:-2 align:center
Because DeviceDiscoveryUI will launch
our app when it's not running,


113
00:06:42.669 --> 00:06:47.174 line:-2 align:center
the system uses this array
to know which services to advertise.


114
00:06:47,207 --> 00:06:52,846 line:-2
Our entry in the "Advertises" array only
needs the "TicTacToe" service identifier.


115
00:06:52.880 --> 00:06:56.250 line:-2 align:center
Make sure that the service identifier
is the same for every platform


116
00:06:56.283 --> 00:06:59.620 line:-1 align:center
that was declared in the tvOS Info.plist.


117
00:06:59.653 --> 00:07:02.656 line:-2 align:center
Now that Tic-Tac-Toe is configured
to browse for


118
00:07:02,689 --> 00:07:05,092 line:-1
and advertise our application service,


119
00:07:05,125 --> 00:07:08,262 line:-2
let's have it actually display
the device picker UI.


120
00:07:08,295 --> 00:07:10,931 line:-1
Our usage description appears on the left.


121
00:07:10,964 --> 00:07:14,601 line:-2
We made sure this string is active
and that it informs people


122
00:07:14.635 --> 00:07:18.305 line:-2 align:center
of why they want to connect a device
and what data they're sharing.


123
00:07:18.338 --> 00:07:23.477 line:-2 align:center
For Tic-Tac-Toe, we're using the connected
device as a controller to play the game.


124
00:07:23.510 --> 00:07:27.581 line:-2 align:center
Back in Xcode, because DeviceDiscoveryUI
replaces the need


125
00:07:27,614 --> 00:07:32,286 line:-2
to manually browse for nearby devices
and secures the connection for us,


126
00:07:32.319 --> 00:07:36.223 line:-2 align:center
we can remove the PeerBrowser file
and our passcode extension


127
00:07:36,256 --> 00:07:40,227 line:-2
to NWParameters
since they're no longer necessary.


128
00:07:40.260 --> 00:07:45.032 line:-2 align:center
Now, we need parameters to describe how
we'd like to connect to nearby devices.


129
00:07:48.802 --> 00:07:51.872 line:-2 align:center
First, we use the new convenience initializer,


130
00:07:51,905 --> 00:07:54,975 line:-1
applicationService, on NWParameters,


131
00:07:55,008 --> 00:07:58,679 line:-2
which gives us everything we need
for this kind of local connectivity.


132
00:08:00,547 --> 00:08:04,952 line:-2
Next, we can use our existing framer
for communicating gameplay actions,


133
00:08:04.985 --> 00:08:10.390 line:-2 align:center
without any changes, and simply add it to
the protocol stack in those parameters.


134
00:08:10.424 --> 00:08:13.760 line:-2 align:center
Now, we're ready to create
and show the device picker.


135
00:08:13.794 --> 00:08:17.664 line:-2 align:center
The device picker is how
our application discovers nearby iPhones,


136
00:08:17,698 --> 00:08:21,268 line:-1
iPads, and Apple Watches.


137
00:08:21.301 --> 00:08:24.738 line:-2 align:center
First, we need to check to see
if the device picker is supported


138
00:08:24,771 --> 00:08:26,473 line:-1
on the current device.


139
00:08:26.507 --> 00:08:29.209 line:-2 align:center
To do that, we call the
isSupported function


140
00:08:29.243 --> 00:08:33.981 line:-2 align:center
with the browse descriptor and parameters
that we'll be using with the picker.


141
00:08:34,014 --> 00:08:38,085 line:-2
Assuming it returns true, we can go ahead
and create the device picker.


142
00:08:40.053 --> 00:08:43.991 line:-2 align:center
We instantiate the device picker
with the parameters we created earlier,


143
00:08:44,024 --> 00:08:47,294 line:-2
and a browse descriptor
of type .applicationService,


144
00:08:47.327 --> 00:08:52.399 line:-2 align:center
specifying the name of the application
service that we defined in the Info.plist.


145
00:08:55,402 --> 00:08:57,771 line:-2
Now that the device picker
has been created,


146
00:08:57.804 --> 00:09:00.073 line:-1 align:center
we need to present the view controller.


147
00:09:00.107 --> 00:09:05.012 line:-2 align:center
The device picker needs to always be
presented as a full screen modal view.


148
00:09:07.581 --> 00:09:12.519 line:-2 align:center
Next, we need to access
the picker's async endpoint property.


149
00:09:12.553 --> 00:09:15.856 line:-2 align:center
Once the connection has been confirmed
and our application has been launched


150
00:09:15,889 --> 00:09:17,357 line:-1
on the remote device,


151
00:09:17.391 --> 00:09:21.094 line:-2 align:center
we'll receive an NWEndpoint,
and execution will continue.


152
00:09:21,128 --> 00:09:24,965 line:-2
Now that our application
has received an NWEndpoint,


153
00:09:24,998 --> 00:09:27,868 line:-2
we can use it to connect
to the selected device,


154
00:09:27.901 --> 00:09:31.572 line:-2 align:center
just like we did
in prior Tic-Tac-Toe versions.


155
00:09:31,605 --> 00:09:34,608 line:-2
We'll use the same parameters
when opening the connection


156
00:09:34.641 --> 00:09:37.244 line:-1 align:center
as provided to the device picker.


157
00:09:37.277 --> 00:09:40.781 line:-2 align:center
Aside from the parameters,
opening a connection to this device


158
00:09:40,814 --> 00:09:43,617 line:-1
looks exactly the same as it did before.


159
00:09:44.384 --> 00:09:48.088 line:-2 align:center
Moving to the selected device,
once our application has been launched,


160
00:09:48,121 --> 00:09:52,426 line:-2
we need to immediately fulfill the promise
our application made to the system


161
00:09:52.459 --> 00:09:54.928 line:-1 align:center
by creating an NWListener.


162
00:09:54,962 --> 00:09:58,899 line:-2
The NWListener needs to be created
as soon as the app is launched


163
00:09:58.932 --> 00:10:03.070 line:-2 align:center
to accept any incoming connections
for that application service.


164
00:10:03.103 --> 00:10:07.975 line:-2 align:center
The NWListener needs to be created
with the exact same parameters as before,


165
00:10:08.008 --> 00:10:10.911 line:-2 align:center
and we need to set the application service
on the listener


166
00:10:10,944 --> 00:10:14,081 line:-1
using the identifier from the Info.plist.


167
00:10:14.114 --> 00:10:16.783 line:-2 align:center
When the TV opens
a connection to this device,


168
00:10:16,817 --> 00:10:20,354 line:-2
the listener that we established
will receive that connection here,


169
00:10:20.387 --> 00:10:23.357 line:-2 align:center
in the new connection handler,
same as before.


170
00:10:23,390 --> 00:10:26,159 line:-2
So now that the connection
has been properly established,


171
00:10:26,193 --> 00:10:29,096 line:-2
we need to handle
application state transitions.


172
00:10:29.129 --> 00:10:32.866 line:-2 align:center
When our application is backgrounded,
the connection will transition


173
00:10:32.900 --> 00:10:37.371 line:-2 align:center
to the failed state with the associated
error ECONNABORTED.


174
00:10:37,404 --> 00:10:40,607 line:-2
If we want to continue
communication between the devices,


175
00:10:40,641 --> 00:10:45,078 line:-2
we establish a new connection
from the TV to the same endpoint.


176
00:10:45,112 --> 00:10:48,982 line:-2
Once started, this new connection stays
in the preparing state


177
00:10:49.016 --> 00:10:54.087 line:-2 align:center
and moves to the ready state once
the app is resumed on the selected device.


178
00:10:54,121 --> 00:10:57,057 line:-2
On that device,
the new connection will be delivered


179
00:10:57.090 --> 00:11:01.195 line:-2 align:center
to the same NWListener
and can be used to resume our activity.


180
00:11:01,228 --> 00:11:02,796 line:-1
And that's it.


181
00:11:02,829 --> 00:11:07,401 line:-2
Everything we need to do to migrate
to DeviceDiscoveryUI is now complete.


182
00:11:07.434 --> 00:11:09.503 line:-1 align:center
Let's see our game in action.


183
00:11:09,536 --> 00:11:11,271 line:-1
The app launches on the TV,


184
00:11:11,305 --> 00:11:15,142 line:-2
and we press Find Opponent
to present the device picker.


185
00:11:19,046 --> 00:11:22,082 line:-2
When we choose a device,
it prompts for permission.


186
00:11:22,115 --> 00:11:26,620 line:-2
When granted, the app is launched
immediately into our game session.


187
00:11:32,860 --> 00:11:37,731 line:-2
Now, we can play against the TV
by placing emojis on the board.


188
00:11:43.470 --> 00:11:45.439 line:-1 align:center
Great.


189
00:11:45.472 --> 00:11:49.810 line:-2 align:center
And that's how easy it is
to connect devices to Apple TV.


190
00:11:49.843 --> 00:11:52.813 line:-2 align:center
Tic-Tac-Toe is available
on the developer website,


191
00:11:52.846 --> 00:11:57.150 line:-2 align:center
so you can download it and explore
all of the code we discussed today.


192
00:11:57.184 --> 00:12:01.021 line:-2 align:center
If you have any questions,
post them on the Developer Forums.


193
00:12:01.054 --> 00:12:04.057 line:-2 align:center
Consider adopting DeviceDiscoveryUI
in your apps


194
00:12:04.091 --> 00:12:07.227 line:-2 align:center
to provide seamless device-to-device
experiences.


195
00:12:07.261 --> 00:12:10.130 line:-1 align:center
And please provide us feedback.


196
00:12:10,163 --> 00:12:13,967 line:-2
We know that device-to-device
communication is an essential experience.


197
00:12:14,001 --> 00:12:17,804 line:-2
DeviceDiscoveryUI was created
in response to developer feedback.


198
00:12:17,838 --> 00:12:19,840 line:-1
We want to build these features with you,


199
00:12:19,873 --> 00:12:22,543 line:-2
so please file reports
in Feedback Assistant


200
00:12:22.576 --> 00:12:25.512 line:-2 align:center
for anything that you'd like to see
in DeviceDiscoveryUI.


201
00:12:25,546 --> 00:12:27,881 line:-2
We're excited
to improve this technology together


202
00:12:27,915 --> 00:12:30,984 line:-1
to help make your apps even better.


203
00:12:31.018 --> 00:12:32.753 line:-1 align:center
Thank you so much for joining me,


204
00:12:32.786 --> 00:12:35.956 line:-1 align:center
and have a great WWDC 2022.

