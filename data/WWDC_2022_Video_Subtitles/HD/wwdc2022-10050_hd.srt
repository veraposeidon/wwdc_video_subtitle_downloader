2
00:00:00.200 --> 00:00:03.003 line:-1 position:50%
♪ Mellow instrumental
hip-hop music ♪


3
00:00:03,003 --> 00:00:09,543 position:90% size:2% align:right
♪


4
00:00:09.543 --> 00:00:11.578 line:-1 position:50%
Hi!
My name is Devon.


5
00:00:11.578 --> 00:00:13.180 line:-1 position:50%
I'm an engineer
on the watchOS team,


6
00:00:13,180 --> 00:00:15,315 line:-1
and today,
I'll be talking about iOS.


7
00:00:15.315 --> 00:00:17.985 line:-1 position:50%
And I'm Graham,
an engineer from iOS,


8
00:00:17,985 --> 00:00:21,355 line:-1
and today,
I'll be talking about watchOS.


9
00:00:21,355 --> 00:00:23,924 line:-1
We'll be talking about
API additions to WidgetKit


10
00:00:23,924 --> 00:00:25,726 line:-1
that enable you to write
accessory widgets


11
00:00:25,726 --> 00:00:29,162 line:-1
for the Lock Screen
and complications for watchOS.


12
00:00:29.162 --> 00:00:31.365 line:-1 position:50%
We'll show how you can
develop both together,


13
00:00:31.365 --> 00:00:34.701 line:-1 position:50%
along with additions to SwiftUI
to help you along the way.


14
00:00:34.701 --> 00:00:36.203 line:-1 position:50%
If you're unfamiliar
with widgets,


15
00:00:36.203 --> 00:00:37.604 line:-1 position:50%
timelines, and reloading,


16
00:00:37.604 --> 00:00:41.141 line:-1 position:50%
I encourage you to seek out
prior WidgetKit sessions.


17
00:00:41,141 --> 00:00:43,644 line:-1
First, we'll talk about
the history of complications


18
00:00:43,644 --> 00:00:45,579 line:-1
and how they've evolved.


19
00:00:45.579 --> 00:00:48.482 line:-1 position:50%
Then, we'll talk about new API
to color your widgets


20
00:00:48,482 --> 00:00:51,652 line:-1
and complications
in their new environments.


21
00:00:51.652 --> 00:00:53.854 line:-1 position:50%
After that, Graham will demo
how to get started


22
00:00:53,854 --> 00:00:54,922 line:-1
making your own widgets


23
00:00:54,922 --> 00:00:58,792 line:-1
and moving your existing
widget extension to watchOS.


24
00:00:58.792 --> 00:01:00.360 line:-1 position:50%
Next, Graham will
walk you through


25
00:01:00,360 --> 00:01:02,863 line:-1
how to make the most
of these smaller views.


26
00:01:02.863 --> 00:01:05.599 line:-1 position:50%
And lastly, we'll talk about the
different privacy environments


27
00:01:05.599 --> 00:01:07.935 line:-1 position:50%
your widgets may appear in.


28
00:01:07.935 --> 00:01:10.771 line:-1 position:50%
Complications are a key piece
of the watchOS platform,


29
00:01:10,771 --> 00:01:14,741 line:-1
presenting quick, glanceable
information on the watch face.


30
00:01:14,741 --> 00:01:16,076 line:-1
They convey
immediately accessible,


31
00:01:16.076 --> 00:01:18.545 line:-1 position:50%
high-value information
and a tap takes you


32
00:01:18,545 --> 00:01:22,149 line:-1
to the relevant location
in the app.


33
00:01:22.149 --> 00:01:24.284 line:-1 position:50%
In watchOS 2,
ClockKit enabled you


34
00:01:24.284 --> 00:01:26.453 line:-1 position:50%
to create your own
complications.


35
00:01:26.453 --> 00:01:28.689 line:-1 position:50%
Complications have come
a long way since then.


36
00:01:30,824 --> 00:01:33,460 line:-1
Rich complications were
introduced in watchOS 5,


37
00:01:33,460 --> 00:01:37,798 line:-1
with graphic content
and a suite of new families.


38
00:01:37.798 --> 00:01:40.300 line:-1 position:50%
SwiftUI complications
and multiple complications


39
00:01:40,300 --> 00:01:42,502 line:-1
were introduced in watchOS 7,
which enabled you


40
00:01:42,502 --> 00:01:44,671 line:-1
to take your complications
to the next level


41
00:01:44.671 --> 00:01:48.742 line:-1 position:50%
and provide more options
than ever.


42
00:01:48.742 --> 00:01:50.944 line:-1 position:50%
Today, complications
have been reimagined


43
00:01:50,944 --> 00:01:53,680 line:-1
and remade with WidgetKit,
embracing SwiftUI


44
00:01:53,680 --> 00:01:55,716 line:-1
and bringing the glanceable
complication experience


45
00:01:55,716 --> 00:01:58,952 line:-1
to iOS in the form of widgets.


46
00:01:58,952 --> 00:02:01,922 line:-1
With WidgetKit in iOS 16
and watchOS 9,


47
00:02:01,922 --> 00:02:04,391 line:-1
you can build great glanceable
widgets and complications


48
00:02:04,391 --> 00:02:05,892 line:-1
across both platforms,


49
00:02:05.892 --> 00:02:08.462 line:-1 position:50%
enabling you to write your code
once and share infrastructure


50
00:02:08.462 --> 00:02:11.231 line:-1 position:50%
with your existing
Home Screen widgets.


51
00:02:11.231 --> 00:02:13.333 line:-1 position:50%
To do this, we've added
new widget families


52
00:02:13.333 --> 00:02:15.268 line:-1 position:50%
to the existing
WidgetFamily type,


53
00:02:15.268 --> 00:02:18.905 line:-1 position:50%
prefixed with the word
"accessory."


54
00:02:18,905 --> 00:02:20,841 line:-1
The new accessoryRectangular
family can be used


55
00:02:20.841 --> 00:02:23.877 line:-1 position:50%
to show multiple lines of text
or small graphs and charts,


56
00:02:23,877 --> 00:02:27,981 line:-1
similar to the existing ClockKit
graphicRectangular family.


57
00:02:27.981 --> 00:02:30.951 line:-1 position:50%
The accessoryCircular family
is great for brief information,


58
00:02:30.951 --> 00:02:32.953 line:-1 position:50%
gauges, and progress views.


59
00:02:32,953 --> 00:02:37,624 line:-1
This family also replaces the
graphicCircular ClockKit family.


60
00:02:37.624 --> 00:02:40.660 line:-1 position:50%
The all-new accessoryInline
is a text-only slot


61
00:02:40.660 --> 00:02:45.132 line:-1 position:50%
present on many faces on watchOS
and above the time on iOS.


62
00:02:45,132 --> 00:02:47,234 line:-1
The inline slot
comes in many sizes,


63
00:02:47.234 --> 00:02:48.502 line:-1 position:50%
and we'll talk about how
to make the best use


64
00:02:48.502 --> 00:02:50.037 line:-1 position:50%
of them all later on.


65
00:02:52,339 --> 00:02:55,609 line:-1
Specific to watchOS is the new
accessoryCorner family,


66
00:02:55,609 --> 00:02:59,146 line:-1
mixing a small circle of widget
content with gauges and text.


67
00:02:59,146 --> 00:03:03,784 line:-1
This talk focuses on families
common between iOS and watchOS.


68
00:03:03,784 --> 00:03:05,952 line:0
For more details
on this new watchOS family


69
00:03:05,952 --> 00:03:08,255 line:0
and complication-specific
features, check out


70
00:03:08,255 --> 00:03:11,992 position:50%
the "Go further with WidgetKit
complications" session.


71
00:03:11,992 --> 00:03:14,261 line:-1
Let's talk about colors
and rendering modes.


72
00:03:14.261 --> 00:03:15.896 line:-1 position:50%
You may have noticed
that accessory widgets


73
00:03:15.896 --> 00:03:18.298 line:-1 position:50%
take on a few
different appearances.


74
00:03:18,298 --> 00:03:21,001 line:-1
The system controls the look
of accessory family widgets,


75
00:03:21.001 --> 00:03:22.769 line:-1 position:50%
and we've given you some tools
to help adapt them


76
00:03:22,769 --> 00:03:25,105 line:-1
to the rendering style.


77
00:03:25,105 --> 00:03:26,239 line:-1
There are three different
rendering modes


78
00:03:26,239 --> 00:03:28,375 line:-1
your widget
may be shown in.


79
00:03:28,375 --> 00:03:34,981 line:-1
Your widget can be full color,
accented, or vibrant.


80
00:03:34.981 --> 00:03:36.983 line:-1 position:50%
We've introduced the
WidgetRenderingMode type


81
00:03:36,983 --> 00:03:40,787 line:-1
to represent these three
different presentations.


82
00:03:40.787 --> 00:03:42.956 line:-1 position:50%
You can access this value
from the Environment,


83
00:03:42.956 --> 00:03:46.093 line:-1 position:50%
using the widgetRenderingMode
keypath.


84
00:03:46.093 --> 00:03:48.662 line:-1 position:50%
After that, you can change
your content conditionally


85
00:03:48.662 --> 00:03:53.800 line:-1 position:50%
to make sure it looks just right
everywhere that it'll show up.


86
00:03:53.800 --> 00:03:55.569 line:-1 position:50%
In watchOS's full-color mode,


87
00:03:55.569 --> 00:03:58.772 line:-1 position:50%
your content is displayed
exactly as you specify.


88
00:03:58.772 --> 00:04:01.308 line:-1 position:50%
Many existing complications
take on a colorful appearance


89
00:04:01,308 --> 00:04:04,277 line:-1
in full color, like the gradient
in Weather's gauges,


90
00:04:04.277 --> 00:04:08.381 line:-1 position:50%
or the Activity rings' colors.


91
00:04:08,381 --> 00:04:10,784 line:-1
In the accented rendering mode,
your views are split


92
00:04:10,784 --> 00:04:13,787 line:-1
into two groups
and colored independently.


93
00:04:13.787 --> 00:04:15.722 line:-1 position:50%
The two coloring groups
are flatly colored,


94
00:04:15.722 --> 00:04:19.226 line:-1 position:50%
preserving only
their original opacities.


95
00:04:19.226 --> 00:04:21.061 line:-1 position:50%
You can tell the system
how to group your views


96
00:04:21.061 --> 00:04:23.063 line:-1 position:50%
with the .widgetAccentable()
view modifier,


97
00:04:23.063 --> 00:04:24.898 line:-1 position:50%
or switch out your content
based on


98
00:04:24.898 --> 00:04:26.700 line:-1 position:50%
the Widget Rendering Mode
environment value


99
00:04:26.700 --> 00:04:29.970 line:-1 position:50%
to look perfect when flattened.


100
00:04:29.970 --> 00:04:31.638 line:-1 position:50%
Note that the system
can tint your content


101
00:04:31,638 --> 00:04:35,008 line:-1
in a number of ways,
some of which are inverted.


102
00:04:35,008 --> 00:04:37,010 line:-1
Some are on a black background,
while others are


103
00:04:37.010 --> 00:04:42.115 line:-1 position:50%
on the new full-color
backgrounds in watchOS 9.


104
00:04:42,115 --> 00:04:44,017 line:-1
In the iOS vibrant
rendering mode,


105
00:04:44.017 --> 00:04:46.419 line:-1 position:50%
your content is desaturated
then colored appropriately


106
00:04:46.419 --> 00:04:48.588 line:-1 position:50%
for the Lock Screen background.


107
00:04:48,588 --> 00:04:50,290 line:-1
The system maps
your greyscale content


108
00:04:50.290 --> 00:04:52.225 line:-1 position:50%
in to a material appearance.


109
00:04:52,225 --> 00:04:54,661 line:-1
This material is adaptive
to the content behind it,


110
00:04:54.661 --> 00:04:57.430 line:-1 position:50%
appearing just right
in its environment.


111
00:04:57,430 --> 00:04:59,466 line:-1
Additionally, the Lock Screen
can be configured


112
00:04:59.466 --> 00:05:02.936 line:-1 position:50%
to give the vibrant
rendering mode a colored tint.


113
00:05:02,936 --> 00:05:05,772 line:-1
A light source color ends up
mostly opaque and brighter.


114
00:05:05.772 --> 00:05:07.574 line:-1 position:50%
On the other end,
a dark source color


115
00:05:07.574 --> 00:05:10.310 line:-1 position:50%
appears as a less prominent blur
of the background behind it,


116
00:05:10.310 --> 00:05:12.512 line:-1 position:50%
with only a slight amount
of brightening.


117
00:05:12.512 --> 00:05:13.813 line:-1 position:50%
To ensure legibility,


118
00:05:13,813 --> 00:05:16,750 line:-1
avoid using transparent colors
in this mode.


119
00:05:16.750 --> 00:05:18.885 line:-1 position:50%
Instead, use darker colors
or black


120
00:05:18,885 --> 00:05:20,587 line:-1
to represent less
prominent content


121
00:05:20.587 --> 00:05:23.323 line:-1 position:50%
while maintaining legibility.


122
00:05:23,323 --> 00:05:24,991 line:-1
To help you with
some of this nuance,


123
00:05:24.991 --> 00:05:27.761 line:-1 position:50%
we've also introduced the
AccessoryWidgetBackground view


124
00:05:27,761 --> 00:05:30,230 line:-1
to give a consistent backdrop
to widgets that need them,


125
00:05:30.230 --> 00:05:32.866 line:-1 position:50%
like this circular calendar.


126
00:05:32.866 --> 00:05:34.901 line:-1 position:50%
While most accessory widgets
have no background,


127
00:05:34,901 --> 00:05:38,038 line:-1
some styles can be
enhanced with one.


128
00:05:38.038 --> 00:05:39.906 line:-1 position:50%
The background view takes on
different appearances


129
00:05:39.906 --> 00:05:41.841 line:-1 position:50%
in the various
widget rendering modes


130
00:05:41,841 --> 00:05:43,577 line:-1
and is tuned by the system
to look right


131
00:05:43,577 --> 00:05:46,346 line:-1
for the style of the face
or Lock Screen.


132
00:05:46,346 --> 00:05:49,216 line:-1
This is a soft transparent view
in full color and accented,


133
00:05:49.216 --> 00:05:51.184 line:-1 position:50%
and black in
the vibrant environment,


134
00:05:51,184 --> 00:05:54,588 line:-1
which results in
a low brightness and full blur.


135
00:05:54,588 --> 00:05:57,057 line:-1
Graham is super excited to get
started making some new widgets


136
00:05:57,057 --> 00:05:59,259 line:-1
for the Lock Screen
and complications on watchOS --


137
00:05:59.259 --> 00:06:01.294 line:-1 position:50%
I'll hand it off to him.


138
00:06:01,294 --> 00:06:02,462 line:-1
Hi again!


139
00:06:02.462 --> 00:06:04.598 line:-1 position:50%
I'll be adding support
for our new widget families


140
00:06:04.598 --> 00:06:07.300 line:-1 position:50%
to an existing app --
Emoji Rangers --


141
00:06:07,300 --> 00:06:10,937 line:-1
which some of you might be
familiar with from WWDC2020's


142
00:06:10.937 --> 00:06:13.240 line:-1 position:50%
"Widgets Code-along."


143
00:06:13.240 --> 00:06:14.774 line:-1 position:50%
Before I begin, a note for those


144
00:06:14.774 --> 00:06:17.510 line:-1 position:50%
with existing
widget-free projects.


145
00:06:17,510 --> 00:06:20,080 line:-1
You can get started by adding
the Widget Extension target


146
00:06:20.080 --> 00:06:23.250 line:-1 position:50%
to your project,
which already exists on iOS


147
00:06:23.250 --> 00:06:26.052 line:-1 position:50%
and has been brought
to watchOS.


148
00:06:26.052 --> 00:06:28.722 line:-1 position:50%
But I know that many of you
have apps with widgets already,


149
00:06:28.722 --> 00:06:30.557 line:-1 position:50%
so today let's start there
and talk about


150
00:06:30.557 --> 00:06:33.093 line:-1 position:50%
adding new widgets
and complications.


151
00:06:35,895 --> 00:06:38,531 line:-1
We'll continue
the Emoji Rangers project.


152
00:06:38,531 --> 00:06:41,234 line:-1
This app keeps track
of our favorite Emoji Rangers


153
00:06:41,234 --> 00:06:43,737 line:-1
and keeps you up to date with
their health and recharge time


154
00:06:43.737 --> 00:06:46.072 line:-1 position:50%
with the use
of Home Screen widgets.


155
00:06:46.072 --> 00:06:48.742 line:-1 position:50%
We've already brought Emoji
Rangers over to watchOS,


156
00:06:48.742 --> 00:06:51.177 line:-1 position:50%
bringing our favorite app
to our wrists.


157
00:06:51.177 --> 00:06:53.480 line:-1 position:50%
Today we'll be extending
Emoji Rangers with support


158
00:06:53.480 --> 00:06:55.181 line:-1 position:50%
for our new widget families


159
00:06:55.181 --> 00:06:59.152 line:-1 position:50%
and bringing its widget
extension to the watch.


160
00:06:59,152 --> 00:07:01,154 line:-1
Let's get started with getting
the widget extension


161
00:07:01.154 --> 00:07:02.689 line:-1 position:50%
onto the watch.


162
00:07:02,689 --> 00:07:05,358 line:-1
We'll add a new watchOS target
that shares code


163
00:07:05,358 --> 00:07:07,961 line:-1
with the existing iOS target.


164
00:07:07.961 --> 00:07:10.664 line:-1 position:50%
We'll duplicate the iOS
widget extension target,


165
00:07:13,066 --> 00:07:14,334 line:-1
give it a better name,


166
00:07:19.439 --> 00:07:20.640 line:-1 position:50%
change the bundle identifier


167
00:07:20,640 --> 00:07:24,844 line:-1
to be prefixed
with the watch app's,


168
00:07:24,844 --> 00:07:27,647 line:-1
target watchOS,


169
00:07:29,716 --> 00:07:32,952 line:-1
and embed our new extension
in our watch app.


170
00:07:44.764 --> 00:07:47.200 line:-1 position:50%
Now we need to get our code
building on watchOS --


171
00:07:47,200 --> 00:07:48,935 line:-1
let's get on with that.


172
00:07:53.907 --> 00:07:56.676 line:-1 position:50%
Glancing through the
EmojiRangerWidget code,


173
00:07:56.676 --> 00:07:58.578 line:-1 position:50%
we can see
the timeline provider,


174
00:07:58,578 --> 00:08:01,548 line:-1
which is used when the
system reloads content,


175
00:08:08,288 --> 00:08:10,824 line:-1
the view which uses SwiftUI
to generate content


176
00:08:10,824 --> 00:08:13,493 line:-1
for our different families,


177
00:08:16,529 --> 00:08:19,966 line:-1
the widget configuration,


178
00:08:19.966 --> 00:08:22.736 line:-1 position:50%
and the Xcode preview provider.


179
00:08:22.736 --> 00:08:23.903 line:-1 position:50%
The Emoji Rangers app


180
00:08:23,903 --> 00:08:26,806 line:-1
already supports
iOS Home Screen widgets.


181
00:08:26,806 --> 00:08:29,376 line:-1
It offers the system small
and medium families,


182
00:08:29,376 --> 00:08:31,444 line:-1
and here in the
widget configuration,


183
00:08:31.444 --> 00:08:34.080 line:-1 position:50%
I'm going to add
the new families.


184
00:08:38.051 --> 00:08:41.054 line:-1 position:50%
Because system families are
unavailable on the watch,


185
00:08:41,054 --> 00:08:42,622 line:-1
we'll need to use
a platform macro


186
00:08:42.622 --> 00:08:45.291 line:-1 position:50%
to specify our
supportedFamilies.


187
00:08:55.535 --> 00:08:57.904 line:-1 position:50%
In the preview provider,
I'm going to add previews


188
00:08:57,904 --> 00:08:59,906 line:-1
for the new families.


189
00:09:12.952 --> 00:09:16.356 line:-1 position:50%
Next, we need to implement the
new IntentRecommendation API


190
00:09:16,356 --> 00:09:19,859 line:-1
before we can successfully
build for watchOS.


191
00:09:19,859 --> 00:09:21,828 line:-1
While Intents are
fully configurable


192
00:09:21,828 --> 00:09:24,464 line:-1
in the widgets editing UI
on iOS,


193
00:09:24,464 --> 00:09:28,401 line:-1
on watchOS, we need to provide
a preconfigured list.


194
00:09:28.401 --> 00:09:31.604 line:-1 position:50%
We can do that by overriding
the new recommendations method


195
00:09:31.604 --> 00:09:34.107 line:-1 position:50%
on our IntentTimelineProvider.


196
00:09:46,119 --> 00:09:47,887 line:-1
Now we're building successfully.


197
00:09:47.887 --> 00:09:49.189 line:-1 position:50%
Let's resume the previews


198
00:09:49.189 --> 00:09:51.591 line:-1 position:50%
and see what
our circular widget looks like.


199
00:09:56,296 --> 00:09:58,631 line:-1
The content intended
for even a small widget


200
00:09:58,631 --> 00:10:01,534 line:-1
doesn't fit well inside
our new form factor.


201
00:10:01,534 --> 00:10:03,937 line:-1
The new widget families
are smaller than iOS widgets


202
00:10:03.937 --> 00:10:06.206 line:-1 position:50%
found on the Home Screen,
and you'll need to consider


203
00:10:06,206 --> 00:10:09,175 line:-1
the content of
your complications.


204
00:10:09,175 --> 00:10:11,611 line:-1
Now let's talk about
some new views we can use


205
00:10:11,611 --> 00:10:14,814 line:-1
to make our complications
stand out.


206
00:10:14.814 --> 00:10:16.516 line:-1 position:50%
Let's go to the view.


207
00:10:16.516 --> 00:10:19.452 line:-1 position:50%
We can see code for the
systemSmall and other widgets;


208
00:10:19.452 --> 00:10:22.288 line:-1 position:50%
let's add code for
the accessoryCircular case.


209
00:10:22,288 --> 00:10:25,158 line:-1
I think it would look good
just with the avatar.


210
00:10:32,298 --> 00:10:34,634 line:-1
This provides a quick shortcut
in to our app


211
00:10:34,634 --> 00:10:37,403 line:-1
but doesn't offer users
any information.


212
00:10:37.403 --> 00:10:39.305 line:-1 position:50%
Let's add a progress view
around the edge,


213
00:10:39,305 --> 00:10:41,641 line:-1
which will give the users
an idea of when the Ranger


214
00:10:41,641 --> 00:10:44,310 line:-1
will be ready for combat again.


215
00:10:46,579 --> 00:10:49,282 line:-1
Trouble is animating
this progress view to be current


216
00:10:49.282 --> 00:10:53.419 line:-1 position:50%
will require a lot of timeline
entries in short succession.


217
00:10:53,419 --> 00:10:57,524 line:-1
Instead, we can use SwiftUI's
new auto-updating ProgressView.


218
00:10:57,524 --> 00:10:59,559 line:-1
That takes a date interval
over which our Ranger


219
00:10:59.559 --> 00:11:01.060 line:-1 position:50%
will be fully healed.


220
00:11:01.060 --> 00:11:03.463 line:-1 position:50%
The system will keep
our progress view updated,


221
00:11:03,463 --> 00:11:06,599 line:-1
meaning we only need
one timeline entry here.


222
00:11:11,471 --> 00:11:14,774 line:-1
Much better.


223
00:11:14.774 --> 00:11:16.843 line:-1 position:50%
Now let's add
the rectangular family.


224
00:11:19.846 --> 00:11:25.652 line:-1 position:50%
We'll select
the rectangular preview.


225
00:11:25,652 --> 00:11:28,555 line:-1
This gives us more space,
so we'll make a three-line view


226
00:11:28,555 --> 00:11:31,224 line:-1
in the style of a complication.


227
00:11:31.224 --> 00:11:33.927 line:-1 position:50%
First the character's name,
then their level,


228
00:11:33,927 --> 00:11:35,895 line:-1
and then the time
until fully healed,


229
00:11:35.895 --> 00:11:39.933 line:-1 position:50%
for which we'll use
an auto-updating date field.


230
00:11:39.933 --> 00:11:41.834 line:-1 position:50%
I'd like the character's name
to stand out,


231
00:11:41.834 --> 00:11:45.004 line:-1 position:50%
so I'll size the text,
using a font style of headline,


232
00:11:45,004 --> 00:11:47,040 line:-1
and add the
widgetAccentable modifier


233
00:11:47.040 --> 00:11:50.443 line:-1 position:50%
which will adjust its color.


234
00:11:59,385 --> 00:12:01,287 line:-1
Our view looks great here
in vibrant,


235
00:12:01,287 --> 00:12:03,823 line:-1
now let's see how it looks
in our other rendering modes


236
00:12:03,823 --> 00:12:06,826 line:-1
on the watch.


237
00:12:18,338 --> 00:12:22,041 line:-1
You can see how the character's
name takes on the accent color.


238
00:12:22,041 --> 00:12:24,177 line:-1
To make your widgets
and complications feel at home


239
00:12:24.177 --> 00:12:26.112 line:-1 position:50%
in their environment,
it's important


240
00:12:26,112 --> 00:12:28,348 line:-1
that you use
the default font parameters


241
00:12:28,348 --> 00:12:30,950 line:-1
and make use of font styles.


242
00:12:30,950 --> 00:12:32,585 line:-1
The font styles and sizes
are different


243
00:12:32,585 --> 00:12:34,487 line:-1
between iOS and watchOS.


244
00:12:34,487 --> 00:12:36,322 line:-1
iOS uses the regular
text design,


245
00:12:36.322 --> 00:12:38.558 line:-1 position:50%
while watchOS uses
a rounded design


246
00:12:38.558 --> 00:12:40.293 line:-1 position:50%
with a heavier weight.


247
00:12:40,293 --> 00:12:42,462 line:-1
Your widgets and complications
will sit onscreen


248
00:12:42,462 --> 00:12:43,830 line:-1
adjacent to others.


249
00:12:43,830 --> 00:12:46,065 line:-1
And so they look consistent,
we recommend using


250
00:12:46,065 --> 00:12:50,036 line:-1
the font styles Title, Headline,
Body, and Caption.


251
00:12:53,373 --> 00:12:55,541 line:-1
Xcode's preview shows
we still have room leftover


252
00:12:55.541 --> 00:12:58.177 line:-1 position:50%
to add the avatar too.


253
00:13:04,550 --> 00:13:07,086 line:-1
Let's see how this looks
on the iPhone.


254
00:13:11.290 --> 00:13:13.026 line:-1 position:50%
That looks great!


255
00:13:13,026 --> 00:13:16,095 line:-1
Finally, let's add the third
style, accessoryInline,


256
00:13:16,095 --> 00:13:19,999 line:-1
which displays a line of text
and optionally an image.


257
00:13:19.999 --> 00:13:21.868 line:-1 position:50%
Note that inline accessories
are drawn


258
00:13:21.868 --> 00:13:25.271 line:-1 position:50%
according to system-defined
coloring and font.


259
00:13:25,271 --> 00:13:27,540 line:-1
Let's select the preview.


260
00:13:38,317 --> 00:13:41,454 line:-1
Let's show our hero's name
and recharge countdown.


261
00:13:45,224 --> 00:13:47,860 line:-1
This text is too long
for our watch slot.


262
00:13:47.860 --> 00:13:51.064 line:-1 position:50%
So now's a good time
to show you ViewThatFits.


263
00:13:51.064 --> 00:13:54.534 line:-1 position:50%
I can supply multiple views,
from lengthy to concise,


264
00:13:54.534 --> 00:13:56.736 line:-1 position:50%
and ViewThatFits will choose
the first content view


265
00:13:56,736 --> 00:14:00,673 line:-1
that fits the available space
without truncation or clipping.


266
00:14:00.673 --> 00:14:02.208 line:-1 position:50%
Let's shorten the text.


267
00:14:19,859 --> 00:14:22,595 line:-1
Even that might be too long
for the shortest watch slot,


268
00:14:22.595 --> 00:14:24.497 line:-1 position:50%
so let's offer
a third alternative


269
00:14:24,497 --> 00:14:27,333 line:-1
by switching out the avatar
for the name.


270
00:14:42.048 --> 00:14:44.851 line:-1 position:50%
Let's see what that looks like.


271
00:14:49.188 --> 00:14:52.225 line:-1 position:50%
Refer to the "Compose Custom
layouts with SwiftUI" session


272
00:14:52,225 --> 00:14:54,660 line:-1
for more about this.


273
00:14:54.660 --> 00:14:56.262 line:-1 position:50%
Awesome!


274
00:14:56.262 --> 00:14:59.232 line:-1 position:50%
Even Emoji Rangers like
to enjoy some privacy,


275
00:14:59,232 --> 00:15:02,735 line:-1
so I'll hand it back
to Devon to talk about that.


276
00:15:02.735 --> 00:15:05.738 line:-1 position:50%
Hello again!
Let's talk about privacy.


277
00:15:05.738 --> 00:15:08.007 line:-1 position:50%
So far in this talk,
we've discussed the active state


278
00:15:08,007 --> 00:15:10,009 line:-1
of your widgets
and complications.


279
00:15:10.009 --> 00:15:12.678 line:-1 position:50%
However, across our platforms,
you'll need to consider


280
00:15:12.678 --> 00:15:14.647 line:-1 position:50%
whether the device
is redacting content


281
00:15:14.647 --> 00:15:17.550 line:-1 position:50%
or in a low-luminance state.


282
00:15:17.550 --> 00:15:19.685 line:-1 position:50%
On the iOS Lock Screen,
the default behavior


283
00:15:19.685 --> 00:15:22.789 line:-1 position:50%
is to show your content even
while the device is locked,


284
00:15:22,789 --> 00:15:25,725 line:-1
which is the top-left cell
in our grid here.


285
00:15:25,725 --> 00:15:28,227 line:-1
However, this is configurable
in Settings,


286
00:15:28,227 --> 00:15:30,997 line:-1
and users can choose to redact
their widget when locked,


287
00:15:30.997 --> 00:15:34.167 line:-1 position:50%
much like Notifications.


288
00:15:34,167 --> 00:15:36,369 line:0
On watchOS,
the device stays unlocked


289
00:15:36,369 --> 00:15:38,671 line:0
as long as the watch
is being worn.


290
00:15:38,671 --> 00:15:41,474 position:50%
When inactive, the watch
transitions into always-on,


291
00:15:41,474 --> 00:15:43,676 position:50%
with content in
a low-luminance presentation


292
00:15:43,676 --> 00:15:45,645 line:0
and a lower update cadence.


293
00:15:45,645 --> 00:15:48,681 position:50%
By default, your content is not
redacted in low luminance,


294
00:15:48,681 --> 00:15:52,718 position:50%
which is the state
on the bottom left.


295
00:15:52,718 --> 00:15:55,054 position:50%
Like the Lock Screen,
your users can configure


296
00:15:55,054 --> 00:15:57,089 position:50%
their complication content
to be redacted


297
00:15:57,089 --> 00:15:59,091 position:50%
in this always-on state.


298
00:15:59,091 --> 00:16:01,294 position:50%
In this state, you'll need
to make sure your content


299
00:16:01,294 --> 00:16:05,698 position:50%
is prepared for both redaction
and low luminance.


300
00:16:05,698 --> 00:16:08,100 line:0
Together, the platforms cover
each of the four states


301
00:16:08,100 --> 00:16:09,635 line:0
shown here.


302
00:16:09,635 --> 00:16:11,737 position:50%
Consider all these possible
states and ensure


303
00:16:11,737 --> 00:16:14,674 position:50%
your complications and widgets
work well in all cases.


304
00:16:14,674 --> 00:16:18,411 position:50%
Let's talk about
how you can do that.


305
00:16:18,411 --> 00:16:20,279 line:-1
On the watch, your widget
needs to support


306
00:16:20.279 --> 00:16:23.182 line:-1 position:50%
the always-on
display experience.


307
00:16:23,182 --> 00:16:25,051 line:-1
You can adapt your content
for always-on


308
00:16:25.051 --> 00:16:28.521 line:-1 position:50%
with the \.isLuminanceReduced
environment value.


309
00:16:28.521 --> 00:16:31.023 line:-1 position:50%
If you're coming from ClockKit,
note that you now can prepare


310
00:16:31.023 --> 00:16:35.027 line:-1 position:50%
always-on content for every
timeline entry, not just one.


311
00:16:35,027 --> 00:16:37,597 line:-1
When in always-on,
your time-relative text


312
00:16:37,597 --> 00:16:40,233 line:-1
and progress views will change
to a reduced fidelity mode


313
00:16:40,233 --> 00:16:43,169 line:-1
to support the low update
cadence of always-on.


314
00:16:43.169 --> 00:16:45.771 line:-1 position:50%
To support this mode, use the
environment value to remove


315
00:16:45,771 --> 00:16:48,341 line:-1
any time-sensitive content
and optimize your content


316
00:16:48.341 --> 00:16:52.211 line:-1 position:50%
for the lower update frequency.


317
00:16:52,211 --> 00:16:54,647 line:-1
Now let's talk about redaction.


318
00:16:54.647 --> 00:16:57.450 line:-1 position:50%
By default, the privacy mode
will show a redacted version


319
00:16:57.450 --> 00:17:01.888 line:-1 position:50%
of the placeholder view
your TimelineProvider creates.


320
00:17:01,888 --> 00:17:03,756 line:-1
If you have some elements
that are sensitive


321
00:17:03.756 --> 00:17:05.625 line:-1 position:50%
and others that don't need
to be redacted,


322
00:17:05,625 --> 00:17:07,560 line:-1
you can use the
.privacySensitive modifier


323
00:17:07.560 --> 00:17:10.696 line:-1 position:50%
to mark only some of
the views to be redacted.


324
00:17:10.696 --> 00:17:13.432 line:-1 position:50%
In this example, we've redacted
the heart rate in our widget


325
00:17:13.432 --> 00:17:16.235 line:-1 position:50%
but left the image unredacted.


326
00:17:16,235 --> 00:17:18,571 line:0
Now you're ready to make awesome
widgets for the Lock Screen


327
00:17:18,571 --> 00:17:20,907 position:50%
and WidgetKit complications.


328
00:17:20,907 --> 00:17:22,675 line:0
For more on what's new
in SwiftUI,


329
00:17:22,675 --> 00:17:26,145 position:50%
check out the "Compose Custom
Layouts with SwiftUI" talk.


330
00:17:26.145 --> 00:17:27.580 line:-1 position:50%
Thanks for watching.


331
00:17:27,580 --> 00:17:31,784 position:90% line:0 size:2%
♪

