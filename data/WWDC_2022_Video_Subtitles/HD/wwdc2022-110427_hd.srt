2
00:00:00,000 --> 00:00:02,870 line:-1
♪ instrumental hip hop music ♪


3
00:00:02,870 --> 00:00:09,977 size:2% align:right line:0
♪


4
00:00:09,977 --> 00:00:12,379 line:-1
Hello, everyone.
I'm Jonathon Mah.


5
00:00:12.379 --> 00:00:13.714 line:-1 position:50%
And I'm Lisa Xiao.


6
00:00:13,714 --> 00:00:14,681 line:-1
And we'd love
to introduce you


7
00:00:14,681 --> 00:00:17,517 line:-1
to what's new in Xcode 14.


8
00:00:17,517 --> 00:00:18,852 line:-1
Today, we'll look
at new features


9
00:00:18.852 --> 00:00:20.787 line:-1 position:50%
and enhancements
throughout Xcode,


10
00:00:20,787 --> 00:00:24,091 line:-1
including source editing
and SwiftUI previews,


11
00:00:24.091 --> 00:00:27.060 line:-1 position:50%
multiplatform applications,
TestFlight feedback,


12
00:00:27,060 --> 00:00:28,962 line:-1
and performance improvements.


13
00:00:28,962 --> 00:00:31,565 line:-1
There's a lot to cover,
so let's get to it.


14
00:00:31.565 --> 00:00:33.367 line:-1 position:50%
The first thing you'll notice
is how much faster it is


15
00:00:33,367 --> 00:00:34,768 line:-1
just getting started.


16
00:00:34,768 --> 00:00:37,404 line:-1
Xcode 14 is 30 percent smaller.


17
00:00:37.404 --> 00:00:40.107 line:-1 position:50%
It downloads and installs
significantly faster.


18
00:00:40,107 --> 00:00:42,809 line:-1
You can download additional
platforms and simulators


19
00:00:42,809 --> 00:00:44,211 line:-1
on demand.


20
00:00:44,211 --> 00:00:46,713 line:-1
If you need them immediately,
you can get them here --


21
00:00:46,713 --> 00:00:49,483 line:-1
or later, when you first
try to use them.


22
00:00:51,752 --> 00:00:55,555 line:-1
We're building Food Truck,
a food-delivery application.


23
00:00:58,325 --> 00:01:01,261 line:-1
SwiftUI with live previews
is a great workflow,


24
00:01:01,261 --> 00:01:03,397 line:-1
and it's getting even better.


25
00:01:03,397 --> 00:01:06,099 line:-1
Now the preview canvas
is interactive by default,


26
00:01:06,099 --> 00:01:08,035 line:-1
so your changes
are immediately live


27
00:01:08.035 --> 00:01:10.637 line:-1 position:50%
as you make them.


28
00:01:10.637 --> 00:01:12.272 line:-1 position:50%
The canvas has a new control


29
00:01:12,272 --> 00:01:15,042 line:-1
to create additional variants
of each preview


30
00:01:15.042 --> 00:01:16.910 line:-1 position:50%
without writing any code.


31
00:01:16.910 --> 00:01:19.012 line:-1 position:50%
You can vary the color scheme,
text size,


32
00:01:19.012 --> 00:01:21.048 line:-1 position:50%
or device orientation,
and then immediately


33
00:01:21,048 --> 00:01:24,785 line:-1
see your interface
rendered in each scenario.


34
00:01:24,785 --> 00:01:26,553 line:-1
Let's see how our view looks


35
00:01:26.553 --> 00:01:29.556 line:-1 position:50%
with different
Dynamic Type sizes.


36
00:01:37.798 --> 00:01:39.700 line:-1 position:50%
With these previews
side by side,


37
00:01:39,700 --> 00:01:41,368 line:-1
it's easy to validate
your interface


38
00:01:41,368 --> 00:01:43,704 line:-1
and make sure
things look just right.


39
00:01:43,704 --> 00:01:46,239 line:-1
Let's check the larger sizes.


40
00:01:51.244 --> 00:01:52.879 line:-1 position:50%
The first icon is very wide


41
00:01:52,879 --> 00:01:56,316 line:-1
and causes the text
to wrap awkwardly.


42
00:01:56,316 --> 00:01:58,752 line:-1
Luckily, my designer has
just asked me to change it,


43
00:01:58.752 --> 00:02:00.387 line:-1 position:50%
but only in the header.


44
00:02:00,387 --> 00:02:02,289 line:-1
Our CardView doesn't support


45
00:02:02,289 --> 00:02:04,291 line:-1
a different icon
for the header yet,


46
00:02:04,291 --> 00:02:07,394 line:-1
so let's start by adding
that functionality.


47
00:02:07.394 --> 00:02:10.230 line:-1 position:50%
I'll switch over
to the implementation.


48
00:02:15,902 --> 00:02:22,242 line:-1
The header and content elements
are both using the same image.


49
00:02:22.242 --> 00:02:26.580 line:-1 position:50%
Let's add another image property
specifically for the header.


50
00:02:36,923 --> 00:02:38,325 line:-1
In most of the cards,


51
00:02:38,325 --> 00:02:41,194 line:-1
using the same image
in both places looks great.


52
00:02:41,194 --> 00:02:44,097 line:-1
We can save ourselves the time
of updating each existing call


53
00:02:44,097 --> 00:02:48,335 line:-1
by adding a custom initializer
with a default value.


54
00:02:53,006 --> 00:02:55,075 line:-1
When I start to type
the initializer,


55
00:02:55.075 --> 00:02:59.012 line:-1 position:50%
Xcode 14 now offers to complete
the whole thing!


56
00:02:59,012 --> 00:03:01,281 line:-1
I can accept the default value
as a starting point


57
00:03:01.281 --> 00:03:07.621 line:-1 position:50%
for my customizations,
saving a ton of time.


58
00:03:07,621 --> 00:03:10,991 line:-1
This also works
for the codable methods.


59
00:03:10.991 --> 00:03:14.694 line:-1 position:50%
Let's give the headerIcon
parameter a default value.


60
00:03:24.538 --> 00:03:27.107 line:-1 position:50%
Now, we'll return
to the CardStack view


61
00:03:27,107 --> 00:03:30,477 line:-1
and use this new functionality.


62
00:03:36.483 --> 00:03:39.920 line:-1 position:50%
My designer asked me to use
the calendar symbol here.


63
00:03:39,920 --> 00:03:42,756 line:-1
The library now includes
all of the SF Symbols,


64
00:03:42.756 --> 00:03:46.793 line:-1 position:50%
so it's easy to make sure
I'm using the right one.


65
00:03:54.134 --> 00:03:56.169 line:-1 position:50%
I can press Return
to insert the right code


66
00:03:56.169 --> 00:03:58.171 line:-1 position:50%
to use the symbol.


67
00:04:06.079 --> 00:04:08.482 line:-1 position:50%
This symbol looks great.


68
00:04:08,482 --> 00:04:11,885 line:-1
The new side-by-side comparisons
we get from preview variants


69
00:04:11,885 --> 00:04:14,121 line:-1
make it easy to ensure
your app looks good


70
00:04:14,121 --> 00:04:17,190 line:-1
with all the settings
your users have chosen.


71
00:04:17,190 --> 00:04:20,227 line:-1
In addition to initializer
and codable definitions,


72
00:04:20,227 --> 00:04:23,130 line:-1
Xcode 14 provides more
intelligent recommendations


73
00:04:23,130 --> 00:04:26,533 line:-1
so you can write your ideas
more quickly and easily.


74
00:04:26.533 --> 00:04:28.535 line:-1 position:50%
Let me show you some more.


75
00:04:33,240 --> 00:04:37,477 line:-1
When I start to add
another CardView,


76
00:04:37,477 --> 00:04:43,316 line:-1
the initializers now appear
directly in the completion list.


77
00:04:43.316 --> 00:04:45.919 line:-1 position:50%
The headerIcon parameter
is in italic.


78
00:04:45.919 --> 00:04:48.421 line:-1 position:50%
That's because
it has a default value.


79
00:04:48,421 --> 00:04:50,123 line:-1
If I accept the completion now,


80
00:04:50,123 --> 00:04:52,359 line:-1
it won't include
the headerIcon label,


81
00:04:52,359 --> 00:04:55,795 line:-1
it will use the default value
we just added.


82
00:04:55,795 --> 00:04:57,531 line:-1
Here, I want to specialize
the icon again,


83
00:04:57,531 --> 00:05:00,467 line:-1
so I can type part of the name
to opt in.


84
00:05:03,136 --> 00:05:10,277 line:-1
I'll give my new card
some values.


85
00:05:14,447 --> 00:05:17,184 line:-1
I'd like a divider
before my new card.


86
00:05:17,184 --> 00:05:19,085 line:-1
Adding a Divider to the VStack


87
00:05:19,085 --> 00:05:22,055 line:-1
gives a line across
the entire width.


88
00:05:29,062 --> 00:05:30,397 line:-1
To make it more subtle,


89
00:05:30,397 --> 00:05:34,668 line:-1
I'll use frame
to set a maximum width.


90
00:05:36.670 --> 00:05:40.240 line:-1 position:50%
The frame modifier has
a lot of optional arguments.


91
00:05:40,240 --> 00:05:42,175 line:-1
The new completion features
make it a snap


92
00:05:42,175 --> 00:05:46,079 line:-1
to get just the arguments
I need.


93
00:05:51.084 --> 00:05:54.387 line:-1 position:50%
That's code completion
in Xcode 14.


94
00:05:54.387 --> 00:05:57.090 line:-1 position:50%
This first card's title
comes from a method.


95
00:05:57,090 --> 00:05:59,292 line:-1
I've heard it isn't handling
all numbers correctly,


96
00:05:59.292 --> 00:06:01.461 line:-1 position:50%
so let's see
how it's implemented.


97
00:06:01,461 --> 00:06:05,899 line:-1
I'll Command-click and choose
Jump to Definition.


98
00:06:11,104 --> 00:06:13,707 line:-1
The redesigned definition list
highlights what's different


99
00:06:13,707 --> 00:06:15,208 line:-1
about each of the results


100
00:06:15.208 --> 00:06:17.777 line:-1 position:50%
so that you can quickly
choose the one you want.


101
00:06:17.777 --> 00:06:20.647 line:-1 position:50%
Since our text(for:) method
is from a protocol,


102
00:06:20,647 --> 00:06:22,782 line:-1
there are multiple options.


103
00:06:22,782 --> 00:06:25,518 line:-1
The list shows the specific
types that define the method:


104
00:06:25,518 --> 00:06:27,187 line:-1
we have the declaration
from the protocol


105
00:06:27,187 --> 00:06:29,489 line:-1
and two implementations.


106
00:06:29,489 --> 00:06:33,927 line:-1
I'll navigate to the
server-backed implementation.


107
00:06:36,429 --> 00:06:37,797 line:-1
This class implements parsing


108
00:06:37.797 --> 00:06:39.833 line:-1 position:50%
using a regular expression
literal,


109
00:06:39,833 --> 00:06:42,168 line:-1
which is new in Swift 5.7.


110
00:06:44.571 --> 00:06:45.939 line:-1 position:50%
My coworker told me


111
00:06:45.939 --> 00:06:48.441 line:-1 position:50%
the problem is being caught
by our unit tests.


112
00:06:48.441 --> 00:06:50.443 line:-1 position:50%
Let's run them now.


113
00:07:02,389 --> 00:07:03,690 line:0
Yep, we have some failures.


114
00:07:03,690 --> 00:07:05,692 line:0
Let's take a look.


115
00:07:09,729 --> 00:07:12,932 line:-1
Something seems wrong
with extracting the event count.


116
00:07:12,932 --> 00:07:15,435 line:-1
Let's check how this function
is called.


117
00:07:15.435 --> 00:07:16.936 line:-1 position:50%
I can see that directly


118
00:07:16,936 --> 00:07:18,805 line:-1
by opening the callers
of this method


119
00:07:18,805 --> 00:07:20,540 line:-1
by Command-clicking.


120
00:07:20.540 --> 00:07:23.410 line:-1 position:50%
Just like the definition list,
the callers list


121
00:07:23.410 --> 00:07:25.145 line:-1 position:50%
shows the different files
and functions


122
00:07:25.145 --> 00:07:27.280 line:-1 position:50%
that contain calls
to this method,


123
00:07:27,280 --> 00:07:30,450 line:-1
along with a preview
of each call site.


124
00:07:38,458 --> 00:07:40,927 line:-1
Here's a call
from the failing test method.


125
00:07:40,927 --> 00:07:41,928 line:-1
The preview shows me


126
00:07:41,928 --> 00:07:45,098 line:-1
the test is passing
the string "0 records",


127
00:07:45,098 --> 00:07:47,167 line:-1
which gives me a hint
about the problem.


128
00:07:47.167 --> 00:07:49.502 line:-1 position:50%
And now I can spot the bug:


129
00:07:49,502 --> 00:07:52,906 line:-1
the regular expression is
matching against the digits 1-9,


130
00:07:52.906 --> 00:07:55.241 line:-1 position:50%
but I forgot to include zero!


131
00:07:55,241 --> 00:07:59,279 line:-1
I could fix this by updating
the character range to use 0-9,


132
00:07:59.279 --> 00:08:01.247 line:-1 position:50%
or switch
to the more descriptive


133
00:08:01.247 --> 00:08:03.917 line:-1 position:50%
digit character class.


134
00:08:11,391 --> 00:08:13,059 line:-1
Something's still not right,


135
00:08:13,059 --> 00:08:16,062 line:-1
but now the compiler
is telling me why.


136
00:08:16.062 --> 00:08:18.031 line:-1 position:50%
Regular expressions
are a first-class feature


137
00:08:18.031 --> 00:08:20.100 line:-1 position:50%
in Swift 5.7.


138
00:08:20,100 --> 00:08:22,268 line:-1
The compiler checks
my regular expression


139
00:08:22.268 --> 00:08:24.003 line:-1 position:50%
like it does with other code,


140
00:08:24.003 --> 00:08:26.973 line:-1 position:50%
and Xcode highlights my typo
immediately.


141
00:08:26.973 --> 00:08:28.908 line:-1 position:50%
Notice that when I correct
the expression,


142
00:08:28,908 --> 00:08:30,543 line:-1
two things happen:


143
00:08:30.543 --> 00:08:32.445 line:-1 position:50%
syntax highlighting
in the regular expression


144
00:08:32,445 --> 00:08:36,349 line:-1
confirms my edit,
and the errors dim gray.


145
00:08:41,020 --> 00:08:42,622 line:-1
This new dimming
shows that Xcode


146
00:08:42.622 --> 00:08:45.191 line:-1 position:50%
is reevaluating
the diagnostics.


147
00:08:45.191 --> 00:08:49.729 line:-1 position:50%
When I pause for a moment,
the file is reprocessed


148
00:08:49,729 --> 00:08:52,899 line:-1
and Xcode confirms
the errors are resolved.


149
00:08:52,899 --> 00:08:55,402 line:-1
This dimming happens
during long builds as well,


150
00:08:55,402 --> 00:08:56,469 line:-1
so you can easily tell


151
00:08:56,469 --> 00:08:58,405 line:-1
which problems
are from the latest build


152
00:08:58.405 --> 00:09:02.642 line:-1 position:50%
and which are from
a previous build.


153
00:09:02.642 --> 00:09:04.978 line:-1 position:50%
Let's go over to the test.


154
00:09:15,255 --> 00:09:17,190 line:-1
This jumped me
straight to the call,


155
00:09:17,190 --> 00:09:19,426 line:-1
which is in the middle
of a test method.


156
00:09:19.426 --> 00:09:21.060 line:-1 position:50%
Take a look
at the top of the editor.


157
00:09:21,060 --> 00:09:24,631 line:-1
Xcode 14 shows the definitions
containing the visible code,


158
00:09:24,631 --> 00:09:27,767 line:-1
even when they're
scrolled out of view.


159
00:09:32,772 --> 00:09:37,310 line:-1
I can use the test diamonds
at the top to rerun the tests.


160
00:09:44,184 --> 00:09:49,222 line:0
Fantastic,
the fix passes all the tests.


161
00:09:49,222 --> 00:09:50,423 line:-1
With Xcode 14,


162
00:09:50.423 --> 00:09:53.126 line:-1 position:50%
you can write code faster
with new code completions,


163
00:09:53,126 --> 00:09:56,162 line:-1
design fluidly with
SwiftUI preview variants,


164
00:09:56,162 --> 00:09:59,165 line:-1
be more informed with improved
error presentation,


165
00:09:59.165 --> 00:10:02.035 line:-1 position:50%
and navigate confidently
with jump to definition.


166
00:10:02.035 --> 00:10:04.237 line:-1 position:50%
And there's even more.
Here's Lisa.


167
00:10:04,237 --> 00:10:05,572 line:-1
Thank you, Jonathon.


168
00:10:05,572 --> 00:10:10,510 line:-1
Let's take a look at the build
performance improvements.


169
00:10:10,510 --> 00:10:12,912 position:50%
When Xcode
builds multiple targets,


170
00:10:12,912 --> 00:10:16,449 line:0
like a framework
and application,


171
00:10:16,449 --> 00:10:20,153 line:0
first it compiles
the framework sources.


172
00:10:20,153 --> 00:10:23,156 line:0
Then it generates a module.


173
00:10:23,156 --> 00:10:24,424 position:50%
That enables linking


174
00:10:24,424 --> 00:10:27,427 line:0
and compiling
the application sources.


175
00:10:27,427 --> 00:10:29,395 line:0
And then it links
the application,


176
00:10:29,395 --> 00:10:31,631 line:0
completing the build.


177
00:10:31,631 --> 00:10:36,402 position:50%
Xcode 14 rearranges your build
for improved parallelism.


178
00:10:36,402 --> 00:10:38,738 line:0
By eagerly producing
Swift modules,


179
00:10:38,738 --> 00:10:44,110 line:0
Xcode unblocks build tasks
and increases parallelism.


180
00:10:44,110 --> 00:10:46,946 line:0
It shortens all the critical
paths of your builds,


181
00:10:46,946 --> 00:10:49,215 position:50%
all while being more respectful


182
00:10:49,215 --> 00:10:53,119 line:0
of your simultaneous
use of the machine.


183
00:10:53.119 --> 00:10:55.121 line:-1 position:50%
But we didn't stop there.


184
00:10:55,121 --> 00:10:57,924 line:-1
We also made the linker
up to two times faster


185
00:10:57.924 --> 00:11:00.660 line:-1 position:50%
through increased parallelism.


186
00:11:00.660 --> 00:11:04.264 line:-1 position:50%
All together,
Xcode 14 builds projects


187
00:11:04,264 --> 00:11:07,267 line:-1
up to 25 percent faster,


188
00:11:07.267 --> 00:11:09.068 line:-1 position:50%
with machines
with the most cores


189
00:11:09,068 --> 00:11:12,672 line:-1
seeing the biggest
improvements.


190
00:11:12,672 --> 00:11:15,742 line:-1
Even with the improvements
to build scheduling,


191
00:11:15,742 --> 00:11:17,477 line:-1
sometimes your project can have


192
00:11:17.477 --> 00:11:21.381 line:-1 position:50%
internal dependencies
on long synchronous tasks.


193
00:11:21.381 --> 00:11:23.816 line:-1 position:50%
It can be hard to tell
this is happening


194
00:11:23,816 --> 00:11:27,086 line:-1
without a visualization.


195
00:11:27.086 --> 00:11:31.424 line:-1 position:50%
Good news, we've included that
in Xcode 14!


196
00:11:31.424 --> 00:11:33.259 line:-1 position:50%
You can open
the new build timeline


197
00:11:33.259 --> 00:11:36.429 line:-1 position:50%
on any build log
or result bundle.


198
00:11:36,429 --> 00:11:40,033 line:-1
It will help you identify
unexpectedly long tasks


199
00:11:40,033 --> 00:11:42,101 line:-1
and bottlenecks.


200
00:11:42,101 --> 00:11:44,971 line:-1
Here's the build timeline
for Food Truck.


201
00:11:44.971 --> 00:11:46.472 line:-1 position:50%
I can see a script phase


202
00:11:46.472 --> 00:11:49.842 line:-1 position:50%
constraining the build
to a single core.


203
00:11:49,842 --> 00:11:51,444 line:-1
You can get critical insights


204
00:11:51.444 --> 00:11:54.380 line:-1 position:50%
and identify performance
opportunities in your build


205
00:11:54,380 --> 00:11:57,817 line:-1
with the new build timeline.


206
00:11:57,817 --> 00:12:01,087 line:-1
You can learn all about
parallelizing builds,


207
00:12:01.087 --> 00:12:03.156 line:-1 position:50%
the new build timeline.
and linking


208
00:12:03,156 --> 00:12:06,593 position:50%
in "Demystify parallelization
in Xcode builds"


209
00:12:06,593 --> 00:12:10,930 position:50%
and "Link Fast:
Improve build and launch."


210
00:12:10,930 --> 00:12:12,565 line:-1
Parallel testing in Xcode


211
00:12:12,565 --> 00:12:16,235 line:-1
has been a great way
to run your tests faster.


212
00:12:16,235 --> 00:12:19,572 line:-1
In Xcode 14,
it's even better.


213
00:12:19.572 --> 00:12:22.542 line:-1 position:50%
We used the same techniques
to improve build performance


214
00:12:22.542 --> 00:12:25.011 line:-1 position:50%
that I just showed you.


215
00:12:25.011 --> 00:12:27.981 line:-1 position:50%
Xcode 14 eliminates
scheduling dependencies


216
00:12:27,981 --> 00:12:30,183 line:-1
between targets
and test classes


217
00:12:30.183 --> 00:12:34.754 line:-1 position:50%
to increase parallelism
during testing even more.


218
00:12:34.754 --> 00:12:36.356 line:-1 position:50%
If you have long-running tests


219
00:12:36.356 --> 00:12:38.858 line:-1 position:50%
in different test classes
and targets,


220
00:12:38,858 --> 00:12:41,728 line:-1
this feature could improve
your test execution time


221
00:12:41,728 --> 00:12:45,231 line:-1
by up to 30 percent.


222
00:12:45,231 --> 00:12:48,968 line:0
To learn about how to improve
test speed and reliability,


223
00:12:48,968 --> 00:12:50,203 position:50%
please check out


224
00:12:50,203 --> 00:12:55,675 line:0
"Author fast and reliable tests
for Xcode Cloud."


225
00:12:55.675 --> 00:12:58.978 line:-1 position:50%
Building is faster,
testing is faster,


226
00:12:58.978 --> 00:13:03.483 line:-1 position:50%
and preparing your macOS app
for distribution is faster too.


227
00:13:03,483 --> 00:13:09,555 line:-1
We have sped up notarization
by four times in Xcode 14.


228
00:13:09,555 --> 00:13:11,724 line:-1
For projects using
Interface Builder,


229
00:13:11,724 --> 00:13:14,027 line:-1
I have more good news!


230
00:13:14,027 --> 00:13:17,230 line:-1
Document loading
is up to 50 percent faster,


231
00:13:17.230 --> 00:13:19.532 line:-1 position:50%
and switching between
iPhones and iPads


232
00:13:19,532 --> 00:13:23,302 line:-1
in the device bar
is up to 30 percent faster.


233
00:13:23,302 --> 00:13:26,105 line:-1
Canvas editing operations
are incremental


234
00:13:26,105 --> 00:13:28,574 line:-1
and prioritize the scenes
you're looking at


235
00:13:28,574 --> 00:13:30,710 line:-1
so that it gives you
immediate feedback,


236
00:13:30,710 --> 00:13:34,180 line:-1
even in large storyboards.


237
00:13:34.180 --> 00:13:38.851 line:-1 position:50%
Xcode 14 is faster,
and it's easier to use, too.


238
00:13:38,851 --> 00:13:41,354 line:-1
Let me show you how.


239
00:13:41,354 --> 00:13:43,222 line:-1
Xcode 14 makes it easy


240
00:13:43,222 --> 00:13:45,992 line:-1
to bring your app
to different platforms.


241
00:13:45.992 --> 00:13:49.562 line:-1 position:50%
You can use a single target
to define your app,


242
00:13:49.562 --> 00:13:52.298 line:-1 position:50%
and list what platforms
you support.


243
00:13:52,298 --> 00:13:56,269 line:-1
This eliminates the need to keep
settings and files in sync,


244
00:13:56,269 --> 00:14:01,441 line:-1
so you only have to describe
what's unique on each platform.


245
00:14:01,441 --> 00:14:05,078 line:0
Check out "Use Xcode
to build a multiplatform app"


246
00:14:05,078 --> 00:14:09,816 line:0
to take advantage of this
feature in your project.


247
00:14:09.816 --> 00:14:13.920 line:-1 position:50%
Xcode also has great tools
for making your app smaller.


248
00:14:13.920 --> 00:14:16.222 line:-1 position:50%
The memory debugger
has always been great


249
00:14:16.222 --> 00:14:19.192 line:-1 position:50%
for exploring leaks
in your application.


250
00:14:19,192 --> 00:14:21,427 line:-1
It zeros in
on the shortest paths


251
00:14:21,427 --> 00:14:25,164 line:-1
from root objects
to unexpectedly live objects


252
00:14:25.164 --> 00:14:29.068 line:-1 position:50%
so that you can investigate
why they've leaked.


253
00:14:29.068 --> 00:14:31.738 line:-1 position:50%
Xcode 14 expands
these capabilities


254
00:14:31,738 --> 00:14:34,173 line:-1
so that you can see
all reference paths


255
00:14:34,173 --> 00:14:37,510 line:-1
in and out of an object.


256
00:14:37.510 --> 00:14:40.613 line:-1 position:50%
In addition to a more
thorough explanation of leaks,


257
00:14:40,613 --> 00:14:47,253 line:-1
now you can gauge the total
weight of your objects.


258
00:14:47.253 --> 00:14:51.224 line:-1 position:50%
In Xcode 14, you can also
extend Xcode itself


259
00:14:51,224 --> 00:14:53,793 line:-1
with Swift Package plugins.


260
00:14:53.793 --> 00:14:56.229 line:-1 position:50%
Now packages
can integrate plugins


261
00:14:56.229 --> 00:14:58.664 line:-1 position:50%
that process your code
in place,


262
00:14:58.664 --> 00:15:02.034 line:-1 position:50%
like linters and formatters,
and you can invoke them


263
00:15:02,034 --> 00:15:05,538 line:-1
directly from
the project navigator.


264
00:15:05.538 --> 00:15:08.908 line:-1 position:50%
You can also integrate
build tools that generate code


265
00:15:08,908 --> 00:15:12,211 line:-1
or process resources
while building.


266
00:15:12,211 --> 00:15:15,615 line:-1
For example, you could translate
a high-level description


267
00:15:15,615 --> 00:15:18,017 line:-1
of a remote procedure call
interface


268
00:15:18.017 --> 00:15:21.487 line:-1 position:50%
into low-level glue code
during the build.


269
00:15:21.487 --> 00:15:24.190 line:-1 position:50%
You could also compress
or optimize resources


270
00:15:24.190 --> 00:15:26.259 line:-1 position:50%
while building.


271
00:15:26,259 --> 00:15:28,961 line:0
For an in-depth look
at package plugins,


272
00:15:28,961 --> 00:15:31,831 position:50%
check out
"Meet Swift Package plugins"


273
00:15:31,831 --> 00:15:36,002 position:50%
and
"Create Swift Package plugins."


274
00:15:36,002 --> 00:15:38,437 line:-1
You can also localize
package resources


275
00:15:38,437 --> 00:15:40,973 line:-1
just like applications.


276
00:15:40.973 --> 00:15:44.177 line:-1 position:50%
Now you can set your package's
default localization,


277
00:15:44,177 --> 00:15:50,049 line:-1
export the localization catalog,
translate it, and reimport it.


278
00:15:50,049 --> 00:15:52,418 position:50%
To learn more
about localization,


279
00:15:52,418 --> 00:15:58,558 position:50%
check out "Building global apps:
Localization by example."


280
00:15:58.558 --> 00:16:03.129 line:-1 position:50%
Next, let's move on
to the run destination chooser.


281
00:16:03.129 --> 00:16:06.966 line:-1 position:50%
Switching between devices
is something I do all the time,


282
00:16:06,966 --> 00:16:10,670 line:-1
and now it's even easier
to get the device you need


283
00:16:10.670 --> 00:16:13.739 line:-1 position:50%
with the updated
run destination chooser.


284
00:16:13,739 --> 00:16:15,741 line:-1
Let's take a look.


285
00:16:18.744 --> 00:16:20.880 line:-1 position:50%
When you open
the run destination chooser,


286
00:16:20.880 --> 00:16:23.549 line:-1 position:50%
it shows all the available
run destinations


287
00:16:23.549 --> 00:16:26.819 line:-1 position:50%
for the selected scheme.


288
00:16:26.819 --> 00:16:30.590 line:-1 position:50%
I often switch between
an iPhone and an iPad.


289
00:16:30,590 --> 00:16:34,627 line:-1
The new run destination chooser
prioritizes recent choices,


290
00:16:34,627 --> 00:16:39,565 line:-1
which makes this
really convenient.


291
00:16:39.565 --> 00:16:42.034 line:-1 position:50%
It's also easy
to select other devices


292
00:16:42,034 --> 00:16:44,537 line:-1
that I haven't used lately.


293
00:16:44,537 --> 00:16:46,205 line:-1
I can filter the list here,


294
00:16:46.205 --> 00:16:51.143 line:-1 position:50%
and type "max" to bring
all the Max devices together


295
00:16:51,143 --> 00:16:56,115 line:-1
and easily pick the one I want.


296
00:16:56.115 --> 00:16:58.351 line:-1 position:50%
These same features
are all available


297
00:16:58,351 --> 00:17:00,920 line:-1
in the Scheme chooser, too.


298
00:17:00.920 --> 00:17:04.957 line:-1 position:50%
Next, let's take a look
at the Organizer window.


299
00:17:04,957 --> 00:17:08,060 line:-1
We've made some great
improvements to the Organizer


300
00:17:08,060 --> 00:17:12,131 line:-1
to help you identify new issues
and improve your apps.


301
00:17:12.131 --> 00:17:14.767 line:-1 position:50%
There are two new reports
in the Organizer


302
00:17:14,767 --> 00:17:17,169 line:-1
to help you understand
how your app is doing


303
00:17:17.169 --> 00:17:21.407 line:-1 position:50%
on your users' devices:
Feedback and Hangs.


304
00:17:21,407 --> 00:17:23,409 line:-1
Let's dive in.


305
00:17:26,279 --> 00:17:29,382 line:-1
The Feedback organizer shows
all of your TestFlight feedback


306
00:17:29,382 --> 00:17:31,884 line:-1
directly in Xcode.


307
00:17:31,884 --> 00:17:35,354 line:-1
Our TestFlight users sent
great comments and screenshots


308
00:17:35,354 --> 00:17:39,125 line:-1
for our recent builds.


309
00:17:39,125 --> 00:17:41,794 line:-1
The inspector shows
additional details --


310
00:17:41.794 --> 00:17:45.698 line:-1 position:50%
like tester information
and the device configuration --


311
00:17:45.698 --> 00:17:49.702 line:-1 position:50%
that can help to identify
the underlying problems.


312
00:17:49,702 --> 00:17:51,604 line:-1
If I need a bit more context,


313
00:17:51,604 --> 00:17:57,143 line:-1
I can email my tester
directly with this button.


314
00:17:57.143 --> 00:18:00.179 line:-1 position:50%
TestFlight feedback
is from beta users,


315
00:18:00.179 --> 00:18:03.349 line:-1 position:50%
but there are some issues
that can slip past testing


316
00:18:03,349 --> 00:18:05,952 line:-1
and make it into
the App Store.


317
00:18:05.952 --> 00:18:11.257 line:-1 position:50%
One of the most common types
of bugs like this are hangs.


318
00:18:11.257 --> 00:18:14.260 line:-1 position:50%
Your app hangs
when it uses the main thread


319
00:18:14.260 --> 00:18:17.663 line:-1 position:50%
without taking a break
to process user input.


320
00:18:17,663 --> 00:18:20,333 line:-1
Your code might be doing
important work,


321
00:18:20,333 --> 00:18:26,872 line:-1
but the user experiences
an unresponsive app.


322
00:18:26.872 --> 00:18:28.874 line:-1 position:50%
This new Hangs report shows


323
00:18:28,874 --> 00:18:32,144 line:-1
the highest-impact hangs
from App Store users


324
00:18:32,144 --> 00:18:34,680 line:-1
so that you know
which code to restructure


325
00:18:34,680 --> 00:18:38,517 line:-1
to have the biggest impact.


326
00:18:38.517 --> 00:18:41.487 line:-1 position:50%
On the left,
there's a list of hangs


327
00:18:41,487 --> 00:18:43,956 line:-1
ordered by severity.


328
00:18:43,956 --> 00:18:46,492 line:-1
Each one has
a weighted backtrace


329
00:18:46,492 --> 00:18:49,328 line:-1
showing the problematic code.


330
00:18:49.328 --> 00:18:53.299 line:-1 position:50%
Our app supports
many devices and OS versions.


331
00:18:53.299 --> 00:18:57.837 line:-1 position:50%
Some hangs impact certain
configurations more than others.


332
00:18:57.837 --> 00:18:59.805 line:-1 position:50%
In the inspector,
it is helpful


333
00:18:59,805 --> 00:19:05,711 line:-1
to find that this hang
happens mainly on iOS 15.3.


334
00:19:05.711 --> 00:19:07.313 line:-1 position:50%
When I'm ready to work on this,


335
00:19:07,313 --> 00:19:09,382 line:-1
I can jump
straight into the code


336
00:19:09,382 --> 00:19:13,219 line:-1
with this Open in Project
button.


337
00:19:13.219 --> 00:19:15.454 line:-1 position:50%
The new Hangs
and Feedback reports


338
00:19:15,454 --> 00:19:16,956 line:-1
help you triage issues


339
00:19:16,956 --> 00:19:20,793 line:-1
and get the right fixes
to users quickly.


340
00:19:20.793 --> 00:19:22.862 line:-1 position:50%
To learn more about
fixing hangs,


341
00:19:22,862 --> 00:19:28,367 line:0
check out "Track down hangs with
Xcode and on-device detection."


342
00:19:28,367 --> 00:19:33,039 line:0
Next, let's take a look
at icons.


343
00:19:33,039 --> 00:19:36,642 line:-1
Our app icon
looks great at every size,


344
00:19:36,642 --> 00:19:39,011 line:-1
because we've taken the time
to pixel hint


345
00:19:39.011 --> 00:19:43.149 line:-1 position:50%
and to choose the right number
of stripes for every resolution


346
00:19:43,149 --> 00:19:46,619 line:-1
so that it always looks crisp.


347
00:19:46.619 --> 00:19:49.455 line:-1 position:50%
All of this pixel hinting
can be totally essential


348
00:19:49.455 --> 00:19:54.193 line:-1 position:50%
for some icons
and unnecessary for others.


349
00:19:54,193 --> 00:19:56,529 line:-1
Now we have a new icon.


350
00:19:56.529 --> 00:19:59.932 line:-1 position:50%
Let's take a look at it.


351
00:19:59.932 --> 00:20:03.235 line:-1 position:50%
These simpler textures
don't need any hinting,


352
00:20:03,235 --> 00:20:07,540 line:-1
and will look great
drawn at any size.


353
00:20:07.540 --> 00:20:14.280 line:-1 position:50%
With a double click,
I can select the new image.


354
00:20:14,280 --> 00:20:16,382 line:-1
In Xcode 14,
you can choose


355
00:20:16.382 --> 00:20:19.418 line:-1 position:50%
the level of detail
that's right for you.


356
00:20:19.418 --> 00:20:22.955 line:-1 position:50%
For this icon,
our single image looks great.


357
00:20:22.955 --> 00:20:24.890 line:-1 position:50%
I'll use the new
Single Size feature


358
00:20:24.890 --> 00:20:27.693 line:-1 position:50%
to tell Xcode
to automatically create


359
00:20:27.693 --> 00:20:32.565 line:-1 position:50%
all of our different sizes
from this one.


360
00:20:32,565 --> 00:20:39,572 line:-1
To do that, I can select
Single Size in the inspector.


361
00:20:39.572 --> 00:20:42.074 line:-1 position:50%
And that's it!


362
00:20:42.074 --> 00:20:46.112 line:-1 position:50%
That was a brief overview
of what's new in Xcode 14.


363
00:20:46,112 --> 00:20:49,582 line:-1
It is faster and easier
to help you develop.


364
00:20:49,582 --> 00:20:51,183 line:-1
Thank you for watching!


365
00:20:51,183 --> 00:20:53,819 line:-1
Jonathan: Go download it
and get started today!


366
00:20:53,819 --> 00:20:58,257 size:2% align:right position:90%
♪

