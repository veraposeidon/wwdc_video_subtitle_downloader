2
00:00:09.776 --> 00:00:12.112 line:-1 align:center
Andreas: Hello, and welcome to WWDC.


3
00:00:12.145 --> 00:00:14.481 line:-2 align:center
I'm Andreas from the localization team
at Apple


4
00:00:14,515 --> 00:00:16,917 line:-2
and today I would like to share with
you some examples


5
00:00:16.950 --> 00:00:19.820 line:-2 align:center
about how to build high-quality,
localized apps.


6
00:00:20.988 --> 00:00:23.524 line:-2 align:center
Internationalization means
preparing your app


7
00:00:23.557 --> 00:00:26.126 line:-1 align:center
to run on devices all across the world.


8
00:00:26.159 --> 00:00:29.696 line:-2 align:center
When localization is done well,
everybody gets to enjoy the same


9
00:00:29.730 --> 00:00:33.867 line:-2 align:center
great experience and utility–
regardless of the language they speak.


10
00:00:33.901 --> 00:00:36.303 line:-1 align:center
Using the APIs that Apple offers,


11
00:00:36,336 --> 00:00:39,239 line:-2
most parts of your app
are internationalization friendly


12
00:00:39,273 --> 00:00:41,341 line:-1
right out of the box.


13
00:00:41.375 --> 00:00:43.744 line:-2 align:center
In this talk, you will learn
from our experience


14
00:00:43.777 --> 00:00:46.480 line:-2 align:center
making Apple's apps appealing
to a diverse audience,


15
00:00:46.513 --> 00:00:49.249 line:-2 align:center
including some challenges
and how we solved them.


16
00:00:49.283 --> 00:00:53.153 line:-2 align:center
I will start with declaring
and loading localized text.


17
00:00:53.187 --> 00:00:57.558 line:-2 align:center
It's easy to include formatted dates,
times, and more in our strings.


18
00:00:57,591 --> 00:01:02,563 line:-2
I will highlight some options, and we will
take a look at a sophisticated example.


19
00:01:02.596 --> 00:01:05.766 line:-2 align:center
Your Swift Package
might include localized text, too,


20
00:01:05.799 --> 00:01:09.970 line:-2 align:center
and you will learn about improvements
to the localization workflow.


21
00:01:10.003 --> 00:01:14.408 line:-2 align:center
Finally, I will talk about layout
and great new additions to SwiftUI.


22
00:01:14.441 --> 00:01:18.345 line:-2 align:center
At Apple, we make sure that our apps
are providing a great experience


23
00:01:18.378 --> 00:01:20.113 line:-1 align:center
to our international audience.


24
00:01:20.147 --> 00:01:22.783 line:-2 align:center
And the Weather app
is one example of this.


25
00:01:22,816 --> 00:01:26,486 line:-2
Millions of users open it up every day
to check the forecast–


26
00:01:26,520 --> 00:01:30,457 line:-2
and this is what the app looks like to
them, wherever they are in the world.


27
00:01:30.490 --> 00:01:34.094 line:-2 align:center
Notice how everything in the UI
is adjusted to their preferences.


28
00:01:34,127 --> 00:01:37,064 line:-2
We localize descriptions
of the current weather conditions


29
00:01:37,097 --> 00:01:39,199 line:-1
and we format numbers.


30
00:01:39,233 --> 00:01:41,568 line:-1
The UI is also adapted appropriately


31
00:01:41.602 --> 00:01:45.305 line:-2 align:center
depending on whether the language
is left-to-right or right-to-left.


32
00:01:45,339 --> 00:01:48,909 line:-2
Let's take a closer look
at one of the things we customize


33
00:01:48.942 --> 00:01:50.611 line:-1 align:center
by starting with translation.


34
00:01:50,644 --> 00:01:54,348 line:-2
This view here says "Wind is making
it feel cooler" in English.


35
00:01:54,381 --> 00:01:57,317 line:-2
And this is what it looks like
in other languages.


36
00:01:57.351 --> 00:02:00.120 line:-2 align:center
To support them properly,
all we have to do is declare


37
00:02:00,153 --> 00:02:02,489 line:-1
the string using String(localized).


38
00:02:02.523 --> 00:02:05.125 line:-2 align:center
Xcode discovers it
when exporting for localization,


39
00:02:05,158 --> 00:02:09,296 line:-2
and we can send the result
over our translators.


40
00:02:09,329 --> 00:02:11,598 line:-2
I will use the Mail app
on my Mac to do so.


41
00:02:11.632 --> 00:02:13.867 line:-2 align:center
And while we're there,
I want to show you something.


42
00:02:13,901 --> 00:02:16,136 line:-1
If I open the context menu of an email,


43
00:02:16.170 --> 00:02:19.273 line:-2 align:center
I can move it
to a special folder called "Archive.”


44
00:02:19,306 --> 00:02:22,509 line:-1
It is located in my sidebar.


45
00:02:22,543 --> 00:02:25,812 line:-2
Notice how both words
are "Archive" in English.


46
00:02:25.846 --> 00:02:28.682 line:-2 align:center
Other languages like Spanish, however,
have different words


47
00:02:28.715 --> 00:02:31.018 line:-1 align:center
for the action and the folder name.


48
00:02:31.051 --> 00:02:33.020 line:-2 align:center
Even though the English words
are the same,


49
00:02:33.053 --> 00:02:35.088 line:-1 align:center
when they appear in different contexts,


50
00:02:35.122 --> 00:02:37.824 line:-1 align:center
other languages might use different words.


51
00:02:37,858 --> 00:02:40,561 line:-2
You should use two strings in code
in this case.


52
00:02:40.594 --> 00:02:45.832 line:-2 align:center
And to do that, we added new API
to the string initializer this year.


53
00:02:45.866 --> 00:02:50.037 line:-2 align:center
It now takes a default value,
which we can use for our English string.


54
00:02:50.070 --> 00:02:52.539 line:-1 align:center
Then, we modify the localized string's key


55
00:02:52.573 --> 00:02:55.542 line:-2 align:center
to make the distinction clear
to translators.


56
00:02:55,576 --> 00:02:58,812 line:-2
This way, the same word is shown
when running the app in English,


57
00:02:58.846 --> 00:03:02.349 line:-2 align:center
and Spanish translators are able
to provide different words.


58
00:03:02,382 --> 00:03:04,918 line:0
Last year's talk
"Streamline your localized strings"


59
00:03:04,952 --> 00:03:07,721 align:center
helps you understanding the basics
of managing strings,


60
00:03:07,754 --> 00:03:11,458 align:center
and it goes further
into the localization process.


61
00:03:11,491 --> 00:03:15,929 line:-2
I want you to take away from this example
that sometimes the same English word,


62
00:03:15,963 --> 00:03:20,267 line:-2
or even an entire sentence,
is shown in different contexts in the UI.


63
00:03:20.300 --> 00:03:25.339 line:-2 align:center
In these instances, make sure to use
two different strings in your code.


64
00:03:25,372 --> 00:03:27,708 line:-1
Weather is not just about the app.


65
00:03:27.741 --> 00:03:30.477 line:-2 align:center
It is also well integrated
into the system.


66
00:03:30.511 --> 00:03:33.313 line:-2 align:center
Here, we see a user activity,
suggesting to open the app


67
00:03:33.347 --> 00:03:36.316 line:-2 align:center
to check the weather
at the current location.


68
00:03:36.350 --> 00:03:39.520 line:-2 align:center
Let's take a look
at how that might be implemented.


69
00:03:39,553 --> 00:03:41,889 line:-2
The string could be declared
and loaded like this,


70
00:03:41.922 --> 00:03:45.659 line:-2 align:center
using String Interpolation
to insert any location name.


71
00:03:45.692 --> 00:03:50.163 line:-2 align:center
And this name could be a city
or a term for the current location.


72
00:03:50,197 --> 00:03:51,932 line:-1
The result works well in English:


73
00:03:51,965 --> 00:03:53,433 line:-1
"Show weather in Cupertino"


74
00:03:53.467 --> 00:03:56.970 line:-2 align:center
and "Show weather in my location,”
respectively.


75
00:03:57.004 --> 00:04:00.741 line:-2 align:center
In other languages however,
we might run into grammatical issues.


76
00:04:00.774 --> 00:04:04.244 line:-2 align:center
In German, for example,
the preposition works for a city name,


77
00:04:04.278 --> 00:04:07.814 line:-2 align:center
but is wrong when inserting a term
for the current location.


78
00:04:07,848 --> 00:04:10,651 line:-2
We need to have
a different translation instead.


79
00:04:10.684 --> 00:04:13.153 line:-1 align:center
The solution here is simple:


80
00:04:13,187 --> 00:04:15,556 line:-1
just use two different strings.


81
00:04:15,589 --> 00:04:17,925 line:-2
Inserting a city name
is fine in the first one,


82
00:04:17,958 --> 00:04:21,061 line:-2
and for the current location
we use another string.


83
00:04:21.094 --> 00:04:24.231 line:-2 align:center
This ensures that translators
are able to use the correct grammar


84
00:04:24.264 --> 00:04:25.666 line:-1 align:center
for their language.


85
00:04:25.699 --> 00:04:28.435 line:-1 align:center
And it works well in English, and German.


86
00:04:28.468 --> 00:04:32.439 line:-2 align:center
I made this example to show you
that inserting a variable had an impact


87
00:04:32,472 --> 00:04:34,374 line:-1
on the entire sentence.


88
00:04:34.408 --> 00:04:38.478 line:-2 align:center
Joining strings might have surprising
consequences in other languages:


89
00:04:38,512 --> 00:04:43,050 line:-2
they might need to inflect the grammar or
could have troubles with capitalization,


90
00:04:43,083 --> 00:04:46,353 line:-2
but knowing that beforehand
when writing the code is difficult.


91
00:04:46,386 --> 00:04:48,789 line:-2
Having people who speak the language
testing the app


92
00:04:48.822 --> 00:04:51.491 line:-1 align:center
is a substantial part of the workflow.


93
00:04:51,525 --> 00:04:55,295 line:-2
Keep that in mind when you're tempted
to construct a string programmatically.


94
00:04:57.297 --> 00:05:00.634 line:-2 align:center
Now that we share a good understanding
of how strings are declared in code,


95
00:05:00.667 --> 00:05:03.270 line:-1 align:center
let's talk about their comments.


96
00:05:03.303 --> 00:05:07.774 line:-2 align:center
Here's the string from our previous
example again, with a proper comment.


97
00:05:07.808 --> 00:05:10.277 line:-2 align:center
A comment is really, really important
for translators.


98
00:05:10.310 --> 00:05:13.647 line:-2 align:center
You should make sure to give them
the context they need to translate it,


99
00:05:13,680 --> 00:05:17,851 line:-2
keeping the same intention as you had
when declaring the string.


100
00:05:17.885 --> 00:05:21.421 line:-2 align:center
A great comment explains which interface
element the string is shown in,


101
00:05:21,455 --> 00:05:23,824 line:-1
like a label or a button.


102
00:05:23.857 --> 00:05:28.629 line:-2 align:center
It also explains the context of the UI
element and where it is shown on screen.


103
00:05:28.662 --> 00:05:33.567 line:-2 align:center
That could be a section header,
a context menu, or a user activity.


104
00:05:33.600 --> 00:05:35.002 line:-1 align:center
If the string contains variables,


105
00:05:35,035 --> 00:05:37,604 line:-2
make sure to explain their value
at runtime.


106
00:05:37,638 --> 00:05:40,407 line:-2
This is very important
for matching the grammar of the sentence,


107
00:05:40.440 --> 00:05:42.543 line:-1 align:center
as we have seen in the example.


108
00:05:42,576 --> 00:05:45,779 line:-2
Remember that translators
might not see the app at runtime


109
00:05:45,812 --> 00:05:47,514 line:-1
when translating your content.


110
00:05:47.548 --> 00:05:50.417 line:-2 align:center
But with these tips you should be able
to create a shared understanding


111
00:05:50.450 --> 00:05:53.253 line:-2 align:center
between declaration and translation
of a string


112
00:05:53.287 --> 00:05:56.256 line:-1 align:center
and which role it plays in your app.


113
00:05:56.290 --> 00:05:57.858 line:-2 align:center
Now, it might have never
occurred to you,


114
00:05:57,891 --> 00:06:00,827 line:-2
but the Weather app doesn't
actually control the weather.


115
00:06:00.861 --> 00:06:03.664 line:-2 align:center
Instead,
the data is downloaded from a server.


116
00:06:03,697 --> 00:06:05,866 line:-1
It can be located anywhere in the world


117
00:06:05.899 --> 00:06:09.636 line:-2 align:center
and it might not even know what language
to send the content in.


118
00:06:09,670 --> 00:06:11,772 line:-2
When content is downloaded
to a user's device,


119
00:06:11.805 --> 00:06:15.843 line:-2 align:center
it should always be presented
in the language that the user prefers.


120
00:06:15.876 --> 00:06:19.780 line:-2 align:center
Having just some parts of an app localized
can be very confusing.


121
00:06:20.747 --> 00:06:23.717 line:-2 align:center
Here, the Weather app shows
a severe weather alert,


122
00:06:23.750 --> 00:06:26.286 line:-1 align:center
which has been loaded from a server.


123
00:06:26.320 --> 00:06:27.621 line:-1 align:center
This looks really serious,


124
00:06:27,654 --> 00:06:31,992 line:-2
and if it was not translated into my
language, I might get into trouble later.


125
00:06:32.025 --> 00:06:34.595 line:-2 align:center
Let's take a look at what you can do
to make sure that your users


126
00:06:34.628 --> 00:06:37.231 line:-1 align:center
are always able to read remote content.


127
00:06:38.999 --> 00:06:42.336 line:-2 align:center
Your server can send a list
of supported languages to the app.


128
00:06:42,369 --> 00:06:44,738 line:-1
This should be an array of language IDs,


129
00:06:44,771 --> 00:06:48,308 line:-2
and the device has all the knowledge
about which languages the user prefers,


130
00:06:48,342 --> 00:06:51,445 line:-2
so you don't have to check
an compare them yourselves.


131
00:06:51,478 --> 00:06:55,415 line:-2
You can leverage Apple's Frameworks by
calling 'Bundle.preferredLocalizations'.


132
00:06:55,449 --> 00:06:57,818 line:-1
And this will do the match for you.


133
00:06:57.851 --> 00:07:00.053 line:-2 align:center
It returns an array
of candidate languages,


134
00:07:00.087 --> 00:07:03.857 line:-2 align:center
sorted by how closely they match
the user's language choices.


135
00:07:03.891 --> 00:07:08.962 line:-2 align:center
And the first one is usually the best fit,
so you will use this one.


136
00:07:08.996 --> 00:07:13.300 line:-2 align:center
That language then should be used
for any subsequent requests to the server.


137
00:07:13.333 --> 00:07:16.403 line:-2 align:center
It uses it to generate a response
with content in the language


138
00:07:16,436 --> 00:07:19,273 line:-2
that your user
will be able to understand.


139
00:07:19,306 --> 00:07:21,041 align:center
With this technique you can be confident


140
00:07:21,074 --> 00:07:24,711 align:center
that strings coming from the server
are ready for updating the UI


141
00:07:24,745 --> 00:07:27,948 line:0
and for showing alerts to the user.


142
00:07:27.981 --> 00:07:30.951 line:-2 align:center
So to save your users
from a storm of frustration


143
00:07:30.984 --> 00:07:34.388 line:-2 align:center
when displaying remote content,
download the available languages,


144
00:07:34,421 --> 00:07:36,490 line:-1
match that against the user's preferences,


145
00:07:36.523 --> 00:07:40.594 line:-2 align:center
and use the result for any requests
that load user-facing content.


146
00:07:40.627 --> 00:07:42.729 line:-1 align:center
But let's come back to nicer weather now.


147
00:07:42,763 --> 00:07:45,465 line:-2
Rain or shine,
the Weather app is very rich in data


148
00:07:45.499 --> 00:07:48.802 line:-2 align:center
and many aspects of it
contain numbers and counts.


149
00:07:48.836 --> 00:07:51.238 line:-1 align:center
Let's focus on one of them.


150
00:07:51.271 --> 00:07:56.443 line:-2 align:center
Under "Precipitation"
it says "0 mm in last 6 hours.”


151
00:07:56,476 --> 00:07:58,979 line:-2
Let's assume that you want to build
something similar,


152
00:07:59.012 --> 00:08:01.648 line:-1 align:center
but spelling out "one hour" here.


153
00:08:01.682 --> 00:08:04.017 line:-2 align:center
This is how you can declare
the string in code.


154
00:08:04,051 --> 00:08:06,286 line:-2
In English,
you will need to use the plural form


155
00:08:06.320 --> 00:08:08.655 line:-1 align:center
if the number of hours is larger than one:


156
00:08:08.689 --> 00:08:11.692 line:-1 align:center
one hour, but two hours.


157
00:08:11.725 --> 00:08:13.794 line:-2 align:center
The rules when another variant
should be used


158
00:08:13,827 --> 00:08:16,330 line:-1
are even more complicated in Ukrainian.


159
00:08:16,363 --> 00:08:19,099 line:-2
You do not want to implement
that logic in your code,


160
00:08:19.132 --> 00:08:22.703 line:-2 align:center
and this is why you leverage
Apple's frameworks.


161
00:08:22,736 --> 00:08:25,138 line:-2
All you have to do is to declare
the string in code


162
00:08:25,172 --> 00:08:29,543 line:-2
and provide a stringsdict file,
which encodes the plural rule.


163
00:08:29.576 --> 00:08:33.413 line:-2 align:center
Another option is to make use
of Automatic Grammar Agreement.


164
00:08:33,447 --> 00:08:35,549 line:0
You can learn more
about these two techniques


165
00:08:35,582 --> 00:08:39,219 align:center
in last year's talk
"Streamline your localized strings.”


166
00:08:39.253 --> 00:08:42.356 line:-2 align:center
Even though it is easy,
you should not always apply


167
00:08:42.389 --> 00:08:44.992 line:-1 align:center
a plural rule to all of your strings.


168
00:08:45,025 --> 00:08:47,561 line:-2
For example,
if your sentence doesn't count anything,


169
00:08:47,594 --> 00:08:51,999 line:-2
and does not include a number,
you should not use a plural rule for it.


170
00:08:52.032 --> 00:08:54.201 line:-2 align:center
Here, "Remove this city
from your favorites"


171
00:08:54,234 --> 00:08:56,537 line:-2
doesn't need one
because there is no number,


172
00:08:56.570 --> 00:09:00.007 line:-1 align:center
and the same applies to multiple cities.


173
00:09:00.040 --> 00:09:02.009 line:-1 align:center
But if the string does include a number,


174
00:09:02.042 --> 00:09:05.179 line:-2 align:center
you should consider
having variations for plural.


175
00:09:05.212 --> 00:09:09.316 line:-2 align:center
The string of the previous example counted
how much rain will fall in the next hours,


176
00:09:09.349 --> 00:09:14.154 line:-2 align:center
and we just learned how easy it is to
make it adapt for numbers larger than one.


177
00:09:14,188 --> 00:09:17,491 line:-2
However, if there is a unit
in the sentence, like a duration,


178
00:09:17.524 --> 00:09:21.595 line:-2 align:center
a time, or percentage,
you should consider using a formatter.


179
00:09:21.628 --> 00:09:24.364 line:-1 align:center
So let's talk about formatters now.


180
00:09:24,398 --> 00:09:28,368 line:-2
Weather displays the current humidity
in percent in this view.


181
00:09:28,402 --> 00:09:32,239 line:-2
To do this in SwiftUI, it's just a matter
of a single line of code.


182
00:09:32.272 --> 00:09:35.609 line:-2 align:center
You just wrap your value in Text()
and specify how you would like


183
00:09:35.642 --> 00:09:37.444 line:-1 align:center
your number to be formatted.


184
00:09:37.477 --> 00:09:39.479 line:-2 align:center
And the equivalent Swift code
is simple too.


185
00:09:39,513 --> 00:09:42,115 line:-1
You just call .formatted on your value.


186
00:09:43,417 --> 00:09:45,085 line:-1
That really is all you need to do,


187
00:09:45.118 --> 00:09:48.222 line:-2 align:center
and the Formatter takes care
of everything else.


188
00:09:48,255 --> 00:09:50,624 line:-2
It does not only place
the percent sign in front of


189
00:09:50,657 --> 00:09:52,960 line:-1
or after the number and add spaces,


190
00:09:52.993 --> 00:09:56.630 line:-2 align:center
it also accommodates
for the user's preferred numbering system,


191
00:09:56,663 --> 00:10:00,601 line:-2
and that is something
that Arabic and Hindi users expect.


192
00:10:00,634 --> 00:10:04,972 line:-2
But that's really only the beginning
of what types of data you can format.


193
00:10:05,005 --> 00:10:07,474 line:-2
There are formatters
for almost everything,


194
00:10:07,508 --> 00:10:11,912 line:-2
and I encourage you to recap the session:
"Formatters: Make data human-friendly.”


195
00:10:14.715 --> 00:10:17.417 line:-2 align:center
As we have seen,
the weather is not always sunny,


196
00:10:17,451 --> 00:10:19,686 line:-1
and some days will have rain.


197
00:10:19.720 --> 00:10:23.357 line:-2 align:center
Of course, this highlight can't be missing
from Weather app.


198
00:10:23.390 --> 00:10:28.462 line:-2 align:center
Under "Rainfall" it says,
"50 mm expected in next 24 hours,"


199
00:10:28,495 --> 00:10:32,699 line:-2
and I'm really glad that it is not
that much where I am right now.


200
00:10:32,733 --> 00:10:34,535 line:-1
In English, the case is simple.


201
00:10:34.568 --> 00:10:38.705 line:-2 align:center
We say "50 millimeters expected
in next 24 hours.”


202
00:10:38.739 --> 00:10:41.241 line:-2 align:center
In Spanish however,
the matter is more complicated.


203
00:10:41.275 --> 00:10:44.444 line:-2 align:center
We need to vary the translation
when the amount of precipitation


204
00:10:44.478 --> 00:10:47.114 line:-1 align:center
is singular or plural.


205
00:10:47,147 --> 00:10:51,652 line:-2
We can solve this by combining
both a Formatter and a plural rule.


206
00:10:51.685 --> 00:10:54.354 line:-2 align:center
The string "2 mm" is produced
by a Formatter,


207
00:10:54,388 --> 00:10:59,560 line:-2
and it is embedded in a sentence that
needs to be varied for plural in Spanish.


208
00:10:59.593 --> 00:11:03.463 line:-2 align:center
All right, let's take a look
at how to do this in code.


209
00:11:03.497 --> 00:11:06.500 line:-2 align:center
We start by declaring a function
that takes a parameter


210
00:11:06.533 --> 00:11:10.170 line:-2 align:center
about how much the precipitation
will be in millimeters.


211
00:11:10.204 --> 00:11:13.807 line:-1 align:center
Probably it was downloaded from a server.


212
00:11:13,841 --> 00:11:16,376 line:-2
First, we ask the system
for a UnitLength,


213
00:11:16.410 --> 00:11:18.512 line:-1 align:center
which encodes the user's configuration,


214
00:11:18.545 --> 00:11:23.217 line:-2 align:center
and it will pick the right one
for our the case of showing rainfall.


215
00:11:23,250 --> 00:11:26,253 line:-2
If the user has not configured
their system to use metrics,


216
00:11:26.286 --> 00:11:29.890 line:-2 align:center
the Measurement type can be
easily converted to the preferred unit.


217
00:11:31,692 --> 00:11:35,162 line:-2
Next, the formatting API allows us
to produce a formatted string


218
00:11:35.195 --> 00:11:38.031 line:-1 align:center
for the value in a single line of code.


219
00:11:38.065 --> 00:11:40.667 line:-2 align:center
The preferredUnit already
has the information that we want


220
00:11:40,701 --> 00:11:42,102 line:-1
to display rainfall.


221
00:11:42.135 --> 00:11:45.939 line:-2 align:center
So when formatting,
we set the usage to asProvided.


222
00:11:45.973 --> 00:11:49.276 line:-2 align:center
If more than 1 millimeter or inches
of rain will fall,


223
00:11:49.309 --> 00:11:51.512 line:-1 align:center
we want to use the plural case.


224
00:11:51.545 --> 00:11:55.082 line:-2 align:center
We convert the value into an integer
so that we can check for that.


225
00:11:55.115 --> 00:11:58.085 line:-2 align:center
Next, we load a localized String
with a given key,


226
00:11:58,118 --> 00:12:00,988 line:-1
and we provide a default value, too.


227
00:12:01.021 --> 00:12:04.258 line:-2 align:center
There, we use String Interpolation
to include the integerValue,


228
00:12:04.291 --> 00:12:07.294 line:-1 align:center
the formattedValue, and the number 24.


229
00:12:07,327 --> 00:12:11,365 line:-2
The number is defined in code here,
because it will be always 24 hours.


230
00:12:11.398 --> 00:12:13.734 line:-2 align:center
Using String Interpolation
automatically makes sure


231
00:12:13,767 --> 00:12:17,671 line:-1
that the correct numbering system is used.


232
00:12:17.704 --> 00:12:19.673 line:-1 align:center
The key is declared in a stringsdict file.


233
00:12:19.706 --> 00:12:22.442 line:-1 align:center
Let's take a look at that.


234
00:12:22,476 --> 00:12:26,780 line:-2
The stringsdict starts with the key
that we have just used in our code.


235
00:12:26.813 --> 00:12:29.449 line:-2 align:center
In English, we don't need to vary
the string for plural,


236
00:12:29,483 --> 00:12:33,086 line:-1
so we use the category of "Other" for it.


237
00:12:33,120 --> 00:12:36,690 line:-2
The first parameter defines
which category is chosen at runtime.


238
00:12:36,723 --> 00:12:39,493 line:-1
Remember, it was the integer value.


239
00:12:39.526 --> 00:12:43.230 line:-2 align:center
Parameter number two and three
are present in the formatted string.


240
00:12:43,263 --> 00:12:47,034 line:-2
This defines what the sentence
will look like at runtime.


241
00:12:47.067 --> 00:12:49.837 line:-2 align:center
The Spanish stringsdict
has the same structure,


242
00:12:49,870 --> 00:12:54,007 line:-2
except that we provide a translation
in both singular and plural.


243
00:12:56.143 --> 00:13:00.180 line:-2 align:center
We have now formatted the data in code
and placed it in a sentence.


244
00:13:00,214 --> 00:13:02,449 line:-2
A stringsdict file
contains the plural rule,


245
00:13:02.482 --> 00:13:05.886 line:-2 align:center
so that the Spanish translation
is using the correct grammar.


246
00:13:05.919 --> 00:13:08.989 line:-2 align:center
Sometimes it's challenging
to provide a fully localized UI


247
00:13:09.022 --> 00:13:11.491 line:-1 align:center
that is working well for all languages.


248
00:13:11.525 --> 00:13:15.128 line:-2 align:center
Again, you learned that joining strings
can work for English


249
00:13:15,162 --> 00:13:18,732 line:-2
but might have surprising consequences
in other languages.


250
00:13:18.765 --> 00:13:21.401 line:-2 align:center
This might require
some comprehensive code to do,


251
00:13:21,435 --> 00:13:24,938 line:-2
but now you know how you can make it right
for all your users.


252
00:13:24,972 --> 00:13:28,242 line:-2
Sometimes
your strings are in a dependency,


253
00:13:28.275 --> 00:13:30.978 line:-1 align:center
or in a module that your app uses.


254
00:13:31.011 --> 00:13:34.081 line:-2 align:center
Or maybe you distribute your own code
to other developers, too,


255
00:13:34,114 --> 00:13:36,083 line:-1
using Swift Packages.


256
00:13:36,116 --> 00:13:39,019 line:-2
Let's take a look
at what's new for localization.


257
00:13:39.052 --> 00:13:41.922 line:-2 align:center
For defining a Swift Package
you declare the structure


258
00:13:41,955 --> 00:13:45,025 line:-2
and build configuration
by using Swift itself.


259
00:13:45,058 --> 00:13:48,061 line:-2
If you have user-facing content,
you can use the parameter


260
00:13:48.095 --> 00:13:51.331 line:-2 align:center
defaultLocalization to declare
that the content is using English


261
00:13:51.365 --> 00:13:53.267 line:-1 align:center
as primary language.


262
00:13:53,300 --> 00:13:58,272 line:-2
That is similar to specifying the
development language of an app project.


263
00:13:58,305 --> 00:14:01,875 line:-2
Xcode now reads that parameter
and recognizes that you are interested


264
00:14:01.909 --> 00:14:05.445 line:-1 align:center
in providing a localized experience.


265
00:14:05.479 --> 00:14:10.250 line:-2 align:center
Because of that, it will add the option to
Export Localizations to the Product menu.


266
00:14:10,284 --> 00:14:13,120 line:-2
You're probably used to using this feature
for your main app,


267
00:14:13,153 --> 00:14:16,123 line:-1
and now it also works for Swift Packages.


268
00:14:16.156 --> 00:14:21.161 line:-2 align:center
If you click "Export,” Xcode reads
your code and extracts all your strings.


269
00:14:21,195 --> 00:14:25,532 line:-2
They are placed in .xcloc files,
that you send to translators.


270
00:14:25,566 --> 00:14:28,702 line:-2
And to import your localized content
back into your package,


271
00:14:28.735 --> 00:14:30.404 line:-1 align:center
use Import Localizations,


272
00:14:30.437 --> 00:14:34.675 line:-2 align:center
and Xcode will place the files
at the correct file path in your package.


273
00:14:34,708 --> 00:14:39,580 line:-2
The workflow of localizing a Swift Package
is now identical to localizing your app.


274
00:14:41.615 --> 00:14:44.451 line:-2 align:center
But remember,
loading a string in a Swift Package


275
00:14:44.484 --> 00:14:47.387 line:-2 align:center
requires that you specify
the 'bundle' argument.


276
00:14:47,421 --> 00:14:50,357 align:center
You can learn more about that
in the talk "Swift package:


277
00:14:50,390 --> 00:14:54,328 align:center
resources and localization.”


278
00:14:54.361 --> 00:14:58.432 line:-2 align:center
If you are the author of a library
which is distributed as a Swift Package,


279
00:14:58.465 --> 00:15:01.635 line:-2 align:center
you now have an easy way
of keeping your project updated


280
00:15:01.668 --> 00:15:05.572 line:-2 align:center
and making localization
a regular part of your workflow.


281
00:15:05,606 --> 00:15:08,442 line:-2
You put a great amount of effort
and care into your project,


282
00:15:08,475 --> 00:15:12,513 line:-2
and having it localized is
a huge time-saver for all of your clients.


283
00:15:12.546 --> 00:15:14.581 line:-1 align:center
It can really make it stand out.


284
00:15:14.615 --> 00:15:16.750 line:-2 align:center
Make people aware
that you are going the extra mile


285
00:15:16,783 --> 00:15:19,486 line:-2
to provide the best experience
with your software,


286
00:15:19,520 --> 00:15:21,221 line:-1
so go ahead and tell them!


287
00:15:21,255 --> 00:15:25,192 line:-2
Be open about which languages
you support out of the box.


288
00:15:25,225 --> 00:15:27,928 line:-2
As an app developer,
you put special considerations


289
00:15:27.961 --> 00:15:29.162 line:-1 align:center
into your dependencies,


290
00:15:29,196 --> 00:15:32,065 line:-1
not only from a code quality perspective.


291
00:15:32,099 --> 00:15:34,935 line:-2
Components that you use
should support the same languages


292
00:15:34,968 --> 00:15:39,072 line:-2
and high-quality translations
as the rest of your app.


293
00:15:39.106 --> 00:15:42.943 line:-2 align:center
In the case that third-party code is not
localized to your required languages,


294
00:15:42.976 --> 00:15:45.546 line:-2 align:center
you can still create
a local copy of the package


295
00:15:45,579 --> 00:15:48,448 line:-1
and update the localizations there.


296
00:15:48.482 --> 00:15:53.120 line:-2 align:center
Make sure to test all parts of your app
in the languages that it supports.


297
00:15:53,153 --> 00:15:56,023 line:-2
This way you can make sure
that there will be no UI elements


298
00:15:56.056 --> 00:15:58.792 line:-2 align:center
that are not adapted
to the user's language.


299
00:15:58,825 --> 00:16:00,894 line:-1
Most of the time a translated string


300
00:16:00.928 --> 00:16:03.497 line:-2 align:center
is longer or shorter
than the English equivalent,


301
00:16:03.530 --> 00:16:06.400 line:-2 align:center
and that always affects
the layout of your app.


302
00:16:06,433 --> 00:16:08,836 line:-2
Let's look at what this means
for the Weather app.


303
00:16:08.869 --> 00:16:11.071 line:-1 align:center
This is the app running in English,


304
00:16:11.104 --> 00:16:14.408 line:-2 align:center
and on the right side
you can see it running in Arabic.


305
00:16:14,441 --> 00:16:17,778 line:-2
It is apparent that not only translations
are adapted to the language,


306
00:16:17.811 --> 00:16:22.616 line:-2 align:center
also the layout follows
the appropriate directionality.


307
00:16:22,649 --> 00:16:25,319 align:center
If you want to learn more
about how to create a layout


308
00:16:25,352 --> 00:16:28,021 line:0
that works for all languages,
which types of symbols


309
00:16:28,055 --> 00:16:30,023 align:center
provide a localized alternative,


310
00:16:30,057 --> 00:16:32,492 align:center
and what else to consider
for right-to-left languages,


311
00:16:32,526 --> 00:16:36,363 align:center
make sure to watch the talk
"Get it right... to left.”


312
00:16:37,731 --> 00:16:40,000 line:-2
Here, the app is running in Hindi
on the right side.


313
00:16:40.033 --> 00:16:42.302 line:-1 align:center
Let's zoom in.


314
00:16:42.336 --> 00:16:45.639 line:-2 align:center
The script of that language
tends to be taller in general.


315
00:16:45,672 --> 00:16:48,342 line:-2
And if you look closely,
you see that the height of the labels


316
00:16:48.375 --> 00:16:50.944 line:-1 align:center
are adjusted to accommodate for that.


317
00:16:50,978 --> 00:16:52,946 line:-1
The system does this automatically.


318
00:16:52.980 --> 00:16:54.615 line:-1 align:center
All you have to do is to make sure


319
00:16:54,648 --> 00:16:57,784 line:-2
that you don't give UI elements
a fixed height.


320
00:16:57.818 --> 00:17:00.621 line:-2 align:center
Don't assume that everything
will fit within 44 points


321
00:17:00,654 --> 00:17:03,690 line:-2
just because it's tall enough
to fit the English string.


322
00:17:03.724 --> 00:17:07.661 line:-2 align:center
Please always expect your text to
be taller according to the circumstances.


323
00:17:09.062 --> 00:17:11.398 line:-2 align:center
Coming back to the main view
and scrolling it up,


324
00:17:11.431 --> 00:17:13.333 line:-1 align:center
Weather has a 10-day forecast view


325
00:17:13.367 --> 00:17:15.736 line:-2 align:center
which is great
for checking out the next week.


326
00:17:17.304 --> 00:17:20.374 line:-2 align:center
What stands out on this screen
is how it dynamically adjusts


327
00:17:20.407 --> 00:17:24.044 line:-2 align:center
the position of elements
according to the longest label.


328
00:17:24.077 --> 00:17:28.215 line:-2 align:center
In English, "Today" is longer
than all of the abbreviated weekday names.


329
00:17:28,248 --> 00:17:31,552 line:-2
In Spanish, however,
all of them are three characters wide,


330
00:17:31.585 --> 00:17:36.123 line:-2 align:center
and in Greek, the translation for "Today"
is almost double the size.


331
00:17:36.156 --> 00:17:40.227 line:-2 align:center
In all languages, though, the weather icons
are aligned vertically with each other.


332
00:17:40,260 --> 00:17:43,697 line:-2
Meaning they do not have fixed spacing
to their neighbor elements,


333
00:17:43,730 --> 00:17:47,534 line:-2
but flow according to
the longest weekday label.


334
00:17:47.568 --> 00:17:51.104 line:-2 align:center
When it comes to creating a layout
that works well with internationalization,


335
00:17:51.138 --> 00:17:55.008 line:-2 align:center
you should always keep in mind
that labels need to be flexible.


336
00:17:55,042 --> 00:17:58,745 line:-2
You have just seen how important it is
to make them flexible vertically,


337
00:17:58.779 --> 00:18:03.283 line:-2 align:center
but also expect labels to grow
horizontally with a longer translation.


338
00:18:03.317 --> 00:18:06.286 line:-2 align:center
It can be a challenge to accommodate
for that in certain layouts,


339
00:18:06.320 --> 00:18:07.921 line:-1 align:center
such as in this example,


340
00:18:07.955 --> 00:18:10.591 line:-2 align:center
but this year,
SwiftUI adds support for Grid,


341
00:18:10.624 --> 00:18:15.195 line:-2 align:center
which is a new view that helps you
to build this kind of layout more easily.


342
00:18:15.229 --> 00:18:18.999 line:-2 align:center
Let's take a closer look
at how to use Grid.


343
00:18:19,032 --> 00:18:22,002 line:-2
You start by declaring the Grid
with a leading alignment.


344
00:18:22.035 --> 00:18:25.405 line:-2 align:center
That means that UI elements start
on the left side of the screen


345
00:18:25,439 --> 00:18:26,940 line:-1
in a left-to-right language


346
00:18:26,974 --> 00:18:31,512 line:-2
and on the right side of the screen
in a right-to-left language.


347
00:18:31,545 --> 00:18:35,382 line:-2
Then, for each horizontal group,
you add a GridRow.


348
00:18:35.415 --> 00:18:38.752 line:-2 align:center
And lastly
you declare the content of the rows.


349
00:18:38,785 --> 00:18:41,622 line:-2
That's all it takes
to create this rather advanced layout.


350
00:18:41,655 --> 00:18:43,557 line:-1
When the label needs more space,


351
00:18:43.590 --> 00:18:48.061 line:-2 align:center
the Capsule can shrink in size
because it's the most flexible element.


352
00:18:48.095 --> 00:18:50.964 line:-2 align:center
SwiftUI does all the heavy lifting,
such as measuring,


353
00:18:50.998 --> 00:18:55.569 line:-2 align:center
sizing, and positioning the views–
completely automatic.


354
00:18:55,602 --> 00:18:58,672 line:-2
Another challenge is to make a view
with a longer translation


355
00:18:58.705 --> 00:19:02.576 line:-2 align:center
work with a limited amount of space,
like on Apple Watch.


356
00:19:02.609 --> 00:19:05.045 line:-2 align:center
Here, the German translation
of "Tip Function"


357
00:19:05.078 --> 00:19:07.581 line:-1 align:center
is too long to fit in one row.


358
00:19:07.614 --> 00:19:11.685 line:-2 align:center
To fix this, we do not remove the icon
next to the text to make more room.


359
00:19:11,718 --> 00:19:15,556 line:-2
The solution is rather to use
two or more lines of text if needed,


360
00:19:15.589 --> 00:19:17.958 line:-1 align:center
which is the default behavior.


361
00:19:17,991 --> 00:19:19,660 line:-1
We do not encourage you to change that


362
00:19:19,693 --> 00:19:22,896 line:-2
and hiding interface elements
if there is not enough space.


363
00:19:22,930 --> 00:19:25,365 line:-2
Usually there is a way
to adjust the layout,


364
00:19:25.399 --> 00:19:28.902 line:-2 align:center
so that it can accommodate
for the needs of the language.


365
00:19:28.936 --> 00:19:31.205 line:-1 align:center
The Mail app does this in a creative way.


366
00:19:32,206 --> 00:19:37,077 line:-2
In the sheet presentation, there are four
buttons to take action on this email.


367
00:19:37.110 --> 00:19:40.247 line:-2 align:center
When a translation
of one of the button titles is too long,


368
00:19:40.280 --> 00:19:43.050 line:-2 align:center
we do not clip the text
or wrap it onto a new line.


369
00:19:43.083 --> 00:19:45.819 line:-1 align:center
This would make the view look imbalanced.


370
00:19:45.853 --> 00:19:49.089 line:-2 align:center
Instead, the entire layout is transitioned
from a horizontal stack,


371
00:19:49.122 --> 00:19:51.758 line:-1 align:center
to a vertical stack of two rows.


372
00:19:53,060 --> 00:19:55,662 line:-1
This year, SwiftUI adds another great tool


373
00:19:55.696 --> 00:19:58.098 line:-2 align:center
that makes creating
this dynamic layout easier:


374
00:19:58,131 --> 00:20:00,033 line:-1
ViewThatFits.


375
00:20:00.067 --> 00:20:02.469 line:-2 align:center
In essence,
it lets you provide alternative layouts


376
00:20:02,503 --> 00:20:05,939 line:-2
if the space is constrained
and the view would not fit.


377
00:20:07,608 --> 00:20:10,277 line:-2
You simply declare your views
independently of each other,


378
00:20:10.310 --> 00:20:12.980 line:-1 align:center
and place them in ViewThatFits.


379
00:20:13,013 --> 00:20:16,383 line:-2
SwiftUI automatically detects
if a view does not fit without clipping,


380
00:20:16,416 --> 00:20:19,486 line:-1
and transitions to the next one provided.


381
00:20:19.520 --> 00:20:22.389 line:-2 align:center
Keep in mind that you should
only switch out the layouts.


382
00:20:22.422 --> 00:20:26.627 line:-2 align:center
Hiding a view just because the translation
is too long is a bad practice.


383
00:20:26.660 --> 00:20:30.430 line:-2 align:center
That makes it harder for the users
to orient themselves in the UI.


384
00:20:30.464 --> 00:20:33.400 line:-2 align:center
Try to make room for
all the interface elements first


385
00:20:33.433 --> 00:20:34.868 line:-1 align:center
by having a flexible layout.


386
00:20:36.303 --> 00:20:38.672 line:-1 align:center
This is not only helpful for localization.


387
00:20:38.705 --> 00:20:41.875 line:-2 align:center
This layout also works great
when the user prefers to have smaller


388
00:20:41.909 --> 00:20:45.412 line:-2 align:center
or larger text,
and uses different devices.


389
00:20:45,445 --> 00:20:48,882 line:0
To learn more about the great new
layout features of SwiftUI this year,


390
00:20:48,916 --> 00:20:53,787 align:center
I recommend you to watch the talk
"Compose custom layouts with SwiftUI.”


391
00:20:53.820 --> 00:20:56.123 line:-1 align:center
Having different accessibility preferences


392
00:20:56.156 --> 00:20:59.560 line:-2 align:center
and localized text can be a challenge
for your layout.


393
00:20:59,593 --> 00:21:02,496 line:-2
Interface elements can be
taller and wider.


394
00:21:02.529 --> 00:21:05.599 line:-2 align:center
Adapting the layout to accommodate
for that can be a challenge,


395
00:21:05.632 --> 00:21:08.335 line:-2 align:center
but with SwiftUI
it gets a lot easier this year.


396
00:21:09.770 --> 00:21:13.273 line:-2 align:center
I want you to take away from this talk
that constructing a string in code


397
00:21:13.307 --> 00:21:16.143 line:-2 align:center
can be challenging
when supporting other languages.


398
00:21:16.176 --> 00:21:18.612 line:-2 align:center
Listen to the feedback
that your international users


399
00:21:18.645 --> 00:21:23.183 line:-2 align:center
and testers give you to make sure
it works great for everybody.


400
00:21:23,217 --> 00:21:25,252 line:-1
Formatting values in Swift is easy


401
00:21:25.285 --> 00:21:27.921 line:-2 align:center
and it often just takes
a single line of code.


402
00:21:27.955 --> 00:21:30.290 line:-2 align:center
And doing that,
your formatted values respect


403
00:21:30.324 --> 00:21:32.426 line:-1 align:center
the user's preferences automatically.


404
00:21:33,727 --> 00:21:35,529 line:-1
When you are offering a Swift Package,


405
00:21:35,562 --> 00:21:38,165 line:-2
make use the new
Xcode localization workflow


406
00:21:38.198 --> 00:21:42.336 line:-2 align:center
to provide a fully localized experience
to your clients.


407
00:21:42,369 --> 00:21:44,538 line:-1
Now, with or without using SwiftUI,


408
00:21:44,571 --> 00:21:47,407 line:-2
your layout should be able
to accommodate for translated text


409
00:21:47,441 --> 00:21:49,476 line:-1
and accessibility settings.


410
00:21:49,510 --> 00:21:52,312 line:-2
Use your layout tools
to make the layout flexible,


411
00:21:52.346 --> 00:21:55.315 line:-1 align:center
without hiding interface elements.


412
00:21:55,349 --> 00:21:57,818 line:-2
In the end,
your users will be grateful for that


413
00:21:57.851 --> 00:22:00.954 line:-2 align:center
because they expect your app
to fit into their lives,


414
00:22:00.988 --> 00:22:03.857 line:-2 align:center
and that includes
respecting their languages.


415
00:22:03,891 --> 00:22:06,093 line:-1
Now, I'm looking forward to a very sunny week.


416
00:22:06.126 --> 00:22:07.728 line:-1 align:center
Enjoy the rest of WWDC,


417
00:22:07,761 --> 00:22:09,630 line:-1
and thank you for watching.

