2
00:00:00,334 --> 00:00:06,340 line:-1
[upbeat music]


3
00:00:09.309 --> 00:00:13.714 line:-2 align:center
- Hi, and welcome to What's New
in TextKit and text views!


4
00:00:14,681 --> 00:00:17,384 line:-1
I'm Donna Tom, and I'm a TextKit engineer.


5
00:00:18,752 --> 00:00:23,924 line:-2
In iOS 15 and macOS Monterey,
we introduced TextKit 2,


6
00:00:23,957 --> 00:00:27,094 line:-2
a powerful new text engine
with improved performance,


7
00:00:27,127 --> 00:00:29,263 line:-1
correctness, and safety.


8
00:00:30,264 --> 00:00:33,100 line:-2
TextKit 2's viewport-based layout
architecture


9
00:00:33.133 --> 00:00:35.469 line:-1 align:center
delivers high performance text layout,


10
00:00:35,502 --> 00:00:38,705 line:-2
especially for documents
with large contents.


11
00:00:40,174 --> 00:00:44,711 line:-2
TextKit 2 provides a better text
experience for international audiences


12
00:00:44,745 --> 00:00:49,049 line:-2
by removing the unnecessary complexity
of working with glyphs,


13
00:00:49,082 --> 00:00:52,219 line:-2
and it has full support
for modern font technologies


14
00:00:52.252 --> 00:00:54.621 line:-1 align:center
like OpenType and Variable Fonts.


15
00:00:56.356 --> 00:00:59.359 line:-2 align:center
And TextKit 2's focus on working with
higher level objects


16
00:00:59.393 --> 00:01:01.261 line:-1 align:center
to control text layout


17
00:01:01,295 --> 00:01:04,665 line:-2
makes it easier for you
to customize the layout of your text


18
00:01:04,698 --> 00:01:07,768 line:-2
so you can
build cooler stuff with less code.


19
00:01:10,504 --> 00:01:12,773 line:-1
Moving forward, the TextKit 2 engine


20
00:01:12.806 --> 00:01:18.145 line:-2 align:center
forms the foundation of text layout
and rendering on all of Apple's platforms.


21
00:01:19.713 --> 00:01:24.051 line:-2 align:center
Future performance enhancements,
updates, and improvements


22
00:01:24.084 --> 00:01:27.387 line:-2 align:center
will all be focused
on the TextKit 2 engine.


23
00:01:28.188 --> 00:01:31.258 line:-2 align:center
By updating to TextKit 2,
your app can get the benefits


24
00:01:31,291 --> 00:01:33,560 line:-2
of these improvements
as we roll them out.


25
00:01:34,394 --> 00:01:36,563 line:-2
For an in-depth introduction
to TextKit2,


26
00:01:36.597 --> 00:01:39.900 line:-1 align:center
watch the Meet TextKit2 video.


27
00:01:39,933 --> 00:01:42,669 line:-1
That video covers the fundamentals


28
00:01:42,703 --> 00:01:46,807 line:-2
and how to build your own text
layout components using TextKit 2.


29
00:01:47,641 --> 00:01:52,579 line:-2
In contrast, this video covers
the latest advancements in TextKit 2


30
00:01:52,613 --> 00:01:56,683 line:-2
and how to get the most out
of TextKit 2-backed text views.


31
00:01:56.717 --> 00:02:02.155 line:-2 align:center
That's right, I said text views,
plural, because now,


32
00:02:02,189 --> 00:02:05,626 line:-1
as of iOS 16 and macOS Ventura,


33
00:02:05,659 --> 00:02:09,963 line:-2
all text controls in UIKit
and AppKit are using TextKit 2,


34
00:02:09,997 --> 00:02:12,766 line:-1
including UITextView.


35
00:02:12,799 --> 00:02:17,938 line:-2
So we're using TextKit 2 for layout
and rendering all throughout the system.


36
00:02:17.971 --> 00:02:22.876 line:-2 align:center
It's important that all apps transition
to TextKit 2 as soon as possible,


37
00:02:22,910 --> 00:02:27,481 line:-2
and we've added a number of tools
to make the transition easier for you.


38
00:02:27.514 --> 00:02:31.251 line:-2 align:center
For many apps,
this can be a zero code transition.


39
00:02:31,285 --> 00:02:33,153 line:-1
And we expect this to be true


40
00:02:33,187 --> 00:02:36,890 line:-2
for apps that don't make any special
modifications to their text views.


41
00:02:36.924 --> 00:02:39.092 line:-1 align:center
I'll tell you a bit more about that later.


42
00:02:40,294 --> 00:02:44,031 line:-2
But first, I'll start by going
over what's new in TextKit 2,


43
00:02:44,064 --> 00:02:46,700 line:-2
including some
of those tools I just mentioned.


44
00:02:48,001 --> 00:02:50,270 line:-2
After that,
I'll dive deep into the details


45
00:02:50,304 --> 00:02:53,774 line:-2
of the TextKit 1
compatibility mode for text views.


46
00:02:54,942 --> 00:02:58,979 line:-2
Then I'll finish with a discussion
of modernization strategies you can use


47
00:02:59,012 --> 00:03:02,182 line:-2
when preparing to transition
your code to TextKit 2.


48
00:03:03.550 --> 00:03:07.187 line:-1 align:center
So first up is what's new in TextKit 2.


49
00:03:08,322 --> 00:03:12,059 line:0
TextKit 2 first came to UIKit in iOS 15


50
00:03:12,092 --> 00:03:14,928 line:0
where UITextField was upgraded to use it.


51
00:03:15,529 --> 00:03:20,234 align:center
In iOS 16, the UIKit transition
to TextKit 2 is complete,


52
00:03:20,267 --> 00:03:26,340 line:0
with all text controls using TextKit 2
by default, including UITextView.


53
00:03:26.373 --> 00:03:30.010 line:-2 align:center
Most text views will be
automatically opted in to TextKit 2,


54
00:03:30,043 --> 00:03:32,846 line:-1
requiring zero adoption on your part.


55
00:03:32,880 --> 00:03:36,884 line:-2
There are just a few situations
where text views might not get opted in,


56
00:03:36,917 --> 00:03:40,521 line:-2
and I'll cover that in the
compatibility segment of this video.


57
00:03:42,155 --> 00:03:44,458 align:center
And it's a similar story for AppKit.


58
00:03:44,491 --> 00:03:49,329 align:center
TextKit 2 first came to AppKit
in macOS Big Sur.


59
00:03:49,363 --> 00:03:53,867 line:0
In macOS Monterey, NSTextField
was upgraded to use it by default,


60
00:03:53,901 --> 00:03:57,671 line:0
and it was available for
NSTextView by opting in.


61
00:03:58,939 --> 00:04:03,944 align:center
In macOS Ventura, all text controls
use TextKit 2 by default.


62
00:04:03,977 --> 00:04:09,583 line:0
Just like UITextView, most NSTextViews
get automatic opt in to TextKit 2


63
00:04:09,616 --> 00:04:11,985 align:center
and require zero adoption on your part.


64
00:04:14,221 --> 00:04:17,858 line:-2
TextEdit, which is a thin wrapper
around NSTextView,


65
00:04:17.891 --> 00:04:22.029 line:-2 align:center
uses TextKit 2 everywhere
in macOS Ventura.


66
00:04:22,062 --> 00:04:27,768 align:center
TextEdit has been using TextKit 2
in plain text mode since macOS Big Sur.


67
00:04:27,801 --> 00:04:32,272 align:center
In macOS Ventura,
rich text mode uses TextKit 2 as well.


68
00:04:34.708 --> 00:04:37.277 line:-1 align:center
Since TextKit 2 is the new standard,


69
00:04:37,311 --> 00:04:42,683 line:-2
we've added some convenience constructors
for both UITextView and NSTextView.


70
00:04:42.716 --> 00:04:46.453 line:-2 align:center
Use these new constructors
to choose at initialization time


71
00:04:46,486 --> 00:04:48,689 line:-1
which text engine to use.


72
00:04:49.957 --> 00:04:52.326 line:-1 align:center
To create a text view that uses TextKit 2,


73
00:04:52,359 --> 00:04:55,095 line:-1
use the new constructor and pass true


74
00:04:55,128 --> 00:04:58,332 line:-2
for the "UsingTextLayoutManager"
parameter.


75
00:04:58,365 --> 00:05:04,371 line:-2
If the text view needs to use TextKit 1
for compatibility, pass "false" instead.


76
00:05:07,207 --> 00:05:12,045 line:-2
And there's a new Text Layout option for
text views created in Interface Builder.


77
00:05:12,079 --> 00:05:16,149 line:-2
This new option gives you control
of which layout system to use


78
00:05:16.183 --> 00:05:18.519 line:-1 align:center
on a per-instance basis.


79
00:05:18.552 --> 00:05:22.756 line:-2 align:center
The default setting is the system default,
which is TextKit 2.


80
00:05:23.757 --> 00:05:28.762 line:-2 align:center
You can also choose to explicitly
use TextKit 2 or TextKit 1.


81
00:05:30,664 --> 00:05:34,468 line:-2
TextKit 2 now supports
non-simple text containers.


82
00:05:34,501 --> 00:05:39,606 line:-2
Non-simple text containers
may have holes or gaps in them.


83
00:05:39,640 --> 00:05:43,810 line:-2
This allows text to wrap around
images or other inline content.


84
00:05:45.145 --> 00:05:47.414 line:-1 align:center
To create a non-simple text container,


85
00:05:47.447 --> 00:05:51.552 line:-2 align:center
use the exclusionPaths property
on NSTextContainer


86
00:05:51,585 --> 00:05:55,656 line:-2
to define the areas
where text should not be laid out.


87
00:05:55,689 --> 00:06:00,460 line:-2
For an example of how to do this, check
out the TextKitAndTextView sample code


88
00:06:00,494 --> 00:06:03,497 line:-2
from the resources
associated with this video.


89
00:06:03.530 --> 00:06:07.534 line:-2 align:center
You can find the related example
on the "exclusion path" tab.


90
00:06:10.137 --> 00:06:13.207 line:-2 align:center
We've enhanced the line breaking engine
in TextKit 2


91
00:06:13,240 --> 00:06:17,477 line:-2
to choose more even line breaks
for justified paragraphs.


92
00:06:17,511 --> 00:06:22,382 line:-2
This is a subtle change that's easier
to notice on longer paragraphs of text.


93
00:06:23.684 --> 00:06:27.688 line:-2 align:center
Here we have two versions of the
same text, laid out in the same area.


94
00:06:28.689 --> 00:06:32.526 line:-2 align:center
Notice the stretched out lines
and large interword spacing


95
00:06:32,559 --> 00:06:34,528 line:-1
with traditional line breaking.


96
00:06:36,029 --> 00:06:37,698 line:-1
There's much less of that going on


97
00:06:37,731 --> 00:06:40,033 line:-1
with the new even line breaking.


98
00:06:40,067 --> 00:06:42,503 line:-1
This makes the text easier to read,


99
00:06:42,536 --> 00:06:45,272 line:-1
and you get it for free with TextKit 2.


100
00:06:45.305 --> 00:06:47.107 line:-1 align:center
There's no adoption required.


101
00:06:48,642 --> 00:06:53,680 line:-2
And finally, we've added text list support
in TextKit 2 for all platforms.


102
00:06:53.714 --> 00:06:56.750 line:-2 align:center
With text lists,
you can programmatically create


103
00:06:56,783 --> 00:07:00,387 line:-2
numbered or bulleted lists
for display in a text view.


104
00:07:00.420 --> 00:07:06.994 line:-2 align:center
TextKit 2 uses NSTextList to represent
text lists, just like TextKit 1.


105
00:07:07,027 --> 00:07:10,197 line:-2
NSTextList
used to be available in AppKit only,


106
00:07:10.230 --> 00:07:13.767 line:-2 align:center
but in iOS 16,
it's available in UIKit too.


107
00:07:15,669 --> 00:07:20,774 line:-2
Use NSTextList together with
NSmutableParagraphStyle to specify


108
00:07:20.807 --> 00:07:25.712 line:-2 align:center
that a paragraph in your text storage
should be formatted as a list for display.


109
00:07:25,746 --> 00:07:29,283 line:-2
The text view is responsible
for picking up these attributes


110
00:07:29.316 --> 00:07:34.221 line:-2 align:center
from the text storage and reformatting
the paragraph content to look like a list.


111
00:07:35.856 --> 00:07:41.795 line:-2 align:center
While NSTextList itself isn't new,
there are a few new TextKit 2 additions.


112
00:07:41.828 --> 00:07:44.164 line:-1 align:center
Since lists can have nested items,


113
00:07:44,198 --> 00:07:47,267 line:-2
it's natural to represent them
as a tree structure.


114
00:07:47.301 --> 00:07:52.973 line:-2 align:center
In TextKit 2, we've enhanced NSTextElement
to support structuring them as trees


115
00:07:53.006 --> 00:07:56.443 line:-2 align:center
with properties for accessing
child and parent elements.


116
00:07:58.011 --> 00:08:02.616 line:-2 align:center
And we've added a new element subclass
called NSTextListElement.


117
00:08:02.649 --> 00:08:07.487 line:-2 align:center
When the content manager comes across
a NSTextList in the text content,


118
00:08:07,521 --> 00:08:12,192 line:0
it will generate NSTextListElements
to represent the items in the list.


119
00:08:14.394 --> 00:08:18.565 line:-2 align:center
To get a more in-depth view of
how to create text lists and add items,


120
00:08:18,599 --> 00:08:22,302 line:-2
refer to the
TextKitAndTextView sample code.


121
00:08:22,336 --> 00:08:25,205 line:-2
You can find the related example
on the "list" tab.


122
00:08:27.474 --> 00:08:29.443 line:-2 align:center
And while
you're exploring the sample code,


123
00:08:29.476 --> 00:08:31.879 line:-1 align:center
don't miss the text attachment example


124
00:08:31,912 --> 00:08:37,084 line:-2
which shows how to use the text attachment
view provider APIs in TextKit 2.


125
00:08:38,852 --> 00:08:43,223 line:0
These APIs let you use a UI
or NSView as the text attachment,


126
00:08:43,257 --> 00:08:47,294 line:0
and events can be handled directly
by the attachment view.


127
00:08:47.327 --> 00:08:50.998 line:-2 align:center
This makes event handling with
text attachments a whole lot easier,


128
00:08:51.031 --> 00:08:54.268 line:-1 align:center
and it's only possible with TextKit 2.


129
00:08:54.301 --> 00:08:57.838 line:-2 align:center
All right,
that's it for what's new in TextKit 2.


130
00:08:57,871 --> 00:09:03,443 line:-2
Next, I'll get into the details of
the TextKit 1 compatibility mode.


131
00:09:03.477 --> 00:09:08.015 line:-2 align:center
Since TextKit 2 is such a radical
departure from the design of TextKit 1,


132
00:09:08.048 --> 00:09:12.553 line:-2 align:center
we understand that full adoption of
TextKit 2 may take some time


133
00:09:12.586 --> 00:09:17.157 line:-2 align:center
for apps that are heavily invested
in the TextKit 1 architecture.


134
00:09:17.191 --> 00:09:21.662 line:-2 align:center
We want these apps to continue to work
well until the transition can be made,


135
00:09:21.695 --> 00:09:25.399 line:-2 align:center
and that's why we've added
a special TextKit 1 compatibility mode


136
00:09:25,432 --> 00:09:28,468 line:-1
for UITextView and NSTextView.


137
00:09:28,502 --> 00:09:32,172 line:-2
When you explicitly
call an NSLayoutManager API,


138
00:09:32,206 --> 00:09:35,943 line:-2
the text view replaces its
NSTextLayoutManager


139
00:09:35,976 --> 00:09:41,215 line:-2
with an NSLayoutManager
and reconfigures itself to use TextKit 1.


140
00:09:41,248 --> 00:09:45,052 line:-2
This can also happen
if the text view encounters attributes


141
00:09:45.085 --> 00:09:50.557 line:-2 align:center
not yet supported by TextKit 2,
such as tables, or when printing.


142
00:09:52,826 --> 00:09:57,865 line:-2
If you encounter an unexpected runtime
fallback to TextKit 1 in UITextView,


143
00:09:57,898 --> 00:10:01,802 line:-2
check the log for a message
warning about the switch.


144
00:10:01.835 --> 00:10:07.274 line:-2 align:center
Set a breakpoint on the symbol underscore
UITextViewEnablingCompatibilityMode


145
00:10:07.307 --> 00:10:11.044 line:-2 align:center
to capture a stack trace
and other useful debugging information.


146
00:10:13,046 --> 00:10:15,549 line:-2
For NSTextView,
you can get more information


147
00:10:15,582 --> 00:10:19,953 line:-2
about unexpected runtime fallbacks
by subscribing to the willSwitch


148
00:10:19.987 --> 00:10:23.223 line:-2 align:center
or didSwitchToNSLayoutManager
notifications.


149
00:10:25,292 --> 00:10:27,694 line:0
If you must drop back to TextKit 1,


150
00:10:27,728 --> 00:10:31,064 line:0
it's best to opt out
at initialization time


151
00:10:31,098 --> 00:10:34,501 align:center
with programmatically
initialized text views.


152
00:10:34,535 --> 00:10:39,039 line:0
Do this by using your own text container
and a TextKit 1 layout manager.


153
00:10:40,707 --> 00:10:43,610 line:0
Another option is to use the
new convenience constructor


154
00:10:43,644 --> 00:10:49,316 line:-2
to initialize a TextKit 1 text view
and pass false as the parameter.


155
00:10:49.349 --> 00:10:52.152 line:-2 align:center
This will
make your text view use TextKit 1.


156
00:10:54,354 --> 00:10:57,057 line:0
And a third option
is to use Interface Builder


157
00:10:57,090 --> 00:11:01,862 align:center
and set the new Text Layout option
to TextKit 1 on your text view.


158
00:11:03,230 --> 00:11:05,432 line:-1
Here's something to watch out for.


159
00:11:05,465 --> 00:11:08,836 line:-2
If you're swapping out your
text container's layout manager


160
00:11:08.869 --> 00:11:11.672 line:-1 align:center
during or after initialization,


161
00:11:11.705 --> 00:11:16.643 line:-2 align:center
then your text view
will fall back to TextKit 1 as designed.


162
00:11:16,677 --> 00:11:21,381 line:-2
It's inefficient to create all the TextKit
2 objects during initialization


163
00:11:21,415 --> 00:11:24,351 line:-1
only to throw them away moments later.


164
00:11:24,384 --> 00:11:28,922 line:-2
There's also potential user side effects,
depending on the timing.


165
00:11:28,956 --> 00:11:32,559 line:-2
If it happens during typing,
the text view could lose its focus


166
00:11:32,593 --> 00:11:38,899 line:-2
and interrupt input, requiring the text
view to be selected again to resume.


167
00:11:38,932 --> 00:11:44,705 line:-2
Avoid this by opting the text view out
at initialization time.


168
00:11:44.738 --> 00:11:47.708 line:-2 align:center
Now that you know
all about compatibility mode,


169
00:11:47.741 --> 00:11:52.212 line:-2 align:center
it's time to talk about how to avoid it
altogether by modernizing your app


170
00:11:52.246 --> 00:11:54.281 line:-1 align:center
and adopting TextKit 2.


171
00:11:54,314 --> 00:11:57,718 line:-2
And there's one really important
thing I want you to remember.


172
00:11:59.553 --> 00:12:03.023 line:-2 align:center
There can be only one
layout manager per text view.


173
00:12:03,056 --> 00:12:06,393 line:-2
A text view can't have both
an NSTextLayoutManager


174
00:12:06.426 --> 00:12:10.030 line:-1 align:center
and an NSLayoutManager at the same time.


175
00:12:11,698 --> 00:12:17,004 line:-2
Once a text view switches to TextKit 1,
there's no automatic way of going back.


176
00:12:17.037 --> 00:12:20.073 line:-2 align:center
The process of switching
layout systems is expensive,


177
00:12:20,107 --> 00:12:25,345 line:-2
and you will lose any UI state that
was present at the time of the switch.


178
00:12:25.379 --> 00:12:28.348 line:-1 align:center
So for optimum performance and usability,


179
00:12:28,382 --> 00:12:33,554 line:-2
the system will never switch a text view
back to TextKit 2 from TextKit 1.


180
00:12:33,587 --> 00:12:35,389 line:-1
It's a one-way operation.


181
00:12:36,790 --> 00:12:42,429 line:-2
This means it's really important
to avoid compatibility mode.


182
00:12:42.462 --> 00:12:46.934 line:-2 align:center
And there's a few different reasons
a text view will enter compatibility mode.


183
00:12:46,967 --> 00:12:50,838 line:-2
The number one reason for a
text view to enter compatibility mode


184
00:12:50,871 --> 00:12:55,342 line:-2
is accessing the text view's
layoutManager property.


185
00:12:55.375 --> 00:12:57.778 line:-1 align:center
The other reasons are much less common.


186
00:12:59.746 --> 00:13:01.181 line:-1 align:center
So an important strategy


187
00:13:01,215 --> 00:13:05,219 line:-2
is to avoid accessing
the text view's layout manager property.


188
00:13:05,252 --> 00:13:10,991 line:-2
Also avoid accessing the layout manager
through the text view's text container.


189
00:13:11.024 --> 00:13:14.194 line:-2 align:center
Audit your code
for uses of these properties,


190
00:13:14.228 --> 00:13:18.432 line:-2 align:center
and remove them or replace them
with TextKit 2 equivalents.


191
00:13:20,334 --> 00:13:24,705 line:-2
If you're deploying your app to older
OS versions that don't have TextKit 2,


192
00:13:24.738 --> 00:13:28.809 line:-2 align:center
you might not be able to entirely
remove your layoutManager code.


193
00:13:29.977 --> 00:13:35.048 line:-2 align:center
In that case, you should first check
for the text view's NSTextLayoutManager.


194
00:13:36,216 --> 00:13:39,086 line:-1
Put your TextKit 2 code in the if clause


195
00:13:39,119 --> 00:13:42,389 line:-2
and put the TextKit 1 code
in the else clause,


196
00:13:42,422 --> 00:13:45,392 line:-1
including the layoutManager access.


197
00:13:45.425 --> 00:13:50.531 line:-2 align:center
This way, the TextKit 1 code only runs
when TextKit 2 is not available,


198
00:13:50,564 --> 00:13:55,469 line:-2
and your layoutManager query won't cause
an unintended fallback to TextKit 1.


199
00:13:57,771 --> 00:14:00,641 align:center
If you've followed all this
advice and you still encounter


200
00:14:00,674 --> 00:14:04,411 line:0
an unexpected fallback to TextKit 1
coming from the system,


201
00:14:04,444 --> 00:14:09,483 align:center
that's our problem, so please report
the issue with Feedback Assistant.


202
00:14:09,516 --> 00:14:12,519 line:0
Include a capture of the stack trace
at the time of fallback,


203
00:14:12,553 --> 00:14:13,921 line:0
which you can get from breaking on


204
00:14:13,954 --> 00:14:17,791 align:center
underscore
UITextViewEnablingCompatibilityMode


205
00:14:17,824 --> 00:14:22,229 align:center
in UIKit, or
willSwitchToNSLayoutManagerNotification


206
00:14:22,262 --> 00:14:24,231 align:center
in AppKit.


207
00:14:25,632 --> 00:14:29,336 line:-2
Okay, now I'll get into the specifics
of updating code


208
00:14:29.369 --> 00:14:33.974 line:-2 align:center
related to TextKit 1 types,
starting with NSLayoutManager.


209
00:14:34.007 --> 00:14:37.444 line:-2 align:center
Once you've audited your code
for NSLayoutManager queries,


210
00:14:37.477 --> 00:14:41.982 line:-2 align:center
you'll need to figure out the TextKit 2
equivalents with NSTextLayoutManager.


211
00:14:44,418 --> 00:14:49,122 line:-2
Some layout manager APIs have
similar names between TextKit 1 and 2,


212
00:14:49.156 --> 00:14:51.892 line:-1 align:center
and the substitutions are straightforward.


213
00:14:51.925 --> 00:14:53.894 line:-1 align:center
Here's a few examples.


214
00:14:53,927 --> 00:14:59,032 line:0
In TextKit 1, you call usedRect(for:
textContainer) on NSLayoutManager


215
00:14:59,066 --> 00:15:04,805 line:0
to get the bounding rectangle for
the text inside a text container.


216
00:15:04,838 --> 00:15:09,643 line:0
In TextKit 2, you get this from the
usageBoundsForTextContainer property


217
00:15:09,676 --> 00:15:11,712 line:0
on NSTextLayoutManager.


218
00:15:12,779 --> 00:15:16,316 line:0
In TextKit 1,
we used the name "temporary attributes"


219
00:15:16,350 --> 00:15:21,455 align:center
for attributes that affected
only the rendering, and not the layout.


220
00:15:21,488 --> 00:15:25,792 line:0
In TextKit 2, we more accurately
call those "rendering attributes."


221
00:15:27,861 --> 00:15:30,030 line:1
But there are some TextKit 1 APIs that


222
00:15:30,063 --> 00:15:33,634 line:1
have no direct equivalents in TextKit 2.


223
00:15:33,667 --> 00:15:36,436 align:center
To understand why,
you need to understand


224
00:15:36,470 --> 00:15:39,640 align:center
there is no correct
character to glyph mapping


225
00:15:39,673 --> 00:15:42,743 line:1
for many words in Indic scripts
like Kannada.


226
00:15:43,644 --> 00:15:46,079 line:1
In these scripts, glyphs can be split up,


227
00:15:46,113 --> 00:15:49,349 line:1
reordered, recombined, or even deleted.


228
00:15:50,751 --> 00:15:53,787 line:0
The glyph-based APIs
on NSLayoutManager


229
00:15:53,820 --> 00:15:58,392 line:0
assume you can directly associate
a contiguous range of characters


230
00:15:58,425 --> 00:16:03,630 line:0
with a contiguous range of glyphs,
and that's just not true for all scripts.


231
00:16:03,664 --> 00:16:07,134 line:0
Using these APIs can result
in broken layout and rendering


232
00:16:07,167 --> 00:16:09,937 align:center
for text written in scripts like Kannada.


233
00:16:09,970 --> 00:16:14,508 line:0
That's why there are
zero glyph APIs in TextKit 2.


234
00:16:14,541 --> 00:16:19,413 align:center
You can't just substitute a single
TextKit 2 API for a TextKit 1 glyph API.


235
00:16:19,446 --> 00:16:23,016 line:0
Replacing these APIs
requires a different approach.


236
00:16:24.818 --> 00:16:28.422 line:-1 align:center
So here's how to update glyph-based code.


237
00:16:28,455 --> 00:16:33,060 line:-2
The first step is to identify
which glyph APIs you're using.


238
00:16:33.093 --> 00:16:36.597 line:-1 align:center
Next, look at how you're using those APIs


239
00:16:36,630 --> 00:16:40,701 line:-2
and define what you are trying to do
at a high level.


240
00:16:40.734 --> 00:16:44.171 line:-2 align:center
Glyph-based code is very low level,
and there are many details


241
00:16:44,204 --> 00:16:47,107 line:-2
that aren't relevant
to your high-level task.


242
00:16:48,342 --> 00:16:50,110 line:-1
Once you've defined the high-level task,


243
00:16:50.143 --> 00:16:54.448 line:-2 align:center
then examine the structures
available to you in TextKit 2


244
00:16:54.481 --> 00:16:58.952 line:-2 align:center
such as layout fragments,
line fragments, and text selections.


245
00:16:58,986 --> 00:17:02,155 line:-1
These can help you accomplish your task.


246
00:17:02,189 --> 00:17:06,126 line:-1
For example, consider this TextKit 1 code.


247
00:17:06,159 --> 00:17:09,296 align:center
There's two glyph APIs used here:


248
00:17:09,329 --> 00:17:10,964 align:center
numberOfGlyphs,


249
00:17:10,998 --> 00:17:15,836 line:0
and lineFragmentRect(forGlyphAt: index) .


250
00:17:15,869 --> 00:17:19,973 line:0
This TextKit 1 code is iterating
over all of the glyphs in the document


251
00:17:20,007 --> 00:17:22,743 align:center
and counting the line fragment rects.


252
00:17:22,776 --> 00:17:27,581 align:center
The high-level task is counting the number
of lines of wrapped text


253
00:17:27,614 --> 00:17:29,816 align:center
in the text view.


254
00:17:29,850 --> 00:17:32,953 line:0
Since this code is working with
line fragment rects,


255
00:17:32,986 --> 00:17:37,124 line:0
the TextKit 2 structures to use
are NSTextLineFragment


256
00:17:37,157 --> 00:17:39,693 align:center
and NSTextLayoutFragment.


257
00:17:40.594 --> 00:17:43.964 line:-2 align:center
And here's the code
rewritten to use TextKit 2.


258
00:17:43.997 --> 00:17:46.400 line:-1 align:center
Instead of iterating over glyphs,


259
00:17:46,433 --> 00:17:49,837 line:-2
it's enumerating the text layout
fragments in the document


260
00:17:49.870 --> 00:17:53.740 line:-2 align:center
and supplying a closure that counts
all of the text line fragments


261
00:17:53,774 --> 00:17:55,909 line:-1
within each layout fragment.


262
00:17:57,578 --> 00:18:01,648 line:-2
Keep that example in mind when
updating your own code for TextKit 2.


263
00:18:01.682 --> 00:18:06.587 line:-2 align:center
Now I'm going to shift gears and discuss
updating code that's based on NSRange.


264
00:18:09,756 --> 00:18:14,561 line:-2
TextKit 1 uses NSRange
to index into text content,


265
00:18:14.595 --> 00:18:19.099 line:-2 align:center
and NSRange
is a linear index into a string.


266
00:18:19,132 --> 00:18:22,703 line:-2
For the text "Hello TextKit 2!"
exclamation point,


267
00:18:22,736 --> 00:18:27,674 line:-2
the NSRange that represents
the "TextKit 2 exclamation point"


268
00:18:27,708 --> 00:18:31,278 line:-1
is location 6 and length 10,


269
00:18:31,311 --> 00:18:36,016 line:-2
since it begins at the 6th character
and it's 10 characters long.


270
00:18:36,049 --> 00:18:38,785 line:-1
This linear model is easy to understand,


271
00:18:38,819 --> 00:18:41,755 line:-2
and it works great
for indexing into strings.


272
00:18:43.557 --> 00:18:47.394 line:-2 align:center
But the linear model doesn't
work for indexing into any content


273
00:18:47,427 --> 00:18:50,297 line:-1
that has more structure than a string.


274
00:18:50.330 --> 00:18:52.833 line:-1 align:center
Here's an example.


275
00:18:52,866 --> 00:18:56,336 line:-2
HTML documents
are represented as a tree structure,


276
00:18:56.370 --> 00:18:58.872 line:-1 align:center
where each tag is a node in the tree.


277
00:18:58.906 --> 00:19:01.341 line:-1 align:center
If our Hello TextKit 2! text


278
00:19:01,375 --> 00:19:03,710 line:-1
is part of an HTML document,


279
00:19:03.744 --> 00:19:08.215 line:-2 align:center
there's no way for our NSRange to tell us
that the text is inside the span tag,


280
00:19:08,248 --> 00:19:10,851 line:-1
nested 3 levels deep.


281
00:19:10.884 --> 00:19:14.488 line:-2 align:center
The linear model isn't expressive
enough to store that information,


282
00:19:14,521 --> 00:19:19,426 line:-2
so we can't use it to index
into a nested structure like this one.


283
00:19:19,459 --> 00:19:26,466 line:-2
This is why TextKit 2 added new types for
representing ranges in the text content.


284
00:19:26,500 --> 00:19:31,271 line:-2
NSTextLocation is an object
that represents a single location


285
00:19:31,305 --> 00:19:33,574 line:-1
inside the text content.


286
00:19:33,607 --> 00:19:38,245 line:-2
NSTextRange
consists of a start and end location.


287
00:19:38.278 --> 00:19:42.449 line:-2 align:center
The end location
is excluded from the range.


288
00:19:42,482 --> 00:19:46,954 align:center
These new types can represent the
nested structure of this HTML document


289
00:19:46,987 --> 00:19:52,426 line:0
by defining a location as the
DOM node plus a character offset.


290
00:19:53,594 --> 00:19:58,532 align:center
Since NSTextLocation is a protocol,
any custom object can be a location


291
00:19:58,565 --> 00:20:03,437 line:0
as long as it implements
the NSTextLocation protocol methods.


292
00:20:03,470 --> 00:20:07,407 align:center
This is crucial infrastructure for working
with different types of backing stores


293
00:20:07,441 --> 00:20:10,344 line:0
that support structured data
in their models.


294
00:20:11,912 --> 00:20:15,983 line:-2
But text views are built on
NSAttributedString backing stores


295
00:20:16,016 --> 00:20:19,019 line:-2
that don't have this structure,
and we can't change that


296
00:20:19,052 --> 00:20:23,123 line:-2
without breaking lots of apps,
including yours.


297
00:20:23.156 --> 00:20:26.994 line:-2 align:center
So you'll continue to use NSRange
when using text view APIs


298
00:20:27,027 --> 00:20:30,731 line:-2
like selectedRange
or scrollRangeToVisible.


299
00:20:30.764 --> 00:20:34.968 line:-2 align:center
And you'll need to convert between
NSRange and NSTextRange


300
00:20:35.002 --> 00:20:39.473 line:-2 align:center
when communicating with the TextKit 2
layout manager or content manager.


301
00:20:40,941 --> 00:20:44,778 line:-2
To convert a text view's NSRange
to an NSTextRange,


302
00:20:44,811 --> 00:20:49,716 line:-2
define the location as the integer index
into the attributed string.


303
00:20:50.851 --> 00:20:55.589 line:-2 align:center
Use the NSRange location as
the start location for NSTextRange.


304
00:20:56,790 --> 00:21:02,596 line:-2
Use the NSRange location plus the length
as the end location of the NSTextRange.


305
00:21:02,629 --> 00:21:07,234 line:-2
Conceptually, that's how to map
from NSRange to NSTextRange.


306
00:21:09,069 --> 00:21:11,705 line:0
In practice,
the code looks a little different


307
00:21:11,738 --> 00:21:15,442 line:0
because NSTextLocations must be objects.


308
00:21:17,110 --> 00:21:20,547 align:center
You need to go through the content
manager to compute the locations.


309
00:21:21,815 --> 00:21:24,785 align:center
For the start location,
ask the content manager


310
00:21:24,818 --> 00:21:27,354 line:0
for the location
of the beginning of the document,


311
00:21:27,387 --> 00:21:31,091 align:center
then offset it by the NSRange's location.


312
00:21:31,124 --> 00:21:36,530 align:center
Then offset the start location by the
NSRange's length to get the end location.


313
00:21:38,899 --> 00:21:42,369 align:center
To go in the other direction,
use the text content manager


314
00:21:42,402 --> 00:21:44,204 align:center
to get two different offsets.


315
00:21:45,772 --> 00:21:49,676 line:0
The NSRange's location is the offset
between the beginning of the document


316
00:21:49,710 --> 00:21:53,347 line:0
and the NSTextRange's location.


317
00:21:53,380 --> 00:21:57,651 align:center
And the NSRange's length is the offset
between the start and end locations


318
00:21:57,684 --> 00:21:59,686 line:0
of the NSTextRange.


319
00:22:01,455 --> 00:22:06,193 line:0
UITextViews and UITextFields
conform to the UITextInput protocol,


320
00:22:06,226 --> 00:22:09,963 line:0
which uses UITextPosition and range.


321
00:22:09,997 --> 00:22:12,399 line:0
Most of the time,
you won't need to convert


322
00:22:12,432 --> 00:22:16,003 line:0
a UITextRange
directly to an NSTextRange


323
00:22:16,036 --> 00:22:19,540 align:center
when using UITextView or UITextField.


324
00:22:19,573 --> 00:22:22,009 align:center
But if you do, use the integer offsets


325
00:22:22,042 --> 00:22:24,611 align:center
as the intermediary
between the two range types.


326
00:22:26,713 --> 00:22:30,851 line:0
On the other hand, if you're using
a custom view with UITextInput,


327
00:22:30,884 --> 00:22:34,288 align:center
you have direct control
over the UITextPosition


328
00:22:34,321 --> 00:22:38,592 align:center
and UITextRange subclasses
used with your view.


329
00:22:38,625 --> 00:22:41,495 line:0
You can make your
UITextPosition subclass


330
00:22:41,528 --> 00:22:45,399 line:0
conform to NSTextLocation,
implement the required method,


331
00:22:45,432 --> 00:22:49,703 line:0
and use your subclass
to create NSTextRanges directly.


332
00:22:51,138 --> 00:22:56,076 line:-2
Finally, here's a reminder to avoid
reusing UITextPosition objects


333
00:22:56,109 --> 00:23:02,416 line:-2
across different views, even if the
content in both views is similar.


334
00:23:02,449 --> 00:23:07,721 line:-2
A UITextPosition is only valid
for the view used to create it.


335
00:23:09,223 --> 00:23:12,526 line:-2
All right, now you've got lots of
strategies at your disposal


336
00:23:12.559 --> 00:23:14.561 line:-1 align:center
for modernizing your code.


337
00:23:14.595 --> 00:23:17.297 line:-2 align:center
Apply these strategies,
and your app will be ready


338
00:23:17,331 --> 00:23:19,666 line:-1
to reap the benefits of TextKit 2.


339
00:23:21,568 --> 00:23:24,805 line:-2
And that's what's new
in TextKit and text views.


340
00:23:24.838 --> 00:23:27.875 line:-2 align:center
I covered a lot of great improvements
in TextKit 2


341
00:23:27.908 --> 00:23:30.344 line:-2 align:center
and shared some strategies
for updating your apps


342
00:23:30.377 --> 00:23:33.814 line:-2 align:center
while maintaining compatibility
for older OS versions.


343
00:23:33,847 --> 00:23:39,052 line:-2
Use TextKit 2 in your apps today to take
full advantage of the new improvements.


344
00:23:39,086 --> 00:23:40,954 line:-1
Check your text views to make sure


345
00:23:40,988 --> 00:23:44,391 line:-2
they aren't unintentionally
falling back to TextKit 1.


346
00:23:44,424 --> 00:23:47,127 line:-2
And finally,
employ the modernization strategies


347
00:23:47.160 --> 00:23:50.464 line:-1 align:center
to get your app on TextKit 2.


348
00:23:50,497 --> 00:23:55,169 line:-2
We can't wait to read what you'll create
with TextKit 2 and text views.


349
00:23:55.202 --> 00:23:57.171 line:-1 align:center
Thanks for watching!

