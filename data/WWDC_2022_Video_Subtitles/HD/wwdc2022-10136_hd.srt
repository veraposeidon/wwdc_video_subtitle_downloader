2
00:00:00,000 --> 00:00:03,003 line:-1
♪ instrumental hip hop music ♪


3
00:00:03,003 --> 00:00:09,776 position:90% size:2% align:right
♪


4
00:00:09.776 --> 00:00:11.545 line:-1 position:50%
Hello,
I am Dominik


5
00:00:11,545 --> 00:00:15,015 line:-1
and I am thrilled to
introduce you to Swift Charts,


6
00:00:15.015 --> 00:00:18.185 line:-1 position:50%
Apple's new framework
for making informative


7
00:00:18.185 --> 00:00:21.154 line:-1 position:50%
and delightful charts
in SwiftUI.


8
00:00:21.154 --> 00:00:24.791 line:-1 position:50%
Data surrounds us and provides
an unprecedented resource


9
00:00:24.791 --> 00:00:28.996 line:-1 position:50%
for understanding the world
and making better decisions.


10
00:00:28,996 --> 00:00:32,032 line:-1
Yet, data alone
is of little use.


11
00:00:32,032 --> 00:00:35,435 line:-1
To make data useful,
we must make sense of it.


12
00:00:35.435 --> 00:00:38.805 line:-1 position:50%
A well-designed and accessible
data visualization


13
00:00:38.805 --> 00:00:41.441 line:-1 position:50%
can clearly communicate
complex data


14
00:00:41,441 --> 00:00:45,312 line:-1
and turn data into understanding
and knowledge.


15
00:00:45.312 --> 00:00:49.016 line:-1 position:50%
At Apple, we spent years
studying the best practices


16
00:00:49.016 --> 00:00:51.351 line:-1 position:50%
for visualizations.


17
00:00:51.351 --> 00:00:53.787 line:-1 position:50%
We learned that charts work best


18
00:00:53.787 --> 00:00:57.691 line:-1 position:50%
when they show additional
useful context around data


19
00:00:57,691 --> 00:01:00,694 line:-1
like the trends and fluctuations
of stock prices


20
00:01:00.694 --> 00:01:03.397 line:-1 position:50%
over some time range,


21
00:01:03,397 --> 00:01:07,567 line:-1
your heart rate
during the last workout,


22
00:01:07.567 --> 00:01:12.039 line:-1 position:50%
and when the day
will cool off in the evening.


23
00:01:12,039 --> 00:01:14,241 line:-1
And these are just some
of the many examples


24
00:01:14,241 --> 00:01:18,045 line:-1
across all our platforms
where we use charts.


25
00:01:18.045 --> 00:01:21.982 line:-1 position:50%
Today, I'm excited to introduce
you to a new framework


26
00:01:21,982 --> 00:01:27,454 line:-1
so you can make informative and
delightful charts in your apps.


27
00:01:27.454 --> 00:01:31.758 line:-1 position:50%
Say hello to Swift Charts.


28
00:01:31.758 --> 00:01:34.728 line:-1 position:50%
Swift Charts is
a flexible framework


29
00:01:34.728 --> 00:01:37.764 line:-1 position:50%
for making
Apple-designed charts.


30
00:01:37,764 --> 00:01:41,001 line:-1
It uses the same
declarative syntax as SwiftUI,


31
00:01:41,001 --> 00:01:45,806 line:-1
so you already know
the language of Swift Charts.


32
00:01:45.806 --> 00:01:49.943 line:-1 position:50%
So today, let's make
some informative, accessible,


33
00:01:49.943 --> 00:01:53.847 line:-1 position:50%
and delightful visualizations
with Swift Charts.


34
00:01:53,847 --> 00:01:55,382 line:-1
In the team,
we've been helping


35
00:01:55,382 --> 00:02:00,320 line:-1
a pop-up pancake food truck
track its sales with an app.


36
00:02:00,320 --> 00:02:02,456 line:-1
The truck serves
an international variety


37
00:02:02.456 --> 00:02:09.363 line:-1 position:50%
of sweet and savory pancakes
like cachapa, injera, crêpe,


38
00:02:09,363 --> 00:02:16,069 line:0
jian bing, dosa,
or American pancakes.


39
00:02:16.069 --> 00:02:19.539 line:-1 position:50%
The food truck served
more than 4500 pancakes


40
00:02:19,539 --> 00:02:23,944 line:-1
across these styles
in the last 30 days.


41
00:02:23.944 --> 00:02:27.914 line:-1 position:50%
Cachapa were the most popular
and the app already shows


42
00:02:27.914 --> 00:02:32.419 line:-1 position:50%
the most important
information in the title.


43
00:02:32.419 --> 00:02:35.088 line:-1 position:50%
Let's add a chart to show
a detailed breakdown


44
00:02:35,088 --> 00:02:38,492 line:-1
for the six pancakes.


45
00:02:38,492 --> 00:02:41,161 line:-1
To make this visualization
in Swift Charts,


46
00:02:41,161 --> 00:02:45,866 line:-1
we can use the same
declarative syntax as SwiftUI.


47
00:02:45.866 --> 00:02:50.170 line:-1 position:50%
In Swift Charts,
you build charts by composition.


48
00:02:50.170 --> 00:02:55.108 line:-1 position:50%
The main components
of a bar chart are the bars,


49
00:02:55.108 --> 00:03:00.547 line:-1 position:50%
which are visual elements
for each item in your data.


50
00:03:00.547 --> 00:03:05.585 line:-1 position:50%
Swift Charts calls
these visual elements "marks."


51
00:03:05.585 --> 00:03:08.688 line:-1 position:50%
Let's jump into Xcode
to make this chart.


52
00:03:08,688 --> 00:03:11,558 line:-1
We start with adding a chart.


53
00:03:11.558 --> 00:03:16.696 line:-1 position:50%
To make a bar, I add a BarMark
inside the Chart.


54
00:03:16.696 --> 00:03:19.132 line:-1 position:50%
To show a bar
for the number of cachapas,


55
00:03:19,132 --> 00:03:21,968 line:-1
we have to set
the name and the sales.


56
00:03:23.837 --> 00:03:27.407 line:-1 position:50%
We set the x-position of the bar
to be derived from the value


57
00:03:27.407 --> 00:03:33.313 line:-1 position:50%
of the name of pancake --
in this case "Cachapa."


58
00:03:33,313 --> 00:03:36,450 line:-1
The first argument
to the .value factory method


59
00:03:36,450 --> 00:03:38,919 line:-1
is the description of the value,


60
00:03:38,919 --> 00:03:42,355 line:-1
and the second
is the value itself.


61
00:03:42,355 --> 00:03:45,692 line:-1
And now we get a single bar
in the preview.


62
00:03:45.692 --> 00:03:49.329 line:-1 position:50%
The height of each bar
described by the y attribute


63
00:03:49,329 --> 00:03:56,236 line:-1
should be set by the number of
cachapas sold, which were 916.


64
00:03:56.236 --> 00:03:58.305 line:-1 position:50%
To indicate that we're not
setting the position


65
00:03:58,305 --> 00:04:03,610 line:-1
or height of the bar directly,
we use .value.


66
00:04:03.610 --> 00:04:07.547 line:-1 position:50%
Swift Charts automatically
creates not only the bar


67
00:04:07,547 --> 00:04:11,718 line:-1
but also a label
for the bars on the x-axis


68
00:04:11,718 --> 00:04:17,557 line:-1
and a y-axis that shows
what the length of a bar means.


69
00:04:17.557 --> 00:04:19.693 line:-1 position:50%
Let's add a second bar
for injera,


70
00:04:19.693 --> 00:04:22.529 line:-1 position:50%
of which the truck sold 850.


71
00:04:24,564 --> 00:04:27,767 line:-1
Now, it's cool to build
individual marks


72
00:04:27.767 --> 00:04:30.070 line:-1 position:50%
and see them appear in the app.


73
00:04:30,070 --> 00:04:32,172 line:-1
However, we usually want
to create a chart


74
00:04:32.172 --> 00:04:35.308 line:-1 position:50%
driven by a collection
such as an array of structs.


75
00:04:35.308 --> 00:04:38.311 line:-1 position:50%
I'll start by adding a struct
for my pancake sales.


76
00:04:46,286 --> 00:04:49,756 line:-1
It has a name --
which is a string --


77
00:04:49,756 --> 00:04:52,292 line:-1
and how many pancakes
the truck sold --


78
00:04:52,292 --> 00:04:55,829 line:-1
which is an int.


79
00:04:55.829 --> 00:04:58.198 line:-1 position:50%
Because we want
to use it to repeat,


80
00:04:58.198 --> 00:05:00.233 line:-1 position:50%
we make it identifiable...


81
00:05:04,538 --> 00:05:12,412 line:-1
...and define an ID-computed
property that returns the name.


82
00:05:12.412 --> 00:05:17.551 line:-1 position:50%
Now we can create our data set
as an array of pancakes.


83
00:05:17,551 --> 00:05:20,320 line:-1
We could load this
from an external data source


84
00:05:20.320 --> 00:05:22.556 line:-1 position:50%
but here we'll define it
in the code.


85
00:05:22.556 --> 00:05:27.227 line:-1 position:50%
Besides cachapa and injera,
we also add crêpe.


86
00:05:27,227 --> 00:05:30,931 line:-1
We can make the bar chart
data driven with ForEach.


87
00:05:30.931 --> 00:05:33.500 line:-1 position:50%
First, remove the second bar.


88
00:05:37.370 --> 00:05:39.139 line:-1 position:50%
And all we need to do now


89
00:05:39.139 --> 00:05:42.042 line:-1 position:50%
is to repeat the BarMark
with a ForEach.


90
00:05:45.979 --> 00:05:49.115 line:-1 position:50%
I pick "element" as the name
of the variable in the loop.


91
00:05:54,621 --> 00:05:57,724 line:-1
Then we can use
element.name for x...


92
00:06:02.028 --> 00:06:05.031 line:-1 position:50%
...and element.sales for y.


93
00:06:07.400 --> 00:06:10.637 line:-1 position:50%
If ForEach is the only
content in the chart,


94
00:06:10,637 --> 00:06:12,172 line:-1
we can also put
the data directly


95
00:06:12,172 --> 00:06:14,474 line:-1
into the chart initializer.


96
00:06:19,746 --> 00:06:21,848 line:-1
We can now add the
remaining three entries


97
00:06:21.848 --> 00:06:25.218 line:-1 position:50%
for the jian bing, dosa,
and american pancakes.


98
00:06:28,622 --> 00:06:30,724 line:-1
As we add more entries
to the array,


99
00:06:30.724 --> 00:06:33.860 line:-1 position:50%
we add new bar marks
to the chart.


100
00:06:33,860 --> 00:06:35,996 line:-1
Lastly, we see that the labels


101
00:06:35.996 --> 00:06:38.198 line:-1 position:50%
are becoming close
to each other.


102
00:06:38,198 --> 00:06:42,168 line:-1
By swapping x and y,
we transpose the chart


103
00:06:42,168 --> 00:06:45,872 line:-1
and give the labels
for each bar more space.


104
00:06:45,872 --> 00:06:48,708 line:-1
The Swift Charts framework
automatically chooses


105
00:06:48,708 --> 00:06:52,512 line:-1
an appropriate axis style
to make your chart beautiful.


106
00:06:52,512 --> 00:06:55,415 line:-1
And with that, we made
our first data visualization


107
00:06:55.415 --> 00:06:56.883 line:-1 position:50%
in Swift Charts.


108
00:06:56,883 --> 00:06:59,319 position:50%
And using the new
variant feature in Xcode,


109
00:06:59,319 --> 00:07:02,622 line:0
we can see that this chart
looks beautiful in Dark Mode,


110
00:07:02,622 --> 00:07:04,891 line:0
adapts to different
font sizes,


111
00:07:08,695 --> 00:07:12,265 position:50%
device sizes and orientations,


112
00:07:12,265 --> 00:07:14,434 line:0
and supports accessibility.


113
00:07:18.772 --> 00:07:21.875 line:-1 position:50%
To access the data
in a visual representation,


114
00:07:21.875 --> 00:07:24.477 line:-1 position:50%
you need to be able to see.


115
00:07:24.477 --> 00:07:28.448 line:-1 position:50%
Swift Charts exposes the data
in a visualization to VoiceOver


116
00:07:28,448 --> 00:07:33,186 line:-1
so that everyone can explore the
details of the popular pancakes.


117
00:07:33,186 --> 00:07:35,221 line:-1
When I navigate the chart
in VoiceOver,


118
00:07:35,221 --> 00:07:39,526 line:-1
it speaks the name and
number of pancakes sold.


119
00:07:39.526 --> 00:07:43.930 line:-1 position:50%
VoiceOver: Cachapa, 916.
Injera, 850. Crêpes, 802.


120
00:07:43.930 --> 00:07:51.438 line:-1 position:50%
Jian Ping, 753. Dosa, 654.
American, 618.


121
00:07:51.438 --> 00:07:53.006 line:-1 position:50%
Dominik: And of course,
the chart supports


122
00:07:53.006 --> 00:07:56.476 line:-1 position:50%
the Audio Graphs feature
Apple presented in 2021,


123
00:07:56.476 --> 00:07:58.745 line:-1 position:50%
including the sonifications.


124
00:07:58.745 --> 00:08:01.448 line:-1 position:50%
VoiceOver: Describe chart.
Chart Details.


125
00:08:01,448 --> 00:08:03,049 line:-1
Play Audio Graph.


126
00:08:03.049 --> 00:08:08.722 line:-1 position:50%
[DESCENDING BEEPS]


127
00:08:08,722 --> 00:08:11,224 line:-1
Complete.


128
00:08:11,224 --> 00:08:13,026 line:-1
Dominik: We just used
Swift Charts to add


129
00:08:13,026 --> 00:08:17,731 line:-1
an informative and accessible
chart to the food truck app.


130
00:08:17,731 --> 00:08:19,399 line:-1
The chart shows
how many pancakes


131
00:08:19.399 --> 00:08:23.570 line:-1 position:50%
the truck sold of each style.


132
00:08:23.570 --> 00:08:26.539 line:-1 position:50%
Besides the summaries
for each style of pancake,


133
00:08:26.539 --> 00:08:31.277 line:-1 position:50%
the food truck also
has per-day sales data.


134
00:08:31.277 --> 00:08:36.049 line:-1 position:50%
The truck can park in Cupertino
and San Francisco.


135
00:08:36.049 --> 00:08:38.451 line:-1 position:50%
We want to help the food truck
know where to park


136
00:08:38,451 --> 00:08:40,920 line:-1
on different days of the week.


137
00:08:40.920 --> 00:08:43.890 line:-1 position:50%
To answer this question,
let's visualize the data


138
00:08:43.890 --> 00:08:48.361 line:-1 position:50%
as a time series
for our two cities.


139
00:08:48,361 --> 00:08:51,531 line:-1
To see how easy it is
to explore different designs,


140
00:08:51.531 --> 00:08:55.335 line:-1 position:50%
we will make three iterations
of the chart.


141
00:08:55.335 --> 00:09:00.707 line:-1 position:50%
We will start by making
a bar graph for Cupertino.


142
00:09:00,707 --> 00:09:06,346 line:-1
Then, we will add the data for
San Francisco and add a picker.


143
00:09:06.346 --> 00:09:08.448 line:-1 position:50%
And finally,
we will combine the data


144
00:09:08,448 --> 00:09:11,851 line:-1
into one multiseries line chart.


145
00:09:11.851 --> 00:09:14.554 line:-1 position:50%
Let's start with the bar chart
showing the average number


146
00:09:14.554 --> 00:09:18.858 line:-1 position:50%
of pancakes sold
per day of the week.


147
00:09:18.858 --> 00:09:22.796 line:-1 position:50%
The sales data has the weekday
stored as a date


148
00:09:22.796 --> 00:09:27.267 line:-1 position:50%
and how many pancakes
the truck sold as an integer.


149
00:09:27.267 --> 00:09:33.106 line:-1 position:50%
The data for Cupertino is
in a variable, cupertinoData.


150
00:09:33,106 --> 00:09:38,411 position:50%
As before, we start making
a chart with a BarMark.


151
00:09:38,411 --> 00:09:40,313 line:0
We set the x-position of the bar


152
00:09:40,313 --> 00:09:42,816 position:50%
to be derived from
the day of the date...


153
00:09:45,485 --> 00:09:48,288 line:0
...and the height to be derived
from the sales.


154
00:09:52,292 --> 00:09:54,961 line:0
And this gives us
a first iteration of a chart


155
00:09:54,961 --> 00:09:59,866 position:50%
that shows the sales data per
day of the week for Cupertino.


156
00:09:59.866 --> 00:10:04.938 line:-1 position:50%
For the second iteration, let's
add the data for San Francisco.


157
00:10:04.938 --> 00:10:07.807 line:-1 position:50%
Using this chart, we want
to help the pancake truck


158
00:10:07,807 --> 00:10:11,010 line:-1
decide where to park
during the week.


159
00:10:11.010 --> 00:10:15.748 line:-1 position:50%
The sales data for San Francisco
is in the sfData variable.


160
00:10:15.748 --> 00:10:18.218 line:-1 position:50%
We want to toggle
between the two cities


161
00:10:18.218 --> 00:10:20.987 line:-1 position:50%
and see the bar chart
for each city.


162
00:10:20.987 --> 00:10:26.092 line:-1 position:50%
We start with adding
a state variable, city.


163
00:10:26,092 --> 00:10:30,730 line:-1
And then we add a SwiftUI
picker for the city to the View.


164
00:10:35.568 --> 00:10:38.705 line:-1 position:50%
To toggle between the sales
summaries for the two cities


165
00:10:38.705 --> 00:10:40.740 line:-1 position:50%
via the city variable,


166
00:10:40,740 --> 00:10:43,576 line:-1
we add a switch statement
for the data variable.


167
00:10:48,648 --> 00:10:52,752 line:-1
And all we have to do now is to
replace the data for Cupertino


168
00:10:52,752 --> 00:10:54,888 line:-1
with the one that toggles
between the two --


169
00:10:54,888 --> 00:10:59,359 line:-1
Cupertino and San Francisco.


170
00:10:59,359 --> 00:11:01,628 line:-1
If I switch the toggle,
the charts toggles


171
00:11:01.628 --> 00:11:03.696 line:-1 position:50%
between the two cities.


172
00:11:03.696 --> 00:11:07.166 line:-1 position:50%
Swift Charts works
with SwiftUI animations,


173
00:11:07.166 --> 00:11:10.169 line:-1 position:50%
so if we specify that the
transition should be animated


174
00:11:10,169 --> 00:11:11,938 line:-1
with easeInOut,


175
00:11:11.938 --> 00:11:16.376 line:-1 position:50%
the bars animate as I toggle
between the two cities


176
00:11:16,376 --> 00:11:19,145 line:-1
and also only shows
one location at a time.


177
00:11:21.481 --> 00:11:25.652 line:-1 position:50%
This gives our app
the right look and feel.


178
00:11:25.652 --> 00:11:28.955 line:-1 position:50%
As our final iteration,
we will show both series


179
00:11:28,955 --> 00:11:31,257 line:-1
in a line chart.


180
00:11:31.257 --> 00:11:34.160 line:-1 position:50%
To make this line chart,
we start with the bar chart


181
00:11:34,160 --> 00:11:36,529 line:-1
from Cupertino from before.


182
00:11:36,529 --> 00:11:39,065 line:-1
The data for Cupertino
and San Francisco


183
00:11:39.065 --> 00:11:41.768 line:-1 position:50%
is in an array of series.


184
00:11:41.768 --> 00:11:46.739 line:-1 position:50%
Series structs have
the city and sales data.


185
00:11:46.739 --> 00:11:48.274 line:-1 position:50%
Before we show both series,


186
00:11:48.274 --> 00:11:53.079 line:-1 position:50%
let's focus on
the Cupertino data.


187
00:11:53.079 --> 00:11:57.617 line:-1 position:50%
In the chart, we can loop
over the series data.


188
00:11:57,617 --> 00:11:59,419 line:-1
Remember,
the chart initializer


189
00:11:59.419 --> 00:12:01.354 line:-1 position:50%
acts just like a ForEach.


190
00:12:03,590 --> 00:12:07,293 line:-1
Then we can replace
the specific data for Cupertino


191
00:12:07.293 --> 00:12:09.896 line:-1 position:50%
with the sales data
from the series.


192
00:12:12,031 --> 00:12:15,034 line:-1
To distinguish the data
for the two cities,


193
00:12:15.034 --> 00:12:19.572 line:-1 position:50%
I want the color of the bars
to be derived from the city.


194
00:12:19.572 --> 00:12:21.574 line:-1 position:50%
For this, we set
the foregroundStyle


195
00:12:21,574 --> 00:12:24,577 line:-1
to be derived from
the city in the series.


196
00:12:27.013 --> 00:12:29.482 line:-1 position:50%
To show what city
a color represents,


197
00:12:29.482 --> 00:12:33.086 line:-1 position:50%
Swift Charts creates
a legend below the chart.


198
00:12:33,086 --> 00:12:36,389 line:-1
Now, I add the data
for the second location.


199
00:12:37.790 --> 00:12:39.826 line:-1 position:50%
As you can see in the preview,
Swift Charts


200
00:12:39,826 --> 00:12:42,996 line:-1
automatically chooses
a color for San Francisco,


201
00:12:42,996 --> 00:12:47,200 line:-1
and it shows the bars
for both cities in the chart.


202
00:12:47.200 --> 00:12:50.069 line:-1 position:50%
Charts show data
for a particular context


203
00:12:50,069 --> 00:12:51,804 line:-1
and a visualization
may need to change


204
00:12:51,804 --> 00:12:55,942 line:-1
as our data
or questions change.


205
00:12:55.942 --> 00:12:59.812 line:-1 position:50%
Swift Charts makes it easy
to quickly change your chart


206
00:12:59,812 --> 00:13:02,115 line:-1
to explore different designs.


207
00:13:02,115 --> 00:13:03,483 line:-1
The stacked bar chart is great


208
00:13:03.483 --> 00:13:06.753 line:-1 position:50%
for showing the total
average sales per day;


209
00:13:06,753 --> 00:13:08,388 line:-1
but what if I wanted
to do a comparison


210
00:13:08.388 --> 00:13:10.423 line:-1 position:50%
between the two cities?


211
00:13:10.423 --> 00:13:14.060 line:-1 position:50%
Maybe a point or line chart
would be better.


212
00:13:14,060 --> 00:13:18,464 line:-1
We change the mark type
from a BarMark to a PointMark


213
00:13:18.464 --> 00:13:21.300 line:-1 position:50%
to display the pancakes
sold as points,


214
00:13:21,300 --> 00:13:25,972 line:-1
or to a LineMark to show
the data as a line chart.


215
00:13:25,972 --> 00:13:28,341 line:-1
A line chart is a good fit
for the sales data


216
00:13:28,341 --> 00:13:33,579 line:-1
since it lets us compare the two
cities in each day of the week.


217
00:13:33.579 --> 00:13:35.648 line:-1 position:50%
Charts can combine
multiple marks.


218
00:13:35.648 --> 00:13:38.017 line:-1 position:50%
For example,
I can add a PointMark.


219
00:13:44,090 --> 00:13:46,959 line:-1
To make the series
differentiable without color,


220
00:13:46,959 --> 00:13:50,430 line:-1
we set the symbol
to be derived from the city.


221
00:13:56.269 --> 00:14:01.207 line:-1 position:50%
Now each point indicates the
city by its color and symbol.


222
00:14:01,207 --> 00:14:03,643 line:-1
Because it is common
to show points on a line,


223
00:14:03.643 --> 00:14:05.712 line:-1 position:50%
Swift Charts has
a shorthand for this


224
00:14:05,712 --> 00:14:09,682 line:-1
where we apply the symbol
modifier to the LineMark.


225
00:14:09,682 --> 00:14:13,686 line:-1
The style of the points
adapts to the line.


226
00:14:13,686 --> 00:14:15,221 line:-1
This chart is great.


227
00:14:15.221 --> 00:14:19.058 line:-1 position:50%
We can easily compare the sales
trends throughout the week.


228
00:14:19,058 --> 00:14:21,427 line:-1
We observe that the sales
are especially high


229
00:14:21.427 --> 00:14:24.630 line:-1 position:50%
in San Francisco on Sundays.


230
00:14:24.630 --> 00:14:26.332 line:-1 position:50%
Swift Charts made it
very easy for us


231
00:14:26.332 --> 00:14:31.571 line:-1 position:50%
to iterate through many designs
in just a few minutes.


232
00:14:31,571 --> 00:14:35,308 line:-1
So to wrap up, let's look at
how Swift Charts makes it easy


233
00:14:35.308 --> 00:14:39.178 line:-1 position:50%
to iterate quickly and at the
same time be flexible enough


234
00:14:39,178 --> 00:14:43,249 line:-1
to seamlessly integrate charts
into your app's unique style.


235
00:14:43,249 --> 00:14:45,184 line:-1
In Swift Charts,
you build charts


236
00:14:45,184 --> 00:14:50,256 line:-1
by composition of marks
with mark properties.


237
00:14:50,256 --> 00:14:52,859 line:-1
In the Pancake app,
we composed charts


238
00:14:52,859 --> 00:14:57,363 line:-1
with three different marks
and four mark properties.


239
00:14:57.363 --> 00:15:00.399 line:-1 position:50%
For example,
we made a simple bar chart


240
00:15:00.399 --> 00:15:05.371 line:-1 position:50%
as a bar mark
with x and y properties.


241
00:15:05.371 --> 00:15:08.174 line:-1 position:50%
We also changed the mark
to quickly explore designs,


242
00:15:08.174 --> 00:15:11.144 line:-1 position:50%
like charts with points,


243
00:15:11,144 --> 00:15:13,813 line:-1
or line charts where
we used the line mark


244
00:15:13,813 --> 00:15:16,048 line:-1
with x and y properties.


245
00:15:18,885 --> 00:15:21,487 position:50%
We also saw
that we can add properties,


246
00:15:21,487 --> 00:15:27,193 position:50%
like Foreground Style, to show
multiple series in a line chart.


247
00:15:27,193 --> 00:15:30,263 position:50%
And a chart doesn't have
to have just one mark.


248
00:15:30,263 --> 00:15:35,134 line:0
We combined points and lines,


249
00:15:35,134 --> 00:15:40,773 position:50%
and showed the same value
with two mark properties.


250
00:15:40.773 --> 00:15:44.177 line:-1 position:50%
Swift Charts supports even more
marks and mark properties


251
00:15:44.177 --> 00:15:46.345 line:-1 position:50%
than we used today.


252
00:15:46.345 --> 00:15:51.384 line:-1 position:50%
It's also extensible
and you can add custom marks.


253
00:15:51.384 --> 00:15:54.620 line:-1 position:50%
Marks and mark properties
is what allows Swift Charts


254
00:15:54,620 --> 00:15:57,456 line:-1
to express a wide range
of chart designs


255
00:15:57.456 --> 00:16:02.061 line:-1 position:50%
with a small number
of declarative building blocks.


256
00:16:02,061 --> 00:16:03,996 line:-1
There are many ways
in which you can combine


257
00:16:03.996 --> 00:16:06.999 line:-1 position:50%
these building block to create
great data visualizations


258
00:16:06,999 --> 00:16:09,202 line:-1
for your apps.


259
00:16:09.202 --> 00:16:12.171 line:-1 position:50%
Together with what you can
already do in SwiftUI,


260
00:16:12.171 --> 00:16:16.475 line:-1 position:50%
the possibilities
are truly endless.


261
00:16:16,475 --> 00:16:19,846 line:-1
And as I've showed you today,
you get support for Dark Mode,


262
00:16:19,846 --> 00:16:23,850 line:-1
different device screen sizes,
Dynamic Type, VoiceOver,


263
00:16:23.850 --> 00:16:26.953 line:-1 position:50%
and Audio Graphs for free.


264
00:16:26.953 --> 00:16:31.524 line:-1 position:50%
In addition, Swift Charts
supports High-Contrast mode.


265
00:16:31,524 --> 00:16:34,894 line:-1
And finally, Swift Charts
works across locales


266
00:16:34,894 --> 00:16:37,230 line:-1
and is multiplatform.


267
00:16:37,230 --> 00:16:38,831 line:-1
The chart with the same code


268
00:16:38,831 --> 00:16:41,500 line:-1
works across all
Apple platforms.


269
00:16:41,500 --> 00:16:43,970 line:-1
And the same customizations
work everywhere


270
00:16:43.970 --> 00:16:47.773 line:-1 position:50%
so you can tailor the chart
to each platform.


271
00:16:47.773 --> 00:16:50.309 line:-1 position:50%
Today, I showed you
how Swift Charts


272
00:16:50.309 --> 00:16:53.346 line:-1 position:50%
uses SwiftUI's powerful
compositional syntax


273
00:16:53,346 --> 00:16:57,049 line:-1
so you can make more charts
with less code.


274
00:16:57,049 --> 00:16:58,284 line:-1
Swift Charts also provides


275
00:16:58,284 --> 00:17:00,887 line:-1
a rich set of
customization options,


276
00:17:00.887 --> 00:17:05.057 line:-1 position:50%
so you can style the chart
to match your application.


277
00:17:05,057 --> 00:17:07,360 line:0
And now that you know
how to chart new territory


278
00:17:07,360 --> 00:17:10,963 position:50%
and make a chart, you can learn
how to customize it in the docs


279
00:17:10,963 --> 00:17:13,833 position:50%
and in our follow-up talk
where you'll raise the bar.


280
00:17:13,833 --> 00:17:18,537 align:right position:90% line:0
♪

