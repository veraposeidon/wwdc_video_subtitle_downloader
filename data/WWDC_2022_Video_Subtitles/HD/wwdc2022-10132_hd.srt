2
00:00:00.000 --> 00:00:03.070 line:-1 position:50%
♪ Mellow instrumental
hip-hop music ♪


3
00:00:03,070 --> 00:00:09,843 align:right size:2% line:0
♪


4
00:00:09.843 --> 00:00:11.411 line:-1 position:50%
Hi, my name is Mindy


5
00:00:11,411 --> 00:00:14,248 line:-1
and I'm an engineer
on the Photos team.


6
00:00:14,248 --> 00:00:16,850 line:-1
Today, I'll be going over
how to access


7
00:00:16,850 --> 00:00:20,754 line:-1
Photos change history
in your apps.


8
00:00:20,754 --> 00:00:23,457 position:50%
PhotoKit provides
a rich set of APIs


9
00:00:23,457 --> 00:00:27,828 position:50%
for accessing and updating
photos, videos, and albums


10
00:00:27,828 --> 00:00:29,930 position:50%
stored in the photo library.


11
00:00:29,930 --> 00:00:33,133 line:-1
PhotoKit is designed for apps
that require a deep level


12
00:00:33.133 --> 00:00:36.570 line:-1 position:50%
of Photos access
and integration


13
00:00:36,570 --> 00:00:39,907 line:-1
for managing or editing photos,
custom cameras,


14
00:00:39,907 --> 00:00:42,976 line:-1
or apps that give people a way
to browse their photo library


15
00:00:42,976 --> 00:00:45,445 line:-1
in a unique way.


16
00:00:45,445 --> 00:00:48,315 line:-1
These types of applications
may want to monitor


17
00:00:48.315 --> 00:00:50.717 line:-1 position:50%
how the photo library
changes over time


18
00:00:50,717 --> 00:00:54,354 line:-1
to closely mirror
the Photos experience.


19
00:00:54.354 --> 00:00:57.524 line:-1 position:50%
Let's say I've created
a social hiking app


20
00:00:57,524 --> 00:01:00,260 line:-1
that allows people
to share and edit photos


21
00:01:00,260 --> 00:01:02,796 line:-1
of hiking trips with friends.


22
00:01:02.796 --> 00:01:04.431 line:-1 position:50%
When someone launches the app,


23
00:01:04,431 --> 00:01:07,868 line:-1
the app gathers photos
from the start and end timestamp


24
00:01:07.868 --> 00:01:11.004 line:-1 position:50%
of their latest hiking workout
to generate a collage


25
00:01:11.004 --> 00:01:13.340 line:-1 position:50%
of their experience
on the mountain.


26
00:01:13.340 --> 00:01:16.209 line:-1 position:50%
The collages stay in sync
with the selected photos


27
00:01:16,209 --> 00:01:18,111 line:-1
from the photo library.


28
00:01:18.111 --> 00:01:19.813 line:-1 position:50%
If someone receives
hiking photos


29
00:01:19,813 --> 00:01:21,581 line:-1
from a friend,
for instance,


30
00:01:21.581 --> 00:01:25.886 line:-1 position:50%
the app will generate new
collages using these updates.


31
00:01:25,886 --> 00:01:28,255 line:-1
Up until now,
in order for the app


32
00:01:28.255 --> 00:01:30.857 line:-1 position:50%
to discover
newly inserted assets


33
00:01:30,857 --> 00:01:33,360 line:-1
and changes to previous
hiking collages,


34
00:01:33.360 --> 00:01:37.097 line:-1 position:50%
the app would need to perform
a series of fetches.


35
00:01:37.097 --> 00:01:40.100 line:-1 position:50%
To determine which assets
were inserted,


36
00:01:40.100 --> 00:01:41.635 line:-1 position:50%
the app can fetch assets


37
00:01:41.635 --> 00:01:46.573 line:-1 position:50%
with a date created later than
the last app launch date.


38
00:01:46.573 --> 00:01:50.510 line:-1 position:50%
Determining asset updates
and deletions is trickier.


39
00:01:50.510 --> 00:01:54.281 line:-1 position:50%
The app would need to refetch
every asset in every collage


40
00:01:54.281 --> 00:01:56.350 line:-1 position:50%
and check
the modification date


41
00:01:56,350 --> 00:01:58,385 line:-1
to determine asset updates,


42
00:01:58.385 --> 00:02:00.320 line:-1 position:50%
but this could bring up
false positives,


43
00:02:00.320 --> 00:02:02.255 line:-1 position:50%
as the asset modification date


44
00:02:02,255 --> 00:02:06,426 line:-1
can be set by internal
Photos processing activities.


45
00:02:06.426 --> 00:02:09.696 line:-1 position:50%
Deletions in the photo library
are more difficult to track,


46
00:02:09,696 --> 00:02:13,100 line:-1
as all tracked assets
need to be fetched and diffed


47
00:02:13,100 --> 00:02:16,169 line:-1
for assets that were not
returned with the fetch.


48
00:02:16.169 --> 00:02:19.306 line:-1 position:50%
In total, this means that
there are three separate checks


49
00:02:19.306 --> 00:02:22.576 line:-1 position:50%
that need to be done
each time the app is launched,


50
00:02:22,576 --> 00:02:24,578 line:-1
which can be especially costly


51
00:02:24.578 --> 00:02:28.515 line:-1 position:50%
if the app is displaying
large quantities of assets.


52
00:02:28,515 --> 00:02:31,118 line:-1
Instead of performing different
fetches and checks


53
00:02:31,118 --> 00:02:32,986 line:-1
for uncertain results,


54
00:02:32.986 --> 00:02:35.856 line:-1 position:50%
what if there was a way
to know exactly what changed


55
00:02:35.856 --> 00:02:38.525 line:-1 position:50%
in one unified API call?


56
00:02:38,525 --> 00:02:42,529 line:-1
Well, I'm excited to say
that we've done just that!


57
00:02:42.529 --> 00:02:46.099 line:-1 position:50%
The new change history API
allows for an easier way


58
00:02:46,099 --> 00:02:50,437 line:-1
to track offline updates
to the photo library.


59
00:02:50.437 --> 00:02:53.573 line:-1 position:50%
Change history consists
of a timeline of changes


60
00:02:53.573 --> 00:02:55.976 line:-1 position:50%
such as insertions, updates,


61
00:02:55.976 --> 00:02:58.678 line:-1 position:50%
and deletions
to the photo library.


62
00:02:58.678 --> 00:03:00.380 line:-1 position:50%
In this example timeline,


63
00:03:00.380 --> 00:03:04.184 line:-1 position:50%
there are a variety of asset,
album, and folder changes


64
00:03:04.184 --> 00:03:07.921 line:-1 position:50%
in the change history
from the past three days.


65
00:03:07.921 --> 00:03:10.657 line:-1 position:50%
Using this timeline,
how can you determine


66
00:03:10.657 --> 00:03:14.027 line:-1 position:50%
which changes have happened
in the last two days,


67
00:03:14,027 --> 00:03:17,497 line:-1
or the last time
you launched your app?


68
00:03:17.497 --> 00:03:20.534 line:-1 position:50%
You can now use
a persistent change token


69
00:03:20.534 --> 00:03:23.103 line:-1 position:50%
that represents
the state of the photo library


70
00:03:23,103 --> 00:03:25,672 line:-1
at a given point in time.


71
00:03:25.672 --> 00:03:29.476 line:-1 position:50%
This token can be persisted
across app launches,


72
00:03:29.476 --> 00:03:32.712 line:-1 position:50%
and it can be used to fetch
changes to the photo library


73
00:03:32.712 --> 00:03:34.815 line:-1 position:50%
that have occurred
since that token,


74
00:03:34.815 --> 00:03:37.551 line:-1 position:50%
including third-party app
changes.


75
00:03:37.551 --> 00:03:40.487 line:-1 position:50%
Note that if your app
is in limited library mode,


76
00:03:40,487 --> 00:03:43,457 line:-1
only changes for user-selected
PhotoKit objects


77
00:03:43.457 --> 00:03:45.459 line:-1 position:50%
will be returned.


78
00:03:45.459 --> 00:03:48.695 line:-1 position:50%
This change token
is local to the device


79
00:03:48.695 --> 00:03:51.164 line:-1 position:50%
and is cheap to access
from a persistent change


80
00:03:51.164 --> 00:03:55.435 line:-1 position:50%
or photo library instance
at any time.


81
00:03:55,435 --> 00:03:58,238 line:-1
This new API is available
on every platform


82
00:03:58.238 --> 00:04:06.313 line:-1 position:50%
that supports PhotoKit:
macOS, iOS, iPadOS, and tvOS.


83
00:04:06.313 --> 00:04:10.250 line:-1 position:50%
As your app is running and
working with the photo library,


84
00:04:10.250 --> 00:04:14.855 line:-1 position:50%
you can store a persistent
change token within the app.


85
00:04:14,855 --> 00:04:19,192 line:-1
Later, you can use the token to
fetch the photo library changes


86
00:04:19.192 --> 00:04:21.328 line:-1 position:50%
that have occurred since.


87
00:04:21.328 --> 00:04:23.263 line:-1 position:50%
For each persistent change,


88
00:04:23.263 --> 00:04:25.298 line:-1 position:50%
you can grab
the change details


89
00:04:25.298 --> 00:04:28.368 line:-1 position:50%
for three types
of Photos objects:


90
00:04:28,368 --> 00:04:33,273 line:-1
asset, asset collection,
and collection list.


91
00:04:33.273 --> 00:04:36.543 line:-1 position:50%
So what does this look like
in code?


92
00:04:36,543 --> 00:04:39,446 line:-1
You first use the last stored
change token


93
00:04:39.446 --> 00:04:42.249 line:-1 position:50%
to fetch the persistent changes.


94
00:04:42.249 --> 00:04:45.585 line:-1 position:50%
Next, you enumerate
through the persistent changes


95
00:04:45,585 --> 00:04:50,157 line:-1
and grab the change details --
in this case, of type "asset" --


96
00:04:50.157 --> 00:04:53.160 line:-1 position:50%
for each persistent change
object.


97
00:04:53.160 --> 00:04:55.529 line:-1 position:50%
These change details
provide information


98
00:04:55,529 --> 00:04:59,633 line:-1
on which local identifiers
were updated, deleted,


99
00:04:59.633 --> 00:05:01.701 line:-1 position:50%
and inserted
into the photo library


100
00:05:01.701 --> 00:05:04.404 line:-1 position:50%
since the change token.


101
00:05:04,404 --> 00:05:06,473 line:-1
After processing these changes,


102
00:05:06,473 --> 00:05:10,777 line:-1
you can store the last
change token for future use.


103
00:05:10.777 --> 00:05:14.681 line:-1 position:50%
Let's compare and contrast
the new persistent history API


104
00:05:14,681 --> 00:05:18,418 line:-1
with the existing
change observer APIs.


105
00:05:18,418 --> 00:05:22,255 line:-1
PHChanges deal with active,
in-memory fetch results


106
00:05:22.255 --> 00:05:25.692 line:-1 position:50%
and are used to record live
changes to the photo library


107
00:05:25.692 --> 00:05:28.328 line:-1 position:50%
while your app is running.


108
00:05:28,328 --> 00:05:30,430 line:-1
Persistent history,
on the other hand,


109
00:05:30,430 --> 00:05:33,567 line:-1
records long-running changes
to the photo library,


110
00:05:33,567 --> 00:05:35,468 line:-1
and can be used
to report changes


111
00:05:35,468 --> 00:05:38,572 line:-1
from when your app
is not active.


112
00:05:38,572 --> 00:05:41,575 line:-1
You can use both
or either of these APIs


113
00:05:41.575 --> 00:05:45.212 line:-1 position:50%
depending on the requirements
of your app.


114
00:05:45.212 --> 00:05:47.380 line:-1 position:50%
Going back to the hiking app
example,


115
00:05:47.380 --> 00:05:50.383 line:-1 position:50%
I'd like to now use
the persistent history API


116
00:05:50.383 --> 00:05:53.119 line:-1 position:50%
to track asset changes
in order to create


117
00:05:53,119 --> 00:05:55,722 line:-1
and update hiking collages.


118
00:05:55,722 --> 00:05:59,459 line:-1
First, I'll use the last
stored change token


119
00:05:59.459 --> 00:06:02.062 line:-1 position:50%
and fetch
the persistent changes.


120
00:06:02,062 --> 00:06:05,565 line:-1
Next, I'll iterate through
the persistent changes,


121
00:06:05,565 --> 00:06:08,368 line:-1
grab the relevant
asset change details,


122
00:06:08.368 --> 00:06:11.137 line:-1 position:50%
and process the inserted,
updated,


123
00:06:11,137 --> 00:06:13,807 line:-1
and deleted identifiers.


124
00:06:13.807 --> 00:06:16.910 line:-1 position:50%
Now I need to identify
library changes


125
00:06:16.910 --> 00:06:19.713 line:-1 position:50%
that affect the app
from the change history,


126
00:06:19,713 --> 00:06:22,182 line:-1
as the app doesn't need
all of the information


127
00:06:22.182 --> 00:06:25.518 line:-1 position:50%
returned from fetching changes.


128
00:06:25.518 --> 00:06:28.188 line:-1 position:50%
It's important for the app
to know which assets


129
00:06:28,188 --> 00:06:32,826 line:-1
were added to the photo library
for new hiking workouts,


130
00:06:32,826 --> 00:06:34,995 line:-1
and updated and deleted assets


131
00:06:34.995 --> 00:06:38.598 line:-1 position:50%
referenced in previous
hiking collages.


132
00:06:38.598 --> 00:06:40.734 line:-1 position:50%
I've already identified
the three sets


133
00:06:40.734 --> 00:06:44.871 line:-1 position:50%
of inserted, updated, and
deleted asset local identifiers


134
00:06:44.871 --> 00:06:47.707 line:-1 position:50%
from enumerating through
the persistent changes.


135
00:06:47,707 --> 00:06:51,344 line:-1
How do I now update the app
to reflect this?


136
00:06:51.344 --> 00:06:53.980 line:-1 position:50%
Using the insertedIdentifiers
set,


137
00:06:53.980 --> 00:06:56.416 line:-1 position:50%
I can determine which assets
were added


138
00:06:56.416 --> 00:07:00.620 line:-1 position:50%
between hiking timestamps
by fetching the inserted assets


139
00:07:00,620 --> 00:07:02,656 line:-1
and checking
their creation dates


140
00:07:02,656 --> 00:07:08,128 line:-1
against each hike
start and end date.


141
00:07:08.128 --> 00:07:11.631 line:-1 position:50%
The updated assets may now
have adjustments applied,


142
00:07:11.631 --> 00:07:15.001 line:-1 position:50%
so I can use the new
hasAdjustments API


143
00:07:15,001 --> 00:07:20,907 line:-1
to check if I need to redraw
the asset in the UI.


144
00:07:20,907 --> 00:07:23,843 line:-1
I can use the deleted asset
local identifiers


145
00:07:23,843 --> 00:07:27,747 line:-1
to determine which collages
need to be regenerated.


146
00:07:27,747 --> 00:07:31,785 line:-1
Now I've handled all of the
offline photo library changes


147
00:07:31.785 --> 00:07:36.056 line:-1 position:50%
and my app is up to date.


148
00:07:36,056 --> 00:07:38,525 line:-1
Here are a few things
you should keep in mind


149
00:07:38.525 --> 00:07:42.495 line:-1 position:50%
when using the new
change history API.


150
00:07:42.495 --> 00:07:45.498 line:-1 position:50%
First, determine what changes
are important to you


151
00:07:45.498 --> 00:07:49.269 line:-1 position:50%
and your app, and only check
for those changes.


152
00:07:49.269 --> 00:07:51.905 line:-1 position:50%
Consider performing
one large fetch request


153
00:07:51.905 --> 00:07:54.474 line:-1 position:50%
of updated and inserted assets


154
00:07:54.474 --> 00:07:59.579 line:-1 position:50%
instead of multiple smaller
requests to improve performance.


155
00:07:59,579 --> 00:08:02,549 line:-1
Photo libraries can change a lot
due to processing


156
00:08:02.549 --> 00:08:05.218 line:-1 position:50%
and sync activity
under the hood,


157
00:08:05,218 --> 00:08:07,020 line:-1
so you may end up
enumerating through


158
00:08:07,020 --> 00:08:08,788 line:-1
a large amount of changes,


159
00:08:08.788 --> 00:08:12.158 line:-1 position:50%
especially if your app
is not frequently launched.


160
00:08:12,158 --> 00:08:14,394 line:-1
Because of this,
we recommend


161
00:08:14,394 --> 00:08:17,731 line:-1
that you ask for change history
on a background thread


162
00:08:17,731 --> 00:08:20,734 line:-1
to not block the UI.


163
00:08:20.734 --> 00:08:22.802 line:-1 position:50%
There are two types of errors
that can occur


164
00:08:22,802 --> 00:08:25,572 line:-1
when fetching
persistent history.


165
00:08:25.572 --> 00:08:26.606 line:-1 position:50%
If the change token


166
00:08:26.606 --> 00:08:29.542 line:-1 position:50%
is older than the available
history of changes,


167
00:08:29,542 --> 00:08:33,513 line:-1
the expired change token error
will be returned.


168
00:08:33,513 --> 00:08:35,715 line:-1
In some cases,
the persistent change


169
00:08:35,715 --> 00:08:38,685 line:-1
cannot be relied upon
to completely reconstruct


170
00:08:38,685 --> 00:08:40,420 line:-1
the changes that occurred,


171
00:08:40,420 --> 00:08:44,958 line:-1
and will return an error that
change details are unavailable.


172
00:08:44,958 --> 00:08:47,761 line:0
In these instances,
we recommend


173
00:08:47,761 --> 00:08:51,030 line:0
refetching tracked objects
in the photo library


174
00:08:51,030 --> 00:08:54,234 line:0
to ensure your app
is up to date.


175
00:08:54.234 --> 00:08:56.669 line:-1 position:50%
Before we wrap up,
there are a few more


176
00:08:56.669 --> 00:09:01.040 line:-1 position:50%
new PhotoKit APIs
I'd like to share with you.


177
00:09:01,040 --> 00:09:04,411 line:-1
PhotoKit now supports
accessing cinematic videos


178
00:09:04,411 --> 00:09:08,181 line:-1
by media subtype
and smart album.


179
00:09:08.181 --> 00:09:11.584 line:-1 position:50%
There are also
two new error codes.


180
00:09:11,584 --> 00:09:13,019 line:-1
If the photo library bundle


181
00:09:13,019 --> 00:09:17,123 line:-1
is in a File Provider
sync root directory on macOS,


182
00:09:17.123 --> 00:09:19.092 line:-1 position:50%
the library can become
corrupted,


183
00:09:19,092 --> 00:09:23,563 line:-1
and an error will be returned
when trying to perform changes.


184
00:09:23,563 --> 00:09:25,732 line:-1
If an asset resource
cannot be found


185
00:09:25,732 --> 00:09:27,434 line:-1
due to network issues,


186
00:09:27.434 --> 00:09:31.171 line:-1 position:50%
the resource request
will now return a network error.


187
00:09:31.171 --> 00:09:33.106 line:-1 position:50%
Please check
the developer documentation


188
00:09:33,106 --> 00:09:35,408 line:-1
for all of the latest updates.


189
00:09:35,408 --> 00:09:38,545 line:0
Lastly, be sure to check out
this year's session


190
00:09:38,545 --> 00:09:39,813 line:0
on the Photos picker,


191
00:09:39,813 --> 00:09:44,584 position:50%
as it is the easiest way
to work with and access Photos.


192
00:09:44,584 --> 00:09:48,321 line:-1
We're so excited for you to use
the new change history API


193
00:09:48,321 --> 00:09:51,291 line:-1
and all of the great new
features in PhotoKit.


194
00:09:51.291 --> 00:09:52.992 line:-1 position:50%
Thank you!


195
00:09:52,992 --> 00:09:57,397 position:90% size:2% line:0
♪

