2
00:00:00,501 --> 00:00:08,509 line:-1
♪ ♪


3
00:00:09.309 --> 00:00:11.178 line:-1 align:center
Bob: Hi, I'm Bob Whiteman,


4
00:00:11.211 --> 00:00:13.747 line:-1 align:center
Senior iOS Device Management Engineer.


5
00:00:13,780 --> 00:00:17,651 line:-2
It is my pleasure to share with you
an important new security feature


6
00:00:17,684 --> 00:00:22,623 line:-2
for managed devices in enterprise
and education environments.


7
00:00:22.656 --> 00:00:26.593 line:-2 align:center
Let's start by reviewing
the device security landscape.


8
00:00:26.627 --> 00:00:29.596 line:-2 align:center
Your users need to access
organization resources,


9
00:00:29,630 --> 00:00:34,067 line:-2
such as websites,
application servers, and databases.


10
00:00:34.101 --> 00:00:39.006 line:-2 align:center
And there's attackers who also
want to access those resources.


11
00:00:39,039 --> 00:00:43,277 line:-2
The classic model for securing resources
is perimeter security.


12
00:00:43.310 --> 00:00:46.413 line:-2 align:center
You draw a security boundary
around an intranet,


13
00:00:46.446 --> 00:00:49.216 line:-1 align:center
and stand up a firewall or VPN


14
00:00:49,249 --> 00:00:53,020 line:-2
that permits legitimate clients
and rejects threats.


15
00:00:53,053 --> 00:00:59,259 line:-2
But this model hasn't kept up with the way
people interact with modern organizations.


16
00:00:59.293 --> 00:01:04.331 line:-2 align:center
Cloud service providers put resources
outside the perimeter.


17
00:01:04.364 --> 00:01:07.501 line:-2 align:center
Threats can start
from inside the perimeter.


18
00:01:08,902 --> 00:01:13,707 line:-2
And threats can spoof legitimate clients
to penetrate the perimeter.


19
00:01:15.442 --> 00:01:20.080 line:-2 align:center
A more modern security model
does not trust a network perimeter.


20
00:01:20,113 --> 00:01:24,451 line:-2
Instead, each resource performs
its own trust evaluation.


21
00:01:24,484 --> 00:01:28,188 line:-2
This is a core principle
of zero trust architecture.


22
00:01:29,623 --> 00:01:33,193 line:-2
You can think of trust evaluation
as a function:


23
00:01:33.227 --> 00:01:36.864 line:-2 align:center
the input is posture information
about the client,


24
00:01:36,897 --> 00:01:41,502 line:-2
and the output is the decision
to grant or deny access.


25
00:01:41,535 --> 00:01:45,873 line:-2
It's critical to get
trust evaluation right.


26
00:01:45.906 --> 00:01:49.643 line:-2 align:center
A false negative gets in the way
of user activities,


27
00:01:49.676 --> 00:01:55.682 line:-2 align:center
or worse, a false positive allows
an attacker to access your resources.


28
00:01:55.716 --> 00:02:00.521 line:-2 align:center
And that means having accurate
posture information is also critical.


29
00:02:00.554 --> 00:02:03.824 line:-2 align:center
Let's investigate
common components of posture.


30
00:02:03.857 --> 00:02:08.161 line:-2 align:center
You use all available information about
the client and its request:


31
00:02:08,195 --> 00:02:09,897 line:-1
who is making the request,


32
00:02:09,930 --> 00:02:13,667 line:-2
what device they're using,
where they are, and so on.


33
00:02:13,700 --> 00:02:16,103 line:-1
Trust evaluation may use different details


34
00:02:16,136 --> 00:02:20,240 line:-2
within the posture
for accessing different resources.


35
00:02:20,274 --> 00:02:25,245 line:-2
Accessing a low-security resource
may only require the user's identity,


36
00:02:25.279 --> 00:02:30.684 line:-2 align:center
but accessing critical infrastructure
may require evaluating all posture items.


37
00:02:30.717 --> 00:02:34.555 line:-2 align:center
It's up to the organization
to decide which details are relevant.


38
00:02:36.190 --> 00:02:40.093 line:-2 align:center
One central element of posture
is the user's identity.


39
00:02:40,127 --> 00:02:42,896 line:-1
This indicates who is making the request.


40
00:02:44.364 --> 00:02:48.435 line:-2 align:center
Apple devices provide several technologies
to support user identity,


41
00:02:48,468 --> 00:02:51,605 line:-2
such as the Extensible Single Sign On
feature,


42
00:02:51,638 --> 00:02:54,208 line:-1
including the built-in Kerberos extension,


43
00:02:54.241 --> 00:02:59.146 line:-2 align:center
to facilitate user authentication
for apps, websites, and accounts.


44
00:02:59,179 --> 00:03:02,015 line:-2
And the new
Enrollment Single Sign On feature


45
00:03:02.049 --> 00:03:05.853 line:-2 align:center
lets an app facilitate
user authentications during and after


46
00:03:05.886 --> 00:03:09.323 line:-2 align:center
the enrollment process
of User Enrollments.


47
00:03:09.356 --> 00:03:12.359 line:-2 align:center
But this session isn't about
user identity,


48
00:03:12,392 --> 00:03:15,262 line:-1
it's about device identity.


49
00:03:15,295 --> 00:03:20,434 line:-2
This element of posture indicates
which device is making the request.


50
00:03:22.102 --> 00:03:26.406 line:-2 align:center
The UDID that the device reports
in each MDM communication


51
00:03:26,440 --> 00:03:31,945 line:-2
is the primary way that your MDM server
knows which device it's managing.


52
00:03:31.979 --> 00:03:35.582 line:-2 align:center
The DeviceInformation query
also provides to the MDM server


53
00:03:35,616 --> 00:03:39,887 line:-2
attributes of the device,
including the serial number.


54
00:03:39.920 --> 00:03:44.625 line:-2 align:center
A managed device often communicates
with other systems inside the organization


55
00:03:44.658 --> 00:03:47.528 line:-1 align:center
aside from the MDM server.


56
00:03:47,561 --> 00:03:52,766 line:-2
So, often the MDM server configures
the device with client certificates


57
00:03:52,799 --> 00:03:57,504 line:-2
that declare the device's identity
to those other systems.


58
00:03:57.538 --> 00:04:01.041 line:-2 align:center
These methods of identifying a device
have served us well,


59
00:04:01,074 --> 00:04:06,980 line:-2
but they amount to trusting that the
device is the one that it claims to be.


60
00:04:07.014 --> 00:04:08.982 line:-1 align:center
As the landscape has changed,


61
00:04:09.016 --> 00:04:11.818 line:-2 align:center
with devices more distributed
than ever before,


62
00:04:11,852 --> 00:04:14,488 line:-1
our security needs have evolved.


63
00:04:14.521 --> 00:04:18.225 line:-2 align:center
To address this,
I'm excited to share a powerful new method


64
00:04:18.258 --> 00:04:21.094 line:-1 align:center
for proving a device's identity,


65
00:04:21.128 --> 00:04:24.598 line:-1 align:center
Managed Device Attestation.


66
00:04:24.631 --> 00:04:30.237 line:-2 align:center
With Managed Device Attestation, a device
provides strong evidence about itself


67
00:04:30,270 --> 00:04:32,039 line:-1
when making a request.


68
00:04:32.072 --> 00:04:34.908 line:-1 align:center
It improves posture information,


69
00:04:34,942 --> 00:04:39,012 line:-2
so trust evaluations based on that
are more accurate.


70
00:04:39.046 --> 00:04:43.283 line:-2 align:center
In short, Managed Device Attestation
means legitimate devices


71
00:04:43,317 --> 00:04:48,889 line:-2
reliably access resources,
and attackers are thwarted.


72
00:04:48.922 --> 00:04:53.360 line:-2 align:center
This release brings
Managed Device Attestation for iOS 16,


73
00:04:53.393 --> 00:04:58.031 line:-1 align:center
iPadOS 16, and tvOS 16.


74
00:04:58.065 --> 00:05:02.803 line:-2 align:center
This session we'll start with an overview
of the new attestation features,


75
00:05:02.836 --> 00:05:06.673 line:-2 align:center
explain the benefits
of using attestations,


76
00:05:06,707 --> 00:05:10,644 line:-2
and then dive into
the implementation details.


77
00:05:10.677 --> 00:05:14.648 line:-1 align:center
First, what are attestations?


78
00:05:14.681 --> 00:05:18.185 line:-1 align:center
An attestation is a declaration of a fact.


79
00:05:18,218 --> 00:05:21,788 line:-1
If you trust the entity making the claim,


80
00:05:21,822 --> 00:05:25,092 line:-1
you accept that the fact is true.


81
00:05:25.125 --> 00:05:30.297 line:-2 align:center
In software, an attestation is a fact
that is cryptographically signed.


82
00:05:30,330 --> 00:05:33,400 line:-1
This is usually an X.509 certificate.


83
00:05:33.433 --> 00:05:38.105 line:-2 align:center
If you trust the signer,
you accept that the fact is true.


84
00:05:38,138 --> 00:05:40,674 line:-1
For Managed Device Attestation,


85
00:05:40,707 --> 00:05:45,012 line:-2
the facts are the identity
and other properties of a device,


86
00:05:45,045 --> 00:05:47,648 line:-1
and the signer is Apple.


87
00:05:47.681 --> 00:05:51.885 line:-2 align:center
Accepting the accuracy of these
device facts requires trusting Apple.


88
00:05:51,919 --> 00:05:57,658 line:-2
However, it doesn't require trusting
every line of code ever written by Apple.


89
00:05:58.525 --> 00:06:01.795 line:-2 align:center
It only requires trusting
the Secure Enclave


90
00:06:01,828 --> 00:06:03,997 line:-1
and Apple's attestation servers,


91
00:06:04,031 --> 00:06:08,635 line:-2
which access Apple's manufacturing records
and operating system catalog.


92
00:06:08,669 --> 00:06:11,939 line:-2
And if you keep your data
on Apple devices at all,


93
00:06:11,972 --> 00:06:15,309 line:-1
you're implicitly trusting those.


94
00:06:15,342 --> 00:06:20,747 line:-2
Here's how we're bringing the power
of attestations to managed devices.


95
00:06:20.781 --> 00:06:26.119 line:-2 align:center
Managed Device Attestation offers two ways
to use attestation certificates.


96
00:06:26.153 --> 00:06:29.623 line:-2 align:center
We've enhanced
the DeviceInformation MDM command,


97
00:06:29.656 --> 00:06:34.661 line:-2 align:center
which makes the benefits of attestation
available to the MDM server.


98
00:06:34,695 --> 00:06:39,366 line:-2
And we've added support for the Automatic
Certificate Management Environment,


99
00:06:39.399 --> 00:06:44.004 line:-2 align:center
or ACME, protocol
by adding an ACME profile payload,


100
00:06:44.037 --> 00:06:46.306 line:-2 align:center
which makes the benefits of attestation
available


101
00:06:46.340 --> 00:06:49.543 line:-2 align:center
throughout the organization's
infrastructure.


102
00:06:50.711 --> 00:06:53.046 line:-1 align:center
For DeviceInformation attestation,


103
00:06:53.080 --> 00:06:58.919 line:-2 align:center
the MDM server issues a DeviceInformation
query and specifies some new keys.


104
00:06:58,952 --> 00:07:02,489 line:-2
The device obtains an attestation
from Apple’s servers


105
00:07:02,523 --> 00:07:05,225 line:-1
and returns it to the MDM server.


106
00:07:05.259 --> 00:07:08.462 line:-2 align:center
Then the MDM server
evaluates the attestation.


107
00:07:10.297 --> 00:07:11.965 line:-1 align:center
But be careful.


108
00:07:11.999 --> 00:07:16.036 line:-2 align:center
DeviceInformation attestation declares
to the MDM server,


109
00:07:16,069 --> 00:07:18,972 line:-1
"A device exists with these properties."


110
00:07:19.006 --> 00:07:23.510 line:-2 align:center
It does not prove that the device the MDM
server is currently communicating with


111
00:07:23,544 --> 00:07:25,712 line:-1
is that same device.


112
00:07:25,746 --> 00:07:28,815 line:-2
For that,
you need ACME payload attestation.


113
00:07:31,151 --> 00:07:34,721 line:-2
ACME payload attestation
provides the strongest proof


114
00:07:34.755 --> 00:07:37.090 line:-1 align:center
of the identity of the device.


115
00:07:37.124 --> 00:07:40.427 line:-2 align:center
When you install a profile
containing an ACME payload,


116
00:07:40.460 --> 00:07:45.299 line:-2 align:center
the device requests a certificate
from an organization ACME server.


117
00:07:45,332 --> 00:07:49,503 line:-2
This is very similar
to installing a SCEP payload.


118
00:07:49.536 --> 00:07:53.440 line:-2 align:center
The device provides an attestation
to the ACME server.


119
00:07:53,473 --> 00:07:57,244 line:-2
Based upon this strong proof
of the identity of the device,


120
00:07:57.277 --> 00:08:00.447 line:-2 align:center
the ACME server issues
a new client certificate


121
00:08:00.480 --> 00:08:04.017 line:-2 align:center
that the rest of
your organization's servers trust.


122
00:08:04.051 --> 00:08:06.820 line:-2 align:center
These two new features use
attestation certificates


123
00:08:06.854 --> 00:08:08.689 line:-1 align:center
to prove several things:


124
00:08:08,722 --> 00:08:11,792 line:-1
the device is genuine Apple hardware;


125
00:08:11,825 --> 00:08:15,495 line:-1
the device is a specific device;


126
00:08:15,529 --> 00:08:18,832 line:-1
the device has certain properties;


127
00:08:18,866 --> 00:08:22,836 line:-1
and a private key is bound to the device.


128
00:08:22,870 --> 00:08:26,573 line:-2
And it proves to different servers
that they are communicating


129
00:08:26,607 --> 00:08:28,642 line:-1
with the same device.


130
00:08:28.675 --> 00:08:32.079 line:-1 align:center
How do these attestations benefit you?


131
00:08:32.112 --> 00:08:34.982 line:-2 align:center
Attestations are primarily
a security feature,


132
00:08:35,015 --> 00:08:39,419 line:-2
so I'll describe some of the threats
and how attestations mitigate them.


133
00:08:40.420 --> 00:08:45.125 line:-2 align:center
First, a compromised device
lies about its properties,


134
00:08:45,158 --> 00:08:47,895 line:-1
so Apple attests to the properties.


135
00:08:47.928 --> 00:08:49.596 line:-1 align:center
Even if the OS is compromised,


136
00:08:49.630 --> 00:08:52.766 line:-2 align:center
that doesn't affect the reliability
of the attestation.


137
00:08:52,799 --> 00:08:56,703 line:-2
It only requires the Secure Enclave
to be intact.


138
00:08:56,737 --> 00:09:01,441 line:-2
Or a compromised device provides
an outdated attestation of properties


139
00:09:01,475 --> 00:09:03,744 line:-1
that have since changed.


140
00:09:03.777 --> 00:09:09.116 line:-2 align:center
A nonce in the attestation ensures
that the facts are up to date.


141
00:09:09,149 --> 00:09:12,953 line:-2
ACME payload attestation
mitigates other threats.


142
00:09:12.986 --> 00:09:16.990 line:-2 align:center
A compromised device
sends a different device's identifiers


143
00:09:17.024 --> 00:09:20.127 line:-1 align:center
when communicating with the MDM server.


144
00:09:20.160 --> 00:09:25.799 line:-2 align:center
So Apple attests device identifiers in
a way that's tied to the client identity


145
00:09:25.832 --> 00:09:29.837 line:-2 align:center
that the device uses
to authenticate its TLS connection.


146
00:09:29.870 --> 00:09:31.905 line:-1 align:center
This proves to your MDM server


147
00:09:31.939 --> 00:09:36.210 line:-2 align:center
and other organization servers
which device they are communicating with.


148
00:09:37.678 --> 00:09:42.149 line:-2 align:center
Or, an attacker extracts a private key
from a legitimate device


149
00:09:42,182 --> 00:09:47,120 line:-2
and uses it to make requests,
spoofing the legitimate device.


150
00:09:47,154 --> 00:09:51,491 line:-2
Apple attests that the private key
is protected by the Secure Enclave,


151
00:09:51.525 --> 00:09:53.794 line:-1 align:center
which has exceptionally strong protections


152
00:09:53.827 --> 00:09:57.297 line:-2 align:center
against exporting
or importing private keys.


153
00:09:57,331 --> 00:10:01,335 line:-2
Last, an attacker hijacks
a certificate request


154
00:10:01,368 --> 00:10:06,940 line:-2
to get a certificate authority to issue
a certificate for a different device.


155
00:10:06,974 --> 00:10:10,177 line:-2
Apple attests the identity
of the requesting device


156
00:10:10.210 --> 00:10:13.146 line:-2 align:center
in a way that ties it to the certificate
request,


157
00:10:13.180 --> 00:10:15.949 line:-2 align:center
so the certificate authority
only issues certificates


158
00:10:15.983 --> 00:10:19.052 line:-1 align:center
to the legitimate device.


159
00:10:19.086 --> 00:10:23.423 line:-2 align:center
Attestations give you security benefits
that mitigate several threats.


160
00:10:23.457 --> 00:10:26.727 line:-2 align:center
So how do you use them
in your environment?


161
00:10:26,760 --> 00:10:31,965 line:-2
Let's get into the details of how to
implement Managed Device Attestation.


162
00:10:31.999 --> 00:10:36.270 line:-2 align:center
First, there are the enhancements
to the DeviceInformation command.


163
00:10:36.303 --> 00:10:40.741 line:-2 align:center
An MDM server can issue this command
to a managed device.


164
00:10:40,774 --> 00:10:45,546 line:-2
The request includes a list of properties
that the server wants to know.


165
00:10:45,579 --> 00:10:49,883 line:-2
We've added a new property,
DevicePropertiesAttestation.


166
00:10:49.917 --> 00:10:53.120 line:-2 align:center
Adding it to the Queries array
means the MDM server


167
00:10:53.153 --> 00:10:56.323 line:-1 align:center
is requesting an attestation.


168
00:10:56,356 --> 00:10:59,059 line:-1
To ensure that the attestation is fresh,


169
00:10:59.092 --> 00:11:04.097 line:-2 align:center
the MDM server can use
the DeviceAttestationNonce key.


170
00:11:04.131 --> 00:11:08.702 line:-2 align:center
This appears at the same level
in the request as the Queries key.


171
00:11:08,735 --> 00:11:10,537 line:-1
This key is optional.


172
00:11:10,571 --> 00:11:15,809 line:-2
Its value is a data object,
with a maximum size of 32 bytes.


173
00:11:15.843 --> 00:11:19.213 line:-2 align:center
Here's an example
that requests attestation.


174
00:11:19.246 --> 00:11:23.383 line:-2 align:center
The Queries array contains
the DevicePropertiesAttestation key,


175
00:11:23.417 --> 00:11:26.887 line:-1 align:center
and there's a 32 byte nonce.


176
00:11:26.920 --> 00:11:29.623 line:-2 align:center
When obtaining the attestation
is successful,


177
00:11:29,656 --> 00:11:34,127 line:-2
the response contains
a DevicePropertiesAttestation key.


178
00:11:34.161 --> 00:11:37.331 line:-1 align:center
Its value is an array of data objects.


179
00:11:37.364 --> 00:11:42.336 line:-2 align:center
Each element in the array
is a certificate in a certificate chain.


180
00:11:42.369 --> 00:11:44.938 line:-1 align:center
This is an example response.


181
00:11:44,972 --> 00:11:48,775 line:-2
The leaf certificate
appears first in the array,


182
00:11:48.809 --> 00:11:53.780 line:-2 align:center
and it contains device properties
in custom OIDs.


183
00:11:53.814 --> 00:11:59.720 line:-2 align:center
The first two OIDs are device identifying
properties, serial number and UDID.


184
00:11:59.753 --> 00:12:05.392 line:-2 align:center
They are omitted from the certificate if
the MDM enrollment is a User Enrollment.


185
00:12:05.425 --> 00:12:10.797 line:-2 align:center
The remaining OIDs are anonymous,
and available for all enrollment types.


186
00:12:10.831 --> 00:12:14.468 line:-2 align:center
sepOS version refers to the version
of the operating system


187
00:12:14.501 --> 00:12:17.437 line:-1 align:center
that runs on the Secure Enclave.


188
00:12:17,471 --> 00:12:20,841 line:-2
And the presence of the correct value
in the nonce OID


189
00:12:20,874 --> 00:12:24,811 line:-2
proves that the certificate
was just generated.


190
00:12:24.845 --> 00:12:27.314 line:-2 align:center
When the MDM server
receives an attestation


191
00:12:27.347 --> 00:12:30.851 line:-2 align:center
it must carefully validate it,
in the following order.


192
00:12:30,884 --> 00:12:34,087 line:-2
It verifies that the cert chain is rooted
with the expected


193
00:12:34.121 --> 00:12:36.757 line:-1 align:center
Apple certificate authority.


194
00:12:36,790 --> 00:12:38,959 line:0
The Apple certificate authority
is available


195
00:12:38,992 --> 00:12:42,963 line:0
from the Apple Private PKI Repository.


196
00:12:42.996 --> 00:12:46.834 line:-2 align:center
It verifies that the nonce
in the leaf certificate matches the nonce


197
00:12:46.867 --> 00:12:50.270 line:-2 align:center
in the DeviceInformation request,
if one was specified.


198
00:12:50,304 --> 00:12:55,342 line:-2
And then it parses out the remaining
OIDs and evaluates their values.


199
00:12:55,375 --> 00:12:59,546 line:-2
Generating new attestations uses
significant resources on the device


200
00:12:59.580 --> 00:13:01.415 line:-1 align:center
and Apple's servers,


201
00:13:01.448 --> 00:13:06.286 line:-2 align:center
so there's a rate limit on how often new
attestation certificates can be requested,


202
00:13:06,320 --> 00:13:10,824 line:-2
currently one new attestation
every seven days.


203
00:13:10.858 --> 00:13:16.063 line:-2 align:center
You request a fresh attestation
by specifying a new nonce.


204
00:13:16.096 --> 00:13:19.933 line:-2 align:center
Omitting a nonce indicates
that freshness is not a concern,


205
00:13:19,967 --> 00:13:24,771 line:-2
so the device can return
its most recent attestation instead.


206
00:13:24.805 --> 00:13:29.076 line:-2 align:center
And if the nonce is specified
and matches that cached attestation,


207
00:13:29,109 --> 00:13:32,613 line:-1
the cached attestation is returned.


208
00:13:32,646 --> 00:13:36,316 line:-2
When the MDM server validates
the nonce in an attestation,


209
00:13:36.350 --> 00:13:38.952 line:-1 align:center
it should detect a mismatched nonce


210
00:13:38,986 --> 00:13:44,057 line:-2
and determine whether that was expected
due to caching or not.


211
00:13:44,091 --> 00:13:48,028 line:-2
But don't request a new attestation
every seven days


212
00:13:48,061 --> 00:13:50,297 line:-1
just because that's the rate limit.


213
00:13:50.330 --> 00:13:54.201 line:-2 align:center
Doing that will only delay how quickly
your MDM server discovers changes


214
00:13:54.234 --> 00:13:58.605 line:-2 align:center
in device properties,
not to mention waste resources.


215
00:13:58,639 --> 00:14:03,677 line:-2
Instead, monitor for relevant changes
in the other DeviceInformation properties,


216
00:14:03,710 --> 00:14:05,646 line:-1
such as the OS version.


217
00:14:05,679 --> 00:14:10,050 line:-2
When one of those changes,
then request a fresh attestation.


218
00:14:10,083 --> 00:14:14,788 line:-2
This ensures the attestation is updated
as quickly as possible after a change,


219
00:14:14,821 --> 00:14:18,392 line:-2
rather than waiting
for the rate limit to expire.


220
00:14:18,425 --> 00:14:23,830 line:-2
And, just in case the device is compromised
and lying about these other properties,


221
00:14:23,864 --> 00:14:27,701 line:-2
slip in the occasional random request
for a fresh attestation


222
00:14:27.734 --> 00:14:29.803 line:-1 align:center
to keep the device honest.


223
00:14:29,837 --> 00:14:33,106 line:-1
Requesting an attestation may fail.


224
00:14:33,140 --> 00:14:36,243 line:-2
When that happens,
the device still responds


225
00:14:36.276 --> 00:14:38.779 line:-1 align:center
but some information is omitted.


226
00:14:38.812 --> 00:14:43.450 line:-2 align:center
Either the DevicePropertiesAttestation
field is omitted from the response,


227
00:14:43,483 --> 00:14:47,254 line:-2
or an expected OID
or its value is omitted.


228
00:14:47.287 --> 00:14:49.990 line:-2 align:center
There are many potential reasons
for a failure:


229
00:14:50.023 --> 00:14:55.429 line:-2 align:center
the device experiences a network issue
reaching Apple's attestation servers.


230
00:14:55.462 --> 00:14:58.098 line:-1 align:center
No server is up 100% of the time,


231
00:14:58,131 --> 00:15:02,202 line:-2
so there may be an issue
with Apple's attestation servers.


232
00:15:02.236 --> 00:15:05.906 line:-2 align:center
Or the device hardware or software
may be compromised,


233
00:15:05.939 --> 00:15:08.542 line:-1 align:center
or it's not even genuine Apple hardware.


234
00:15:08,575 --> 00:15:12,212 line:-2
In these last three cases,
Apple's attestation servers


235
00:15:12.246 --> 00:15:17.584 line:-2 align:center
refuse to issue an attestation
for properties that they cannot verify.


236
00:15:17.618 --> 00:15:20.187 line:-2 align:center
The different causes
of a failed attestation


237
00:15:20.220 --> 00:15:24.625 line:-2 align:center
range from a harmless network glitch
to an active attack.


238
00:15:24,658 --> 00:15:27,361 line:-2
Unfortunately,
there is no trustworthy way


239
00:15:27,394 --> 00:15:30,931 line:-2
for the MDM server
to know the exact cause.


240
00:15:30.964 --> 00:15:34.101 line:-2 align:center
This is because the only source
of information about the failure


241
00:15:34,134 --> 00:15:39,439 line:-2
is the device itself, which may be
a compromised device that's lying.


242
00:15:39,473 --> 00:15:43,277 line:-2
So how should an MDM server
interpret a failure?


243
00:15:43.310 --> 00:15:48.148 line:-2 align:center
Don't always assume the worst
when attestation fails.


244
00:15:48,182 --> 00:15:50,484 line:-1
If you have a zero trust architecture,


245
00:15:50,517 --> 00:15:52,753 line:-1
here's how you would likely handle it.


246
00:15:52,786 --> 00:15:56,790 line:-2
The organization calculates a trust score
for the device,


247
00:15:56,823 --> 00:16:02,896 line:-2
with a failed or unexpectedly stale
attestation lowering that score.


248
00:16:02.930 --> 00:16:05.966 line:-2 align:center
A lowered trust score
triggers different actions,


249
00:16:05,999 --> 00:16:08,969 line:-1
such as denying access to services,


250
00:16:09,002 --> 00:16:11,705 line:-2
flagging the device
for manual investigation,


251
00:16:11,738 --> 00:16:15,642 line:-2
or remediating by wiping it
and revoking its certificates.


252
00:16:15,676 --> 00:16:20,414 line:-2
This ensures an appropriate response
to a failed attestation.


253
00:16:20,447 --> 00:16:24,952 line:-2
Let's move on to implementing
ACME payload attestation.


254
00:16:24.985 --> 00:16:28.522 line:-2 align:center
Installing an ACME payload
involves several steps.


255
00:16:28.555 --> 00:16:33.460 line:-2 align:center
I'll describe the different participants
in the process, then each of those steps.


256
00:16:33.493 --> 00:16:37.764 line:-1 align:center
We start with an iPhone, iPad or Apple TV.


257
00:16:38,999 --> 00:16:43,737 line:-2
In most cases this is managed
by an MDM server.


258
00:16:43.770 --> 00:16:45.606 line:-1 align:center
There's an ACME server.


259
00:16:45,639 --> 00:16:50,777 line:-2
This implements the ACME protocol,
RFC 8555,


260
00:16:50.811 --> 00:16:56.783 line:-2 align:center
so it can issue client certificates from
an organization certificate authority.


261
00:16:56,817 --> 00:17:01,555 line:-2
And there's Apple's attestation servers
that issue the attestations.


262
00:17:03.390 --> 00:17:07.294 line:-2 align:center
The first step is for the MDM server
to install a profile


263
00:17:07,327 --> 00:17:10,397 line:-1
containing an ACME payload.


264
00:17:10.430 --> 00:17:16.036 line:-2 align:center
The payload specifies properties
of the key the device will generate,


265
00:17:16.069 --> 00:17:22.276 line:-2 align:center
properties of the certificate
that the device will request,


266
00:17:22.309 --> 00:17:27.548 line:-2 align:center
and how to request the certificate
from the ACME server.


267
00:17:27.581 --> 00:17:29.483 line:-1 align:center
To start installing the profile,


268
00:17:29.516 --> 00:17:33.587 line:-2 align:center
the device generates
the requested type of key.


269
00:17:33.620 --> 00:17:37.991 line:-2 align:center
In order to use attestations,
the key must be hardware-bound.


270
00:17:38.025 --> 00:17:42.296 line:-2 align:center
While the ACME payload supports RSA
and various sizes of keys,


271
00:17:42.329 --> 00:17:47.801 line:-2 align:center
in order to get a hardware-bound key,
you must use ECSECPrimeRandom.


272
00:17:47,835 --> 00:17:53,707 line:-2
Your best choice is
a ECSECPrimeRandom 384 bit key


273
00:17:53.740 --> 00:17:58.345 line:-2 align:center
because that's the highest security
hardware-bound key.


274
00:17:58.378 --> 00:18:03.217 line:-2 align:center
Once the key is created, the device makes
initial contact with the ACME server.


275
00:18:05.052 --> 00:18:08.155 line:-1 align:center
The device requests the DirectoryURL,


276
00:18:08.188 --> 00:18:11.792 line:-2 align:center
which specifies the URLs to use
for the rest of the process


277
00:18:11,825 --> 00:18:14,595 line:-1
of communicating with the ACME server.


278
00:18:14,628 --> 00:18:18,699 line:-2
Then the two systems create an account
and an order.


279
00:18:18,732 --> 00:18:24,404 line:-2
The server offers
the device-attest-01 validation type.


280
00:18:24,438 --> 00:18:27,508 line:-1
Then, the ACME server generates a nonce


281
00:18:27.541 --> 00:18:32.012 line:-2 align:center
and sends it to the device
in the token field.


282
00:18:32,045 --> 00:18:36,483 align:center
The ACME protocol was initially used
to issue server certificates.


283
00:18:36,517 --> 00:18:39,319 align:center
Here however,
the validation type we use


284
00:18:39,353 --> 00:18:42,356 line:0
was introduced in an IETF draft


285
00:18:42,389 --> 00:18:45,692 align:center
specifying an extension
of the ACME protocol


286
00:18:45,726 --> 00:18:49,730 line:0
for receiving attestations
and issuing client certificates.


287
00:18:50.931 --> 00:18:53.000 line:-1 align:center
Attestation is optional.


288
00:18:53,033 --> 00:18:55,502 line:-1
When the payload specifies attestation,


289
00:18:55.536 --> 00:18:59.106 line:-2 align:center
the device requests an attestation
from Apple.


290
00:18:59,139 --> 00:19:03,443 line:-2
This is nearly identical
to the DeviceInformation attestation.


291
00:19:03,477 --> 00:19:05,679 line:-1
It uses the same OIDs,


292
00:19:05,712 --> 00:19:10,751 line:-2
and device-identifying OIDs are omitted
for User Enrollments.


293
00:19:10.784 --> 00:19:13.153 line:-1 align:center
But there's a few differences.


294
00:19:13.187 --> 00:19:20.394 line:-2 align:center
The nonce is hashed using SHA-256
before embedding it in the attestation.


295
00:19:20.427 --> 00:19:25.165 line:-2 align:center
The nonce comes from the ACME server,
not the MDM server.


296
00:19:25.199 --> 00:19:29.436 line:-2 align:center
And the private key that matches
the attestation leaf certificate


297
00:19:29,469 --> 00:19:33,540 line:-1
is the one the device just generated.


298
00:19:33,574 --> 00:19:36,310 line:-2
The attestation certificate
matches the private key,


299
00:19:36.343 --> 00:19:42.816 line:-2 align:center
however that certificate can't be used
for any purposes besides attestation.


300
00:19:42,850 --> 00:19:46,687 line:-2
So the device requests from
the ACME server another certificate


301
00:19:46.720 --> 00:19:50.824 line:-2 align:center
matching the private key,
and this cert is good for TLS.


302
00:19:53,060 --> 00:19:56,029 line:-2
The device provides
a certificate signing request


303
00:19:56.063 --> 00:20:00.367 line:-2 align:center
containing the certificate request
properties from the payload.


304
00:20:00.400 --> 00:20:03.670 line:-1 align:center
It provides the attestation chain.


305
00:20:03.704 --> 00:20:08.041 line:-2 align:center
And it provides the ClientIdentifier
from the ACME payload.


306
00:20:08.075 --> 00:20:10.344 line:-1 align:center
Typically this is used like a ticket


307
00:20:10.377 --> 00:20:13.413 line:-2 align:center
that is good for the issuance
of a single certificate,


308
00:20:13,447 --> 00:20:15,883 line:-1
to prevent repeated requests.


309
00:20:15,916 --> 00:20:19,353 line:-2
The ACME server must carefully validate
the request


310
00:20:19.386 --> 00:20:23.056 line:-2 align:center
before issuing a certificate,
in this order.


311
00:20:23,090 --> 00:20:28,629 line:-2
It must verify that the ClientIdentifier
is valid and unused.


312
00:20:28.662 --> 00:20:34.401 line:-2 align:center
The attestation certificate must chain up
to the correct Apple CA.


313
00:20:34.434 --> 00:20:40.541 line:-2 align:center
The public key in the attestation
leaf certificate must match the CSR.


314
00:20:40.574 --> 00:20:47.681 line:-2 align:center
The nonce must match the SHA-256 hash of
the one that the ACME server sent earlier.


315
00:20:47.714 --> 00:20:52.386 line:-2 align:center
And then the ACME server can evaluate
the remaining OIDs.


316
00:20:52,419 --> 00:20:55,389 line:-1
And remember that attestations may fail.


317
00:20:55,422 --> 00:21:00,093 line:-2
The ACME server should carefully consider
a failure when issuing a certificate,


318
00:21:00.127 --> 00:21:05.532 line:-2 align:center
just like we reviewed with a failed
attestation in the DeviceInformation case.


319
00:21:05,566 --> 00:21:08,402 line:-1
From here, things rapidly finish up.


320
00:21:08.435 --> 00:21:11.538 line:-2 align:center
The ACME server issues
a client certificate


321
00:21:11.572 --> 00:21:14.842 line:-2 align:center
from the organization CA
and returns it to the device.


322
00:21:17,077 --> 00:21:22,015 line:-2
The ACME server is the final authority
for client certificate issuance.


323
00:21:22,049 --> 00:21:25,919 line:-2
It can choose to honor or override
the properties in the CSR


324
00:21:25,953 --> 00:21:28,789 line:-1
such as the SubjectAltName.


325
00:21:28,822 --> 00:21:31,859 line:-2
The device stores
the certificate in the keychain,


326
00:21:31.892 --> 00:21:35.095 line:-2 align:center
and this completes the installation
of the ACME payload.


327
00:21:36,930 --> 00:21:38,999 line:-1
Let's tie all this together.


328
00:21:39.032 --> 00:21:42.469 line:-2 align:center
How do servers know
the device communicating with them


329
00:21:42.503 --> 00:21:45.339 line:-1 align:center
is the one it claims to be?


330
00:21:45,372 --> 00:21:49,376 line:-2
The device uses the same private key
in multiple ways:


331
00:21:49.409 --> 00:21:51.879 line:-1 align:center
when getting an attestation from Apple,


332
00:21:51.912 --> 00:21:55.048 line:-2 align:center
when getting a client certificate
from the ACME server,


333
00:21:55.082 --> 00:21:58.785 line:-2 align:center
and when using TLS
to communicate with other servers.


334
00:21:58,819 --> 00:22:01,421 line:-1
Because the key is hardware-bound,


335
00:22:01,455 --> 00:22:05,659 line:-2
we know all these actions were performed
by the same device.


336
00:22:05,692 --> 00:22:11,465 line:-2
And we have an attestation certificate
which describes that device.


337
00:22:11.498 --> 00:22:15.802 line:-2 align:center
Combining these,
organization servers now have confidence


338
00:22:15,836 --> 00:22:19,173 line:-2
in the device's identity
when granting access.


339
00:22:21.742 --> 00:22:24.745 line:-2 align:center
Just like with the certificate
and SCEP payloads,


340
00:22:24.778 --> 00:22:28.081 line:-2 align:center
other payloads in the profile
can reference the ACME payload


341
00:22:28.115 --> 00:22:30.350 line:-1 align:center
in order to use the certificate.


342
00:22:30,384 --> 00:22:33,820 line:-1
Use it for MDM, Wi-Fi, VPN,


343
00:22:33.854 --> 00:22:35.989 line:-1 align:center
Kerberos, Safari.


344
00:22:36,023 --> 00:22:39,626 line:-2
All these systems benefit
from attestation.


345
00:22:42,196 --> 00:22:44,865 line:-1
A device can have up to 10 ACME payloads


346
00:22:44.898 --> 00:22:48.635 line:-2 align:center
that use attestation
installed at the same time.


347
00:22:48.669 --> 00:22:52.105 line:-2 align:center
Note that hardware-bound keys
are not preserved


348
00:22:52,139 --> 00:22:54,808 line:-2
when a managed device's backup
is restored,


349
00:22:54.842 --> 00:22:58.011 line:-1 align:center
even when restoring to the same device.


350
00:22:58,045 --> 00:23:02,149 line:-2
And if you do nothing else
with Managed Device Attestation,


351
00:23:02.182 --> 00:23:05.819 line:-2 align:center
use an ACME payload
for the MDM client identity


352
00:23:05,853 --> 00:23:10,290 line:-2
so the MDM server can be sure
which device it's managing.


353
00:23:10.324 --> 00:23:12.059 line:-1 align:center
Let's wrap up.


354
00:23:12,092 --> 00:23:17,898 line:-2
You use Managed Device Attestation
to remediate multiple classes of threats.


355
00:23:17.931 --> 00:23:23.403 line:-2 align:center
You leverage DeviceInformation attestation
to improve the device identity component


356
00:23:23.437 --> 00:23:27.107 line:-1 align:center
of posture for better trust evaluation.


357
00:23:27.140 --> 00:23:33.113 line:-2 align:center
And, you can now prove a device's identity
as it accesses organization resources


358
00:23:33,146 --> 00:23:35,349 line:-1
using ACME attestation.


359
00:23:35,382 --> 00:23:40,053 line:-2
We look forward to your implementation
of Managed Device Attestation.


360
00:23:40,087 --> 00:23:44,725 line:-2
Together, we'll improve the security
of your device deployments.


361
00:23:44,758 --> 00:23:48,395 line:-1
Thank you, and have a great WWDC.

