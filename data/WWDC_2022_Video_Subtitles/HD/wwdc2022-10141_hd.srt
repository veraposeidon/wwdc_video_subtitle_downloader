2
00:00:01.335 --> 00:00:07.341 line:-1 align:center
♪ instrumental hip hop music ♪


3
00:00:09.910 --> 00:00:13.714 line:-2 align:center
Hi there.
Welcome to this year's WWDC.


4
00:00:13.747 --> 00:00:15.916 line:-1 align:center
My name is Stella.


5
00:00:15.949 --> 00:00:16.984 line:-1 align:center
And I'm Alex.


6
00:00:17,017 --> 00:00:20,420 line:-2
Stella and I work together
on the many parts of USD at Apple.


7
00:00:20,454 --> 00:00:23,891 line:-2
Today we'll explore with you
updates to USD tools and rendering.


8
00:00:23.924 --> 00:00:24.992 line:-1 align:center
Take it away, Stella!


9
00:00:27,160 --> 00:00:29,530 line:-1
USD is a foundational technology


10
00:00:29,563 --> 00:00:34,835 line:-2
that, with the growing and deepening
integration into content creation tools,


11
00:00:34.868 --> 00:00:40.641 line:-2 align:center
is enabling more and more ways
of creating assets and content,


12
00:00:40.674 --> 00:00:45.045 line:-2 align:center
rendering for games, AR, film,
and the web,


13
00:00:45.078 --> 00:00:47.147 line:-1 align:center
all with USD at the center.


14
00:00:48,015 --> 00:00:53,787 line:-2
Today, we will focus on two parts
of the ecosystem: tools and rendering.


15
00:00:54.688 --> 00:00:58.325 line:-1 align:center
Let's start with updates to our USD tools.


16
00:00:59,693 --> 00:01:02,930 line:-2
We'll then show you how your assets
look even better


17
00:01:02.963 --> 00:01:07.134 line:-1 align:center
with new lighting in AR Quick Look,


18
00:01:07,167 --> 00:01:12,072 line:-1
take a deep dive into USD rendering,


19
00:01:12,105 --> 00:01:16,476 line:-2
and last but not least,
show you how to integrate Hydra.


20
00:01:19.580 --> 00:01:23.450 line:-2 align:center
Let's get started with USD Tools
in the Apple ecosystem.


21
00:01:24,818 --> 00:01:28,922 line:-2
We'll cover USDZ Tools,
Reality Converter,


22
00:01:28.956 --> 00:01:33.427 line:-2 align:center
and then follow up
with additional tools and frameworks


23
00:01:33,460 --> 00:01:35,095 line:-1
that can help you create USDZ content.


24
00:01:37.965 --> 00:01:40.167 line:-1 align:center
USDZ Tools is a package


25
00:01:40.200 --> 00:01:43.971 line:-2 align:center
that contains essential
command line USD Python tools


26
00:01:44,004 --> 00:01:50,477 line:-2
to help you generate,
validate, and inspect USDZ files.


27
00:01:50,511 --> 00:01:55,182 line:-2
The package also includes a converter
called usdzconvert


28
00:01:55,215 --> 00:02:00,053 line:-2
that creates USDZ files
from other major 3D file formats.


29
00:02:01.121 --> 00:02:07.227 line:-2 align:center
The Python scripts give you powerful tools
for automation and batch processing.


30
00:02:07.261 --> 00:02:11.698 line:-2 align:center
Also, they are a great way
for you to explore USD and learn


31
00:02:11.732 --> 00:02:13.333 line:-1 align:center
how to use the API.


32
00:02:14,268 --> 00:02:19,673 line:-2
This year, we're bringing you
Python 3 and Apple Silicon support.


33
00:02:19,706 --> 00:02:23,977 line:-2
We've also upgraded the USD version
to give you simple access


34
00:02:24,011 --> 00:02:27,681 line:-2
to new USD features
and performance improvements.


35
00:02:30.117 --> 00:02:35.055 line:-2 align:center
On top of that, we added
great new features to usdzconvert.


36
00:02:35.088 --> 00:02:39.826 line:-2 align:center
You can now convert OBJ files
with materials to USDZ


37
00:02:39.860 --> 00:02:44.298 line:-1 align:center
with the useObjMtl flag.


38
00:02:44,331 --> 00:02:50,304 line:-2
We also added support
for points and lines from GLTF files,


39
00:02:50.337 --> 00:02:55.776 line:-2 align:center
and scene time
for animations from FBX files.


40
00:02:55,809 --> 00:03:01,882 line:-2
To display all usdzconvert options
and ways to customize your conversion,


41
00:03:01.915 --> 00:03:06.320 line:-2 align:center
just type "usdzconvert --help"
on the terminal.


42
00:03:08,388 --> 00:03:13,193 line:-2
This will show you all the options
you can use with usdzconvert,


43
00:03:13.227 --> 00:03:14.394 line:-1 align:center
such as adding copyright information


44
00:03:16.897 --> 00:03:23.103 line:-2 align:center
or providing the diffuseColor
or normalMap for your 3D model,


45
00:03:23,136 --> 00:03:25,272 line:-1
and much more.


46
00:03:25,305 --> 00:03:28,475 line:-2
Alternatively, if you prefer a UI editor
for your workflow


47
00:03:29,910 --> 00:03:32,145 line:-1
over using the command line,


48
00:03:32,179 --> 00:03:38,652 line:-2
we also have Reality Converter,
which is built using the USDZ tools


49
00:03:38,685 --> 00:03:43,390 line:-2
and provides the same capabilities
as usdzconvert,


50
00:03:43.423 --> 00:03:46.293 line:-1 align:center
but in an editor window,


51
00:03:46,326 --> 00:03:52,633 line:-2
making it easy to convert, view,
and customize USD content on MacOS.


52
00:03:53.634 --> 00:03:56.637 line:-1 align:center
Simply import common 3D file formats,


53
00:03:56,670 --> 00:04:00,841 line:-1
such as OBJ, GLTF, and FBX,


54
00:04:00,874 --> 00:04:05,245 line:-1
to view the converted USDZ result.


55
00:04:05.279 --> 00:04:09.983 line:-2 align:center
This year, we've also improved the UI
to streamline your workflow.


56
00:04:10,817 --> 00:04:14,221 line:-2
You can select the texture to view
more information...


57
00:04:19.760 --> 00:04:23.564 line:-2 align:center
Customize material properties
with your own textures...


58
00:04:31,939 --> 00:04:35,509 line:-1
Add copyright or edit file metadata...


59
00:04:41.915 --> 00:04:47.454 line:-2 align:center
And choose classic or new lighting,
which we'll get into more details


60
00:04:47.487 --> 00:04:48.856 line:-1 align:center
later in the session.


61
00:04:50.791 --> 00:04:54.127 line:-2 align:center
You can even preview
your USDZ object


62
00:04:54,161 --> 00:04:59,166 line:-2
under a variety of lighting conditions
with built-in options


63
00:04:59.199 --> 00:05:00.501 line:-1 align:center
and adjust exposure accordingly


64
00:05:02,870 --> 00:05:06,206 line:-1
On the asset side, we added a new feature


65
00:05:06,240 --> 00:05:12,045 line:-2
to let you choose texture quality
while exporting a USDZ file.


66
00:05:12,079 --> 00:05:17,818 line:-2
By default, the textures are exported
in their original, uncompressed size.


67
00:05:17,851 --> 00:05:22,956 line:-2
But, if you prefer to reduce the size
of your USDZ files, you now have


68
00:05:22.990 --> 00:05:26.927 line:-2 align:center
the option to compress textures
to the JPEG format.


69
00:05:29,096 --> 00:05:31,832 line:-2
In this example, we used object capture
to scan this chess piece


70
00:05:33.667 --> 00:05:35.702 line:-1 align:center
in high resolution.


71
00:05:35,736 --> 00:05:40,073 line:-2
In order to reduce the file size
without losing mesh detail,


72
00:05:40.107 --> 00:05:46.180 line:-2 align:center
we used RealityConverter to export
the model with compressed textures.


73
00:05:46,213 --> 00:05:49,416 line:-2
The visual difference
is hardly noticeable,


74
00:05:49.449 --> 00:05:54.354 line:-2 align:center
and we got a whopping 80% reduction
in the resulting file size!


75
00:05:56,290 --> 00:05:58,458 line:-1
Here is more exciting news:


76
00:05:58,492 --> 00:06:04,164 line:-2
RealityConverter can now fix issues
with your USD assets automatically!


77
00:06:04,198 --> 00:06:09,870 line:-2
It will correct mismatched attributes
and connection types,


78
00:06:09,903 --> 00:06:15,976 line:-2
fix a stage with multiple top-level prims
and a missing default prim,


79
00:06:16,009 --> 00:06:22,683 line:-2
update deprecated attributes,
and add missing stage metadata.


80
00:06:22.716 --> 00:06:29.189 line:-2 align:center
We've also added universal binary support
so now it runs natively on Apple Silicon.


81
00:06:30.924 --> 00:06:34.561 line:-2 align:center
Now, what if you want to create
3D models from scratch?


82
00:06:35.963 --> 00:06:41.969 line:-2 align:center
Last year, we launched Object Capture
as a RealityKit API on macOS,


83
00:06:42,002 --> 00:06:47,307 line:-2
which provides an innovative way
to create USDZ assets.


84
00:06:47,341 --> 00:06:52,713 line:-2
You can then use Reality Composer
to compose a scene with multiple assets.


85
00:06:52.746 --> 00:06:56.884 line:-2 align:center
This year, we are bringing you
RoomPlan API,


86
00:06:56.917 --> 00:07:00.921 line:-2 align:center
which lets you create parametric 3D scans
of your room.


87
00:07:01,889 --> 00:07:05,826 align:center
I highly recommend you
to check out these 3 sessions.


88
00:07:05,859 --> 00:07:10,097 line:1
Together, these technologies make it
easier than ever


89
00:07:10,130 --> 00:07:13,867 align:center
for anyone to create
immersive AR experiences.


90
00:07:14,601 --> 00:07:16,537 line:-1
All these tools we covered today


91
00:07:16,570 --> 00:07:19,706 line:-2
are available for you to download
right now


92
00:07:19,740 --> 00:07:24,511 line:-2
on our AR Creation Tools
page on the Apple developer website.


93
00:07:24.545 --> 00:07:26.346 line:-1 align:center
Please check them out!


94
00:07:26,914 --> 00:07:31,718 line:-2
Next, let's take a look+
at AR Quick Look's new lighting.


95
00:07:32,586 --> 00:07:38,158 line:-2
AR Quick Look is the built-in,
system-wide AR viewer on iOS


96
00:07:38.192 --> 00:07:43.697 line:-2 align:center
which enables you to place 3D USDZ objects
in your physical space,


97
00:07:43.730 --> 00:07:47.134 line:-1 align:center
like on a table, a wall, or a floor,


98
00:07:47,167 --> 00:07:51,972 line:-2
and interact with them
with simple touch gestures.


99
00:07:52,005 --> 00:07:56,109 line:-2
You can even make interactive scenes
built with Reality Composer


100
00:07:56,143 --> 00:07:58,812 line:-1
and save them to a USDZ file


101
00:07:58.846 --> 00:08:05.052 line:-2 align:center
which you can share with others
on iMessage, Mail, Notes, and more.


102
00:08:05.085 --> 00:08:09.489 line:-1 align:center
We constantly strive to make AR Quick Look


103
00:08:09.523 --> 00:08:13.393 line:-1 align:center
rendering more realistic, and this year,


104
00:08:13,427 --> 00:08:18,065 line:-2
we are introducing improved lighting
in AR Quick Look,


105
00:08:18.098 --> 00:08:23.770 line:-2 align:center
which is brighter, with enhanced contrast
and improved shape definition


106
00:08:23.804 --> 00:08:26.206 line:-1 align:center
to make your assets look even better.


107
00:08:27.407 --> 00:08:31.044 line:-2 align:center
Here is an example of AirPods Pro
in object mode


108
00:08:31.078 --> 00:08:33.580 line:-1 align:center
with classic and new lighting.


109
00:08:33.614 --> 00:08:37.518 line:-2 align:center
The AirPods Pro look great
in both lighting conditions,


110
00:08:37.551 --> 00:08:40.320 line:-2 align:center
and you will notice
the new lighting option


111
00:08:40.354 --> 00:08:42.422 line:-1 align:center
offers brighter color,


112
00:08:42,456 --> 00:08:45,425 line:-1
higher contrast, and more highlights.


113
00:08:47,895 --> 00:08:52,599 line:-2
Now let's place the AirPods Max
on the desk to view it in AR mode


114
00:08:52.633 --> 00:08:53.700 line:-1 align:center
with new lighting!


115
00:08:54.668 --> 00:08:56.937 line:-1 align:center
Stunning, isn't it?


116
00:08:57.938 --> 00:09:02.476 line:-2 align:center
So how do you apply
the new lighting to your assets?


117
00:09:02.509 --> 00:09:04.278 line:-1 align:center
It's really simple.


118
00:09:04,311 --> 00:09:08,949 line:-2
You just have to pick the lighting
that works best for your content


119
00:09:08,982 --> 00:09:14,521 line:-2
by setting the new preferredIblVersion
metadata in your USDZ file.


120
00:09:15.956 --> 00:09:19.960 line:-2 align:center
Here we have set the value
of the preferredIblVersion to 2,


121
00:09:19.993 --> 00:09:23.797 line:-2 align:center
which will indicate AR Quick Look
to use the new lighting system.


122
00:09:24.998 --> 00:09:28.936 line:-1 align:center
Let's understand this in more detail.


123
00:09:28,969 --> 00:09:31,405 line:0
The preferredIBLVersion metadata


124
00:09:31,438 --> 00:09:34,274 align:center
can hold values of 0,1, and 2.


125
00:09:36,143 --> 00:09:38,645 align:center
An asset with preferredIblVersion set to 0


126
00:09:38,679 --> 00:09:42,049 align:center
will use the system default lighting.


127
00:09:43,016 --> 00:09:46,787 align:center
If set to 1, it will continue
to use the classic lighting.


128
00:09:48,255 --> 00:09:51,058 align:center
A value of 2
will give you the new lighting.


129
00:09:52,059 --> 00:09:56,797 align:center
This means you can easily update
your current assets to the new lighting


130
00:09:56,830 --> 00:09:57,664 line:1
as well!


131
00:09:58,198 --> 00:10:02,970 line:-2
We recommend that you make
an explicit choice and set this metadata


132
00:10:03.003 --> 00:10:05.339 line:-1 align:center
in all of your assets.


133
00:10:05.372 --> 00:10:07.608 line:-1 align:center
To do that, you can either use


134
00:10:07.641 --> 00:10:12.546 line:-2 align:center
usdzconvert
with the flag preferrediblversion.


135
00:10:12,579 --> 00:10:15,849 line:-2
For example,
here is how to use the flag to convert


136
00:10:15.883 --> 00:10:20.087 line:-2 align:center
the fire hydrant OBJ file
to USDZ with the new lighting.


137
00:10:20.921 --> 00:10:24.625 line:-1 align:center
Or you can use Reality Converter,


138
00:10:24.658 --> 00:10:27.194 line:-2 align:center
which will now use
the new lighting by default.


139
00:10:28.161 --> 00:10:31.465 line:-2 align:center
But if you want
to use the classic lighting,


140
00:10:31,498 --> 00:10:34,201 line:-2
there is a new option
in the Property Panel.


141
00:10:35,836 --> 00:10:40,774 line:-2
Here we preview the AirPods Max asset
with both the classic and new lighting.


142
00:10:42.242 --> 00:10:45.546 line:-2 align:center
This provides an easy way
to compare the differences.


143
00:10:47.247 --> 00:10:50.250 line:-2 align:center
By clicking the lighting icon,
the applied lighting


144
00:10:50.284 --> 00:10:52.986 line:-2 align:center
will also be highlighted
for your reference.


145
00:10:54.821 --> 00:10:59.159 line:-1 align:center
Lastly, for assets without this metadata,


146
00:10:59.193 --> 00:11:02.729 line:-2 align:center
AR Quick Look will determine
the lighting version automatically


147
00:11:02.763 --> 00:11:05.566 line:-1 align:center
based on the file's date-time stamp.


148
00:11:06.900 --> 00:11:13.507 line:-2 align:center
If the asset was created after July 1st,
2022, it will use the new lighting.


149
00:11:14.808 --> 00:11:18.345 line:-2 align:center
Older assets will continue
to use the classic lighting


150
00:11:18,378 --> 00:11:20,113 line:-1
so they don't change how they look.


151
00:11:21.148 --> 00:11:24.718 line:-2 align:center
Now, I'll hand it over to Alex
for USD rendering.


152
00:11:24.751 --> 00:11:26.053 line:-1 align:center
Thanks, Stella.


153
00:11:26.086 --> 00:11:29.022 line:-2 align:center
We've already seen a lot
of rendered USD assets today.


154
00:11:29.056 --> 00:11:33.460 line:-2 align:center
Now we'll explore what makes USD rendering
and Hydra a great choice


155
00:11:33.493 --> 00:11:35.495 line:-1 align:center
for your 3D content creation pipeline


156
00:11:35,529 --> 00:11:38,298 line:-2
and how you can integrate it
in your own applications.


157
00:11:39,399 --> 00:11:43,303 line:-2
First, let's take a step back
and talk about rendering in general.


158
00:11:44,371 --> 00:11:51,011 line:-2
A renderer takes a collection
of 3D models, cameras, and lights as input


159
00:11:51.044 --> 00:11:53.847 line:-1 align:center
and uses them to generate an image.


160
00:11:53.881 --> 00:11:56.416 line:-2 align:center
There are many different renderers,
and each one of them


161
00:11:56.450 --> 00:12:00.254 line:-2 align:center
is built for a specific purpose
and optimized for a different use case.


162
00:12:01.321 --> 00:12:04.324 line:-2 align:center
Some renderers are designed
for real-time applications


163
00:12:04,358 --> 00:12:07,794 line:-2
like rendering a character
in a game or an AR scene.


164
00:12:08,662 --> 00:12:12,966 line:-2
Others take much longer but produce
a more photorealistic image,


165
00:12:13.000 --> 00:12:16.537 line:-2 align:center
for example, producing visual effects
for a Hollywood movie.


166
00:12:17.804 --> 00:12:21.208 line:-2 align:center
All renderers make choices
about their features and are unique.


167
00:12:22.276 --> 00:12:24.678 line:-2 align:center
Different USD renderers
for different use cases


168
00:12:24.711 --> 00:12:26.713 line:-1 align:center
also exist on Apple platforms.


169
00:12:27,414 --> 00:12:30,117 line:-2
We're adding documentation
about these different renderers


170
00:12:30,150 --> 00:12:31,985 line:-1
to developer.apple.com.


171
00:12:32,953 --> 00:12:36,223 line:-2
It will help you understand
the differences between them,


172
00:12:36,256 --> 00:12:39,126 line:-2
explain which USD features
they support,


173
00:12:39.159 --> 00:12:43.230 line:-2 align:center
and provide guidance on how to author USDs
that work best for you.


174
00:12:44.364 --> 00:12:48.168 line:-2 align:center
One of the renderers on Apple platforms
is RealityKit,


175
00:12:48,202 --> 00:12:51,171 line:-2
which features
a photorealistic rendering system,


176
00:12:51.205 --> 00:12:55.008 line:-2 align:center
optimized for interactive augmented
reality experiences,


177
00:12:55.042 --> 00:12:57.110 line:-1 align:center
and is used in AR Quick Look.


178
00:12:57,144 --> 00:12:59,880 line:-1
It is the primary renderer of USDZ files.


179
00:13:00.814 --> 00:13:07.588 line:-2 align:center
Another option for USD rendering on macOS
is Pixar's open-source renderer, Storm.


180
00:13:07.621 --> 00:13:10.190 line:-2 align:center
It is optimized
for production-grade assets


181
00:13:10,224 --> 00:13:13,627 line:-2
and designed for real-time preview
of large-scale scenes.


182
00:13:14,661 --> 00:13:18,699 line:-2
It's a great technology for you
to visualize and iterate on assets


183
00:13:18,732 --> 00:13:21,435 line:-2
as they flow
through your content creation pipeline.


184
00:13:22.402 --> 00:13:25.005 line:-1 align:center
Storm uses a technology called Hydra.


185
00:13:25,939 --> 00:13:30,978 line:-2
Hydra is a core aspect
of the USD open source project.


186
00:13:31.011 --> 00:13:34.815 line:-2 align:center
So next, let's understand Hydra
and its connection to Storm.


187
00:13:35,649 --> 00:13:38,519 line:-1
We start with this diagram from earlier.


188
00:13:38,552 --> 00:13:40,988 line:-1
Here, we use Storm as the renderer.


189
00:13:42.189 --> 00:13:46.527 line:-2 align:center
The input is usually called
"the scene graph,"


190
00:13:46.560 --> 00:13:49.162 line:-1 align:center
and Storm produces a preview render of it.


191
00:13:50,364 --> 00:13:55,068 line:-2
But what if you want to generate
a photorealistic image of the same scene


192
00:13:55,102 --> 00:13:56,537 line:-1
using a different renderer?


193
00:13:57,538 --> 00:14:00,307 line:-1
That's exactly what Hydra is made for.


194
00:14:00.340 --> 00:14:03.944 line:-2 align:center
Instead of tightly coupling
the scene to the renderer,


195
00:14:03,977 --> 00:14:07,714 line:-2
Hydra acts as an abstract layer
in between them


196
00:14:07,748 --> 00:14:10,551 line:-2
to transport data from scenes
to renderers.


197
00:14:11,752 --> 00:14:14,488 line:-2
This allows you to easily swap out
your renderer


198
00:14:14,521 --> 00:14:19,393 line:-2
based on your needs at any time
without any changes to your scene graph.


199
00:14:19.426 --> 00:14:23.297 line:-2 align:center
For example, you might use Storm
and Pixar's RenderMan.


200
00:14:24,431 --> 00:14:28,235 line:-2
In your content creation pipeline,
you can use Storm for fast renders


201
00:14:28.268 --> 00:14:29.736 line:-1 align:center
and quick iteration,


202
00:14:29.770 --> 00:14:32.039 line:-1 align:center
and then switch to RenderMan


203
00:14:32.072 --> 00:14:34.208 line:-2 align:center
to produce
the final image when you're ready.


204
00:14:35,142 --> 00:14:38,212 line:-1
The same goes for the scene graph.


205
00:14:38,245 --> 00:14:42,916 line:-2
Your input to Hydra can be
a USD scene graph or a different one.


206
00:14:43,951 --> 00:14:48,288 line:-2
This allows you to leverage
the same renderer in multiple applications


207
00:14:48,322 --> 00:14:53,627 line:-2
even if each one of them has their own,
totally different scene graph.


208
00:14:53.660 --> 00:14:57.731 line:-2 align:center
The interfaces which connect
Hydra with scene graphs and renderers


209
00:14:57,764 --> 00:14:59,900 line:-1
are called delegates.


210
00:14:59.933 --> 00:15:04.137 line:-2 align:center
Scene graphs are connected
to Hydra via Scene Delegates,


211
00:15:04.171 --> 00:15:07.875 line:-2 align:center
and Renderers are connected
to Hydra via Render Delegates.


212
00:15:08.542 --> 00:15:10.477 line:-1 align:center
And that is Hydra for you!


213
00:15:11.245 --> 00:15:15.816 line:-2 align:center
Foundry's Nuke 13 is already
using Hydra to render the viewport,


214
00:15:15,849 --> 00:15:19,486 line:-2
enabling Nuke artists on macOS
to have better quality


215
00:15:19,520 --> 00:15:22,589 line:-2
and an interactive experience
in Nuke's 3D system.


216
00:15:23,657 --> 00:15:27,060 line:-2
This is achieved by using
Hydra with a custom scene delegate


217
00:15:27,094 --> 00:15:28,862 line:-1
and Metal-accelerated Storm.


218
00:15:30.063 --> 00:15:33.767 line:-2 align:center
We are excited to share that
we've worked with Pixar Animation Studios


219
00:15:33,800 --> 00:15:38,972 line:-2
to publicly release Metal
accelerated Storm to open source.


220
00:15:39,006 --> 00:15:42,442 line:-1
It is ready for you to use in USD 22.05.


221
00:15:43,243 --> 00:15:45,579 line:-1
Now that we've seen the power of Hydra,


222
00:15:45.612 --> 00:15:47.781 line:-2 align:center
let's go through
a Hydra sample application


223
00:15:47,814 --> 00:15:51,051 line:-2
with the typical use case
of a USD scene graph


224
00:15:51,084 --> 00:15:53,487 line:-1
and Storm as renderer.


225
00:15:53.520 --> 00:15:57.291 line:-2 align:center
It will get you started with using Hydra
to build content creation tools


226
00:15:57,324 --> 00:15:59,560 line:-1
and 3D workflow applications.


227
00:16:00.427 --> 00:16:05.899 line:-2 align:center
Our sample application, HydraPlayer,
is very simple but powerful.


228
00:16:05,933 --> 00:16:10,771 line:-2
It renders a USD file with Storm
and lets us move the camera around it.


229
00:16:12.172 --> 00:16:14.241 line:-1 align:center
And we're excited to make HydraPlayer


230
00:16:14,274 --> 00:16:18,378 line:-2
a public sample project
to get you started right away!


231
00:16:18.412 --> 00:16:21.315 line:-2 align:center
It is available in the session resources
and comes


232
00:16:21,348 --> 00:16:23,183 line:-1
with full instructions in the readme.


233
00:16:24,384 --> 00:16:27,221 line:-1
I encourage you to pause this video now,


234
00:16:27,254 --> 00:16:31,058 line:-2
download the project, and then follow
along as we walk through it.


235
00:16:32,326 --> 00:16:35,896 line:-2
In your Xcode project,
you will find 4 classes:


236
00:16:35,929 --> 00:16:41,068 line:-2
The AppDelegate, Camera,
Renderer, and View Controller.


237
00:16:41.101 --> 00:16:44.071 line:-2 align:center
The AppDelegate is basically
your root object


238
00:16:44,104 --> 00:16:46,273 line:-1
and manages interactions with the system.


239
00:16:47.040 --> 00:16:49.776 line:-2 align:center
The camera class is
a simple representation


240
00:16:49,810 --> 00:16:51,545 line:-1
of the USD scene camera


241
00:16:51.578 --> 00:16:53.947 line:-2 align:center
to make it easy
to translate the user input.


242
00:16:54.882 --> 00:16:58.886 line:-2 align:center
The renderer class will handle
all our interactions with USD and Hydra.


243
00:16:59,920 --> 00:17:04,124 line:-2
Last but not least,
the ViewController handles our user input.


244
00:17:05,092 --> 00:17:08,795 line:-2
Before we can build and launch
HydraPlayer, there are three things to do:


245
00:17:09.897 --> 00:17:14.434 line:-2 align:center
prepare the environment, use Rosetta
on Apple Silicon Macs,


246
00:17:14.468 --> 00:17:16.870 line:-1 align:center
and download and build USD & Hydra.


247
00:17:16,904 --> 00:17:18,372 line:-1
So let's get started.


248
00:17:20,007 --> 00:17:23,010 line:-2
First, we prepare
our development environment.


249
00:17:23,043 --> 00:17:27,247 line:-2
Make sure you have Xcode,
Python, and CMake installed.


250
00:17:29.716 --> 00:17:32.553 line:-2 align:center
Now let's open up a terminal
for the other two steps.


251
00:17:34.087 --> 00:17:38.292 line:-2 align:center
If you are on an Apple Silicon Mac,
you need to run under Rosetta


252
00:17:38,325 --> 00:17:42,496 line:-2
while USD is transitioning
to fully support arm64.


253
00:17:42.529 --> 00:17:45.065 line:-1 align:center
To do this, use the arch command.


254
00:17:46,600 --> 00:17:49,937 line:-2
Once your environment is ready,
we have to download the USD


255
00:17:49.970 --> 00:17:52.005 line:-1 align:center
and Hydra source code.


256
00:17:52,039 --> 00:17:57,110 line:-2
Both live in the same GitHub repository
at PixarAnimationStudios/USD.


257
00:17:57,978 --> 00:18:01,148 line:-2
Now that we have the code,
we can build it.


258
00:18:01,181 --> 00:18:04,818 line:-2
USD comes
with a convenient Python build script.


259
00:18:04.852 --> 00:18:09.323 line:-2 align:center
We add the flags "generator Xcode"
and "no-python"


260
00:18:09.356 --> 00:18:12.226 line:-2 align:center
and specify
where we want to install USD to.


261
00:18:13.160 --> 00:18:16.997 line:-2 align:center
Let's put it next to the source code
at "USDInstall."


262
00:18:17,030 --> 00:18:21,201 line:-2
Once USD finished building,
we are ready to build HydraPlayer!


263
00:18:22.169 --> 00:18:26.507 line:-2 align:center
Let's go back to this diagram
one more time and use it to identify


264
00:18:26.540 --> 00:18:29.443 line:-2 align:center
key parts of HydraPlayer
to check out in detail.


265
00:18:30.344 --> 00:18:36.183 line:-2 align:center
We'll look at how to load the 3D models,
how to set up the camera,


266
00:18:36,216 --> 00:18:38,552 line:-1
and set the scene light.


267
00:18:38.585 --> 00:18:42.389 line:-2 align:center
Then we'll learn how to get
our scene graph to Storm


268
00:18:42,422 --> 00:18:46,126 line:-2
and finally, how to produce
an image for the application window.


269
00:18:47.160 --> 00:18:50.964 line:-2 align:center
So let's get started with loading
our 3D models from USD.


270
00:18:50.998 --> 00:18:56.170 line:-2 align:center
In viewDidAppear in our ViewController,
we create a file picker


271
00:18:56.203 --> 00:18:59.806 line:-2 align:center
with an NSOpenPanel
when the view appears the first time.


272
00:19:01.875 --> 00:19:04.645 line:-2 align:center
Once a file has been selected,
the renderer


273
00:19:04,678 --> 00:19:07,981 line:-2
can start setting up our scene
and load the USD file.


274
00:19:09,049 --> 00:19:12,786 line:-2
Loading the file is very simple
with the USD API.


275
00:19:12,819 --> 00:19:15,956 line:-2
We simply open
the USD stage at the file path.


276
00:19:17,824 --> 00:19:19,793 line:-2
That's it.
We have our file loaded.


277
00:19:20,961 --> 00:19:26,466 line:-2
Next, we set up our camera.
In our code, this is straightforward.


278
00:19:26.500 --> 00:19:30.237 line:-2 align:center
In setupCamera,
we first create a new scene camera.


279
00:19:31.738 --> 00:19:36.543 line:-2 align:center
Then we calculate the world size
and center based on our scene.


280
00:19:37.377 --> 00:19:43.550 line:-2 align:center
Next, move our camera at a good distance
and then focus on the center.


281
00:19:43.584 --> 00:19:46.787 line:-2 align:center
This way, our camera
captures the whole scene.


282
00:19:47,988 --> 00:19:50,324 line:-1
Great, now we have our camera set up.


283
00:19:50,357 --> 00:19:54,061 line:-1
Next, lighting.


284
00:19:54.094 --> 00:19:59.266 line:-2 align:center
We keep it easy and create
one simple ambient light


285
00:19:59.299 --> 00:20:03.971 line:-2 align:center
and set its position to match
the camera, and that's it.


286
00:20:04,004 --> 00:20:09,910 line:-2
And with that, we have our full scene
with 3D models, a camera and a light!


287
00:20:09,943 --> 00:20:13,947 line:-1
We can now pass our scene to Storm.


288
00:20:13.981 --> 00:20:17.951 line:-2 align:center
First, we need to initialize
our render engine.


289
00:20:17.985 --> 00:20:24.892 line:-2 align:center
Here, we create a new UsdImagingGLEngine,
which is the class name of Storm.


290
00:20:24,925 --> 00:20:28,762 line:-2
The most important parameter here
is the rootPath.


291
00:20:28,795 --> 00:20:33,100 line:-2
It points the engine to our USD stage
with our 3D models.


292
00:20:33,133 --> 00:20:37,171 line:-2
To learn more about the other parameters
and UsdImagingGLEngine,


293
00:20:37.204 --> 00:20:40.440 line:-2 align:center
please check out
Pixar's USD API documentation.


294
00:20:41.575 --> 00:20:45.779 line:-2 align:center
Next, we set our camera
in our engine


295
00:20:45,812 --> 00:20:48,849 line:-1
and set our lighting setup.


296
00:20:48,882 --> 00:20:53,053 line:-2
And last but not least,
we define how we want Storm to render


297
00:20:53,086 --> 00:20:55,155 line:-1
by setting render parameters.


298
00:20:55.856 --> 00:20:59.126 line:-2 align:center
For example,
we want to render a transparent background


299
00:20:59.159 --> 00:21:03.030 line:-2 align:center
so that the rendered image
works nicely with our app color scheme.


300
00:21:03,730 --> 00:21:05,966 line:-1
Important for scenes with animation,


301
00:21:05.999 --> 00:21:08.535 line:-2 align:center
this is also where we specify
the time code.


302
00:21:10.337 --> 00:21:12.472 line:-1 align:center
Now we're ready to render an image!


303
00:21:13,740 --> 00:21:16,510 line:-2
We've already done all the
necessary setup,


304
00:21:16,543 --> 00:21:19,813 line:-2
so the render command is
just one line of code.


305
00:21:20.614 --> 00:21:26.086 line:-2 align:center
We get the result and display it
in our window, and there we are!


306
00:21:26,119 --> 00:21:28,689 line:-1
We're rendering the USD toy plane!


307
00:21:28,722 --> 00:21:31,825 line:-2
And actually,
we're rendering not just one plane.


308
00:21:31,859 --> 00:21:35,929 line:-2
HydraPlayer can easily render
thousands of animated assets


309
00:21:35,963 --> 00:21:37,998 line:-1
with tens of millions of triangles.


310
00:21:39,166 --> 00:21:42,636 line:-2
If you haven't already,
check out the resources for this session,


311
00:21:42.669 --> 00:21:45.806 line:-2 align:center
download the sample project,
and have fun exploring it further.


312
00:21:47.074 --> 00:21:50.511 line:-2 align:center
Together we explored updates
to Apple's USD tools


313
00:21:50.544 --> 00:21:54.581 line:-2 align:center
that make them more powerful and make
your assets look even better.


314
00:21:54,615 --> 00:21:56,717 line:-1
We learned about Hydra's features


315
00:21:56,750 --> 00:21:59,820 line:-2
and went
through the HydraPlayer sample project


316
00:21:59,853 --> 00:22:03,223 line:-2
to see how you can integrate it
into your own applications.


317
00:22:04.525 --> 00:22:08.128 line:-2 align:center
To find out more
about important concepts of USD,


318
00:22:08.161 --> 00:22:11.698 line:-2 align:center
check out the session
"Understand USD fundamentals.


319
00:22:12.866 --> 00:22:14.468 line:-1 align:center
Thank you.


320
00:22:14.501 --> 00:22:16.436 line:-1 align:center
♪ ♪

