2
00:00:00.501 --> 00:00:06.507 line:-1 align:center
♪ instrumental hip hop music ♪


3
00:00:09.309 --> 00:00:14.214 line:-2 align:center
- Welcome to
"What's New in UIKit" in iOS 16.


4
00:00:14,248 --> 00:00:18,785 line:-2
I'm Dima, and I'm an engineering
manager on the UIKit team.


5
00:00:19.586 --> 00:00:23.757 line:-2 align:center
UIKit is the powerful framework
at the core of your apps.


6
00:00:23,790 --> 00:00:28,529 line:-2
It has been updated to support
new features in iOS 16.


7
00:00:29.663 --> 00:00:35.636 line:-2 align:center
In this video, I will cover
UI improvements for productivity,


8
00:00:35.669 --> 00:00:37.838 line:-1 align:center
Control enhancements,


9
00:00:37.871 --> 00:00:40.374 line:-1 align:center
API refinements,


10
00:00:40,407 --> 00:00:43,644 line:-1
and I will talk about exciting new ways


11
00:00:43,677 --> 00:00:48,048 line:-1
to use UIKit and SwiftUI together.


12
00:00:50,684 --> 00:00:57,124 line:-2
We made it even easier in UIKit to develop
streamlined, discoverable user interfaces


13
00:00:57.157 --> 00:01:01.395 line:-2 align:center
with improved navigation bars
that feature a new title menu,


14
00:01:01,428 --> 00:01:05,265 line:-2
find and replace,
and reimagined editing interactions


15
00:01:05,299 --> 00:01:07,134 line:-1
for cut, copy, and paste.


16
00:01:07.167 --> 00:01:10.704 line:-2 align:center
You will be able to enhance
your document-based applications.


17
00:01:11,405 --> 00:01:15,809 line:-2
I'll start by taking a closer look
at navigation bars,


18
00:01:15,843 --> 00:01:20,113 line:-2
updated to support desktop class
toolbar capabilities.


19
00:01:22,416 --> 00:01:28,055 line:-2
In iOS 16, UIKit introduces
two new navigation styles


20
00:01:28,088 --> 00:01:31,291 line:-2
to better support the needs
of document based apps:


21
00:01:31,325 --> 00:01:34,494 line:-1
browser and editor.


22
00:01:35.729 --> 00:01:41.335 line:-2 align:center
The browser style is designed for apps
that use history or folder structure


23
00:01:41.368 --> 00:01:45.539 line:-2 align:center
for navigation,
like web and document browsers.


24
00:01:47,040 --> 00:01:53,280 align:center
The editor is intended for interfaces
centered around editing documents.


25
00:01:55,148 --> 00:02:00,721 line:-2
in iOS 16, you can add a variety
of bar button items to your app,


26
00:02:00.754 --> 00:02:06.059 line:-2 align:center
a subset of which will be displayed
in the center of the navigation bar.


27
00:02:07.294 --> 00:02:10.998 line:-2 align:center
By tapping the "customize toolbar" entry
in the menu,


28
00:02:11.031 --> 00:02:16.436 line:-2 align:center
items can be rearranged
by dragging to and from the items popup.


29
00:02:17,871 --> 00:02:22,409 line:-2
The resulting new configuration
persists across app launch.


30
00:02:25,312 --> 00:02:28,615 align:center
To accommodate a size change,
for example,


31
00:02:28,649 --> 00:02:32,519 line:0
when entering side-by-side mode
with another app,


32
00:02:32,553 --> 00:02:36,857 align:center
the system automatically provides
an overflow menu


33
00:02:36,890 --> 00:02:40,794 align:center
to access any items that don't fit.


34
00:02:42,796 --> 00:02:47,467 line:0
We have added a title menu that works
with the new navigation styles


35
00:02:47,501 --> 00:02:50,704 line:0
and supports a few standard functions:


36
00:02:50,737 --> 00:02:54,007 line:0
duplicate, move, rename,


37
00:02:54,041 --> 00:02:56,844 align:center
export, and print.


38
00:02:57.711 --> 00:03:00.981 line:-2 align:center
These are displayed in the menu
automatically


39
00:03:01,014 --> 00:03:05,185 line:-2
when the corresponding delegate methods
are implemented.


40
00:03:05,219 --> 00:03:10,624 line:0
It's also possible to add
completely custom items to the title menu.


41
00:03:15,028 --> 00:03:18,832 line:-2
Additionally,
apps built with Mac Catalyst


42
00:03:18,866 --> 00:03:21,869 line:-2
take advantage
of the improved navigation bars


43
00:03:21.902 --> 00:03:25.005 line:-1 align:center
by seamlessly integrating with NSToolbar


44
00:03:25.038 --> 00:03:28.108 line:-1 align:center
with no additional code required.


45
00:03:29.309 --> 00:03:34.214 line:-2 align:center
iOS 16 introduces
new ways to manipulate text


46
00:03:34.248 --> 00:03:37.384 line:-1 align:center
consistently across various apps.


47
00:03:37.417 --> 00:03:41.588 line:-1 align:center
The first one is the new find and replace.


48
00:03:41,622 --> 00:03:46,760 line:-2
Conceptually, it is different
from the more high-level in-app search


49
00:03:46,793 --> 00:03:52,966 line:-2
that operates on data model objects
such as photos or calendar events.


50
00:03:53.000 --> 00:03:58.705 line:-2 align:center
Instead, find and replace
is purposefully built to work with text.


51
00:03:58.739 --> 00:04:02.409 line:-2 align:center
It only takes setting a flag
to activate the feature


52
00:04:02.442 --> 00:04:08.448 line:-2 align:center
for built-in UIKit views
such as UITextView and WKWebView.


53
00:04:09.650 --> 00:04:14.254 line:-2 align:center
Additionally, it seamlessly works
across multiple views and documents


54
00:04:14,288 --> 00:04:16,490 line:-1
that opted into this system.


55
00:04:17,891 --> 00:04:22,729 line:0
Next, the edit menu
has received a major upgrade.


56
00:04:22,763 --> 00:04:26,934 align:center
It now looks different depending
on the input method used.


57
00:04:26,967 --> 00:04:30,771 line:0
On touch interaction,
you get a redesigned menu


58
00:04:30,804 --> 00:04:33,373 align:center
that is more interactive.


59
00:04:35,209 --> 00:04:37,211 align:center
When using a pointer,


60
00:04:37,244 --> 00:04:41,081 align:center
you get a more full-featured context menu.


61
00:04:42,382 --> 00:04:46,420 line:0
To provide both of these experiences
in a seamless way,


62
00:04:46,453 --> 00:04:50,224 line:0
we've introduced UIEditMenuInteraction


63
00:04:50,257 --> 00:04:55,329 line:0
as a full replacement for
the now-deprecated UIMenuController.


64
00:04:56,496 --> 00:05:01,768 align:center
There is also new API
to insert actions into a text view's menu.


65
00:05:03,537 --> 00:05:06,673 line:0
Watch "Adopt desktop class
editing interactions"


66
00:05:06,707 --> 00:05:10,944 align:center
to learn all the details
on the new edit menu,


67
00:05:10,978 --> 00:05:15,015 line:0
and learn how to adopt find interaction
for custom views.


68
00:05:17,718 --> 00:05:21,188 line:-2
There is one visual UI update
I'd like to cover.


69
00:05:22.055 --> 00:05:26.026 line:-1 align:center
In iOS 16, the sidebar in slide over mode


70
00:05:26,059 --> 00:05:28,395 line:-1
automatically becomes vibrant


71
00:05:28.428 --> 00:05:31.298 line:-1 align:center
without any additional code.


72
00:05:31.331 --> 00:05:36.170 line:-2 align:center
To achieve this, UIKit manages a set
of private views on your behalf.


73
00:05:38,005 --> 00:05:41,575 line:0
Those are the new
productivity features in UIKit:


74
00:05:41,608 --> 00:05:44,811 align:center
the new customizable navigation bars,


75
00:05:44,845 --> 00:05:48,448 align:center
find and replace, editing interactions,


76
00:05:48,482 --> 00:05:52,119 line:0
as well as the powerful title menu.


77
00:05:52,152 --> 00:05:54,621 align:center
I am just scratching the surface here.


78
00:05:54,655 --> 00:05:59,293 line:0
To learn a lot more, check
the "Meet desktop class iPad" session,


79
00:05:59,326 --> 00:06:03,830 align:center
as well as a more in depth
"Build a desktop class iPad app,"


80
00:06:03,864 --> 00:06:07,134 line:0
where you'll be walked through
improving a sample app


81
00:06:07,167 --> 00:06:11,572 line:0
with new advanced
UIKit features in iOS 16.


82
00:06:13.106 --> 00:06:17.211 line:-2 align:center
Now I'm going to introduce
two new controls we've added


83
00:06:17,244 --> 00:06:21,782 line:-2
and discuss some enhancements
to UIPageControl.


84
00:06:22,983 --> 00:06:28,488 line:-2
The inline calendar style
of UIDatePicker is now available


85
00:06:28.522 --> 00:06:31.158 line:-1 align:center
as a standalone fully-featured component,


86
00:06:31,191 --> 00:06:34,628 line:-1
in the form of UICalendarView.


87
00:06:34.661 --> 00:06:39.533 line:-2 align:center
UICalendarView supports different types
of selection behaviors,


88
00:06:39.566 --> 00:06:41.535 line:-1 align:center
like optional single dates,


89
00:06:41.568 --> 00:06:44.972 line:-1 align:center
as well as selecting multiple dates.


90
00:06:45,005 --> 00:06:47,407 line:-1
On top of the available date range,


91
00:06:47.441 --> 00:06:52.513 line:-2 align:center
it also supports
disabling individual dates from selection.


92
00:06:53,647 --> 00:06:58,919 line:-2
Moreover, you can annotate
individual dates with decorations.


93
00:07:00.287 --> 00:07:03.657 line:-2 align:center
One major difference
between UICalendarView


94
00:07:03,690 --> 00:07:08,662 line:-2
and UIDatePicker is that
UICalendarView represents dates


95
00:07:08.695 --> 00:07:13.400 line:-2 align:center
as NSDateComponents,
rather than NSDate.


96
00:07:13.433 --> 00:07:16.937 line:-2 align:center
Unlike NSDate,
date components are a better,


97
00:07:16,970 --> 00:07:20,507 line:-2
and a more correct representation
of a date


98
00:07:20.541 --> 00:07:25.712 line:-2 align:center
whereas NSDate is a representation
of a point in time.


99
00:07:27,381 --> 00:07:31,151 line:-2
Because NSDateComponents
offer many flexibilities,


100
00:07:31,185 --> 00:07:33,220 line:-1
you should be very explicit


101
00:07:33,253 --> 00:07:37,591 line:-2
about which NSCalendar
the components are represented by.


102
00:07:38,692 --> 00:07:43,530 line:-2
Note that you should not make assumptions
about the type of the current calendar.


103
00:07:43,564 --> 00:07:45,966 line:-1
If you need the calendar to be Gregorian,


104
00:07:45.999 --> 00:07:50.137 line:-1 align:center
explicitly specify the Gregorian calendar.


105
00:07:53,040 --> 00:07:57,277 line:-2
To configure a Calendar view
like the one shown earlier,


106
00:07:57.311 --> 00:08:02.816 line:-2 align:center
first, create the Calendar view
and set its delegate.


107
00:08:02.850 --> 00:08:08.188 line:-2 align:center
To ensure that the Calendar is backed
by the Gregorian NSCalendar,


108
00:08:08.222 --> 00:08:11.625 line:-2 align:center
set the calendar property
on the calendarView


109
00:08:11,658 --> 00:08:14,528 line:-1
to a Gregorian NSCalendar.


110
00:08:15.829 --> 00:08:19.733 line:-2 align:center
Next, to configure
the multi-date selection.


111
00:08:19.766 --> 00:08:24.304 line:-2 align:center
Create
a UICalendarSelectionMultiDate object,


112
00:08:24.338 --> 00:08:26.473 line:-1 align:center
and set the selected dates property


113
00:08:26,507 --> 00:08:31,979 line:-2
on the selection object to existing dates
you have from your data model


114
00:08:32,012 --> 00:08:34,481 line:-1
to show in the Calendar view.


115
00:08:35.782 --> 00:08:41.922 line:-2 align:center
Then, set the selection object
to the calendar view's selection behavior.


116
00:08:44,892 --> 00:08:49,229 line:-2
To prevent the selection of individual
dates in the Calendar,


117
00:08:49.263 --> 00:08:53.467 line:-2 align:center
implement the
multiDateSelection:canSelectDate: method


118
00:08:53,500 --> 00:08:56,170 line:-1
from the calendar's selection's delegate


119
00:08:56.203 --> 00:08:59.273 line:-1 align:center
to control which dates can be selected.


120
00:09:00,607 --> 00:09:06,213 line:-2
Dates that cannot be selected will appear
greyed out in the calendar view.


121
00:09:07.748 --> 00:09:11.552 line:-2 align:center
To annotate individual dates
with decorations,


122
00:09:11,585 --> 00:09:14,021 line:-1
implement the calendar delegate's


123
00:09:14.054 --> 00:09:17.691 line:-2 align:center
calendarView:decorationForDateComponents:
Method.


124
00:09:19,426 --> 00:09:22,462 line:-1
For no decorations, simply return nil.


125
00:09:23.564 --> 00:09:28.235 line:-2 align:center
For a default grey circle,
return the default decoration.


126
00:09:29,670 --> 00:09:35,909 line:-2
You can also create image decorations
with options to customize its color.


127
00:09:35.943 --> 00:09:40.247 line:-2 align:center
And if you need more,
use the customView decoration


128
00:09:40,280 --> 00:09:43,083 line:-1
and return your view in the view provider.


129
00:09:44,484 --> 00:09:48,889 line:-2
Please note that the custom view
decorations do not allow interaction


130
00:09:48.922 --> 00:09:52.226 line:-1 align:center
and are clipped to the available space.


131
00:09:53,594 --> 00:09:56,697 line:-1
The page control is also improved.


132
00:09:56,730 --> 00:10:01,268 line:-2
We added the support for custom
indicator images for the current page,


133
00:10:01.301 --> 00:10:03.737 line:-1 align:center
so you can now choose different images


134
00:10:03,770 --> 00:10:06,773 line:-2
depending on whether the page
is selected or not.


135
00:10:08,308 --> 00:10:12,479 line:-2
Now you can also fully customize
both the orientation


136
00:10:12.513 --> 00:10:14.748 line:-1 align:center
and the direction of the page control.


137
00:10:16,450 --> 00:10:20,888 line:-2
Here is an example of configuring
a vertical page control


138
00:10:20,921 --> 00:10:26,126 line:-2
whose indicators change between
the current versus the non-current pages.


139
00:10:27,794 --> 00:10:31,765 line:-2
I set the page control's direction
to top-to-bottom


140
00:10:31.798 --> 00:10:36.670 line:-2 align:center
and set preferred indicator image
and preferred current indicator image


141
00:10:36,703 --> 00:10:38,338 line:-1
and that's it!


142
00:10:41.241 --> 00:10:46.580 line:-2 align:center
Apple is committed to protecting
user privacy and security.


143
00:10:46,613 --> 00:10:49,950 line:-2
In iOS 15,
when an application programmatically


144
00:10:49.983 --> 00:10:54.788 line:-2 align:center
accessed the pasteboard without
using system provided Paste interfaces,


145
00:10:54.821 --> 00:10:59.359 line:-2 align:center
a banner would appear to indicate
that the pasteboard was accessed.


146
00:11:00.594 --> 00:11:04.831 line:-2 align:center
New to iOS 16,
the system behavior has changed.


147
00:11:04,865 --> 00:11:06,800 line:-1
Now, instead of a banner,


148
00:11:06,834 --> 00:11:11,738 line:-2
we will display an alert that asks
for permission to use the pasteboard.


149
00:11:13,073 --> 00:11:16,810 line:-2
System paste interfaces
that the users interact with


150
00:11:16,844 --> 00:11:19,780 line:-1
provide implicit access to the pasteboard


151
00:11:19.813 --> 00:11:22.349 line:-1 align:center
and will avoid the alert.


152
00:11:23.817 --> 00:11:26.253 line:-1 align:center
If you have custom paste controls,


153
00:11:26.286 --> 00:11:30.023 line:-2 align:center
you can replace them
with the new UIPasteControl


154
00:11:30.057 --> 00:11:33.560 line:-2 align:center
that looks and behaves
like a filled UIButton.


155
00:11:34.895 --> 00:11:39.266 line:-2 align:center
It is enabled whenever the pasteboard
gets content compatible


156
00:11:39.299 --> 00:11:42.202 line:-1 align:center
with the control's paste target.


157
00:11:43.670 --> 00:11:47.007 line:-2 align:center
So those are
the new powerful UICalendarView,


158
00:11:47,040 --> 00:11:49,643 line:-1
the improved UIPageControl,


159
00:11:49.676 --> 00:11:53.814 line:-2 align:center
as well as
the security-oriented UIPasteControl.


160
00:11:53.847 --> 00:11:56.783 line:-1 align:center
Go ahead and try them out.


161
00:11:57.718 --> 00:12:01.955 line:-2 align:center
Now I'll walk you through some
API refinements we've made.


162
00:12:03.690 --> 00:12:07.528 line:-2 align:center
In iOS 15,
detents were added to sheets


163
00:12:07,561 --> 00:12:11,765 line:-2
which enabled building flexible
and dynamic UIs.


164
00:12:11,798 --> 00:12:16,770 line:-2
In iOS 16, we added support
for custom detents


165
00:12:16.803 --> 00:12:20.007 line:-1 align:center
so you can make sheets any size.


166
00:12:21.308 --> 00:12:26.446 line:-2 align:center
To take advantage of this feature,
use the new ".custom" detent


167
00:12:26.480 --> 00:12:31.885 line:-2 align:center
and specify the sheet's height
in points in an associated block.


168
00:12:31,919 --> 00:12:35,055 line:-1
You can return a constant value,


169
00:12:35,088 --> 00:12:39,459 line:-2
or a percentage of
the maximum detent height.


170
00:12:42.396 --> 00:12:47.134 line:-2 align:center
And you can also give your custom detent
an identifier


171
00:12:47.167 --> 00:12:50.103 line:-2 align:center
if you need to refer to it
from other APIs,


172
00:12:50,137 --> 00:12:54,575 line:-2
for example, to disable dimming
above your custom detent.


173
00:12:57,444 --> 00:13:01,148 line:0
Note that the value you return
from the custom block


174
00:13:01,181 --> 00:13:05,352 align:center
shouldn't account for
the bottom safe area inset.


175
00:13:05,385 --> 00:13:11,725 align:center
This is so the same calculation works for
both floating and edge-attached sheets.


176
00:13:13,894 --> 00:13:19,700 align:center
To learn more about customizing sheets
with system detents and other options,


177
00:13:19,733 --> 00:13:24,872 align:center
watch the Customize
and resize sheets in UIKit video.


178
00:13:24,905 --> 00:13:28,609 line:0
The sample code for that video
has also been updated


179
00:13:28,642 --> 00:13:31,879 line:0
to show these new custom detent APIs.


180
00:13:33,547 --> 00:13:37,851 line:-2
There are new features
for SF Symbols in UIKit.


181
00:13:38,785 --> 00:13:41,655 line:-1
Symbols support four rendering modes:


182
00:13:41.688 --> 00:13:44.057 line:-1 align:center
monochrome, multicolor,


183
00:13:44.091 --> 00:13:47.928 line:-1 align:center
hierarchical, and palette.


184
00:13:47.961 --> 00:13:51.164 line:-2 align:center
UIKit would use monochrome rendering
by default


185
00:13:51.198 --> 00:13:55.769 line:-2 align:center
unless the symbol was configured
with a different rendering mode.


186
00:13:55.802 --> 00:13:59.940 line:-2 align:center
In iOS 16,
UIKit may render individual symbols


187
00:13:59,973 --> 00:14:02,376 line:-1
with a mode other than monochrome


188
00:14:02,409 --> 00:14:05,279 line:-1
if no rendering mode is specified.


189
00:14:07,047 --> 00:14:10,284 line:-1
Take these device symbols, for example.


190
00:14:10,317 --> 00:14:13,453 line:-1
In iOS 15 and earlier,


191
00:14:13,487 --> 00:14:16,456 line:-1
these symbols use monochrome rendering


192
00:14:16.490 --> 00:14:19.226 line:-1 align:center
if no rendering mode is specified.


193
00:14:20.427 --> 00:14:25.699 line:-2 align:center
In iOS 16, these symbols instead default
to hierarchical rendering.


194
00:14:26,867 --> 00:14:29,736 line:-2
Generally,
a symbol's default rendering mode


195
00:14:29,770 --> 00:14:33,473 line:-2
is the preferred way
to display the symbol.


196
00:14:33.507 --> 00:14:38.245 line:-2 align:center
So in this case, you should allow
the default hierarchical rendering


197
00:14:38,278 --> 00:14:40,781 line:-1
to take effect.


198
00:14:40,814 --> 00:14:45,786 align:center
However, monochrome rendering
can be explicitly requested


199
00:14:45,819 --> 00:14:51,825 line:0
with the new UIImage.SymbolConfiguration.
preferringMonochrome() API.


200
00:14:55.596 --> 00:14:58.765 line:-1 align:center
UIKit added support for variable symbols,


201
00:14:58.799 --> 00:15:02.169 line:-2 align:center
which allows apps to display
variations of a symbol


202
00:15:02.202 --> 00:15:06.173 line:-1 align:center
based on a value from 0 to 1.


203
00:15:06.206 --> 00:15:10.978 line:-2 align:center
Suppose an app wants to depict
the current volume level with a symbol.


204
00:15:11.011 --> 00:15:15.682 line:-2 align:center
The app can use
the speaker.3.wave.fill symbol,


205
00:15:15,716 --> 00:15:20,254 line:-2
which has been updated
to support variable rendering.


206
00:15:20.287 --> 00:15:24.758 line:-2 align:center
At a value of 0,
the speaker waves are faded out,


207
00:15:24,791 --> 00:15:27,861 line:-1
indicating the lowest volume level.


208
00:15:27,895 --> 00:15:30,430 line:-1
As the value increases up to 1,


209
00:15:30.464 --> 00:15:33.800 line:-1 align:center
the speaker waves progressively fill in,


210
00:15:33,834 --> 00:15:36,170 line:-1
indicating higher volume levels.


211
00:15:37.471 --> 00:15:40.307 line:-1 align:center
If a symbol supports variable rendering,


212
00:15:40,340 --> 00:15:43,477 line:-2
then apps can request
a version of the symbol


213
00:15:43,510 --> 00:15:47,247 line:-1
reflecting a value between 0 and 1.


214
00:15:48.982 --> 00:15:53.687 line:-1 align:center
Using variable symbols is straightforward.


215
00:15:53.720 --> 00:15:57.457 line:-2 align:center
You can get the regular
non-variable version of a symbol


216
00:15:57.491 --> 00:16:02.095 line:-2 align:center
with the standard SF Symbols API
on UIImage.


217
00:16:03,830 --> 00:16:07,634 line:-2
To get a version of that symbol
with a particular variable value,


218
00:16:07.668 --> 00:16:10.771 line:-1 align:center
simply add the variableValue parameter.


219
00:16:12.039 --> 00:16:15.943 line:-2 align:center
You can even mix variable rendering
with other rendering modes,


220
00:16:15,976 --> 00:16:19,279 line:-2
such as palette,
to further style the symbol.


221
00:16:20,914 --> 00:16:25,686 align:center
Many system symbols now
support variable rendering,


222
00:16:25,719 --> 00:16:30,757 align:center
and apps can update their custom symbols
to support variability as well.


223
00:16:32,192 --> 00:16:35,529 align:center
To learn how to create
custom variable symbols,


224
00:16:35,562 --> 00:16:40,267 line:0
check out the sessions
"Adopt variable color in SF Symbols"


225
00:16:40,300 --> 00:16:43,604 align:center
and "What's new in SF Symbols 4”.


226
00:16:45.439 --> 00:16:49.877 line:-2 align:center
We've modernized UIKit to work
with new Swift Concurrency features,


227
00:16:49,910 --> 00:16:52,045 line:-1
including making immutable types


228
00:16:52,079 --> 00:16:56,216 line:-2
such as UIImage and UIColor
conform to Sendable,


229
00:16:56.250 --> 00:16:58.986 line:-1 align:center
so you can send them between the MainActor


230
00:16:59.019 --> 00:17:02.456 line:-2 align:center
and custom actors
without compiler warning.


231
00:17:03,957 --> 00:17:09,930 line:-2
For example, here we have
a custom actor called Processor,


232
00:17:09.963 --> 00:17:12.900 line:-1 align:center
and a view controller called ImageViewer


233
00:17:12.933 --> 00:17:15.969 line:-1 align:center
which is bound to the MainActor.


234
00:17:16,003 --> 00:17:18,572 line:-1
In the method sendImageForProcessing,


235
00:17:18.605 --> 00:17:24.077 line:-2 align:center
the ImageViewer sends an image
to the Processor actor for processing,


236
00:17:24,111 --> 00:17:28,448 line:-2
to make it fancy like adding glitter
and rainbows to it.


237
00:17:28,482 --> 00:17:32,386 line:-1
This is safe because UIImage is immutable,


238
00:17:32.419 --> 00:17:34.755 line:-1 align:center
so Processor has to make new copy


239
00:17:34.788 --> 00:17:36.990 line:-1 align:center
to add the rainbows and glitter.


240
00:17:38.358 --> 00:17:41.862 line:-2 align:center
Any code that has a reference
to the original image


241
00:17:41.895 --> 00:17:44.364 line:-1 align:center
doesn't show these modifications,


242
00:17:44.398 --> 00:17:48.135 line:-2 align:center
and a shared state
is not unsafely mutated.


243
00:17:49.870 --> 00:17:52.973 line:-1 align:center
Contrast this with UIBezierPath,


244
00:17:53,006 --> 00:17:56,543 line:-2
which is not Sendable
because it is mutable.


245
00:17:57.845 --> 00:18:02.082 line:-2 align:center
How cool is it that something
that could previously only be expressed


246
00:18:02.115 --> 00:18:06.753 line:-2 align:center
in documentation
can now be checked by the compiler?


247
00:18:09,056 --> 00:18:12,693 align:center
To learn more about
Sendable and Swift Concurrency,


248
00:18:12,726 --> 00:18:17,464 align:center
check out "Eliminate data races
using Swift Concurrency"


249
00:18:17,497 --> 00:18:23,337 align:center
and "Visualize and optimize
Swift Concurrency" videos.


250
00:18:25,405 --> 00:18:30,644 line:-2
iOS 16 features new powerful support
for external displays.


251
00:18:31.245 --> 00:18:36.583 line:-2 align:center
The great news is that you don't have to
update your app to take advantage of this,


252
00:18:36.617 --> 00:18:40.487 line:-1 align:center
unless you are using old UIScreen APIs.


253
00:18:41,588 --> 00:18:45,459 line:-2
You can no longer assume
your app is on the main screen.


254
00:18:46,260 --> 00:18:49,763 line:-1
Instead, defer to more specific APIs,


255
00:18:49.796 --> 00:18:53.000 line:-1 align:center
like trait collection and UIScene APIs,


256
00:18:53.033 --> 00:18:55.702 line:-1 align:center
to get the information you need.


257
00:18:55.736 --> 00:18:58.438 line:-1 align:center
If your app is still not using UIScene,


258
00:18:58,472 --> 00:19:03,911 line:-2
there's now even more reason to upgrade
and to support multiple windows.


259
00:19:05.445 --> 00:19:08.115 line:-1 align:center
Self-sizing cells in UICollectionView


260
00:19:08,148 --> 00:19:12,586 line:-1
and UITableView got a major upgrade.


261
00:19:12.619 --> 00:19:16.523 line:-1 align:center
Now cells are also self-resizing!


262
00:19:16,557 --> 00:19:21,595 line:-2
In iOS 16, when the content
inside a visible cell changes,


263
00:19:21.628 --> 00:19:26.633 line:-2 align:center
the cell will automatically be resized
to fit the new content.


264
00:19:28.235 --> 00:19:31.371 line:-1 align:center
This new behavior is enabled by default,


265
00:19:31.405 --> 00:19:34.141 line:-1 align:center
and UICollectionView and UITableView


266
00:19:34.174 --> 00:19:38.178 line:-2 align:center
each have a new selfSizingInvalidation
property


267
00:19:38,212 --> 00:19:41,548 line:-2
that gives you control
over this new functionality.


268
00:19:43.016 --> 00:19:44.785 line:-1 align:center
Here is how it works:


269
00:19:46.220 --> 00:19:49.690 line:-1 align:center
When selfSizingInvalidation is enabled,


270
00:19:49.723 --> 00:19:52.259 line:-1 align:center
cells can request to be resized


271
00:19:52.292 --> 00:19:55.162 line:-2 align:center
by their containing collection
or table view.


272
00:19:56,930 --> 00:20:01,768 line:-2
If you're using UIListContentConfiguration
to configure cells,


273
00:20:01.802 --> 00:20:04.204 line:-1 align:center
the invalidation happens automatically


274
00:20:04.238 --> 00:20:07.474 line:-1 align:center
whenever the cell's configuration changes.


275
00:20:08.942 --> 00:20:11.011 line:-1 align:center
For any other cases,


276
00:20:11,044 --> 00:20:14,915 line:-2
you can call
the invalidateIntrinsicContentSize method


277
00:20:14,948 --> 00:20:19,086 line:-2
on the cell
or its contentView to resize the cell.


278
00:20:20,888 --> 00:20:24,558 line:-2
By default,
cells will be resized with animation,


279
00:20:24.591 --> 00:20:28.428 line:-2 align:center
but you can wrap the call
to invalidateIntrinsicContentSize


280
00:20:28.462 --> 00:20:33.734 line:-2 align:center
inside performWithoutAnimation
to resize without animation.


281
00:20:33.767 --> 00:20:38.539 line:-2 align:center
UICollectionView and UITableView
intelligently coalesce


282
00:20:38.572 --> 00:20:40.474 line:-1 align:center
size invalidation from cells


283
00:20:40.507 --> 00:20:44.645 line:-2 align:center
into a single update
performed at the optimal time.


284
00:20:47.247 --> 00:20:49.950 line:-1 align:center
If you're using Auto Layout in your cells,


285
00:20:49.983 --> 00:20:53.754 line:-2 align:center
you can opt-in to an even more
comprehensive behavior


286
00:20:53.787 --> 00:20:57.691 line:-1 align:center
by choosing enabledIncludingConstraints.


287
00:20:57.724 --> 00:21:03.564 line:-2 align:center
This means when a cell detects any auto
layout changes inside its contentView,


288
00:21:03.597 --> 00:21:08.702 line:-2 align:center
it will automatically call
invalidateIntrinsicContentSize on itself


289
00:21:08,735 --> 00:21:14,074 line:-2
so that the containing collection
or table view can resize it if necessary.


290
00:21:15,008 --> 00:21:17,044 line:-1
This makes it incredibly easy


291
00:21:17.077 --> 00:21:20.147 line:-2 align:center
to have cells
that automatically adjust their size


292
00:21:20,180 --> 00:21:23,450 line:-2
in response to content
or layout updates.


293
00:21:25.419 --> 00:21:28.689 line:-1 align:center
UIKit is powerful and flexible.


294
00:21:28,722 --> 00:21:32,125 line:-2
You can also take advantage
of the expressiveness


295
00:21:32.159 --> 00:21:36.330 line:-1 align:center
of implementing UIs using SwiftUI.


296
00:21:36.363 --> 00:21:41.935 line:-2 align:center
We've made it much easier to incorporate
both frameworks in the same app.


297
00:21:43.971 --> 00:21:50.177 line:-2 align:center
In iOS 16, there is an entirely new way
to build cells for your collection


298
00:21:50,210 --> 00:21:53,647 line:-1
and table views using SwiftUI.


299
00:21:55,048 --> 00:21:59,520 line:-2
This is made possible
by a new content configuration type


300
00:21:59,553 --> 00:22:03,290 line:-1
named UIHostingConfiguration.


301
00:22:03.323 --> 00:22:05.592 line:-1 align:center
With just one line of code,


302
00:22:05.626 --> 00:22:10.063 line:-2 align:center
you can start writing SwiftUI
right inside your cells--


303
00:22:10.097 --> 00:22:14.001 line:-2 align:center
no extra views
or view controllers needed at all.


304
00:22:15,869 --> 00:22:19,540 line:-2
Here is a simple custom cell
written in SwiftUI


305
00:22:19.573 --> 00:22:22.476 line:-1 align:center
using UIHostingConfiguration.


306
00:22:22.509 --> 00:22:25.646 line:-2 align:center
It is extremely easily
to build this cell.


307
00:22:27.147 --> 00:22:33.587 line:-2 align:center
Not only is this a great way to start
integrating SwiftUI into your app,


308
00:22:33.620 --> 00:22:39.426 line:-2 align:center
the expressive nature of SwiftUI means
there's never been a more powerful way


309
00:22:39.459 --> 00:22:42.996 line:-1 align:center
to build custom cells in UIKit.


310
00:22:43.797 --> 00:22:46.266 line:-1 align:center
There is a lot more to this topic,


311
00:22:46,300 --> 00:22:49,169 align:center
so be sure to check out the video


312
00:22:49,203 --> 00:22:53,674 line:0
"Use SwiftUI with UIKit" to learn more.


313
00:22:56.643 --> 00:23:02.249 line:-2 align:center
There are a couple of small but important
changes that you should be aware of.


314
00:23:02.983 --> 00:23:06.286 line:-1 align:center
To prevent users from being fingerprinted,


315
00:23:06.320 --> 00:23:10.123 line:-1 align:center
UIDevice.name now reports the model name


316
00:23:10,157 --> 00:23:14,027 line:-1
rather than the user's custom device name.


317
00:23:14.061 --> 00:23:18.799 line:-2 align:center
Using the customized name
now requires getting an entitlement.


318
00:23:20.534 --> 00:23:24.805 line:-2 align:center
Setting UIDevice.orientation
is no longer supported.


319
00:23:24.838 --> 00:23:28.509 line:-1 align:center
Instead, use UIViewController APIs


320
00:23:28.542 --> 00:23:31.512 line:-1 align:center
such as preferredInterfaceOrientation


321
00:23:31.545 --> 00:23:35.516 line:-2 align:center
to express the intended orientation
of your interface.


322
00:23:36,783 --> 00:23:38,785 line:-1
What's next?


323
00:23:38,819 --> 00:23:43,690 line:-1
Compile your app using iOS 16 SDK.


324
00:23:43.724 --> 00:23:47.594 line:-2 align:center
Test out the new features
such as text edit menus


325
00:23:47,628 --> 00:23:50,197 line:-1
and find and replace.


326
00:23:50.230 --> 00:23:55.002 line:-2 align:center
Adopt the new UIKit APIs
to use new enhanced controls


327
00:23:55.035 --> 00:23:57.571 line:-1 align:center
and productivity features.


328
00:23:57.604 --> 00:24:00.507 line:-1 align:center
And experiment with the new exciting ways


329
00:24:00,541 --> 00:24:04,311 line:-1
to incorporate SwiftUI in your UIKit app.


330
00:24:05,179 --> 00:24:06,680 line:-1
Thank you. ♪ ♪

