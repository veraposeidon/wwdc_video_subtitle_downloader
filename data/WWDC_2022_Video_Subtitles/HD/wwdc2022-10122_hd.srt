2
00:00:01.468 --> 00:00:07.474 line:-1 align:center
[spacey music]


3
00:00:10.010 --> 00:00:12.145 line:-2 align:center
Ram: Hi.
My name is Ram.


4
00:00:12.179 --> 00:00:15.115 line:-2 align:center
I'm an engineer
on the account experiences team.


5
00:00:15.148 --> 00:00:17.150 line:-1 align:center
I'll be joined by my colleague Patrick


6
00:00:17,184 --> 00:00:18,919 line:-1
to talk about how you can enhance


7
00:00:18.952 --> 00:00:22.022 line:-2 align:center
your Sign in with Apple experience
for your app.


8
00:00:22,055 --> 00:00:25,492 line:-2
Since Sign in with Apple was introduced
in iOS 13,


9
00:00:25,526 --> 00:00:29,796 line:-2
people love the fast, easy account setup
and sign-in.


10
00:00:29,830 --> 00:00:32,499 line:-2
With just a few lines of code,
you can enable


11
00:00:32,533 --> 00:00:34,468 line:-1
quick, one-tap account setup


12
00:00:34,501 --> 00:00:37,070 line:-1
with no forms or passwords.


13
00:00:37,104 --> 00:00:39,406 line:-2
Every Sign in with Apple account
is protected


14
00:00:39.439 --> 00:00:42.176 line:-1 align:center
by a strong two-factor authentication


15
00:00:42.209 --> 00:00:46.180 line:-2 align:center
that is already used to secure
the user's Apple ID.


16
00:00:46.213 --> 00:00:48.448 line:-2 align:center
If you need to communicate
with your users,


17
00:00:48.482 --> 00:00:51.084 line:-2 align:center
Sign in with Apple provides you
with an email address


18
00:00:51,118 --> 00:00:52,619 line:-1
that just works.


19
00:00:52.653 --> 00:00:55.989 line:-2 align:center
There is no additional verification
required.


20
00:00:56,023 --> 00:00:58,425 line:-2
Sign in with Apple also provides
an indicator


21
00:00:58.458 --> 00:01:01.495 line:-1 align:center
for how likely the user is indeed real.


22
00:01:01,528 --> 00:01:04,498 line:-1
This can help you combat fraud.


23
00:01:04.531 --> 00:01:09.002 line:-2 align:center
And Sign in with Apple works everywhere,
including your managed Apple IDs


24
00:01:09.036 --> 00:01:11.672 line:-3 align:center
that you use for work and school.


25
00:01:11.705 --> 00:01:16.143 line:-4 align:center
To learn more about how you can integrate
your app with work and school accounts,


26
00:01:16.176 --> 00:01:20.714 line:-4 align:center
check out the session "Discover Sign in
with Apple at Work & School."


27
00:01:20.747 --> 00:01:24.918 line:-2 align:center
In this session, we are going to talk
about how you can enhance and streamline


28
00:01:24,952 --> 00:01:26,720 line:-1
your Sign in with Apple experience.


29
00:01:27.621 --> 00:01:31.225 line:-2 align:center
First, I will discuss how you can prevent
account duplication


30
00:01:31,258 --> 00:01:34,862 line:-2
by checking for existing credentials
in your app.


31
00:01:34.895 --> 00:01:39.867 line:-2 align:center
Next, I'll take a deep dive
into the Apple ID credential,


32
00:01:39,900 --> 00:01:44,004 line:-2
and then, I'll talk about some of the ways
you can monitor credential changes


33
00:01:44,037 --> 00:01:47,941 line:-2
and discuss how to handle scenarios
like account deletion.


34
00:01:47.975 --> 00:01:51.645 line:-2 align:center
And finally, Patrick will discuss
how to integrate Sign in with Apple


35
00:01:51.678 --> 00:01:54.248 line:-1 align:center
on the web and other platforms.


36
00:01:54.281 --> 00:01:56.149 line:-1 align:center
Let's get started.


37
00:01:56.183 --> 00:01:59.920 line:-2 align:center
Sign in with Apple is
a convenient and secure alternative


38
00:01:59.953 --> 00:02:03.590 line:-2 align:center
to traditional username-
and-password-based authentication,


39
00:02:03,624 --> 00:02:07,728 line:-2
but your users could still have accounts
that are unlocked with passwords.


40
00:02:07.761 --> 00:02:10.564 line:-2 align:center
So if your user already has an account
that works for them,


41
00:02:10.597 --> 00:02:13.934 line:-2 align:center
it is important not to create
a second account for your app.


42
00:02:14.902 --> 00:02:18.105 line:-2 align:center
I'll explore how you can guide someone
to make the right decision


43
00:02:18,138 --> 00:02:19,173 line:-1
while signing in.


44
00:02:20.207 --> 00:02:24.545 line:-2 align:center
This is Juice, a sample app
that uses Sign in with Apple.


45
00:02:24,578 --> 00:02:27,614 line:-2
You can find its source code
in the related links for this video.


46
00:02:28.949 --> 00:02:33.554 line:-2 align:center
You can sign in to Juice either using
traditional email and password


47
00:02:33.587 --> 00:02:36.490 line:-1 align:center
or using Sign in with Apple.


48
00:02:36,523 --> 00:02:39,426 line:-2
If your user has either
of these credentials already,


49
00:02:39.459 --> 00:02:43.430 line:-2 align:center
it is in your hands to help them
sign into the right account.


50
00:02:43,463 --> 00:02:46,567 line:-2
To start with, be sure to implement
password autofill


51
00:02:46,600 --> 00:02:48,702 line:-1
so that existing password credentials


52
00:02:48,735 --> 00:02:51,071 line:-2
are displayed on the keyboard
for your login screen.


53
00:02:52,139 --> 00:02:56,109 line:-2
This way, the user can autofill
the credential with just one tap.


54
00:02:57.244 --> 00:02:59.413 line:-1 align:center
Also, you should provide your users


55
00:02:59,446 --> 00:03:01,648 line:-1
to upgrade their password-based accounts


56
00:03:01,682 --> 00:03:03,717 line:-1
to Sign in with Apple.


57
00:03:03.750 --> 00:03:06.386 line:-2 align:center
Once upgraded, your users
will get an account


58
00:03:06.420 --> 00:03:08.222 line:-1 align:center
that has security built in,


59
00:03:08,255 --> 00:03:11,391 line:-2
and they have one less password
to remember.


60
00:03:11.425 --> 00:03:14.161 line:-2 align:center
This is implemented
using the Account Authentication


61
00:03:14,194 --> 00:03:16,697 line:-1
Modification Extension.


62
00:03:16,730 --> 00:03:21,368 line:-2
The extension-based API provides
seamless experience for your users


63
00:03:21,401 --> 00:03:23,070 line:-1
to upgrade the way they sign in


64
00:03:23.103 --> 00:03:24.371 line:-1 align:center
using Sign in with Apple.


65
00:03:25.372 --> 00:03:26.507 line:-4 align:center
For more information


66
00:03:26.540 --> 00:03:29.776 line:-5 align:center
on providing security upgrades
for your users' accounts,


67
00:03:29.810 --> 00:03:33.046 line:-5 align:center
check out the docs
"Get the most out of Sign in with Apple"


68
00:03:33,080 --> 00:03:35,215 line:-4
and "One-tap account security upgrades."


69
00:03:36,850 --> 00:03:38,986 line:-1
Apart from providing password autofill,


70
00:03:39.019 --> 00:03:40.554 line:-1 align:center
you can go a step further


71
00:03:40.587 --> 00:03:42.422 line:-1 align:center
by presenting existing credentials


72
00:03:42,456 --> 00:03:44,858 line:-1
as soon as your app launches.


73
00:03:44,892 --> 00:03:46,994 line:-1
This way, your users can sign in


74
00:03:47,027 --> 00:03:48,328 line:-1
using the right account


75
00:03:48,362 --> 00:03:50,163 line:-1
even before they reach the login screen.


76
00:03:50.764 --> 00:03:54.801 line:-2 align:center
The Authentication Services API
is really flexible this way.


77
00:03:54,835 --> 00:03:56,904 line:-1
Besides allowing a user to create


78
00:03:56,937 --> 00:03:58,839 line:-1
a Sign in with Apple credential,


79
00:03:58,872 --> 00:04:01,608 line:-2
the API can also present
existing credentials,


80
00:04:01,642 --> 00:04:03,644 line:-1
including password-based credentials.


81
00:04:04.711 --> 00:04:06.747 line:-1 align:center
Adopting this is really easy.


82
00:04:06,780 --> 00:04:10,450 line:-2
Let me take you through some code
on how to achieve this.


83
00:04:10,484 --> 00:04:13,620 line:-2
If you're already using
the Authentication Services API,


84
00:04:13.654 --> 00:04:15.622 line:-1 align:center
this code should be very familiar.


85
00:04:16,623 --> 00:04:20,661 line:-2
You start by creating an instance
of ASAuthorizationController


86
00:04:20,694 --> 00:04:24,164 line:-2
and include both
ASAuthorizationAppleIDProvider


87
00:04:24.198 --> 00:04:27.100 line:-2 align:center
as well as
an ASAuthorizationPasswordProvider


88
00:04:27.134 --> 00:04:29.670 line:-1 align:center
in the authorization request array.


89
00:04:29.703 --> 00:04:32.339 line:-2 align:center
Then you'll need to set up a delegate
and an object


90
00:04:32,372 --> 00:04:34,741 line:-1
to help with presenting the interface.


91
00:04:34.775 --> 00:04:37.444 line:-2 align:center
And finally, you'll need to call
performRequests


92
00:04:37.477 --> 00:04:40.948 line:-2 align:center
with the option
preferImmediatelyAvailableCredentials


93
00:04:40.981 --> 00:04:43.183 line:-1 align:center
on your authorization controller.


94
00:04:43.217 --> 00:04:46.420 line:-1 align:center
This option is new on iOS 16.


95
00:04:46.453 --> 00:04:49.223 line:-2 align:center
It tells the system
that you only want credentials


96
00:04:49.256 --> 00:04:52.125 line:-2 align:center
that are immediately available
on the device.


97
00:04:52.159 --> 00:04:54.995 line:-2 align:center
It is intended specifically to be called
on app launch.


98
00:04:56,463 --> 00:04:59,032 line:-2
If you want to support
previous iOS versions,


99
00:04:59.066 --> 00:05:01.368 line:-1 align:center
you can use performRequests.


100
00:05:01,401 --> 00:05:02,903 line:-1
When you do this,


101
00:05:02.936 --> 00:05:06.673 line:-2 align:center
you will be presented with a list
of existing credentials.


102
00:05:06.707 --> 00:05:07.975 line:-1 align:center
Your user can now select


103
00:05:08,008 --> 00:05:11,912 line:-2
either an existing
Sign in with Apple credential


104
00:05:11.945 --> 00:05:15.048 line:-1 align:center
or an existing password credential.


105
00:05:15.082 --> 00:05:17.551 line:-1 align:center
After the user has selected a credential,


106
00:05:17,584 --> 00:05:19,186 line:-1
the system will call


107
00:05:19,219 --> 00:05:21,054 line:-1
didCompleteWithAuthorization


108
00:05:21.088 --> 00:05:24.491 line:-1 align:center
on the ASAuthorizationController delegate.


109
00:05:24.525 --> 00:05:26.994 line:-2 align:center
If the user chose
a Sign in with Apple account,


110
00:05:27.027 --> 00:05:29.596 line:-1 align:center
you continue with the appleIDCredential.


111
00:05:29.630 --> 00:05:32.165 line:-2 align:center
If the user chose
a password-based account,


112
00:05:32,199 --> 00:05:35,402 line:-2
you sign in with the passwordCredential
returned.


113
00:05:35,435 --> 00:05:37,871 align:center
If the user has no existing credential,


114
00:05:37,905 --> 00:05:39,806 align:center
the API will not present the user


115
00:05:39,840 --> 00:05:42,109 line:0
to create a Sign in with Apple account.


116
00:05:42,142 --> 00:05:46,547 line:0
Instead, the system will call
didCompleteWithError.


117
00:05:46,580 --> 00:05:49,950 align:center
You should fall back to showing
standard login flows in such scenarios.


118
00:05:50,884 --> 00:05:54,121 align:center
By the way, the same
Authentication Services API


119
00:05:54,154 --> 00:05:57,324 align:center
also works seamlessly for passkeys.


120
00:05:57,357 --> 00:05:59,059 line:0
To learn more about passkeys,


121
00:05:59,092 --> 00:06:03,163 line:0
a next-generation authentication
technology to replace passwords,


122
00:06:03,197 --> 00:06:05,732 line:0
check out the session "Meet passkeys."


123
00:06:05.766 --> 00:06:07.668 line:-1 align:center
With just a few lines of code,


124
00:06:07,701 --> 00:06:08,969 line:-1
you can take full advantage


125
00:06:09.002 --> 00:06:11.038 line:-1 align:center
of the sign-in experience.


126
00:06:11,071 --> 00:06:13,640 line:-2
You can now help your users
select the right account,


127
00:06:13,674 --> 00:06:16,210 line:-2
and hopefully, this prevents
duplicate accounts


128
00:06:16,243 --> 00:06:18,312 line:-1
from being created in your system.


129
00:06:19,346 --> 00:06:22,983 line:-2
Next, I'd like to take you on a deep dive
on Apple ID credential.


130
00:06:24.451 --> 00:06:28.088 line:-2 align:center
As you know, the response you get
after a successful authorization


131
00:06:28.121 --> 00:06:29.690 line:-1 align:center
using Sign in with Apple


132
00:06:29.723 --> 00:06:33.994 line:-2 align:center
is an ASAuthorizationAppleIDCredential
object.


133
00:06:34.027 --> 00:06:36.396 line:-1 align:center
It contains values like user,


134
00:06:36,430 --> 00:06:39,867 line:-1
fullName, email, realUserStatus,


135
00:06:39,900 --> 00:06:42,402 line:0
identityToken, and authorizationCode.


136
00:06:43,270 --> 00:06:45,806 align:center
I'll cover each of them briefly.


137
00:06:45,839 --> 00:06:49,510 line:-1
User is a unique and stable identifier.


138
00:06:49,543 --> 00:06:51,912 line:-2
It is the same identifier
across all the apps


139
00:06:51,945 --> 00:06:53,213 line:-1
in your developer team.


140
00:06:54.281 --> 00:06:58.252 line:-2 align:center
Use this to uniquely identify
users in your system.


141
00:06:58.285 --> 00:07:01.088 line:-2 align:center
You should ask for fullName
only if you need it.


142
00:07:01,121 --> 00:07:05,492 line:-2
If requested, your users can share
any name they want.


143
00:07:05.526 --> 00:07:07.427 line:-2 align:center
If you want to communicate
with your users,


144
00:07:07.461 --> 00:07:09.663 line:-1 align:center
you should ask for the email.


145
00:07:09,696 --> 00:07:12,299 line:-2
When requested, your users
have two options


146
00:07:12.332 --> 00:07:14.701 line:-1 align:center
to share their email address.


147
00:07:14.735 --> 00:07:19.173 line:-2 align:center
One option is to share the email
associated with their Apple ID.


148
00:07:19.206 --> 00:07:23.277 line:-2 align:center
The other option is to use
the "hide my email" feature.


149
00:07:23,310 --> 00:07:27,114 line:-2
This creates a hidden email address
that routes to their inbox.


150
00:07:27.981 --> 00:07:30.751 line:-2 align:center
It is a two-way relay,
so it can handle replies, too.


151
00:07:31.919 --> 00:07:34.221 line:-1 align:center
Regardless of which option is chosen,


152
00:07:34,254 --> 00:07:36,890 line:-2
the email address
has been previously verified by Apple,


153
00:07:36,924 --> 00:07:38,592 line:-1
and it is ready to use.


154
00:07:38,625 --> 00:07:42,262 line:-2
Also, not all accounts have
an associated email,


155
00:07:42,296 --> 00:07:44,198 line:-1
so be prepared to handle scenarios


156
00:07:44,231 --> 00:07:45,999 line:-1
where there is no value for email,


157
00:07:46,033 --> 00:07:47,334 line:-1
even if you requested it.


158
00:07:48.368 --> 00:07:51.071 line:-2 align:center
RealUserStatus is
a high-confidence indicator


159
00:07:51,104 --> 00:07:53,807 line:-1
on how likely the user is real.


160
00:07:53,841 --> 00:07:56,577 line:-2
It is calculated
using on-device machine learning,


161
00:07:56.610 --> 00:07:59.479 line:-1 align:center
account history, and hardware attestation


162
00:07:59.513 --> 00:08:01.815 line:-1 align:center
whilst preserving the user's privacy.


163
00:08:01.849 --> 00:08:04.518 line:-1 align:center
There's three types for realUserStatus.


164
00:08:04.551 --> 00:08:08.755 line:-2 align:center
"Likely real" means the user appears
to be a real person.


165
00:08:08.789 --> 00:08:10.891 line:-2 align:center
Provide this user
with the best experience,


166
00:08:10.924 --> 00:08:13.393 line:-2 align:center
such as skipping
additional fraud verification checks


167
00:08:13.427 --> 00:08:15.696 line:-1 align:center
like CAPTCHAs.


168
00:08:15.729 --> 00:08:17.998 line:-2 align:center
"Unknown" is when the system
hasn't determined


169
00:08:18,031 --> 00:08:20,400 line:-1
whether the user is a real person.


170
00:08:20.434 --> 00:08:24.071 line:-2 align:center
Trust this user as you would
for any account with limited information


171
00:08:24,104 --> 00:08:27,207 line:-2
that requires
additional verification steps.


172
00:08:27.241 --> 00:08:29.710 line:-2 align:center
The user could still be real,
so do not block them


173
00:08:29.743 --> 00:08:30.744 line:-1 align:center
from using your app.


174
00:08:31.745 --> 00:08:35.115 line:-2 align:center
And finally, "unsupported"
means the system is not capable


175
00:08:35.148 --> 00:08:36.717 line:-1 align:center
of this determination.


176
00:08:37.284 --> 00:08:39.887 line:-2 align:center
I should take a moment to call out
that the properties


177
00:08:39,920 --> 00:08:43,190 line:-2
like fullName, email,
and realUserStatus


178
00:08:43,223 --> 00:08:46,627 line:-2
are only returned when an account
is created for the very first time.


179
00:08:47.761 --> 00:08:50.430 line:-2 align:center
They're not returned
upon subsequent sign-ins,


180
00:08:50.464 --> 00:08:54.635 line:-2 align:center
so make sure to securely cache
properties like fullName and email


181
00:08:54.668 --> 00:08:58.205 line:-2 align:center
until you can verify that an account
has been created in your system.


182
00:08:59.339 --> 00:09:02.109 line:-1 align:center
The identityToken is a JSON web token


183
00:09:02.142 --> 00:09:03.610 line:-1 align:center
that contains most of the data


184
00:09:03,644 --> 00:09:05,112 line:-1
that the app server needs,


185
00:09:05,145 --> 00:09:07,581 line:-1
including the user information.


186
00:09:07,614 --> 00:09:10,317 line:0
This is an industry-standard approach
to authentication.


187
00:09:11.084 --> 00:09:15.822 line:-2 align:center
The JSON web token, or JWT,
consists of three parts:


188
00:09:15,856 --> 00:09:19,459 line:-1
a base-64 URL encoded header,


189
00:09:19,493 --> 00:09:23,197 line:-1
a base-64 URL encoded payload,


190
00:09:23,230 --> 00:09:25,232 align:center
and a signature signed by Apple.


191
00:09:26.033 --> 00:09:28.702 line:-2 align:center
You should verify the signature
with Apple's public key


192
00:09:28.735 --> 00:09:31.872 line:-2 align:center
to ensure that the response
has not been tampered with


193
00:09:31.905 --> 00:09:35.008 line:-1 align:center
and is indeed from Apple ID servers.


194
00:09:35.042 --> 00:09:36.577 line:-1 align:center
It is also equally important


195
00:09:36.610 --> 00:09:40.047 line:-2 align:center
that your app server checks
the validity of the token.


196
00:09:40.080 --> 00:09:41.882 line:-1 align:center
Once you decode the payload,


197
00:09:41.915 --> 00:09:46.453 line:-2 align:center
you should verify the issuer is
appleid.apple.com,


198
00:09:46.486 --> 00:09:51.558 line:-2 align:center
verify the audience field
is your app's bundle identifier,


199
00:09:51,592 --> 00:09:55,462 line:-2
then make sure the expiry timestamp
is greater than the current time


200
00:09:55.495 --> 00:09:58.332 line:-1 align:center
so that you know the token is valid.


201
00:09:58,365 --> 00:10:01,802 line:-1
Subject will be your user identifier.


202
00:10:01.835 --> 00:10:04.438 line:-2 align:center
If you requested
for the user's email address,


203
00:10:04.471 --> 00:10:06.440 line:-1 align:center
it will also be included.


204
00:10:06.473 --> 00:10:09.176 line:-1 align:center
You can also find the realUserStatus.


205
00:10:09,209 --> 00:10:11,545 line:-1
The value will be 0 for "unsupported,"


206
00:10:11.578 --> 00:10:15.249 line:-1 align:center
1 for "unknown," 2 for "likely real."


207
00:10:15.282 --> 00:10:17.851 line:-2 align:center
And finally, verify that the nonce
is the same


208
00:10:17,885 --> 00:10:21,421 line:-2
as the one generated prior to the creation
of the authorization request.


209
00:10:22,656 --> 00:10:24,324 line:-3
For more information on nonce


210
00:10:24.358 --> 00:10:26.927 line:-3 align:center
and how to secure
your authorization process


211
00:10:26.960 --> 00:10:28.595 line:-3 align:center
to mitigate replay attacks,


212
00:10:28.629 --> 00:10:31.498 line:-3 align:center
check out the session "Get the most
out of Sign in with Apple."


213
00:10:32,599 --> 00:10:36,236 align:center
AuthorizationCode is
a short-lived, single-use token


214
00:10:36,270 --> 00:10:38,272 align:center
that you can provide Apple ID servers


215
00:10:38,305 --> 00:10:40,107 align:center
in exchange for refresh tokens.


216
00:10:40,974 --> 00:10:43,410 line:0
If your systems already use open standards


217
00:10:43,443 --> 00:10:44,511 align:center
like OAuth 2.0,


218
00:10:44,545 --> 00:10:46,079 align:center
this might be familiar for you.


219
00:10:46.813 --> 00:10:48.649 line:-1 align:center
To generate a refresh token,


220
00:10:48,682 --> 00:10:52,486 line:-2
you should send a post request
to the auth/token endpoint.


221
00:10:53.287 --> 00:10:56.123 line:-2 align:center
You pass on the client ID
and the client secret


222
00:10:56,156 --> 00:10:59,092 line:-2
along with the authorization code
that you just received.


223
00:10:59.126 --> 00:11:02.196 line:-2 align:center
A detailed description on how to create
the client secret


224
00:11:02,229 --> 00:11:05,065 line:-2
is available
in the Apple Developer documentation.


225
00:11:05,098 --> 00:11:06,633 line:-1
In the response,


226
00:11:06,667 --> 00:11:09,636 line:-2
you will get a refresh token,
an access token,


227
00:11:09,670 --> 00:11:11,471 line:-1
and a new identity token


228
00:11:11.505 --> 00:11:14.374 line:-1 align:center
similar to the one you received earlier.


229
00:11:14.408 --> 00:11:16.610 line:-1 align:center
If you have an expired access token,


230
00:11:16.643 --> 00:11:18.078 line:-1 align:center
you can use the refresh token


231
00:11:18,111 --> 00:11:19,813 line:-1
to obtain a new access token


232
00:11:19,847 --> 00:11:22,316 line:-1
using the same endpoint.


233
00:11:22,349 --> 00:11:24,818 line:-2
You can also continue to use
the same refresh token


234
00:11:24.852 --> 00:11:27.554 line:-1 align:center
until it gets invalidated.


235
00:11:27.588 --> 00:11:29.690 line:-1 align:center
The refresh token could get invalidated


236
00:11:29.723 --> 00:11:31.658 line:-1 align:center
if the token verification fails


237
00:11:31,692 --> 00:11:34,628 line:-2
or if there are changes
around your user's session.


238
00:11:35.762 --> 00:11:37.331 line:-1 align:center
Speaking of user session,


239
00:11:37.364 --> 00:11:40.300 line:-2 align:center
next, I’ll talk about handling
and monitoring changes


240
00:11:40,334 --> 00:11:42,269 line:-1
around the credential state.


241
00:11:42,936 --> 00:11:44,972 line:-1
After verifying the identity token,


242
00:11:45,005 --> 00:11:47,808 line:-2
your app is responsible for managing
the user session.


243
00:11:48,942 --> 00:11:52,913 line:-2
There are various scenarios
that can trigger user session changes.


244
00:11:52,946 --> 00:11:57,918 line:-2
For example, a user could stop using
Apple ID with your app from Settings,


245
00:11:57,951 --> 00:12:00,754 line:-2
or they could have been signed out
of the device.


246
00:12:01,455 --> 00:12:03,690 line:-1
To handle session changes gracefully,


247
00:12:03,724 --> 00:12:06,827 line:-1
call the getCredentialState(forUserID:)


248
00:12:06.860 --> 00:12:10.364 line:-1 align:center
on the ASAuthorizationAppleIDProvider.


249
00:12:10,397 --> 00:12:12,566 line:-1
This API is recommended to be called


250
00:12:12.599 --> 00:12:14.535 line:-1 align:center
as soon as your app launches


251
00:12:14,568 --> 00:12:18,372 line:-2
or at any point where you wish to check
the state.


252
00:12:18.405 --> 00:12:21.808 line:-2 align:center
You should also observe
for credentialRevokedNotification


253
00:12:21,842 --> 00:12:25,179 line:-2
so that your app is notified
when the credential is revoked.


254
00:12:25.212 --> 00:12:27.481 line:-1 align:center
If you observe any change in the state,


255
00:12:27,514 --> 00:12:30,083 line:-2
you should assume that a different user
has signed in


256
00:12:30.117 --> 00:12:32.853 line:-1 align:center
and sign the current user out of the app.


257
00:12:32,886 --> 00:12:34,421 line:-1
If you have an app server,


258
00:12:34.454 --> 00:12:37.891 line:-2 align:center
you should subscribe
to server-to-server notifications.


259
00:12:37,925 --> 00:12:39,927 line:-1
Your server will receive important updates


260
00:12:39,960 --> 00:12:42,563 line:-1
about your users and their accounts.


261
00:12:42,596 --> 00:12:45,132 line:-2
Notifications are sent to each group
of apps


262
00:12:45.165 --> 00:12:47.134 line:-1 align:center
for the following scenarios:


263
00:12:47.167 --> 00:12:51.805 line:-2 align:center
when the user disables or enables
their mail forwarding preference;


264
00:12:51.839 --> 00:12:55.309 line:-2 align:center
when the user stops using their Apple ID
with your app;


265
00:12:55.342 --> 00:12:58.378 line:-2 align:center
or when the user permanently deletes
their Apple ID.


266
00:12:59,179 --> 00:13:01,448 line:-1
To start receiving notifications,


267
00:13:01.481 --> 00:13:03.784 line:-1 align:center
you should first register an endpoint URL


268
00:13:03,817 --> 00:13:06,220 line:-1
in the Apple Developer portal.


269
00:13:06,253 --> 00:13:08,856 line:-2
All events arrive
at the same endpoint URL.


270
00:13:09,756 --> 00:13:14,127 line:-2
The events are sent as JSON web tokens
signed by Apple.


271
00:13:14,161 --> 00:13:16,430 line:-1
If mail forwarding is disabled,


272
00:13:16.463 --> 00:13:18.398 line:-1 align:center
in the payload of the JWT,


273
00:13:18,432 --> 00:13:20,934 line:-1
you will receive an email-disabled event.


274
00:13:23.070 --> 00:13:26.206 line:-2 align:center
When the user stops using
their Apple ID with your app,


275
00:13:26.240 --> 00:13:28.308 line:-1 align:center
you will get a consent-revoked event.


276
00:13:29,276 --> 00:13:32,212 line:-2
It is important to invalidate
any active user session


277
00:13:32,246 --> 00:13:33,347 line:-1
when you get this event.


278
00:13:34.515 --> 00:13:36.850 line:-1 align:center
And if the user deletes their Apple ID,


279
00:13:36.884 --> 00:13:39.353 line:-1 align:center
you will get an account-delete event.


280
00:13:39,386 --> 00:13:42,990 line:-2
Again, be sure to invalidate
any active user session


281
00:13:43,023 --> 00:13:45,392 line:-2
and update their accounts
according to your process.


282
00:13:46.527 --> 00:13:49.663 line:-1 align:center
Now I'd like to focus on account deletion.


283
00:13:49.696 --> 00:13:52.065 line:-1 align:center
Accounts are part of our identities,


284
00:13:52.099 --> 00:13:55.836 line:-2 align:center
and we use them to manage some
of our most personal and private data.


285
00:13:55,869 --> 00:13:58,038 line:-2
Someone might want to delete
their account,


286
00:13:58,071 --> 00:14:00,140 line:-2
and you need to support this
in your app.


287
00:14:01,241 --> 00:14:03,610 line:-2
You should provide a way
to initiate account deletion


288
00:14:03.644 --> 00:14:04.678 line:-1 align:center
from your app,


289
00:14:04,711 --> 00:14:06,346 line:-1
and it is your responsibility


290
00:14:06.380 --> 00:14:08.315 line:-1 align:center
to manage the entire deletion process.


291
00:14:09.516 --> 00:14:10.984 line:-1 align:center
If you have an app server


292
00:14:11.018 --> 00:14:13.020 line:-1 align:center
that stores user information,


293
00:14:13.053 --> 00:14:15.055 line:-1 align:center
typically, the app notifies the server


294
00:14:15.088 --> 00:14:17.191 line:-1 align:center
to delete user accounts.


295
00:14:17,224 --> 00:14:19,393 line:-1
Now, you can include Sign in with Apple as


296
00:14:19,426 --> 00:14:22,296 line:-1
part of your deletion process.


297
00:14:22.329 --> 00:14:24.698 line:-1 align:center
This is done using a new REST endpoint


298
00:14:24.731 --> 00:14:26.333 line:-1 align:center
that your server can use


299
00:14:26.366 --> 00:14:29.603 line:-2 align:center
to delete an account associated
with your app.


300
00:14:29.636 --> 00:14:31.805 line:-1 align:center
Let me briefly take you through this API.


301
00:14:32,673 --> 00:14:34,675 line:-1
In order to delete an account,


302
00:14:34.708 --> 00:14:37.344 line:-1 align:center
you must have either a valid refresh token


303
00:14:37.377 --> 00:14:40.380 line:-1 align:center
or a valid access token for the user.


304
00:14:40,414 --> 00:14:42,316 line:-1
If you don't have either of the tokens,


305
00:14:42.349 --> 00:14:46.253 line:-2 align:center
you can generate using
the auth/token endpoint.


306
00:14:46,286 --> 00:14:48,155 line:-1
Once you have either of the tokens,


307
00:14:48,188 --> 00:14:50,924 line:-1
you can use the auth/revoke endpoint


308
00:14:50.958 --> 00:14:53.126 line:-1 align:center
with the required parameters.


309
00:14:53,160 --> 00:14:54,795 line:-1
When using the refresh token,


310
00:14:54,828 --> 00:14:57,564 line:-1
set the token type to REFRESH_TOKEN.


311
00:14:58,765 --> 00:15:01,168 line:-2
If you want to delete
using the access token,


312
00:15:01,201 --> 00:15:04,004 line:-1
set the token type to ACCESS_TOKEN.


313
00:15:04.838 --> 00:15:06.740 line:-1 align:center
If you get a successful response,


314
00:15:06,773 --> 00:15:09,376 line:-1
the tokens and the user's active sessions


315
00:15:09.409 --> 00:15:11.078 line:-1 align:center
will be instantly invalidated.


316
00:15:12.079 --> 00:15:14.982 line:-2 align:center
Once deleted,
the user returning to your app


317
00:15:15.015 --> 00:15:16.783 line:-1 align:center
and using Sign in with Apple


318
00:15:16,817 --> 00:15:18,252 line:-1
will have an experience similar


319
00:15:18,285 --> 00:15:20,354 line:-2
to when they first created the account
with the app.


320
00:15:21,522 --> 00:15:23,090 line:-1
With that, I will sign out


321
00:15:23,123 --> 00:15:25,259 line:-1
and pass it on to my colleague Patrick


322
00:15:25.292 --> 00:15:27.561 line:-2 align:center
to discuss how you can use
Sign in with Apple


323
00:15:27.594 --> 00:15:29.363 line:-1 align:center
on the web and other platforms.


324
00:15:30.731 --> 00:15:31.965 line:-1 align:center
Patrick: Thank you, Ram!


325
00:15:31,999 --> 00:15:34,801 line:-2
People love how Sign in with Apple
works seamlessly


326
00:15:34.835 --> 00:15:37.137 line:-1 align:center
across all of Apple's platforms.


327
00:15:37.171 --> 00:15:38.939 line:-1 align:center
But it doesn’t stop there.


328
00:15:38.972 --> 00:15:43.510 line:-2 align:center
Sign in with Apple also works seamlessly
on the web and other platforms.


329
00:15:43,544 --> 00:15:47,047 line:-2
Let’s discuss how you can enhance
your Sign in with Apple experience


330
00:15:47.080 --> 00:15:49.449 line:-1 align:center
to support the web and other platforms.


331
00:15:50.918 --> 00:15:55.956 line:-2 align:center
We have an existing iOS app that Ram
introduced to you earlier, called Juice.


332
00:15:55,989 --> 00:15:58,425 line:-2
We’d like to bring Juice
to even more users


333
00:15:58.458 --> 00:16:00.694 line:-1 align:center
by expanding to the web.


334
00:16:00.727 --> 00:16:03.063 line:-1 align:center
Let’s begin by discussing how to group


335
00:16:03.096 --> 00:16:04.665 line:-1 align:center
our similar apps together.


336
00:16:05,832 --> 00:16:08,702 line:-2
It is recommended that you group
related apps together


337
00:16:08.735 --> 00:16:11.405 line:-1 align:center
to streamline the user experience.


338
00:16:11,438 --> 00:16:13,173 line:-1
By grouping related apps together,


339
00:16:13,207 --> 00:16:15,943 line:-2
your users only need to provide
their consent once


340
00:16:15.976 --> 00:16:17.811 line:-1 align:center
to share their information with your app.


341
00:16:18.846 --> 00:16:22.549 line:-2 align:center
For example, your app may be available
on iOS and macOS


342
00:16:22,583 --> 00:16:25,519 line:-2
but use different bundle identifiers
for each platform.


343
00:16:26.220 --> 00:16:28.555 line:-2 align:center
It’s recommended that you group
these apps together.


344
00:16:29.156 --> 00:16:31.525 line:-1 align:center
When using Sign in with Apple, your users


345
00:16:31,558 --> 00:16:33,894 line:-1
will see the App Icon for the app you set


346
00:16:33.927 --> 00:16:35.095 line:-1 align:center
as the primary app.


347
00:16:35,796 --> 00:16:38,966 line:-2
Let’s discover how you can configure
a Services ID


348
00:16:38.999 --> 00:16:41.635 line:-2 align:center
to support Sign in with Apple
on your website.


349
00:16:42,436 --> 00:16:45,839 line:-2
To begin, log into the Apple Developer Portal


350
00:16:45,873 --> 00:16:49,376 line:-2
and navigate to "Certificates,
Identifiers & Profiles."


351
00:16:51,011 --> 00:16:53,914 line:-2
Select the radio button
next to Services IDs


352
00:16:53.947 --> 00:16:55.315 line:-1 align:center
and then click "Continue."


353
00:16:56.884 --> 00:16:58.719 line:-1 align:center
Enter a description for your Service.


354
00:16:59.987 --> 00:17:02.589 line:-1 align:center
Enter a unique identifier for your Service


355
00:17:02.623 --> 00:17:03.590 line:-1 align:center
and click Continue.


356
00:17:04.825 --> 00:17:07.528 line:-2 align:center
Click on the checkbox
next to Sign in with Apple


357
00:17:07.561 --> 00:17:09.363 line:-1 align:center
and then click the Configure button.


358
00:17:10.264 --> 00:17:13.300 line:-2 align:center
On the Web Authentication Configuration
screen,


359
00:17:13.333 --> 00:17:16.370 line:-2 align:center
select a Primary App ID
from the drop-down menu.


360
00:17:17,504 --> 00:17:20,440 line:-1
Next, input the domains and subdomains


361
00:17:20,474 --> 00:17:24,211 line:-2
your website will use to support
Sign in with Apple.


362
00:17:24.244 --> 00:17:27.080 line:-1 align:center
Last, enter a redirect URL for Apple


363
00:17:27.114 --> 00:17:30.250 line:-2 align:center
to redirect your user back to your app
or website


364
00:17:30,284 --> 00:17:32,686 line:-1
after a successful authorization.


365
00:17:32.719 --> 00:17:33.854 line:-1 align:center
That’s it!


366
00:17:33,887 --> 00:17:35,489 line:-1
You’ve configured a Services ID


367
00:17:35.522 --> 00:17:37.958 line:-2 align:center
to support Sign in with Apple
on your website.


368
00:17:38.692 --> 00:17:40.727 line:-1 align:center
You’ll need a button to show users


369
00:17:40,761 --> 00:17:42,563 line:-1
your website supports Sign in with Apple.


370
00:17:43,530 --> 00:17:46,900 line:-2
Apple provides
a highly configurable button API


371
00:17:46,934 --> 00:17:49,536 line:-2
to generate Sign in with Apple
button images.


372
00:17:50,537 --> 00:17:53,507 line:-2
Use this to customize
and embed your button of choice


373
00:17:53.540 --> 00:17:56.176 line:-1 align:center
in your app or website.


374
00:17:56.210 --> 00:17:59.680 line:-2 align:center
Sign in with Apple JS
is a simple Javascript framework


375
00:17:59,713 --> 00:18:03,417 line:-2
that makes integrating Sign in with Apple
even easier on the web.


376
00:18:04.117 --> 00:18:06.253 line:-1 align:center
In your application or website,


377
00:18:06.286 --> 00:18:08.655 line:-1 align:center
start by including the Sign in with Apple


378
00:18:08,689 --> 00:18:10,324 line:-1
JavaScript framework.


379
00:18:10,357 --> 00:18:13,660 line:-2
This simple API will allow you
to authenticate your users


380
00:18:13.694 --> 00:18:16.196 line:-1 align:center
and obtain different assets,


381
00:18:16.230 --> 00:18:18.365 line:-1 align:center
like the Sign in with Apple button


382
00:18:18.398 --> 00:18:21.735 line:-2 align:center
that you can create
with just one simple DIV.


383
00:18:21.768 --> 00:18:25.105 line:-2 align:center
You can also customize the button to fit
your app or website


384
00:18:25,138 --> 00:18:27,107 line:-1
by modifying the properties of the button.


385
00:18:28,108 --> 00:18:31,278 line:-1
For example, with the current properties,


386
00:18:31,311 --> 00:18:33,647 line:-2
you’ll get a white
"Sign in with Apple" button


387
00:18:33,680 --> 00:18:36,116 line:-1
with a border and a default corner radius.


388
00:18:37,084 --> 00:18:39,353 line:-1
By changing the data-color property,


389
00:18:39.386 --> 00:18:41.855 line:-2 align:center
we can choose a different background color
for the button.


390
00:18:42.789 --> 00:18:45.459 line:-1 align:center
If we change the data type to "continue",


391
00:18:45.492 --> 00:18:47.327 line:-1 align:center
the button text will update to show


392
00:18:47.361 --> 00:18:48.729 line:-1 align:center
"Continue with Apple."


393
00:18:49,763 --> 00:18:52,599 line:-2
Alternatively, you can create
a logo-only button


394
00:18:52.633 --> 00:18:55.502 line:-2 align:center
by setting the data mode property
to logo-only.


395
00:18:56,403 --> 00:18:59,173 align:center
The Sign in with Apple Javascript
Button API


396
00:18:59,206 --> 00:19:02,442 align:center
provides even more customizable
properties.


397
00:19:02,476 --> 00:19:05,179 align:center
You can refer
to the Sign in with Apple button resource


398
00:19:05,212 --> 00:19:07,314 line:0
to easily configure these many options.


399
00:19:08.515 --> 00:19:10.417 line:-1 align:center
If you’d prefer to use a REST API


400
00:19:10.450 --> 00:19:12.519 line:-2 align:center
to generate
your Sign in with Apple button,


401
00:19:12.553 --> 00:19:14.855 line:-2 align:center
you can use one
of the Apple ID button endpoints


402
00:19:14.888 --> 00:19:16.623 line:-1 align:center
to generate a button.


403
00:19:16,657 --> 00:19:19,193 line:-2
There are separate endpoints
for center-aligned,


404
00:19:19,226 --> 00:19:21,128 line:-1
left-aligned, and logo buttons.


405
00:19:22,062 --> 00:19:25,365 line:-2
You can customize the button by using
query parameters.


406
00:19:25.399 --> 00:19:26.967 line:-1 align:center
In this example request,


407
00:19:27,000 --> 00:19:29,436 line:0
I customize
a white Sign in with Apple button


408
00:19:29.469 --> 00:19:30.804 line:-11 align:center
with a border.


409
00:19:30,838 --> 00:19:34,908 line:0
I receive a response
with the customized button as a PNG image.


410
00:19:34,942 --> 00:19:38,178 line:-2
Now that you have personalized
your Sign in with Apple button,


411
00:19:38.212 --> 00:19:40.380 line:-1 align:center
it's time to authenticate your user.


412
00:19:41,215 --> 00:19:43,450 line:-2
You’ll need to send
an authorization request


413
00:19:43,483 --> 00:19:46,620 line:-1
with the required parameters to Apple.


414
00:19:46.653 --> 00:19:48.255 line:-1 align:center
These are the parameters you need


415
00:19:48.288 --> 00:19:50.791 line:-1 align:center
in order to successfully log in a user.


416
00:19:52,059 --> 00:19:55,896 line:-2
Since you have already implemented
Sign in with Apple on an Apple platform,


417
00:19:55.929 --> 00:19:57.798 line:-1 align:center
these parameters are very familiar.


418
00:19:59,032 --> 00:20:01,802 line:-1
First, we’ll need to set the “clientID”.


419
00:20:01.835 --> 00:20:03.504 line:-1 align:center
This will be the Services ID


420
00:20:03,537 --> 00:20:05,806 line:-2
that you created
on the Apple Developer Portal


421
00:20:05,839 --> 00:20:07,074 line:-1
for your app or website.


422
00:20:08.075 --> 00:20:12.012 line:-2 align:center
Next, if your app or website requires
email or name,


423
00:20:12.045 --> 00:20:13.914 line:-1 align:center
fill in the "scope" parameter.


424
00:20:13.947 --> 00:20:18.519 line:-2 align:center
If you are requesting multiple scopes,
use a space to separate each scope.


425
00:20:19,419 --> 00:20:22,823 line:-2
It is important that you only request
the data you need.


426
00:20:23.891 --> 00:20:26.593 line:-2 align:center
The “redirectURI” parameter
is where you will add


427
00:20:26,627 --> 00:20:28,729 line:-1
the URL you registered previously


428
00:20:28.762 --> 00:20:30.831 line:-1 align:center
on the Apple Developer Portal


429
00:20:30.864 --> 00:20:34.201 line:-2 align:center
and informs Apple where to direct the user
to on your website.


430
00:20:35.369 --> 00:20:38.739 line:-2 align:center
You can also add a “state”
and “nonce” to secure your request.


431
00:20:40,040 --> 00:20:42,776 line:-2
And finally,
with the "usePopup" parameter,


432
00:20:42,809 --> 00:20:44,945 line:-1
you can choose to display the login screen


433
00:20:44.978 --> 00:20:46.747 line:-1 align:center
in a separate pop-up window


434
00:20:46.780 --> 00:20:48.815 line:-1 align:center
or have the existing window


435
00:20:48.849 --> 00:20:50.817 line:-1 align:center
redirect to the Apple Sign in website.


436
00:20:51.418 --> 00:20:53.187 line:-1 align:center
If someone is using Safari,


437
00:20:53.220 --> 00:20:55.956 line:-2 align:center
they’ll see a native screen like this one
providing them


438
00:20:55,989 --> 00:20:58,926 line:-2
a first-class experience to sign into
your website.


439
00:20:59.660 --> 00:21:03.530 line:-2 align:center
After the Apple ID server
processes the authorization request,


440
00:21:03.564 --> 00:21:04.965 line:-1 align:center
you’ll receive a DOM event


441
00:21:04,998 --> 00:21:07,434 line:-2
containing the results
of the authorization.


442
00:21:08.268 --> 00:21:11.538 line:-2 align:center
To handle a success response,
add an event listener


443
00:21:11,572 --> 00:21:14,708 line:-1
for "AppleIDSignInOnSuccess."


444
00:21:16.176 --> 00:21:19.112 line:-2 align:center
To handle a failure response,
add an event listener


445
00:21:19.146 --> 00:21:22.216 line:-1 align:center
for "AppleIDSignInOnFailure."


446
00:21:23,784 --> 00:21:25,719 line:-1
If the authorization was a success,


447
00:21:25,752 --> 00:21:29,156 line:-2
you’ll receive a response that contains
the authorization code,


448
00:21:29.189 --> 00:21:30.724 line:-1 align:center
the identity token,


449
00:21:30,757 --> 00:21:33,393 line:-1
and the user information if requested.


450
00:21:33,427 --> 00:21:36,029 line:-2
This is similar to the response
you are already used to


451
00:21:36,063 --> 00:21:37,831 line:-1
on Apple platforms.


452
00:21:37,865 --> 00:21:40,834 line:-2
If you’d prefer to use a REST API
to integrate directly


453
00:21:40,868 --> 00:21:42,369 line:-1
with Apple ID servers,


454
00:21:42,402 --> 00:21:45,539 line:-2
direct the authorization request
to the authorize endpoint


455
00:21:45.572 --> 00:21:47.841 line:-1 align:center
with the required parameters.


456
00:21:47.875 --> 00:21:49.877 line:-1 align:center
If the authorization is successful,


457
00:21:49,910 --> 00:21:52,746 line:-2
you’ll get a response that contains
the authorization code,


458
00:21:52.779 --> 00:21:54.181 line:-1 align:center
the identity token,


459
00:21:54,214 --> 00:21:56,283 line:-1
and the user information.


460
00:21:56,316 --> 00:21:57,484 line:-1
This is very similar


461
00:21:57.518 --> 00:22:00.954 line:-2 align:center
to the response you're already used to
on Apple platforms.


462
00:22:00.988 --> 00:22:01.922 line:-1 align:center
That’s it!


463
00:22:01.955 --> 00:22:04.725 line:-2 align:center
You’ve successfully adopted
Sign in with Apple on your website!


464
00:22:05.392 --> 00:22:09.563 line:-2 align:center
To wrap up, I’d like to highlight
some important things to keep in mind


465
00:22:09,596 --> 00:22:11,398 line:-1
while implementing Sign in with Apple.


466
00:22:12.533 --> 00:22:16.036 line:-2 align:center
Unless your app requires
significant account-based features,


467
00:22:16.069 --> 00:22:19.039 line:-1 align:center
let people use your app without a login.


468
00:22:19.072 --> 00:22:21.141 line:-1 align:center
For example, you may allow a user


469
00:22:21,175 --> 00:22:23,243 line:-1
to purchase an item using Apple Pay


470
00:22:23,277 --> 00:22:26,880 line:-2
and then optionally offer them to tie
their purchase to an account


471
00:22:26,914 --> 00:22:28,448 line:-1
after the purchase is complete.


472
00:22:29.249 --> 00:22:33.520 line:-2 align:center
Offer existing users the ability
to upgrade the security of their account


473
00:22:33,554 --> 00:22:37,024 line:-2
by switching away from username
and password authentication


474
00:22:37.057 --> 00:22:38.258 line:-1 align:center
to Sign in with Apple.


475
00:22:39,226 --> 00:22:42,563 line:-2
If you just need a unique identifier
to identify the user,


476
00:22:42.596 --> 00:22:44.298 line:-1 align:center
don't collect name or email.


477
00:22:44.831 --> 00:22:47.668 line:-2 align:center
And if you do collect email
through Sign In with Apple,


478
00:22:47,701 --> 00:22:50,103 line:-2
make sure that you respect
the user's choice.


479
00:22:50.671 --> 00:22:52.906 line:-2 align:center
You should not prompt
for an additional email.


480
00:22:54,041 --> 00:22:56,109 line:-2
It’s important to implement
Sign in with Apple


481
00:22:56,143 --> 00:22:59,580 line:-2
across all of the platforms your app
or website is available.


482
00:23:00.214 --> 00:23:02.482 line:-1 align:center
Your users may use multiple platforms,


483
00:23:02.516 --> 00:23:05.385 line:-2 align:center
and they will expect to use
Sign in with Apple everywhere.


484
00:23:06.153 --> 00:23:09.823 line:-2 align:center
We’re really excited to see what you do
with Sign in with Apple in your apps,


485
00:23:09,857 --> 00:23:11,959 line:-1
and we look forward to your feedback.


486
00:23:11.992 --> 00:23:14.828 line:-2 align:center
Thank you for watching,
and enjoy the rest of WWDC!


487
00:23:14.862 --> 00:23:17.831 line:-1 align:center
[music]

