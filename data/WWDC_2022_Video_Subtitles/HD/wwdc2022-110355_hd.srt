2
00:00:00.334 --> 00:00:06.340 line:-1 align:center
â™ª instrumental hip hop music â™ª


3
00:00:09.710 --> 00:00:11.612 line:-1 align:center
Hi, my name's Philippe.


4
00:00:11,645 --> 00:00:15,148 line:-2
Swift has a growing catalog
of open source packages.


5
00:00:15.182 --> 00:00:18.352 line:-2 align:center
I am pleased to introduce you to one
of the newest additions:


6
00:00:18.385 --> 00:00:20.354 line:-1 align:center
Swift Async Algorithms.


7
00:00:20.387 --> 00:00:23.090 line:-2 align:center
This package is
alongside the other packages,


8
00:00:23.123 --> 00:00:26.493 line:-2 align:center
like Swift Collections
and Swift Algorithms.


9
00:00:26.527 --> 00:00:29.997 line:-2 align:center
The Swift Async Algorithms package
is a set of algorithms


10
00:00:30.030 --> 00:00:35.435 line:-2 align:center
specifically focused on processing values
over time using AsyncSequence.


11
00:00:35,469 --> 00:00:37,171 line:-1
But before we get into it,


12
00:00:37,204 --> 00:00:40,207 line:-2
let's take a brief moment
to recap AsyncSequence.


13
00:00:40,240 --> 00:00:43,644 line:-2
AsyncSequence is a protocol
that lets you describe values


14
00:00:43,677 --> 00:00:45,612 line:-1
produced asynchronously.


15
00:00:45,646 --> 00:00:50,817 line:-2
Basically, it's just like Sequence,
but has two key differences.


16
00:00:50.851 --> 00:00:54.288 line:-2 align:center
The next function
from its iterator is asynchronous,


17
00:00:54.321 --> 00:00:58.325 line:-2 align:center
being that it can deliver values
using Swift concurrency.


18
00:00:58.358 --> 00:01:03.297 line:-2 align:center
It also lets you handle any potential
failures using Swift's throw effect.


19
00:01:03.330 --> 00:01:06.233 line:-2 align:center
And just like sequence,
you can iterate it,


20
00:01:06,266 --> 00:01:09,002 line:-1
using the for-await-in syntax.


21
00:01:09,036 --> 00:01:11,905 line:-1
In short, if you know how to use Sequence,


22
00:01:11,939 --> 00:01:15,409 line:-1
you already know how to use AsyncSequence.


23
00:01:15.442 --> 00:01:19.847 line:-2 align:center
Now, when AsyncSequence was introduced,
we added in almost all the tools


24
00:01:19,880 --> 00:01:23,984 line:-2
you would expect to find with Sequence
right there with the async versions.


25
00:01:24,017 --> 00:01:29,990 line:-2
You have algorithms like map,
filter, reduce, and more.


26
00:01:30,023 --> 00:01:33,861 align:center
The Swift Async Algorithms package
takes this a step further


27
00:01:33,894 --> 00:01:37,664 align:center
by incorporating more advanced algorithms,
as well as interoperating


28
00:01:37,698 --> 00:01:41,535 align:center
with clocks to give you
some really powerful stuff.


29
00:01:41,568 --> 00:01:45,305 line:0
This is an open source package
of AsyncSequence algorithms


30
00:01:45,339 --> 00:01:48,008 align:center
that augment Swift concurrency.


31
00:01:48,041 --> 00:01:51,011 line:0
Last year we introduced
the Swift Algorithms package.


32
00:01:51,044 --> 00:01:53,680 align:center
To demonstrate the uses
of those algorithms,


33
00:01:53,714 --> 00:01:55,115 align:center
we made a messaging app.


34
00:01:55,148 --> 00:01:58,485 line:0
This was a great example of some
of the rich and powerful things


35
00:01:58,519 --> 00:02:00,454 line:0
you can do with that package.


36
00:02:00.487 --> 00:02:03.457 line:-2 align:center
We decided there were a number
of really good opportunities


37
00:02:03.490 --> 00:02:07.661 line:-2 align:center
to take advantage of migrating the app
to use Swift concurrency.


38
00:02:07.694 --> 00:02:10.998 line:-2 align:center
To highlight just a few
of the asynchronous algorithms,


39
00:02:11.031 --> 00:02:13.834 line:-2 align:center
I'm gonna take you through some
of the things that we used


40
00:02:13.867 --> 00:02:16.036 line:-1 align:center
and how they work.


41
00:02:16.069 --> 00:02:18.972 line:-2 align:center
First off, we have a family
of algorithms for working


42
00:02:19,006 --> 00:02:21,675 line:-1
with multiple input AsyncSequences.


43
00:02:21.708 --> 00:02:27.581 line:-2 align:center
These are algorithms focused on combining
AsyncSequences together in different ways.


44
00:02:27.614 --> 00:02:30.083 line:-1 align:center
But they all share one characteristic:


45
00:02:30.117 --> 00:02:35.822 line:-2 align:center
They take multiple input AsyncSequences
and produce one output AsyncSequence.


46
00:02:36,857 --> 00:02:40,260 line:-2
One you might
already be familiar with is Zip.


47
00:02:40,294 --> 00:02:44,064 line:-2
The Zip algorithm takes
multiple inputs and iterates them


48
00:02:44,097 --> 00:02:48,101 line:-2
such that it produces a tuple
of the results from each of the bases.


49
00:02:48.135 --> 00:02:52.539 line:-2 align:center
Each of the inputs to Zip are the bases
that the Zip is constructed from.


50
00:02:52.573 --> 00:02:56.276 line:-2 align:center
The asynchronous Zip algorithm works
just like the Zip algorithm


51
00:02:56.310 --> 00:02:57.744 line:-1 align:center
in the standard library,


52
00:02:57,778 --> 00:03:00,347 line:-2
but it iterates each
of the bases concurrently


53
00:03:00.380 --> 00:03:04.785 line:-2 align:center
and rethrows errors if a failure occurs
on iterating any of them.


54
00:03:04.818 --> 00:03:07.187 line:-2 align:center
Now, accomplishing
that concurrent iteration


55
00:03:07,221 --> 00:03:10,424 line:-2
with rethrowing errors
can be rather involved.


56
00:03:10.457 --> 00:03:13.460 line:-2 align:center
But the Swift Async Algorithms package
took care of all of that


57
00:03:13.493 --> 00:03:15.629 line:-1 align:center
for us in our messaging app.


58
00:03:15,662 --> 00:03:17,297 line:-1
We previously had a lot of code


59
00:03:17.331 --> 00:03:19.900 line:-2 align:center
coordinating asynchronously
generating previews


60
00:03:19.933 --> 00:03:22.469 line:-2 align:center
of video recordings
and transcoding video


61
00:03:22.503 --> 00:03:26.673 line:-2 align:center
into multiple sizes for efficient storage
and transmission.


62
00:03:26.707 --> 00:03:31.211 line:-2 align:center
By using Zip we can ensure
that the transcoded video gets a preview


63
00:03:31.245 --> 00:03:33.213 line:-1 align:center
when we send it off to the server.


64
00:03:33.247 --> 00:03:36.416 line:-2 align:center
Since Zip is concurrent,
neither the transcoding


65
00:03:36,450 --> 00:03:39,152 line:-1
or the preview will delay each other.


66
00:03:39.186 --> 00:03:40.988 line:-1 align:center
But this goes a bit further.


67
00:03:41.021 --> 00:03:43.924 line:-1 align:center
Zip itself has no preference on which side


68
00:03:43,957 --> 00:03:48,095 line:-2
produced a value first or not,
so a video could be produced first


69
00:03:48,128 --> 00:03:51,098 line:-2
or a preview,
and no matter which side it is,


70
00:03:51.131 --> 00:03:54.968 line:-2 align:center
it will await for the other
to send a complete tuple.


71
00:03:55,002 --> 00:03:58,505 line:-2
We can await the pairs
such that they can be uploaded together


72
00:03:58.539 --> 00:04:04.044 line:-2 align:center
because Zip awaits each side concurrently
to construct a tuple of the values.


73
00:04:04.077 --> 00:04:07.714 line:-2 align:center
We came to the conclusion
that modeling our incoming messages


74
00:04:07.748 --> 00:04:10.717 line:-2 align:center
as an AsyncSequence
made a lot of sense.


75
00:04:10,751 --> 00:04:14,421 line:-2
So we decided to use AsyncStream
to handle those messages


76
00:04:14,454 --> 00:04:17,157 line:-2
since it preserves order
and turns our callbacks


77
00:04:17.191 --> 00:04:20.093 line:-1 align:center
into an AsyncSequence of messages.


78
00:04:20.127 --> 00:04:23.130 line:-2 align:center
One of the requested features
we needed to tackle is


79
00:04:23,163 --> 00:04:25,532 line:-2
that we wanted
to support multiple accounts.


80
00:04:25.566 --> 00:04:30.304 line:-2 align:center
So each account creates an AsyncStream
of incoming messages,


81
00:04:30.337 --> 00:04:31.939 line:-1 align:center
but when implementing this,


82
00:04:31.972 --> 00:04:36.844 line:-2 align:center
we need to handle them all together
as one singular AsyncSequence.


83
00:04:36.877 --> 00:04:41.715 line:-2 align:center
This means we needed an algorithm
for merging those AsyncSequences together.


84
00:04:41.748 --> 00:04:47.421 line:-2 align:center
Thankfully the Swift Async Algorithms
package has an algorithm for exactly that,


85
00:04:47.454 --> 00:04:49.957 line:-1 align:center
aptly named "Merge."


86
00:04:49.990 --> 00:04:54.194 line:-2 align:center
It works similarly to Zip in the regards
that it concurrently iterates


87
00:04:54.228 --> 00:04:58.565 line:-2 align:center
multiple AsyncSequences.
But instead of creating paired tuples,


88
00:04:58.599 --> 00:05:01.735 line:-2 align:center
it requires the bases
to share the same element type


89
00:05:01,768 --> 00:05:04,137 line:-1
and merges the base AsyncSequences


90
00:05:04.171 --> 00:05:08.141 line:-2 align:center
into one singular AsyncSequence
of those elements.


91
00:05:08.175 --> 00:05:12.346 line:-2 align:center
Merge works by taking
the first element produced by any


92
00:05:12.379 --> 00:05:13.914 line:-1 align:center
of the sides when iterated.


93
00:05:13.947 --> 00:05:18.318 line:-2 align:center
It keeps iterating until there
are no more values that could be produced,


94
00:05:18.352 --> 00:05:23.357 line:-2 align:center
specifically when all base AsyncSequences
return nil from their iterator.


95
00:05:23.390 --> 00:05:27.861 line:-2 align:center
If any of the bases produces an error,
the other iterations are cancelled.


96
00:05:27.895 --> 00:05:33.400 line:-2 align:center
This lets us take the AsyncSequences
of messages and merge them.


97
00:05:33,433 --> 00:05:38,338 line:-2
These combining algorithms work
concurrently on when values are produced,


98
00:05:38,372 --> 00:05:43,076 line:-2
but sometimes it is useful to
actually interact with time itself.


99
00:05:43,110 --> 00:05:47,481 line:-2
The Swift Async Algorithms package
brings in a family of algorithms


100
00:05:47.514 --> 00:05:51.919 line:-2 align:center
to work with time by leveraging
the new Clock API in Swift.


101
00:05:51.952 --> 00:05:55.455 line:-2 align:center
Time itself can be
a really complex subject,


102
00:05:55,489 --> 00:05:58,959 line:-1
and new in Swift (5.7) are a set of APIs


103
00:05:58,992 --> 00:06:01,495 line:-1
to make that safe and consistent:


104
00:06:01.528 --> 00:06:04.565 line:-1 align:center
Clock, Instant, and Duration.


105
00:06:06,433 --> 00:06:09,236 line:-1
The Clock protocol defines two primitives,


106
00:06:09,269 --> 00:06:11,605 line:-1
a way to wake up after a given instant


107
00:06:11.638 --> 00:06:13.740 line:-1 align:center
and a way to produce a concept of now.


108
00:06:13.774 --> 00:06:15.876 line:-1 align:center
There are a few built in clocks.


109
00:06:15.909 --> 00:06:17.811 line:-1 align:center
Two of the more common ones are


110
00:06:17.845 --> 00:06:20.280 line:-2 align:center
the ContinuousClock
and the SuspendingClock.


111
00:06:20.314 --> 00:06:24.885 line:-2 align:center
You can use the ContinuousClock
to measure time just like a stopwatch,


112
00:06:24,918 --> 00:06:28,655 line:-2
where time progresses no matter
the state of the thing being measured.


113
00:06:28,689 --> 00:06:32,593 line:-2
The SuspendingClock, on the other hand,
does what its name implies;


114
00:06:32.626 --> 00:06:35.462 line:-2 align:center
it suspends
when the machine is put to sleep.


115
00:06:35,495 --> 00:06:40,400 line:-2
We used the new clock API in our app
to migrate from existing callback events


116
00:06:40.434 --> 00:06:45.672 line:-2 align:center
to clock sleep function to handle
dismissing alerts after a deadline.


117
00:06:45,706 --> 00:06:49,943 line:-2
We were able to create the deadline
by adding a duration value


118
00:06:49,977 --> 00:06:55,249 line:-2
that indicated specifically the number
of seconds we wanted to delay.


119
00:06:55,282 --> 00:06:58,785 line:-2
Clock also has some handy methods
to measure the elapsed duration


120
00:06:58.819 --> 00:07:00.454 line:-1 align:center
of execution of work.


121
00:07:00.487 --> 00:07:03.891 line:-2 align:center
Here we have those two common clocks
I mentioned earlier,


122
00:07:03,924 --> 00:07:06,493 line:-2
the SuspendingClock
and ContinuousClock.


123
00:07:07.494 --> 00:07:09.363 line:-1 align:center
Below are displays showing


124
00:07:09,396 --> 00:07:11,031 line:-1
the potential elapsed duration


125
00:07:11,064 --> 00:07:12,699 line:-1
of work being measured.


126
00:07:12.733 --> 00:07:16.170 line:-2 align:center
The key difference
between these two clocks


127
00:07:16.203 --> 00:07:19.373 line:-2 align:center
comes from its behavior
when the machine is asleep.


128
00:07:20.440 --> 00:07:24.244 line:-2 align:center
For long running work like these,
the work can be paused,


129
00:07:24.278 --> 00:07:25.812 line:-1 align:center
just as we did here,


130
00:07:25,846 --> 00:07:30,083 line:-1
but when we resume the execution,


131
00:07:30,117 --> 00:07:32,286 line:-1
the ContinuousClock has progressed


132
00:07:32.319 --> 00:07:33.887 line:-1 align:center
while the machine was asleep,


133
00:07:33.921 --> 00:07:36.390 line:-1 align:center
but the SuspendingClock did not.


134
00:07:36.423 --> 00:07:39.426 line:-2 align:center
Commonly, this difference
can be the key detail


135
00:07:39.459 --> 00:07:42.829 line:-2 align:center
to make sure things like animations
work as expected


136
00:07:42.863 --> 00:07:45.999 line:-1 align:center
by suspending the timing of the execution.


137
00:07:46.033 --> 00:07:49.536 line:-2 align:center
If you need to interact with time
in relation to the machine,


138
00:07:49.570 --> 00:07:52.873 line:-2 align:center
like for animations,
use the SuspendingClock.


139
00:07:53.907 --> 00:07:57.110 line:-2 align:center
Measuring tasks in relation
to the human in front of the device


140
00:07:57.144 --> 00:07:59.813 line:-1 align:center
is better suited for the ContinuousClock.


141
00:07:59.847 --> 00:08:03.116 line:-2 align:center
So if you need to delay
by an absolute duration,


142
00:08:03.150 --> 00:08:07.788 line:-2 align:center
something relative to humans,
use the ContinuousClock.


143
00:08:07.821 --> 00:08:12.292 line:-2 align:center
The Swift Async Algorithms package
uses these new Clock, Instant,


144
00:08:12,326 --> 00:08:16,263 line:-2
and Duration types to build
generic algorithms for dealing


145
00:08:16,296 --> 00:08:21,001 line:-2
with many of the concepts of how events
are processed with regards to time.


146
00:08:21,034 --> 00:08:24,404 line:-2
In our messaging app,
we found these really helpful


147
00:08:24.438 --> 00:08:27.508 line:-1 align:center
for providing precise control over events.


148
00:08:27,541 --> 00:08:32,412 line:-2
It let us rate limit interactions
and efficiently buffer messages.


149
00:08:33.347 --> 00:08:36.483 line:-2 align:center
Perhaps the most prominent area
that we utilized time


150
00:08:36,517 --> 00:08:38,352 line:-1
was searching messages.


151
00:08:38.385 --> 00:08:42.289 line:-2 align:center
We created a controller
that manages a channel of results.


152
00:08:42.322 --> 00:08:47.661 line:-2 align:center
The channel marshals search results
from the search task back to our UI.


153
00:08:47,694 --> 00:08:51,598 line:-2
The search task itself needed
to have some specific characteristics


154
00:08:51,632 --> 00:08:53,333 line:-1
with regards to time.


155
00:08:53,367 --> 00:08:58,105 line:-2
We wanted to make sure to rate limit
searching sent messages on the server.


156
00:08:59,740 --> 00:09:03,177 line:-2
The algorithm Debounce
awaits a quiescence period


157
00:09:03.210 --> 00:09:06.547 line:-2 align:center
before it emits the next values
when iterated.


158
00:09:06,580 --> 00:09:10,784 line:-2
It means that events can come in fast,
but we want to make sure to wait


159
00:09:10.817 --> 00:09:14.588 line:-2 align:center
for a quiet period
before dealing with values.


160
00:09:14.621 --> 00:09:18.025 line:-2 align:center
When user input from a search field
is changed rapidly,


161
00:09:18.058 --> 00:09:19.793 line:-1 align:center
we don't want the search controller


162
00:09:19,826 --> 00:09:22,796 line:-2
to fire off a search request
for each change.


163
00:09:22.829 --> 00:09:26.133 line:-2 align:center
Instead, we want to make sure
to wait for a quiet period


164
00:09:26.166 --> 00:09:29.670 line:-2 align:center
when we're certain typing was likely
to be done.


165
00:09:29.703 --> 00:09:33.740 line:-2 align:center
By default, the Debounce algorithm
will use the ContinuousClock.


166
00:09:33,774 --> 00:09:37,077 line:-2
In this case, we can debounce
the input such that it awaits


167
00:09:37.110 --> 00:09:40.581 line:-2 align:center
a specified duration
while nothing has occurred.


168
00:09:40.614 --> 00:09:43.951 line:-2 align:center
Clocks and durations are
not just used for debouncing,


169
00:09:43.984 --> 00:09:46.420 line:-2 align:center
but they're used
for other algorithms too.


170
00:09:46.453 --> 00:09:49.122 line:-2 align:center
One area that we found
that was really useful


171
00:09:49.156 --> 00:09:52.626 line:-2 align:center
was sending batches
of messages to the server.


172
00:09:52,659 --> 00:09:54,795 line:-1
In the Swift algorithms package,


173
00:09:54.828 --> 00:09:57.998 line:-2 align:center
there's a set
of algorithms to chunk values.


174
00:09:58.031 --> 00:10:01.034 line:-2 align:center
The Swift Async Algorithms package
offers those,


175
00:10:01.068 --> 00:10:03.003 line:-1 align:center
but also adds a set of versions


176
00:10:03.036 --> 00:10:06.406 line:-2 align:center
that interoperate
with clocks and durations.


177
00:10:06,440 --> 00:10:10,244 line:-2
The family of chunking algorithms allow
for control over chunks by count,


178
00:10:10.277 --> 00:10:12.713 line:-1 align:center
by time, or by content.


179
00:10:12.746 --> 00:10:16.517 line:-2 align:center
If an error occurs in any of these,
that error is rethrown,


180
00:10:16.550 --> 00:10:19.853 line:-2 align:center
so our code is safe
when it comes to failures.


181
00:10:20,821 --> 00:10:24,691 line:-2
We used the "chunked(by:)" API
to ensure that chunks of messages


182
00:10:24,725 --> 00:10:28,529 line:-2
are serialized and sent off
by a certain elapsed duration.


183
00:10:28.562 --> 00:10:33.667 line:-2 align:center
That way, our server gets
efficient packets sent from the clients.


184
00:10:33,700 --> 00:10:37,037 line:-2
We were able to use this API
to build batches of messages


185
00:10:37,070 --> 00:10:39,506 line:-1
every 500 milliseconds.


186
00:10:39,540 --> 00:10:43,777 line:-2
That way, if someone's really excited
and typing really fast,


187
00:10:43,810 --> 00:10:47,014 line:-2
the requests sent
to the server are grouped up.


188
00:10:47.047 --> 00:10:49.783 line:-2 align:center
When working with collections
and sequence,


189
00:10:49.816 --> 00:10:54.621 line:-2 align:center
it's often useful and performant
to lazily process elements.


190
00:10:54,655 --> 00:10:58,559 line:-2
AsyncSequence works much
like how the lazy algorithms work


191
00:10:58,592 --> 00:11:00,794 line:-1
in the Swift standard library.


192
00:11:00.827 --> 00:11:04.831 line:-2 align:center
But just like those lazy algorithms,
there are often times where you need


193
00:11:04.865 --> 00:11:08.202 line:-2 align:center
to move back
into the world of collections.


194
00:11:08.235 --> 00:11:12.005 line:-2 align:center
The Swift Async Algorithms package
offers a set of initializers


195
00:11:12.039 --> 00:11:15.342 line:-2 align:center
for constructing collections
using AsyncSequence.


196
00:11:15,375 --> 00:11:19,246 line:-2
These let you build up dictionaries,
sets, or arrays


197
00:11:19.279 --> 00:11:23.183 line:-2 align:center
with input AsyncSequences
that are known to be finite.


198
00:11:23,217 --> 00:11:26,820 line:-2
The collection initializers
let us build in conversions


199
00:11:26.854 --> 00:11:31.825 line:-2 align:center
right into our initialization of messages
and keep our data types as Array.


200
00:11:31.859 --> 00:11:34.962 line:-2 align:center
This was really useful
since we had numerous features


201
00:11:34,995 --> 00:11:38,398 line:-2
that really could use some updating
to use Swift concurrency.


202
00:11:38.432 --> 00:11:41.268 line:-2 align:center
And by keeping
our existing data structures,


203
00:11:41.301 --> 00:11:44.304 line:-2 align:center
we can migrate parts
of our app incrementally


204
00:11:44,338 --> 00:11:46,974 line:-1
and where it makes sense.


205
00:11:47,007 --> 00:11:49,910 line:-2
So far,
we've just gone over just a handful


206
00:11:49.943 --> 00:11:52.579 line:-2 align:center
of the highlights
of Swift Async Algorithms package.


207
00:11:52.613 --> 00:11:54.047 line:-1 align:center
There are a whole lot more


208
00:11:54.081 --> 00:11:55.849 line:-1 align:center
than just what we've covered today.


209
00:11:55,883 --> 00:12:01,855 line:-2
We have algorithms ranging
from combining multiple AsyncSequences,


210
00:12:01,889 --> 00:12:05,425 line:-1
rate limiting by time,


211
00:12:05,459 --> 00:12:08,061 line:-1
breaking things into chunks,


212
00:12:08.095 --> 00:12:10.764 line:-2 align:center
but those were just the highlights
that we ended up


213
00:12:10.797 --> 00:12:13.233 line:-1 align:center
using extensively in our app.


214
00:12:13.267 --> 00:12:16.436 line:-2 align:center
This package has a lot more
than just those.


215
00:12:16.470 --> 00:12:19.139 line:-1 align:center
It ranges from buffering,


216
00:12:19.173 --> 00:12:23.610 line:-1 align:center
reducing, joining,


217
00:12:23,644 --> 00:12:27,848 line:-2
to injecting values intermittently,
and more.


218
00:12:27.881 --> 00:12:31.818 line:-2 align:center
The Swift Async Algorithms package
takes the set of algorithms


219
00:12:31.852 --> 00:12:35.889 line:-2 align:center
for dealing with things over time
and expands it to a wide range


220
00:12:35.923 --> 00:12:39.526 line:-2 align:center
of advanced functionality
that can help you in your apps.


221
00:12:39,560 --> 00:12:40,928 line:-1
Try it out.


222
00:12:40,961 --> 00:12:44,198 line:-2
We're really excited
to discover what you build with these,


223
00:12:44,231 --> 00:12:46,400 line:-1
and that excitement is shared.


224
00:12:46.433 --> 00:12:50.437 line:-2 align:center
This package is being developed
in the open with you.


225
00:12:50.470 --> 00:12:53.173 line:-2 align:center
Thanks for watching,
and enjoy the rest of the conference.


226
00:12:53,207 --> 00:12:58,345 align:center
â™ª instrumental hip hop music â™ª

