2
00:00:00,000 --> 00:00:03,003 line:-1
♪ Mellow instrumental
hip-hop music ♪


3
00:00:03,003 --> 00:00:09,710 line:0 size:2% align:right
♪


4
00:00:09.710 --> 00:00:12.145 line:-1 position:50%
Hi there! I'm Kendall Bagley,


5
00:00:12,145 --> 00:00:14,982 line:-1
a software engineer
on the Safari team.


6
00:00:14,982 --> 00:00:19,486 line:-1
It's been a full year since
we last got together at WWDC,


7
00:00:19.486 --> 00:00:21.488 line:-1 position:50%
and today, we're going
to be talking about


8
00:00:21,488 --> 00:00:23,957 line:-1
all the amazing features
and enhancements


9
00:00:23.957 --> 00:00:25.425 line:-1 position:50%
to Safari and WebKit


10
00:00:25,425 --> 00:00:28,629 line:-1
from both what's new here
at this year's WWDC


11
00:00:28,629 --> 00:00:32,032 line:-1
and from what we've seen
throughout this whole past year.


12
00:00:32.032 --> 00:00:35.335 line:-1 position:50%
In fact, it's been
quite a busy year!


13
00:00:35,335 --> 00:00:38,372 line:-1
Since last fall, each release
of Safari has delivered


14
00:00:38.372 --> 00:00:42.209 line:-1 position:50%
new and exciting features that
we know y'all as web developers


15
00:00:42,209 --> 00:00:44,211 line:-1
have been asking for.


16
00:00:44,211 --> 00:00:47,014 line:-1
Each of the new enhancements
delivered this year


17
00:00:47,014 --> 00:00:49,349 line:-1
aimed to address some of
the biggest points of feedback


18
00:00:49.349 --> 00:00:51.451 line:-1 position:50%
you've been sharing with us.


19
00:00:51,451 --> 00:00:55,022 line:-1
Like adding a parent selector
with the :has() pseudo class,


20
00:00:55,022 --> 00:00:59,059 line:-1
the new flexbox inspector,
and even container queries.


21
00:00:59,059 --> 00:01:02,362 line:-1
We want to make your daily work
that much better and easier


22
00:01:02.362 --> 00:01:05.032 line:-1 position:50%
while building the best
and most powerful software


23
00:01:05.032 --> 00:01:06.400 line:-1 position:50%
for the web.


24
00:01:06,400 --> 00:01:09,670 line:-1
In fact, what's here
is just some of the new content


25
00:01:09,670 --> 00:01:11,872 line:-1
that we'll be going over today.


26
00:01:11,872 --> 00:01:15,242 line:-1
But there's so much more that
we wouldn't possibly be able


27
00:01:15,242 --> 00:01:18,378 line:-1
to cover it all
in this one session.


28
00:01:18,378 --> 00:01:23,150 line:0
There's been a total
of 162 new web platform features


29
00:01:23,150 --> 00:01:26,019 position:50%
and improvements across
the seven Safari releases


30
00:01:26,019 --> 00:01:27,721 position:50%
this past year.


31
00:01:27,721 --> 00:01:31,692 position:50%
We've been proud to provide
so many new tools for you to use


32
00:01:31,692 --> 00:01:34,361 line:0
to make your websites
and web apps.


33
00:01:34,361 --> 00:01:38,932 position:50%
And for macOS, the best way
to see what's new and exciting


34
00:01:38,932 --> 00:01:42,836 line:0
as soon as possible is through
Safari Technology Preview,


35
00:01:42,836 --> 00:01:45,339 line:0
where you can try out
the latest and greatest


36
00:01:45,339 --> 00:01:48,308 position:50%
for Safari and WebKit
and also help us know


37
00:01:48,308 --> 00:01:51,011 position:50%
what we should have come next.


38
00:01:51.011 --> 00:01:55.148 line:-1 position:50%
But like you saw, there's
a whole bunch of new features,


39
00:01:55,148 --> 00:01:56,249 line:-1
so let's take a look


40
00:01:56,249 --> 00:01:59,086 line:-1
at everything that
we're going to cover.


41
00:01:59.086 --> 00:02:03.557 line:-1 position:50%
Today we'll be looking
at new HTML features,


42
00:02:03,557 --> 00:02:05,192 line:-1
CSS enhancements --


43
00:02:05,192 --> 00:02:09,463 line:-1
including a bunch to help
your code architecture --


44
00:02:09,463 --> 00:02:15,435 line:-1
new Web Inspector tools,
a wide selection of new web API,


45
00:02:15.435 --> 00:02:19.206 line:-1 position:50%
great JavaScript
and WebAssembly features,


46
00:02:19,206 --> 00:02:23,210 line:-1
and improvements
to security and privacy.


47
00:02:23.210 --> 00:02:27.280 line:-1 position:50%
So, let's get started
with what's new with HTML


48
00:02:27.280 --> 00:02:29.750 line:-1 position:50%
by taking a look
at a web page I'm creating


49
00:02:29,750 --> 00:02:32,753 line:-1
for my coworkers and I to use.


50
00:02:32,753 --> 00:02:36,223 line:-1
I personally really like to
thrift and repurpose my clothes


51
00:02:36,223 --> 00:02:39,226 line:-1
as a way to make my wardrobe
more sustainable,


52
00:02:39.226 --> 00:02:41.461 line:-1 position:50%
and I thought
a clothing swap website


53
00:02:41,461 --> 00:02:46,233 line:-1
would be a great way
to have my team try it out too.


54
00:02:46.233 --> 00:02:49.669 line:-1 position:50%
My design for the site includes
a Request Item button


55
00:02:49,669 --> 00:02:51,338 line:-1
that should show you
a form to fill out


56
00:02:51.338 --> 00:02:54.174 line:-1 position:50%
when you spot a piece
of clothing that you like.


57
00:02:54.174 --> 00:02:56.576 line:-1 position:50%
And I want that form
to show up in an overlay


58
00:02:56.576 --> 00:02:58.812 line:-1 position:50%
over top of the whole page.


59
00:02:58.812 --> 00:03:01.882 line:-1 position:50%
The new dialog element
provides a really easy way


60
00:03:01.882 --> 00:03:06.253 line:-1 position:50%
to create overlays in a robust
and accessible manner


61
00:03:06,253 --> 00:03:08,789 line:-1
that we can use
for our request form.


62
00:03:08.789 --> 00:03:11.958 line:-1 position:50%
And the new backdrop
pseudo-element in CSS


63
00:03:11.958 --> 00:03:14.461 line:-1 position:50%
makes it possible
to style the background


64
00:03:14.461 --> 00:03:16.329 line:-1 position:50%
behind the modal.


65
00:03:16.329 --> 00:03:19.866 line:-1 position:50%
Let's bring up the dialog
by requesting an item.


66
00:03:19.866 --> 00:03:22.369 line:-1 position:50%
See that shadow and animation?


67
00:03:22.369 --> 00:03:24.471 line:-1 position:50%
It's really looking great!


68
00:03:24.471 --> 00:03:27.374 line:-1 position:50%
Then, once an item
is requested on our site,


69
00:03:27.374 --> 00:03:28.575 line:-1 position:50%
the person who posted it


70
00:03:28,575 --> 00:03:32,979 line:-1
needs to be able
to accept the request.


71
00:03:32.979 --> 00:03:35.415 line:-1 position:50%
At the bottom of the page,
there's a carousel


72
00:03:35,415 --> 00:03:38,452 line:-1
to flip through
all your received requests.


73
00:03:38.452 --> 00:03:41.788 line:-1 position:50%
But I don't want someone
to accidentally interact


74
00:03:41,788 --> 00:03:44,591 line:-1
with a button or a text field
for one of the items


75
00:03:44,591 --> 00:03:46,359 line:-1
that's not the frontmost,


76
00:03:46,359 --> 00:03:49,463 line:-1
with either clicks
or keyboard navigation.


77
00:03:49.463 --> 00:03:52.766 line:-1 position:50%
I can use the inert attribute
to fix this.


78
00:03:52,766 --> 00:03:55,202 line:-1
By dynamically applying
the inert attribute


79
00:03:55.202 --> 00:03:56.937 line:-1 position:50%
with the JavaScript here,


80
00:03:56,937 --> 00:04:00,540 line:-1
I'm disabling any interactions
for elements on slides


81
00:04:00.540 --> 00:04:02.843 line:-1 position:50%
that aren't the currently
selected slide


82
00:04:02.843 --> 00:04:04.945 line:-1 position:50%
as we switch between them.


83
00:04:04.945 --> 00:04:08.782 line:-1 position:50%
And, using inert
includes disabling interactions


84
00:04:08,782 --> 00:04:11,885 line:-1
for assistive technologies
and prevents screen readers


85
00:04:11.885 --> 00:04:14.688 line:-1 position:50%
from reading those
disabled items aloud,


86
00:04:14.688 --> 00:04:16.523 line:-1 position:50%
giving much clearer guidance


87
00:04:16,523 --> 00:04:20,660 line:-1
on which elements
are intended for interaction.


88
00:04:20,660 --> 00:04:25,398 line:-1
And lastly for HTML, there's
the new lazy loading for images.


89
00:04:25.398 --> 00:04:27.534 line:-1 position:50%
On my site,
there's some icons in the header


90
00:04:27.534 --> 00:04:32.339 line:-1 position:50%
that I need to load right away,
but for the clothing item images


91
00:04:32,339 --> 00:04:34,875 line:-1
that are offscreen
on that first load,


92
00:04:34.875 --> 00:04:37.511 line:-1 position:50%
we can utilize
lazy loading for them,


93
00:04:37,511 --> 00:04:40,881 line:-1
so the images only load
when the user scrolls to them,


94
00:04:40.881 --> 00:04:44.684 line:-1 position:50%
making the page feel faster
and more responsive.


95
00:04:44,684 --> 00:04:47,254 line:-1
I'm really loving
how the site's looking so far,


96
00:04:47.254 --> 00:04:48.989 line:-1 position:50%
and it's going to work great


97
00:04:48.989 --> 00:04:52.392 line:-1 position:50%
for those using
assistive technologies as well.


98
00:04:52,392 --> 00:04:56,696 line:-1
And those HTML features
are just getting us started,


99
00:04:56.696 --> 00:04:58.965 line:-1 position:50%
because there's so much
to check out


100
00:04:58,965 --> 00:05:02,269 line:-1
with CSS this year too.


101
00:05:02.269 --> 00:05:04.838 line:-1 position:50%
A huge part of our CSS focus


102
00:05:04.838 --> 00:05:07.974 line:-1 position:50%
has been around
making your CSS easier to reuse


103
00:05:07,974 --> 00:05:10,410 line:-1
through more
powerful architecture.


104
00:05:10.410 --> 00:05:13.280 line:-1 position:50%
With that, we know
the number one request


105
00:05:13.280 --> 00:05:16.650 line:-1 position:50%
for new web technology
has been container queries.


106
00:05:16,650 --> 00:05:19,419 line:-1
And we're thrilled to announce
container queries


107
00:05:19,419 --> 00:05:22,589 line:-1
will ship in Safari 16!


108
00:05:22,589 --> 00:05:24,758 line:-1
You'll be able to use
both size queries


109
00:05:24.758 --> 00:05:27.260 line:-1 position:50%
and container query units.


110
00:05:27,260 --> 00:05:30,197 position:50%
Here, I'm experimenting
with an alternative layout


111
00:05:30,197 --> 00:05:32,499 line:0
for the clothing swap website.


112
00:05:32,499 --> 00:05:35,235 position:50%
I'm making the card that
presents a piece of clothing


113
00:05:35,235 --> 00:05:38,672 position:50%
into a reusable component
and dropping that component


114
00:05:38,672 --> 00:05:42,175 position:50%
into several different
places in the page layout.


115
00:05:42,175 --> 00:05:43,610 line:0
Here in the sidebar,


116
00:05:43,610 --> 00:05:46,580 line:0
the available space
is a bit narrow,


117
00:05:46,580 --> 00:05:49,149 line:0
so I want all the content
inside my component


118
00:05:49,149 --> 00:05:51,451 position:50%
to stack vertically.


119
00:05:51,451 --> 00:05:53,086 position:50%
In the main grid of items,


120
00:05:53,086 --> 00:05:56,189 line:0
I want to feature the first one
as a hero graphic


121
00:05:56,189 --> 00:05:59,659 position:50%
that should take up all
the available space horizontally


122
00:05:59,659 --> 00:06:02,896 position:50%
and arrange the content in a
fashion that makes more sense


123
00:06:02,896 --> 00:06:05,232 position:50%
for a wide layout.


124
00:06:05,232 --> 00:06:07,968 line:0
The rest of the items
in the main content area


125
00:06:07,968 --> 00:06:10,870 line:0
should be divided
into smaller columns.


126
00:06:10,870 --> 00:06:12,872 line:0
So I've created another layout


127
00:06:12,872 --> 00:06:17,110 line:0
that works when there's a medium
amount of horizontal space.


128
00:06:17,110 --> 00:06:20,747 position:50%
Using container queries to
handle the change in the layout,


129
00:06:20,747 --> 00:06:22,415 position:50%
rather than media queries,


130
00:06:22,415 --> 00:06:26,419 line:0
I can write the layout code
for this component just once


131
00:06:26,419 --> 00:06:29,522 line:0
and use that component
any place on my site


132
00:06:29,522 --> 00:06:31,858 line:0
in a container of any size,


133
00:06:31,858 --> 00:06:35,395 line:0
and the correct layout
will always get applied.


134
00:06:35.395 --> 00:06:38.798 line:-1 position:50%
I specified which element
to use for the container


135
00:06:38,798 --> 00:06:41,935 line:-1
and whether I want to measure
against just the inline size


136
00:06:41.935 --> 00:06:45.805 line:-1 position:50%
or both inline and block size
at the same time,


137
00:06:45.805 --> 00:06:48.908 line:-1 position:50%
by using
the container-type property.


138
00:06:48.908 --> 00:06:51.444 line:-1 position:50%
I can optionally
name my container


139
00:06:51,444 --> 00:06:53,613 line:-1
using
the container-name property,


140
00:06:53,613 --> 00:06:58,518 line:-1
which gives me more flexibility
in how I structure the HTML.


141
00:06:58,518 --> 00:07:03,089 line:-1
Then I use the @container rule
to apply styles conditionally,


142
00:07:03,089 --> 00:07:05,358 line:-1
based on the size
of the container.


143
00:07:05,358 --> 00:07:08,094 line:-1
Here, if the clothing card
component is in a container


144
00:07:08,094 --> 00:07:10,897 line:-1
that's wider than 250 pixels,


145
00:07:10,897 --> 00:07:14,968 line:-1
the grid will change to have
two columns instead of one.


146
00:07:14.968 --> 00:07:18.738 line:-1 position:50%
Next up with CSS architecture:
cascade layers.


147
00:07:18.738 --> 00:07:22.809 line:-1 position:50%
This is a powerful change
to the CSS cascade.


148
00:07:22.809 --> 00:07:24.911 line:-1 position:50%
Since the beginning of CSS,


149
00:07:24.911 --> 00:07:28.348 line:-1 position:50%
the cascade has been made up
of these different layers.


150
00:07:28,348 --> 00:07:32,052 line:-1
But no matter what specificity
of any given selector


151
00:07:32.052 --> 00:07:34.621 line:-1 position:50%
inside each layer,
author styles --


152
00:07:34.621 --> 00:07:37.023 line:-1 position:50%
the styles you write
as web developers --


153
00:07:37,023 --> 00:07:39,859 line:-1
always beats UA styles.


154
00:07:39.859 --> 00:07:43.596 line:-1 position:50%
Inline styles are always more
powerful than author styles,


155
00:07:43,596 --> 00:07:46,599 line:-1
and so on
with the rest of the hierarchy.


156
00:07:46,599 --> 00:07:49,369 line:-1
Cascade layers takes
this same concept


157
00:07:49,369 --> 00:07:52,339 line:-1
and allows you to create
your own custom layers


158
00:07:52.339 --> 00:07:57.277 line:-1 position:50%
where specificity is calculated
independently inside each layer.


159
00:07:57.277 --> 00:08:00.380 line:-1 position:50%
One entire layer
beats another entire layer,


160
00:08:00,380 --> 00:08:04,984 line:-1
no matter what the specificity
is of the selectors being used.


161
00:08:04.984 --> 00:08:08.388 line:-1 position:50%
And you determine which layer
has power over the others


162
00:08:08,388 --> 00:08:13,293 line:-1
through the order of how you
define the layers in your CSS.


163
00:08:13.293 --> 00:08:15.395 line:-1 position:50%
Cascade layers
will be a useful tool


164
00:08:15,395 --> 00:08:18,298 line:-1
for architecting CSS
on large projects


165
00:08:18,298 --> 00:08:20,767 line:-1
and maintaining
that code over time.


166
00:08:20,767 --> 00:08:22,202 line:-1
Perhaps your team will use them


167
00:08:22.202 --> 00:08:24.938 line:-1 position:50%
to separate a design system
from overrides


168
00:08:24,938 --> 00:08:28,775 line:-1
or a framework you're using for
custom styles for your project.


169
00:08:28,775 --> 00:08:30,910 line:-1
It's totally up to you!


170
00:08:30,910 --> 00:08:33,780 line:-1
And, to round out all
the amazing new enhancements


171
00:08:33,780 --> 00:08:36,916 line:-1
for your CSS architecture
is :has(),


172
00:08:36,916 --> 00:08:40,920 line:-1
a pseudo-class that can act as
the long-wanted parent selector


173
00:08:40,920 --> 00:08:42,689 line:-1
and much more.


174
00:08:42,689 --> 00:08:45,625 line:-1
Combined with
any other selector in CSS,


175
00:08:45,625 --> 00:08:48,628 line:-1
:has() can look for siblings,
attributes,


176
00:08:48.628 --> 00:08:51.131 line:-1 position:50%
states of form fields,
and much more.


177
00:08:51,131 --> 00:08:54,033 line:-1
It's really powerful.


178
00:08:54,033 --> 00:08:56,970 line:0
Here, I want to highlight
the entire message box


179
00:08:56,970 --> 00:08:59,706 line:0
whenever someone has checked
the "Urgent?" checkbox


180
00:08:59,706 --> 00:09:01,608 line:0
for one of their messages.


181
00:09:01,608 --> 00:09:05,145 line:-1
I can use the :has pseudo-class
here to say that anytime


182
00:09:05.145 --> 00:09:08.715 line:-1 position:50%
the form element has an input
of type checkbox


183
00:09:08,715 --> 00:09:12,719 line:-1
with that checkbox checked,
apply this CSS.


184
00:09:12,719 --> 00:09:16,890 line:-1
And I don't even need
to use any JavaScript.


185
00:09:16,890 --> 00:09:19,359 line:-1
We hope all these
great improvements


186
00:09:19,359 --> 00:09:21,995 line:-1
to handling
your CSS architecture,


187
00:09:21,995 --> 00:09:25,999 line:-1
with :has(), cascade layers,
and container queries,


188
00:09:25,999 --> 00:09:28,134 line:-1
make your work
as a web developer


189
00:09:28.134 --> 00:09:30.470 line:-1 position:50%
that much better.


190
00:09:30,470 --> 00:09:33,239 line:-1
But these aren't
the only CSS additions


191
00:09:33.239 --> 00:09:35.975 line:-1 position:50%
that we're excited about.


192
00:09:35,975 --> 00:09:39,179 line:-1
You've wanted a tool similar
to existing viewport units


193
00:09:39,179 --> 00:09:41,915 line:-1
but would be more useful
on devices where scrolling


194
00:09:41,915 --> 00:09:44,617 line:-1
causes the size of the viewport
to change.


195
00:09:44,617 --> 00:09:48,588 line:-1
And for that, there's new
viewport units for y'all.


196
00:09:48,588 --> 00:09:50,457 line:0
When you want to know
the height of the viewport


197
00:09:50,457 --> 00:09:53,526 line:0
when it's at its smallest,
use svh.


198
00:09:53,526 --> 00:09:54,828 line:0
For the height of the viewport


199
00:09:54,828 --> 00:09:57,430 line:0
when it's at its largest,
use lvh.


200
00:09:57,430 --> 00:10:00,867 position:50%
Just remember: s for small,
l for large.


201
00:10:00,867 --> 00:10:03,636 line:0
For a dynamic number
that changes to always match


202
00:10:03,636 --> 00:10:07,740 line:0
the current actual height
of the viewport, use dvh.


203
00:10:07,740 --> 00:10:10,210 line:-1
And it's not just for height.


204
00:10:10.210 --> 00:10:14.581 line:-1 position:50%
We've got you covered
with even more viewport units.


205
00:10:14.581 --> 00:10:17.617 line:-1 position:50%
There's width units,
which are good for completeness


206
00:10:17.617 --> 00:10:20.687 line:-1 position:50%
to match up with
the highly used height units.


207
00:10:20,687 --> 00:10:24,090 line:-1
We've got block and inline --
both being useful


208
00:10:24.090 --> 00:10:25.792 line:-1 position:50%
when writing
for multiple languages


209
00:10:25,792 --> 00:10:28,728 line:-1
with differing ways
in which text can flow.


210
00:10:28,728 --> 00:10:32,332 line:-1
And we didn't forget,
min and max, too.


211
00:10:32,332 --> 00:10:35,735 line:-1
But what about when you want
to create some movement


212
00:10:35,735 --> 00:10:39,038 line:-1
on your page,
not just react to it?


213
00:10:39,038 --> 00:10:42,509 line:-1
Animation has previously
been very declarative


214
00:10:42.509 --> 00:10:46.079 line:-1 position:50%
where you can specify a start,
an end, and a duration


215
00:10:46.079 --> 00:10:48.014 line:-1 position:50%
to get objects moving.


216
00:10:48,014 --> 00:10:51,784 line:-1
But it's been a challenge
to animate elements on a page


217
00:10:51.784 --> 00:10:54.654 line:-1 position:50%
either when trying to get it
to follow a curved path


218
00:10:54.654 --> 00:10:59.425 line:-1 position:50%
or even just being able
to move it around by an offset.


219
00:10:59.425 --> 00:11:02.161 line:-1 position:50%
And I'd like to add
a secret animation


220
00:11:02.161 --> 00:11:04.531 line:-1 position:50%
for the header
when you click on it,


221
00:11:04,531 --> 00:11:07,800 line:-1
Really just thought it'd be fun.


222
00:11:07.800 --> 00:11:10.637 line:-1 position:50%
With the new offset-path,
you can define a path


223
00:11:10.637 --> 00:11:13.573 line:-1 position:50%
that you want your object
to animate along.


224
00:11:13,573 --> 00:11:17,677 line:-1
Set the path with offset-path
and use offset-distance


225
00:11:17,677 --> 00:11:19,946 line:-1
for the keyframe effect.


226
00:11:19.946 --> 00:11:24.217 line:-1 position:50%
Then use the animation property
to apply the keyframe effect,


227
00:11:24.217 --> 00:11:27.854 line:-1 position:50%
giving you all the control
you'd want with your animations,


228
00:11:27.854 --> 00:11:30.189 line:-1 position:50%
all in CSS.


229
00:11:30.189 --> 00:11:33.660 line:-1 position:50%
We also want to give you
more control over your page


230
00:11:33,660 --> 00:11:36,429 line:-1
even with the parts of the web
that have typically been


231
00:11:36,429 --> 00:11:39,132 line:-1
defined by
the browser engine itself,


232
00:11:39.132 --> 00:11:43.469 line:-1 position:50%
and over scroll-behavior is just
our first example of this.


233
00:11:43,469 --> 00:11:46,472 line:-1
Since the beginning of the web,
if you click on a link


234
00:11:46,472 --> 00:11:49,108 line:-1
that moves you to another part
of a web page,


235
00:11:49.108 --> 00:11:51.811 line:-1 position:50%
it visually appears as a jump.


236
00:11:51.811 --> 00:11:54.981 line:-1 position:50%
Sometimes this is disorienting
to your users.


237
00:11:54,981 --> 00:11:58,084 line:-1
The scroll-behavior property
in CSS provides a way


238
00:11:58,084 --> 00:12:01,788 line:-1
to specify if you want
this behavior or not.


239
00:12:01,788 --> 00:12:06,759 line:-1
By default, it's set to auto,
and it'll appear as that jump.


240
00:12:06,759 --> 00:12:09,629 line:-1
By specifying scroll-behavior
as smooth,


241
00:12:09,629 --> 00:12:12,699 line:-1
you can ask the browser
to instead scroll smoothly


242
00:12:12.699 --> 00:12:14.901 line:-1 position:50%
to the next place on the page.


243
00:12:14,901 --> 00:12:17,604 line:-1
You can also do this
with the JavaScript methods


244
00:12:17,604 --> 00:12:21,941 line:-1
window.scroll(), scrollTo(),
or scrollBy().


245
00:12:21.941 --> 00:12:24.043 line:-1 position:50%
You know your customers best


246
00:12:24,043 --> 00:12:27,246 line:-1
and should be able to define
your own web page experience


247
00:12:27.246 --> 00:12:30.416 line:-1 position:50%
outside of the browser
engine defaults,


248
00:12:30,416 --> 00:12:33,653 line:-1
which is also where
the use of :focus-visible


249
00:12:33,653 --> 00:12:37,156 line:-1
as well as accent-color
can come into play.


250
00:12:37,156 --> 00:12:39,859 line:-1
You're probably familiar
with the focus selector


251
00:12:39,859 --> 00:12:42,495 line:-1
if you've ever wanted
to apply a specific style


252
00:12:42.495 --> 00:12:44.364 line:-1 position:50%
to the focus indicator,


253
00:12:44,364 --> 00:12:47,934 line:-1
likely to have it more in line
with your overall design.


254
00:12:47,934 --> 00:12:50,570 line:-1
But there are some
accessibility pitfalls


255
00:12:50,570 --> 00:12:55,575 line:-1
of losing the browser-based
heuristic when you do that.


256
00:12:55.575 --> 00:12:59.045 line:-1 position:50%
And on my site, instead
of the built-in form colors,


257
00:12:59.045 --> 00:13:02.348 line:-1 position:50%
I'd love to use a custom color.


258
00:13:02.348 --> 00:13:05.284 line:-1 position:50%
Let's use the teal color
that's already in my header


259
00:13:05.284 --> 00:13:09.155 line:-1 position:50%
for both the focus highlight
and the checkbox.


260
00:13:09.155 --> 00:13:11.457 line:-1 position:50%
With the :focus-visible
pseudo-class,


261
00:13:11,457 --> 00:13:14,527 line:-1
you can style the focus
indicator how you choose


262
00:13:14,527 --> 00:13:18,097 line:-1
while also having that
stylized indicator only show


263
00:13:18,097 --> 00:13:21,801 line:-1
if it would be shown natively
by the browser.


264
00:13:21,801 --> 00:13:25,171 line:-1
And to add another layer of
customization to your forms,


265
00:13:25,171 --> 00:13:27,707 line:-1
you can use accent-color
to change the color


266
00:13:27,707 --> 00:13:30,843 line:-1
of different parts
of the form control UI.


267
00:13:30,843 --> 00:13:32,912 line:-1
It'll take affect
on that checkbox


268
00:13:32,912 --> 00:13:35,982 line:-1
as well as radio buttons,
and so much more.


269
00:13:35,982 --> 00:13:38,017 line:-1
Also with CSS,


270
00:13:38,017 --> 00:13:42,255 line:-1
we've been replacing more
and more of the WebKit prefixes.


271
00:13:42,255 --> 00:13:44,123 line:-1
These used to be the perfect way


272
00:13:44,123 --> 00:13:47,193 line:-1
to try out experimental
features, but now,


273
00:13:47,193 --> 00:13:50,296 line:-1
we're able to move towards their
standards-defined properties


274
00:13:50,296 --> 00:13:55,201 line:-1
to make your CSS easier to write
and more interoperable.


275
00:13:55,201 --> 00:13:59,939 line:-1
But don't worry, your existing
CSS with WebKit prefixes


276
00:13:59,939 --> 00:14:02,008 line:-1
will keep working
as you transition


277
00:14:02,008 --> 00:14:04,577 line:-1
to their web standards
counterparts.


278
00:14:04.577 --> 00:14:08.681 line:-1 position:50%
Backface-visibility,
print-color-adjust,


279
00:14:08,681 --> 00:14:11,918 line:-1
and text-align: match-parent
are all exactly the same


280
00:14:11,918 --> 00:14:14,520 line:-1
as their prefixed counterpart.


281
00:14:14,520 --> 00:14:17,557 line:-1
Both mask
and text-combine-upright


282
00:14:17,557 --> 00:14:20,827 line:-1
have had their syntax updated
from the prefixed version


283
00:14:20.827 --> 00:14:23.162 line:-1 position:50%
to match the standard.


284
00:14:23.162 --> 00:14:26.632 line:-1 position:50%
And the nonprefixed appearance
property also adds support


285
00:14:26,632 --> 00:14:29,302 line:-1
for the new auto value
but has removed


286
00:14:29,302 --> 00:14:32,305 line:-1
the WebKit-specific values
in Safari 16,


287
00:14:32,305 --> 00:14:34,540 line:-1
like caret or listitem,


288
00:14:34,540 --> 00:14:38,344 line:-1
as it got brought up
to standards specifications.


289
00:14:38,344 --> 00:14:39,612 line:-1
There's been a lot to note


290
00:14:39,612 --> 00:14:42,248 line:-1
about our typography additions
as well.


291
00:14:42.248 --> 00:14:45.418 line:-1 position:50%
In particular, we've added
the font-palette property


292
00:14:45.418 --> 00:14:48.154 line:-1 position:50%
that allows for easy selection
of a color palette


293
00:14:48.154 --> 00:14:50.256 line:-1 position:50%
within a color font.


294
00:14:50,256 --> 00:14:52,191 line:-1
It's something that I think
would be really cool


295
00:14:52,191 --> 00:14:55,795 line:-1
to try out with some
potential logos for my site.


296
00:14:55,795 --> 00:14:57,263 position:50%
We can test out how it looks


297
00:14:57,263 --> 00:15:00,133 position:50%
with the built-in
dark or light palettes


298
00:15:00,133 --> 00:15:02,368 position:50%
or even what it'd be like
to customize it


299
00:15:02,368 --> 00:15:05,404 line:0
to exactly what I want
with color overrides


300
00:15:05,404 --> 00:15:08,908 line:0
and get some yellow in there
to brighten it up.


301
00:15:08.908 --> 00:15:11.778 line:-1 position:50%
And with typography,
there's been the addition of


302
00:15:11.778 --> 00:15:15.281 line:-1 position:50%
text-decoration-skip-ink,
which allows you to control


303
00:15:15.281 --> 00:15:18.050 line:-1 position:50%
what happens when
an underline or overline


304
00:15:18,050 --> 00:15:21,220 line:-1
intersects
with a letter or character.


305
00:15:21.220 --> 00:15:25.491 line:-1 position:50%
Plus the ic unit, which makes it
possible to precisely line up


306
00:15:25,491 --> 00:15:28,828 line:-1
CJK characters
in the block direction.


307
00:15:28,828 --> 00:15:31,764 line:-1
It's useful for creating
a clean typography grid


308
00:15:31,764 --> 00:15:36,569 line:-1
in languages like Chinese,
Japanese, and Korean.


309
00:15:36.569 --> 00:15:40.740 line:-1 position:50%
To wrap up our discussion
of all these great CSS features,


310
00:15:40,740 --> 00:15:43,776 line:-1
we've definitely
got to talk about subgrid.


311
00:15:43,776 --> 00:15:47,413 line:-1
For years, layout on the web
was pretty hard.


312
00:15:47,413 --> 00:15:50,216 line:-1
CSS Grid has been revolutionary,


313
00:15:50,216 --> 00:15:55,454 line:-1
but it only affects the direct
children of a grid container.


314
00:15:55,454 --> 00:15:59,525 line:-1
Here, I'm using CSS Grid
to layout these cards,


315
00:15:59,525 --> 00:16:01,527 line:-1
and to automatically
adjust the layout


316
00:16:01.527 --> 00:16:04.964 line:-1 position:50%
to fit the viewport width
by adding and removing columns


317
00:16:04.964 --> 00:16:08.067 line:-1 position:50%
without any media queries.


318
00:16:08,067 --> 00:16:12,438 line:-1
But the size of the content
on each card isn't the same;


319
00:16:12.438 --> 00:16:14.540 line:-1 position:50%
some headlines are longer,


320
00:16:14.540 --> 00:16:17.243 line:-1 position:50%
the photos have
different aspect ratios,


321
00:16:17.243 --> 00:16:21.047 line:-1 position:50%
and that's causing the visuals
to look really messy.


322
00:16:21.047 --> 00:16:23.683 line:-1 position:50%
I'd like for all
the Request Item buttons


323
00:16:23,683 --> 00:16:27,453 line:-1
and the message boxes
to line up across the page,


324
00:16:27,453 --> 00:16:31,424 line:-1
and I'd like a longer title
on one card to affect the layout


325
00:16:31.424 --> 00:16:35.695 line:-1 position:50%
on the other cards, so they all
get the same spacing.


326
00:16:35,695 --> 00:16:39,131 position:50%
Now, we can accomplish
this using subgrid.


327
00:16:39,131 --> 00:16:41,400 line:0
I've put a grid
on each article,


328
00:16:41,400 --> 00:16:44,904 position:50%
and I've tied all of those grids
to the grid of their parent


329
00:16:44,904 --> 00:16:49,842 position:50%
simply by writing
"grid-template-rows: subgrid."


330
00:16:49.842 --> 00:16:53.379 line:-1 position:50%
You can see how all the content
on each clothing card now


331
00:16:53.379 --> 00:16:57.183 line:-1 position:50%
perfectly lines up by using the
Grid Inspector in Web Inspector


332
00:16:57.183 --> 00:17:01.621 line:-1 position:50%
where I can turn on all the
grids I could possibly need too.


333
00:17:01,621 --> 00:17:06,726 line:-1
A lot of CSS work becomes easier
when we use the Web Inspector.


334
00:17:06.726 --> 00:17:10.162 line:-1 position:50%
In fact, there's been some
amazing additions


335
00:17:10,162 --> 00:17:11,497 line:-1
to the Web Inspector


336
00:17:11,497 --> 00:17:14,967 line:-1
that I think you'll be
really excited to try out.


337
00:17:14,967 --> 00:17:17,270 line:-1
First off,
layout is easier to write


338
00:17:17,270 --> 00:17:19,405 line:-1
when you can see
what's going on,


339
00:17:19,405 --> 00:17:23,743 line:-1
which is exactly what makes
the Web Inspector so important.


340
00:17:23,743 --> 00:17:26,145 line:-1
And with the new
Flexbox Inspector,


341
00:17:26.145 --> 00:17:30.316 line:-1 position:50%
you can actually visualize
the spacing between elements.


342
00:17:30,316 --> 00:17:32,818 line:-1
Here on my website,
I was having some trouble


343
00:17:32.818 --> 00:17:35.588 line:-1 position:50%
adding these icons to my header.


344
00:17:35,588 --> 00:17:39,625 line:0
All I need to do
is inspect the element,


345
00:17:39,625 --> 00:17:42,161 line:0
and go to the Layout tab,


346
00:17:42,161 --> 00:17:44,931 line:0
and since I'm not concerned
with my grids right now,


347
00:17:44,931 --> 00:17:47,533 position:50%
I can go ahead
and collapse that section


348
00:17:47,533 --> 00:17:51,203 position:50%
to get right to the new
Flexbox Inspector.


349
00:17:51,203 --> 00:17:53,239 position:50%
I can even turn on
all the views


350
00:17:53,239 --> 00:17:57,910 position:50%
with just a single click and
still have smooth performance.


351
00:17:57,910 --> 00:18:00,146 position:50%
And with all the views
turned on,


352
00:18:00,146 --> 00:18:01,914 position:50%
I can clearly see
with the hash marks


353
00:18:01,914 --> 00:18:05,418 line:0
and container boxes how
my elements are being arranged


354
00:18:05,418 --> 00:18:09,588 position:50%
and how the empty space
is taking up the view.


355
00:18:09,588 --> 00:18:13,392 position:50%
So now I want to make sure
I'm getting my alignment right,


356
00:18:13,392 --> 00:18:16,162 line:0
which I can use
the new alignment editor for.


357
00:18:16,162 --> 00:18:18,064 line:0
I can go to the Styles tab


358
00:18:18,064 --> 00:18:21,133 line:0
to find a new button
next to align-items.


359
00:18:21,133 --> 00:18:24,136 line:0
Here, I'm able to toggle
through the different options


360
00:18:24,136 --> 00:18:26,906 line:0
to find what works best
for my header,


361
00:18:26,906 --> 00:18:30,676 line:0
and I can do the same
with justify-content as well.


362
00:18:30,676 --> 00:18:33,879 line:0
Again, just toggling through
each of the options


363
00:18:33,879 --> 00:18:39,251 line:0
and then landing on the one
that I think looks just right.


364
00:18:39,251 --> 00:18:43,089 line:0
I also think the yellow icons
are a bit too small,


365
00:18:43,089 --> 00:18:47,059 line:0
and I want to try making them
the same size as the red icons,


366
00:18:47,059 --> 00:18:49,395 position:50%
which I believe
are using a variable


367
00:18:49,395 --> 00:18:50,930 position:50%
with "medium" in the name,


368
00:18:50,930 --> 00:18:54,767 line:0
but I really can't remember
the full name.


369
00:18:54.767 --> 00:18:56.802 line:-1 position:50%
I can try out
changing the size


370
00:18:56,802 --> 00:18:58,804 line:-1
by inspecting
one of the yellow icons


371
00:18:58,804 --> 00:19:02,008 line:-1
and editing its height
in the inspector.


372
00:19:02,008 --> 00:19:05,311 position:50%
And, thanks to our new
CSS fuzzy autocompletion,


373
00:19:05,311 --> 00:19:10,850 position:50%
I can go ahead and type "medium"
and the variable I want pops up


374
00:19:10,850 --> 00:19:14,353 line:0
even though "medium"
is at the end of the name.


375
00:19:14,353 --> 00:19:16,255 line:-1
And those yellow icons


376
00:19:16,255 --> 00:19:20,092 line:-1
definitely aren't too small
anymore.


377
00:19:20,092 --> 00:19:23,029 line:0
And when those other variables
for the different icons


378
00:19:23,029 --> 00:19:26,232 position:50%
aren't being used
for the element I'm inspecting,


379
00:19:26,232 --> 00:19:29,368 position:50%
they get hidden away
with our new CSS tooling.


380
00:19:29,368 --> 00:19:32,338 position:50%
But don't worry,
there's a button to reveal them


381
00:19:32,338 --> 00:19:34,306 line:0
when you need them.


382
00:19:34,306 --> 00:19:38,144 line:-1
And probably most excitingly
for Web Inspector this year,


383
00:19:38,144 --> 00:19:40,513 line:-1
we are happy
to announce support


384
00:19:40,513 --> 00:19:44,517 line:-1
for developer tool extensions
for the Safari Web Inspector.


385
00:19:44,517 --> 00:19:47,686 line:-1
The creators of your favorite
developer tools extensions


386
00:19:47.686 --> 00:19:50.389 line:-1 position:50%
will now be able
to port them to Safari,


387
00:19:50,389 --> 00:19:55,327 line:-1
using the same underlying APIs
that they use in other browsers.


388
00:19:55,327 --> 00:19:58,531 line:0
If you're interested in learning
how to make an extension


389
00:19:58,531 --> 00:20:00,366 position:50%
for the Web Inspector,


390
00:20:00,366 --> 00:20:03,636 line:0
exploring the new APIs,
and getting set up


391
00:20:03,636 --> 00:20:06,705 position:50%
to start using them yourself,
make sure to watch


392
00:20:06,705 --> 00:20:12,411 position:50%
"Create Safari Web Inspector
Extensions" at this year's WWDC.


393
00:20:12,411 --> 00:20:15,081 line:-1
Now we've covered
a lot of what's new


394
00:20:15,081 --> 00:20:18,484 line:-1
with our front-end technologies,
so let's switch gears


395
00:20:18,484 --> 00:20:22,254 line:-1
and get into
what's new with our web APIs.


396
00:20:22,254 --> 00:20:26,826 line:-1
Which we are so excited to
announce support for web push.


397
00:20:26,826 --> 00:20:31,363 line:-1
It'll be available in Safari 16
on macOS Ventura.


398
00:20:31,363 --> 00:20:35,768 line:-1
It's coming to iOS
and iPadOS next year.


399
00:20:35,768 --> 00:20:39,405 line:-1
Web push lets you remotely
send notifications to your users


400
00:20:39,405 --> 00:20:41,774 line:-1
from your website or web app.


401
00:20:41.774 --> 00:20:46.512 line:-1 position:50%
This is a fully interoperable,
standards-based implementation.


402
00:20:46.512 --> 00:20:48.881 line:-1 position:50%
If you've implemented
web push already


403
00:20:48.881 --> 00:20:50.916 line:-1 position:50%
and it works in other browsers,


404
00:20:50,916 --> 00:20:55,254 line:-1
it should just work in Safari
without any modifications.


405
00:20:55,254 --> 00:20:58,824 line:-1
And you don't need an
Apple Developer account either.


406
00:20:58,824 --> 00:21:00,793 line:0
To learn all about the details,


407
00:21:00,793 --> 00:21:06,432 line:0
watch "Meet Web Push for Safari"
here at WWDC22.


408
00:21:06.432 --> 00:21:08.567 line:-1 position:50%
If you're excited
about web push,


409
00:21:08,567 --> 00:21:10,202 line:-1
then you'll probably
be excited about


410
00:21:10.202 --> 00:21:13.272 line:-1 position:50%
new web app manifest
improvements too.


411
00:21:13.272 --> 00:21:16.809 line:-1 position:50%
Now, you can define the icon
that's used when people save


412
00:21:16.809 --> 00:21:20.246 line:-1 position:50%
your web app to the Home Screen
in your manifest file.


413
00:21:20.246 --> 00:21:23.315 line:-1 position:50%
To have the icons
in the manifest take precedence,


414
00:21:23.315 --> 00:21:24.917 line:-1 position:50%
you'll need to ensure
that there is no


415
00:21:24,917 --> 00:21:28,921 line:-1
apple-touch-icon
defined in the HTML head.


416
00:21:28,921 --> 00:21:32,825 line:-1
If you want to deliver
one icon to iOS and iPadOS,


417
00:21:32,825 --> 00:21:36,462 line:-1
while delivering a different
icon to other mobile platforms,


418
00:21:36.462 --> 00:21:39.965 line:-1 position:50%
you can still do so by defining
the icon for Apple devices


419
00:21:39,965 --> 00:21:44,036 line:-1
in that HTML head
using the apple-touch-icon.


420
00:21:44,036 --> 00:21:47,173 line:-1
And if you don't declare
an icon in either place,


421
00:21:47.173 --> 00:21:50.042 line:-1 position:50%
then when a user saves
your site to the Home Screen,


422
00:21:50.042 --> 00:21:52.545 line:-1 position:50%
they'll simply get
a screenshot of your site.


423
00:21:52.545 --> 00:21:56.282 line:-1 position:50%
Excitingly, we also no longer
wait for the user to choose


424
00:21:56,282 --> 00:21:58,684 line:-1
"Add to Home Screen"
from the Share menu


425
00:21:58,684 --> 00:22:01,887 line:-1
to load the manifest file,
which means you can use


426
00:22:01,887 --> 00:22:05,324 line:-1
that manifest file to define
characteristics of your web page


427
00:22:05.324 --> 00:22:08.427 line:-1 position:50%
on all your sites
and even further reduce


428
00:22:08,427 --> 00:22:11,630 line:-1
the need to use meta tags.


429
00:22:11,630 --> 00:22:15,234 line:-1
Continuing with our APIs,
we've done a lot to improve


430
00:22:15,234 --> 00:22:18,170 line:-1
the use of web pages
in multiple browsing contexts


431
00:22:18.170 --> 00:22:20.005 line:-1 position:50%
with the same origins.


432
00:22:20.005 --> 00:22:22.841 line:-1 position:50%
Broadcast channels allow you
to send notifications


433
00:22:22.841 --> 00:22:25.811 line:-1 position:50%
between those different
browsing contexts.


434
00:22:25,811 --> 00:22:29,248 line:-1
Let's imagine someone is using
the clothing swap website


435
00:22:29.248 --> 00:22:32.618 line:-1 position:50%
and they have it open in
two windows at the same time.


436
00:22:32,618 --> 00:22:35,921 line:-1
Then they claim a piece
of clothing in one window.


437
00:22:35,921 --> 00:22:39,625 line:0
We'll be able to post a message
and sync that unavailable state


438
00:22:39,625 --> 00:22:43,395 line:0
to any other
open tabs or windows.


439
00:22:43,395 --> 00:22:47,132 line:-1
But maybe it's not updating
a tab in the background,


440
00:22:47,132 --> 00:22:49,802 line:-1
but updating a file
saved for your site.


441
00:22:49,802 --> 00:22:51,604 line:-1
For that,
there's been the addition


442
00:22:51.604 --> 00:22:54.673 line:-1 position:50%
of the File System Access API.


443
00:22:54,673 --> 00:22:57,176 line:-1
We've had incremental updates
to this API


444
00:22:57.176 --> 00:22:59.778 line:-1 position:50%
across multiple
releases this year,


445
00:22:59,778 --> 00:23:02,982 line:-1
starting with origin
private file system,


446
00:23:02.982 --> 00:23:05.784 line:-1 position:50%
which is private storage
based on origin.


447
00:23:05,784 --> 00:23:06,852 line:-1
So for instance,


448
00:23:06,852 --> 00:23:09,855 line:-1
my clothing swap site
wouldn't have other sites,


449
00:23:09,855 --> 00:23:13,692 line:-1
like apple.com,
reading its files.


450
00:23:13,692 --> 00:23:17,162 line:-1
We then added to the API
with the getFile() method


451
00:23:17,162 --> 00:23:21,066 line:-1
of FileSystemFileHandle,
which reads an existing file


452
00:23:21.066 --> 00:23:24.069 line:-1 position:50%
retrieved from your site's
root directory,


453
00:23:24,069 --> 00:23:26,538 line:-1
like we're doing
with a draft file here


454
00:23:26.538 --> 00:23:29.908 line:-1 position:50%
that we also happened
to have just created.


455
00:23:29.908 --> 00:23:33.145 line:-1 position:50%
Now let's take a look
at our most vibrant


456
00:23:33.145 --> 00:23:37.716 line:-1 position:50%
API addition this year
with some new color richness.


457
00:23:37,716 --> 00:23:40,853 line:-1
The Display P3 color space
makes it possible


458
00:23:40.853 --> 00:23:45.157 line:-1 position:50%
to represent colors
that just don't exist in RGB.


459
00:23:45,157 --> 00:23:48,294 line:-1
Here, we've got some examples
of the color picker.


460
00:23:48.294 --> 00:23:50.462 line:-1 position:50%
On the left
of the squiggly white line


461
00:23:50.462 --> 00:23:53.265 line:-1 position:50%
is color that exists in RGB.


462
00:23:53.265 --> 00:23:58.237 line:-1 position:50%
And on the right of the line
are colors only available in P3.


463
00:23:58,237 --> 00:24:03,442 line:-1
In 2016, we added P3 support
for videos and photos.


464
00:24:03.442 --> 00:24:06.945 line:-1 position:50%
Last year, we were thrilled to
be the first browser engine to


465
00:24:06.945 --> 00:24:12.351 line:-1 position:50%
implement the new color syntax
defined in CSS Color Level 4.


466
00:24:12,351 --> 00:24:15,487 line:-1
This year,
we've added support for P3 color


467
00:24:15,487 --> 00:24:18,257 line:-1
for content inside
the canvas element.


468
00:24:18.257 --> 00:24:21.460 line:-1 position:50%
So, no need to use
the colors based on devices


469
00:24:21,460 --> 00:24:24,563 line:-1
all the way from the 90s,
when you can now start utilizing


470
00:24:24.563 --> 00:24:28.167 line:-1 position:50%
the full color capabilities
of all the amazing devices


471
00:24:28,167 --> 00:24:29,868 line:-1
of today.


472
00:24:29.868 --> 00:24:33.739 line:-1 position:50%
But there's even more to
check out with our new Web APIs


473
00:24:33,739 --> 00:24:38,877 line:-1
from this past year, including
shadow realms, web locks,


474
00:24:38,877 --> 00:24:42,915 line:-1
and updated support
to the ResizeObserver API


475
00:24:42,915 --> 00:24:45,951 line:-1
for the ResizeObserverSize
interface,


476
00:24:45.951 --> 00:24:47.286 line:-1 position:50%
which will help you observe


477
00:24:47,286 --> 00:24:50,356 line:-1
changes to an element's
box-sizing properties.


478
00:24:50,356 --> 00:24:52,558 line:-1
There's so much to try out


479
00:24:52,558 --> 00:24:55,260 line:-1
across all of our
new API additions,


480
00:24:55.260 --> 00:24:58.697 line:-1 position:50%
and of course, with all of our
new features too.


481
00:24:58,697 --> 00:25:02,000 line:-1
In fact, we've still
got more to cover.


482
00:25:02,000 --> 00:25:05,037 line:-1
So let's next get into
all that's new


483
00:25:05.037 --> 00:25:08.140 line:-1 position:50%
in JavaScript & WebAssembly.


484
00:25:08,140 --> 00:25:11,143 line:-1
If your website uses workers,
and you want instances


485
00:25:11,143 --> 00:25:14,680 line:-1
of these workers to be shared
across tabs and windows,


486
00:25:14.680 --> 00:25:17.683 line:-1 position:50%
then the new shared workers
interface will definitely help


487
00:25:17.683 --> 00:25:20.886 line:-1 position:50%
and potentially
reduce memory usage.


488
00:25:20,886 --> 00:25:24,490 line:-1
Instead of spawning new workers
for every task that you want


489
00:25:24,490 --> 00:25:27,559 line:-1
to happen in the background,
you can have just one worker


490
00:25:27,559 --> 00:25:31,497 line:-1
in use for each browsing context
with the same origin.


491
00:25:31,497 --> 00:25:35,200 position:50%
Each script would create
a shared worker in the same way,


492
00:25:35,200 --> 00:25:37,603 position:50%
and then they can receive
and post messages


493
00:25:37,603 --> 00:25:40,139 position:50%
using the same port.


494
00:25:40,139 --> 00:25:42,441 position:50%
The shared worker
would be able to receive


495
00:25:42,441 --> 00:25:44,376 position:50%
and respond to messages


496
00:25:44,376 --> 00:25:47,646 line:0
sent from all
of the different scripts.


497
00:25:47,646 --> 00:25:50,749 line:0
This will result in less
demand on your servers,


498
00:25:50,749 --> 00:25:52,284 line:0
while also making your webpage


499
00:25:52,284 --> 00:25:56,221 position:50%
fast and responsive
for your customers.


500
00:25:56,221 --> 00:26:00,359 line:0
We've also got a whole array
of array features to show you.


501
00:26:00,359 --> 00:26:03,762 line:0
Instead of having to mutate
an array using reverse()


502
00:26:03,762 --> 00:26:05,898 line:0
when you want to search
from the end,


503
00:26:05,898 --> 00:26:10,369 position:50%
you now can use the findLast()
and findLastIndex() methods,


504
00:26:10,369 --> 00:26:13,272 position:50%
like I've done here to find
the item and index


505
00:26:13,272 --> 00:26:17,342 line:0
for the last item
containing a "shoestring."


506
00:26:17,342 --> 00:26:19,878 line:0
The new at() method
also makes searching


507
00:26:19,878 --> 00:26:22,781 line:0
from the end
of an array even easier.


508
00:26:22,781 --> 00:26:26,385 position:50%
Using braces works great
when the index is positive,


509
00:26:26,385 --> 00:26:28,921 line:0
but with at(),
we get the additional feature


510
00:26:28,921 --> 00:26:31,256 position:50%
of indexing with negative values


511
00:26:31,256 --> 00:26:35,260 line:0
making your code
more concise and readable.


512
00:26:35,260 --> 00:26:39,498 line:-1
But even with that good number
of new array features,


513
00:26:39,498 --> 00:26:41,967 line:-1
nothing much can beat
the sheer number


514
00:26:41.967 --> 00:26:46.538 line:-1 position:50%
of new internationalization
features we got for you.


515
00:26:46,538 --> 00:26:49,675 line:-1
WebKit has continued
to add regular updates


516
00:26:49,675 --> 00:26:54,146 line:-1
to our Intl implementation
throughout this past year.


517
00:26:54.146 --> 00:26:57.616 line:-1 position:50%
There's been added support
for different numbering systems


518
00:26:57,616 --> 00:27:00,185 line:-1
with new methods
in NumberFormat,


519
00:27:00.185 --> 00:27:03.555 line:-1 position:50%
calendars, thanks to updates
with Locale as well as


520
00:27:03,555 --> 00:27:09,628 line:-1
DisplayNames, and currency
with the Intl Enumeration API.


521
00:27:09.628 --> 00:27:13.098 line:-1 position:50%
And like I said,
there's a lot that's been added


522
00:27:13,098 --> 00:27:15,834 line:-1
to our Intl implementation
this year


523
00:27:15,834 --> 00:27:20,038 line:-1
that you'll have no shortage
of things to try out and explore


524
00:27:20,038 --> 00:27:24,109 line:-1
to cater to your users
across the world.


525
00:27:24.109 --> 00:27:27.679 line:-1 position:50%
And for all those that have
existing code in all sorts


526
00:27:27.679 --> 00:27:32.885 line:-1 position:50%
of different coding languages,
like C, Objective C, or Swift,


527
00:27:32,885 --> 00:27:34,987 line:-1
that they'd like
to bring to the web,


528
00:27:34.987 --> 00:27:38.957 line:-1 position:50%
WebAssembly gets them running
without any need to rewrite.


529
00:27:38,957 --> 00:27:40,626 line:-1
And with this year's
improvements,


530
00:27:40.626 --> 00:27:45.364 line:-1 position:50%
your web apps using WebAssembly
are only getting more powerful


531
00:27:45.364 --> 00:27:49.201 line:-1 position:50%
with the addressable memory
being expanded to 4GB,


532
00:27:49,201 --> 00:27:51,503 line:-1
and the performance
gains that come


533
00:27:51,503 --> 00:27:54,573 line:-1
with the new zero-cost
exception handling.


534
00:27:54,573 --> 00:27:58,010 line:-1
Overall, there's definitely
some exciting stuff


535
00:27:58.010 --> 00:28:01.580 line:-1 position:50%
for JavaScript and WebAssembly
to try out here.


536
00:28:01.580 --> 00:28:05.517 line:-1 position:50%
And speaking of WebAssembly,
we also have some security


537
00:28:05,517 --> 00:28:08,153 line:-1
and privacy enhancements
that not only


538
00:28:08.153 --> 00:28:11.256 line:-1 position:50%
will protect the users
of the web who we develop for,


539
00:28:11,256 --> 00:28:16,395 line:-1
but will also bring new
potential for you as developers.


540
00:28:16.395 --> 00:28:19.831 line:-1 position:50%
With both of the new
Cross Origin Opener Policy


541
00:28:19,831 --> 00:28:25,304 line:-1
and Cross Origin Embedder Policy
HTTP response headers,


542
00:28:25,304 --> 00:28:28,540 line:-1
your site can opt in
to process isolation,


543
00:28:28,540 --> 00:28:30,108 line:-1
which means your site will run


544
00:28:30.108 --> 00:28:33.679 line:-1 position:50%
in its own dedicated
webContent process.


545
00:28:33.679 --> 00:28:36.848 line:-1 position:50%
We know that a lot of apps
can benefit from running


546
00:28:36.848 --> 00:28:40.886 line:-1 position:50%
on multiple threads in parallel
using WebAssembly threading,


547
00:28:40.886 --> 00:28:46.024 line:-1 position:50%
and with these new headers,
you're able to do so securely.


548
00:28:46,024 --> 00:28:51,029 line:-1
Our second security enhancement
also involves HTTP headers


549
00:28:51,029 --> 00:28:55,500 line:-1
with our improved support for
content security policy level 3.


550
00:28:55.500 --> 00:28:58.270 line:-1 position:50%
CSP provides enhanced
security control


551
00:28:58.270 --> 00:29:01.306 line:-1 position:50%
over your loading content
and mitigates risk


552
00:29:01,306 --> 00:29:04,743 line:-1
of cross-site scripting
and other vulnerabilities.


553
00:29:04,743 --> 00:29:08,013 line:-1
With the level 3 updates,
the most exciting addition


554
00:29:08.013 --> 00:29:11.483 line:-1 position:50%
has been the new strict-dynamic
source expression.


555
00:29:11.483 --> 00:29:15.387 line:-1 position:50%
The designers of strict-dynamic
realized you can use nonces


556
00:29:15.387 --> 00:29:18.123 line:-1 position:50%
to allow certain scripts,
then extend that trust


557
00:29:18.123 --> 00:29:21.059 line:-1 position:50%
to scripts loaded
by the already trusted ones.


558
00:29:21.059 --> 00:29:24.329 line:-1 position:50%
No explicit allow list needed.


559
00:29:24,329 --> 00:29:26,765 line:-1
Look how much simpler
the header becomes.


560
00:29:26.765 --> 00:29:29.301 line:-1 position:50%
Going from that original
long list of domains


561
00:29:29,301 --> 00:29:32,537 line:-1
that could potentially end up
allowing too much.


562
00:29:32.537 --> 00:29:37.009 line:-1 position:50%
And with that, we wrap up our
security and privacy features,


563
00:29:37,009 --> 00:29:39,344 line:-1
which also brings us to the end


564
00:29:39.344 --> 00:29:41.747 line:-1 position:50%
of all that we'll get
to cover today,


565
00:29:41,747 --> 00:29:45,017 line:-1
but there's even more
to explore on your own.


566
00:29:45.017 --> 00:29:47.586 line:-1 position:50%
For instance,
we've had media updates


567
00:29:47,586 --> 00:29:51,556 line:-1
including support for capturing
a specific Safari window


568
00:29:51,556 --> 00:29:57,562 line:-1
with the getUserDisplay() API,
WebRTC Perfect Negotiation,


569
00:29:57.562 --> 00:30:03.001 line:-1 position:50%
In-band chapter tracks,
and requestVideoFrameCallback().


570
00:30:03,001 --> 00:30:06,171 line:-1
As well as a lot of cool
additions for web extensions


571
00:30:06,171 --> 00:30:08,640 line:-1
with manifest version 3 support,


572
00:30:08,640 --> 00:30:12,611 line:-1
and a bunch of new
web extensions APIs.


573
00:30:12.611 --> 00:30:16.348 line:-1 position:50%
To dive deeper into all these
features covered here today,


574
00:30:16,348 --> 00:30:20,218 line:-1
and to explore all the 162
features and improvements


575
00:30:20,218 --> 00:30:23,755 line:-1
developed in Safari
and WebKit in the past year,


576
00:30:23.755 --> 00:30:26.458 line:-1 position:50%
make sure to download
Safari Technology Preview


577
00:30:26,458 --> 00:30:29,928 line:-1
to keep up with what's
coming in the future,


578
00:30:29.928 --> 00:30:33.298 line:-1 position:50%
explore web technology by
checking out our release notes,


579
00:30:33,298 --> 00:30:37,069 line:-1
blog posts, and all the great
content on webkit.org,


580
00:30:37.069 --> 00:30:41.640 line:-1 position:50%
including extensive
documentation for Web Inspector.


581
00:30:41,640 --> 00:30:44,176 line:-1
And as always,
let us know what you think


582
00:30:44,176 --> 00:30:47,879 line:-1
and what you'd like to see next
by filing your bug reports.


583
00:30:47,879 --> 00:30:50,282 line:-1
If you come across
a bug in WebKit --


584
00:30:50,282 --> 00:30:55,887 line:-1
something about HTML, CSS,
JavaScript, DOM APIs,


585
00:30:55,887 --> 00:30:58,590 line:-1
or the Web Inspector --
make sure to send your feedback


586
00:30:58,590 --> 00:31:03,829 line:-1
through WebKit's bug tracking
system at bugs.webkit.org.


587
00:31:03.829 --> 00:31:07.365 line:-1 position:50%
And for suggestions or bugs
with the Safari interface,


588
00:31:07.365 --> 00:31:11.169 line:-1 position:50%
file issues in Apple's
Feedback Assistant.


589
00:31:11,169 --> 00:31:14,773 line:-1
We look forward to delivering
more of the amazing features


590
00:31:14,773 --> 00:31:17,042 line:-1
that make the work
of web developers like you


591
00:31:17,042 --> 00:31:19,678 line:-1
that much better
with all the Safari


592
00:31:19.678 --> 00:31:22.347 line:-1 position:50%
and Safari Technology Preview
releases


593
00:31:22.347 --> 00:31:24.449 line:-1 position:50%
to come in this next year.


594
00:31:24.449 --> 00:31:26.685 line:-1 position:50%
Thank you for joining me today,


595
00:31:26,685 --> 00:31:30,188 line:-1
and I hope you have
the best time here at WWDC.


596
00:31:30.188 --> 00:31:32.257 line:-1 position:50%
Bye now!


597
00:31:32,257 --> 00:31:35,560 position:90% align:right size:2%
♪

