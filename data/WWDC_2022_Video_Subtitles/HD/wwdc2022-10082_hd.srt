2
00:00:00.033 --> 00:00:03.003 line:-1 position:50%
♪ Mellow instrumental
hip-hop music ♪


3
00:00:03,003 --> 00:00:09,376 align:right size:2% line:0
♪


4
00:00:09.376 --> 00:00:12.079 line:-1 position:50%
Hi everyone,
my name is John Crowson,


5
00:00:12.079 --> 00:00:14.414 line:-1 position:50%
and I'm a software engineer
on the Performance Tools team


6
00:00:14,414 --> 00:00:15,682 line:-1
here at Apple.


7
00:00:15,682 --> 00:00:17,451 line:-1
In this talk,
I'm excited to introduce you


8
00:00:17,451 --> 00:00:20,554 line:-1
to several new tools
to track down hangs in your app


9
00:00:20,554 --> 00:00:24,258 line:-1
with Xcode
and on-device hang detection.


10
00:00:24.258 --> 00:00:26.360 line:-1 position:50%
I'll be your guide
as we visit different phases


11
00:00:26,360 --> 00:00:29,363 line:-1
of your app development process,
and consider which tools


12
00:00:29,363 --> 00:00:32,266 line:-1
are best suited
to help during each phase.


13
00:00:32,266 --> 00:00:35,235 line:-1
This talk is broken
into four sections:


14
00:00:35,235 --> 00:00:38,405 line:-1
First, I will cover,
What are hangs?


15
00:00:38,405 --> 00:00:40,774 line:-1
Then, I will present tooling
to help you discover


16
00:00:40,774 --> 00:00:44,912 line:-1
and diagnose hangs
while developing your app,


17
00:00:44,912 --> 00:00:49,716 line:-1
while beta testing your app,
and after releasing your app.


18
00:00:49.716 --> 00:00:52.619 line:-1 position:50%
Let's get started!


19
00:00:52,619 --> 00:00:55,455 line:-1
I want to tell you about
a new app my team is developing:


20
00:00:55.455 --> 00:00:58.025 line:-1 position:50%
Food Truck, which will help
manage food trucks


21
00:00:58,025 --> 00:01:00,694 line:-1
that specifically sell donuts.


22
00:01:00,694 --> 00:01:04,398 line:-1
Let me introduce you to some of
the donut types I've created.


23
00:01:07.868 --> 00:01:09.836 line:-1 position:50%
Huh, that took
a really long time


24
00:01:09,836 --> 00:01:11,838 line:-1
to scroll through
my list of donuts.


25
00:01:11,838 --> 00:01:15,809 line:-1
The app was laggy and would not
respond to any of my touches.


26
00:01:15.809 --> 00:01:20.047 line:-1 position:50%
At Apple, we call this period
of unresponsiveness a "hang."


27
00:01:20,047 --> 00:01:22,616 line:0
An app's main thread is
responsible for processing


28
00:01:22,616 --> 00:01:26,119 line:0
user interactions
and updating the view content.


29
00:01:26,119 --> 00:01:29,556 position:50%
A hang is reported when the main
thread is busy doing work


30
00:01:29,556 --> 00:01:32,759 position:50%
or waiting on another
thread or system resource,


31
00:01:32,759 --> 00:01:35,295 position:50%
causing a delay
in updating the view content


32
00:01:35,295 --> 00:01:39,232 position:50%
by at least 250 milliseconds.


33
00:01:39.232 --> 00:01:41.068 line:-1 position:50%
The main thread
is also unavailable


34
00:01:41.068 --> 00:01:46.006 line:-1 position:50%
to process new user interactions
until the hang is resolved.


35
00:01:46.006 --> 00:01:51.378 line:-1 position:50%
To the user, it appears
the app is completely stuck.


36
00:01:51,378 --> 00:01:52,879 line:-1
Creating a responsive app


37
00:01:52.879 --> 00:01:56.717 line:-1 position:50%
is critical to providing
a positive user experience.


38
00:01:56.717 --> 00:01:59.519 line:-1 position:50%
Consistently unresponsive apps
may result in users


39
00:01:59,519 --> 00:02:03,123 line:-1
force quitting the app,
switching to a different app,


40
00:02:03.123 --> 00:02:05.559 line:-1 position:50%
and in some cases,
even deleting your app


41
00:02:05,559 --> 00:02:08,061 line:-1
and writing a negative review.


42
00:02:08.061 --> 00:02:10.697 line:-1 position:50%
Because of this,
tracking down hangs in your app


43
00:02:10.697 --> 00:02:15.202 line:-1 position:50%
is critical to gaining
and maintaining your user base.


44
00:02:15,202 --> 00:02:17,504 line:-1
Providing a responsive
experience ensures people


45
00:02:17.504 --> 00:02:19.973 line:-1 position:50%
will enjoy using your app.


46
00:02:21,975 --> 00:02:24,778 line:0
For more information on hangs
and what causes them,


47
00:02:24,778 --> 00:02:27,514 position:50%
as well as strategies to
eliminate them from your code,


48
00:02:27,514 --> 00:02:30,217 position:50%
checkout the "Understand and
eliminate hangs from your app"


49
00:02:30,217 --> 00:02:32,819 position:50%
talk from 2021.


50
00:02:32,819 --> 00:02:34,087 line:-1
The app-development process


51
00:02:34.087 --> 00:02:36.723 line:-1 position:50%
can be broken down
into three phases.


52
00:02:36.723 --> 00:02:41.395 line:-1 position:50%
First, developing the latest
app version at desk using Xcode.


53
00:02:41,395 --> 00:02:43,997 line:-1
Then, testing the app
and collecting feedback


54
00:02:43,997 --> 00:02:46,967 line:-1
in a beta environment
without Xcode.


55
00:02:46.967 --> 00:02:48.835 line:-1 position:50%
For example,
you may have an app version


56
00:02:48,835 --> 00:02:50,971 line:-1
that's development-signed
on your device


57
00:02:50.971 --> 00:02:53.540 line:-1 position:50%
or distributed
through TestFlight.


58
00:02:53,540 --> 00:02:57,677 line:-1
Finally, releasing the latest
app version on the App Store.


59
00:02:57.677 --> 00:02:59.913 line:-1 position:50%
Even for the most
proactive developers,


60
00:02:59.913 --> 00:03:02.582 line:-1 position:50%
new hang issues
can arise at any phase,


61
00:03:02,582 --> 00:03:05,085 line:-1
so it's important that you
know the tools to resolve them


62
00:03:05.085 --> 00:03:07.120 line:-1 position:50%
during each one.


63
00:03:07.120 --> 00:03:09.856 line:-1 position:50%
Before iOS 16 and Xcode 14,


64
00:03:09.856 --> 00:03:12.626 line:-1 position:50%
we offered two tools
that assisted with discovering


65
00:03:12.626 --> 00:03:14.995 line:-1 position:50%
and diagnosing
the hangs in your app.


66
00:03:14,995 --> 00:03:17,697 line:0
MetricKit is a framework
that supports collecting


67
00:03:17,697 --> 00:03:21,201 line:0
nonaggregated hang rate metrics
and diagnostic reports


68
00:03:21,201 --> 00:03:26,106 line:0
from individual users on your
beta or public release app.


69
00:03:26,106 --> 00:03:29,776 position:50%
The Xcode Organizer provides
an aggregated hang rate metric


70
00:03:29,776 --> 00:03:32,946 line:0
from users on your
public release app.


71
00:03:32.946 --> 00:03:35.782 line:-1 position:50%
There are gaps here,
specifically when developing


72
00:03:35,782 --> 00:03:39,052 line:-1
your app or when trying
to understand what source code


73
00:03:39.052 --> 00:03:43.657 line:-1 position:50%
has caused the public release
hang-rate metric to rise.


74
00:03:43,657 --> 00:03:46,226 line:-1
In iOS 16 and Xcode 14,


75
00:03:46.226 --> 00:03:50.697 line:-1 position:50%
we've been busy introducing
several new tools to help.


76
00:03:50,697 --> 00:03:52,799 line:-1
Let's introduce
each of them briefly


77
00:03:52.799 --> 00:03:55.669 line:-1 position:50%
before we cover them
in more detail.


78
00:03:55.669 --> 00:03:57.938 line:-1 position:50%
The Thread Performance
Checker in Xcode


79
00:03:57.938 --> 00:04:00.407 line:-1 position:50%
alerts you to hang-causing
threading issues


80
00:04:00,407 --> 00:04:04,578 line:-1
while debugging your app
without actively tracing it.


81
00:04:04,578 --> 00:04:07,914 line:-1
Instruments in Xcode
now detects and labels hangs


82
00:04:07,914 --> 00:04:10,484 line:-1
while tracing your app.


83
00:04:10,484 --> 00:04:13,420 line:0
On-device hang detection
provides hang detection


84
00:04:13,420 --> 00:04:16,256 position:50%
without using Xcode or tracing,


85
00:04:16,256 --> 00:04:18,458 position:50%
providing real-time
hang notifications


86
00:04:18,458 --> 00:04:20,827 position:50%
and supporting diagnostics
while using


87
00:04:20,827 --> 00:04:24,164 line:0
your development-signed
or TestFlight app.


88
00:04:24,164 --> 00:04:26,399 line:0
And finally,
the organizer in Xcode


89
00:04:26,399 --> 00:04:29,035 position:50%
now supports hang reports,
which provides


90
00:04:29,035 --> 00:04:33,373 line:0
aggregated hang diagnostics
from users in the field.


91
00:04:33,373 --> 00:04:35,108 line:-1
Now that you know
what hangs are


92
00:04:35.108 --> 00:04:37.077 line:-1 position:50%
and the different phases
they can arise,


93
00:04:37,077 --> 00:04:39,312 line:-1
I will cover
how to track down hangs


94
00:04:39.312 --> 00:04:43.350 line:-1 position:50%
while developing
an app with Xcode.


95
00:04:43.350 --> 00:04:46.620 line:-1 position:50%
In Xcode 14, the new
Thread Performance Checker tool


96
00:04:46.620 --> 00:04:49.823 line:-1 position:50%
notifies you in the Xcode
Issue Navigator when it detects


97
00:04:49,823 --> 00:04:52,425 line:-1
priority inversions
and non-UI work


98
00:04:52.425 --> 00:04:54.327 line:-1 position:50%
on the main thread of your app,


99
00:04:54.327 --> 00:04:58.298 line:-1 position:50%
both of which
are common causes of hangs.


100
00:04:58.298 --> 00:04:59.633 line:-1 position:50%
I have now returned to Xcode


101
00:04:59.633 --> 00:05:03.036 line:-1 position:50%
to diagnose the hang I observed
earlier in the Food Truck app


102
00:05:03,036 --> 00:05:06,606 line:-1
when I was scrolling through
the donuts I've created.


103
00:05:06.606 --> 00:05:08.375 line:-1 position:50%
When I built and ran the app,


104
00:05:08,375 --> 00:05:10,577 line:-1
and repeated
the user interaction,


105
00:05:10.577 --> 00:05:13.713 line:-1 position:50%
the Thread Performance Checker
tool alerted me to a hang risk


106
00:05:13,713 --> 00:05:16,983 line:-1
caused by a priority inversion.


107
00:05:16,983 --> 00:05:19,586 line:-1
This means a higher priority
thread was attempting


108
00:05:19.586 --> 00:05:22.556 line:-1 position:50%
to be synchronized
with a lower priority thread.


109
00:05:22,556 --> 00:05:24,791 line:-1
This may indicate the hang
we are noticing


110
00:05:24.791 --> 00:05:27.861 line:-1 position:50%
is caused by the main thread
waiting on different


111
00:05:27,861 --> 00:05:30,063 line:-1
lower-priority threads.


112
00:05:30.063 --> 00:05:32.599 line:-1 position:50%
To detect priority inversions
and non-UI work


113
00:05:32.599 --> 00:05:34.134 line:-1 position:50%
on the main thread of your app,


114
00:05:34.134 --> 00:05:36.369 line:-1 position:50%
enable the Thread Performance
Checker tool


115
00:05:36.369 --> 00:05:40.607 line:-1 position:50%
from the Diagnostics section
of the appropriate scheme.


116
00:05:40.607 --> 00:05:43.243 line:-1 position:50%
The Thread Performance Checker
alert has helped me discover


117
00:05:43.243 --> 00:05:45.745 line:-1 position:50%
the potential culprit
of my hang,


118
00:05:45,745 --> 00:05:48,114 line:-1
but in order to triage further,
I will want to know


119
00:05:48,114 --> 00:05:51,551 line:-1
what the other thread was doing
during the hang duration.


120
00:05:51.551 --> 00:05:56.456 line:-1 position:50%
Let's use another tool
to dive deeper.


121
00:05:56.456 --> 00:05:58.992 line:-1 position:50%
The Time Profiler instrument
gives you the ability to know


122
00:05:58.992 --> 00:06:01.828 line:-1 position:50%
what each thread
in your app was doing over time


123
00:06:01.828 --> 00:06:04.264 line:-1 position:50%
by providing call stacks.


124
00:06:04,264 --> 00:06:08,235 line:-1
New in Xcode 14, the Time
Profiler also detects hangs


125
00:06:08.235 --> 00:06:12.239 line:-1 position:50%
and labels them directly in
the corresponding process track.


126
00:06:12,239 --> 00:06:14,741 line:-1
In the Food Truck app,
I'll use the Time Profiler


127
00:06:14,741 --> 00:06:16,610 line:-1
to confirm a hang is occurring


128
00:06:16,610 --> 00:06:18,445 line:-1
when scrolling through
my donuts,


129
00:06:18.445 --> 00:06:21.681 line:-1 position:50%
that it was caused by a priority
inversion on the main thread,


130
00:06:21,681 --> 00:06:23,783 line:-1
and figure out
what the lower priority threads


131
00:06:23,783 --> 00:06:28,255 line:-1
were busy doing that caused
the main thread to wait.


132
00:06:28.255 --> 00:06:31.324 line:-1 position:50%
I start from the
Product > Profile menu in Xcode.


133
00:06:31.324 --> 00:06:33.326 line:-1 position:50%
This builds the app for release


134
00:06:33.326 --> 00:06:37.464 line:-1 position:50%
and launches Instruments
already setup to target the app.


135
00:06:37,464 --> 00:06:40,233 line:-1
I launch
the Time Profiler template


136
00:06:40,233 --> 00:06:43,436 line:-1
and begin recording a trace of
the problematic user interaction


137
00:06:43.436 --> 00:06:45.572 line:-1 position:50%
in the Food Truck app.


138
00:06:49.542 --> 00:06:51.411 line:-1 position:50%
I see there is a hang
being detected


139
00:06:51.411 --> 00:06:53.213 line:-1 position:50%
and labeled in the timeline.


140
00:06:53,213 --> 00:06:55,115 line:-1
The hang duration
is also specified


141
00:06:55.115 --> 00:06:58.718 line:-1 position:50%
to help evaluate
the severity of the issue.


142
00:06:58,718 --> 00:07:01,588 line:-1
Next, I can triple-click
the hang interval


143
00:07:01,588 --> 00:07:04,391 line:-1
which creates a time filter
for the duration of the hang


144
00:07:04,391 --> 00:07:06,793 line:-1
and filters the information
in the detail views


145
00:07:06,793 --> 00:07:09,296 line:-1
at the bottom
to only events occurring


146
00:07:09.296 --> 00:07:11.431 line:-1 position:50%
in this selected time interval.


147
00:07:11.431 --> 00:07:14.034 line:-1 position:50%
It also makes it easier
to see what was happening


148
00:07:14,034 --> 00:07:17,737 line:-1
during this time period
in other tracks.


149
00:07:17.737 --> 00:07:19.839 line:-1 position:50%
The first thing I notice
is that the main thread


150
00:07:19.839 --> 00:07:23.510 line:-1 position:50%
has barely any CPU usage
during the hang interval,


151
00:07:23,510 --> 00:07:25,912 line:-1
meaning the main thread
was unresponsive


152
00:07:25.912 --> 00:07:27.981 line:-1 position:50%
because it was waiting
on another thread,


153
00:07:27,981 --> 00:07:31,284 line:-1
not because it was doing
too much work itself.


154
00:07:31.284 --> 00:07:33.953 line:-1 position:50%
This aligns with
the Thread Performance Checker's


155
00:07:33.953 --> 00:07:37.424 line:-1 position:50%
priority inversion alert
from earlier.


156
00:07:37,424 --> 00:07:39,159 line:-1
Next, I see a worker thread


157
00:07:39.159 --> 00:07:42.295 line:-1 position:50%
that has lots of CPU usage
during the hang.


158
00:07:42,295 --> 00:07:46,566 line:-1
This is likely the thread that
the main thread is waiting for.


159
00:07:46,566 --> 00:07:48,101 line:-1
The next step
would be to examine


160
00:07:48.101 --> 00:07:50.737 line:-1 position:50%
what the worker thread
was doing during the hang


161
00:07:50.737 --> 00:07:53.640 line:-1 position:50%
and resolve
the priority inversion.


162
00:07:53.640 --> 00:07:55.442 line:-1 position:50%
Hang detection
and labeling in Instruments


163
00:07:55.442 --> 00:07:58.345 line:-1 position:50%
is a great way to surface
any hangs that are encountered


164
00:07:58,345 --> 00:08:00,347 line:-1
while profiling your app.


165
00:08:00,347 --> 00:08:02,816 line:-1
It is available by default
in the Time Profiler


166
00:08:02.816 --> 00:08:06.019 line:-1 position:50%
and CPU Profiler instruments.


167
00:08:06.019 --> 00:08:09.255 line:-1 position:50%
There is also a new standalone
hang tracing instrument


168
00:08:09.255 --> 00:08:11.524 line:-1 position:50%
that you can add
to any trace documents


169
00:08:11.524 --> 00:08:15.495 line:-1 position:50%
to surface hangs in combination
with other instruments.


170
00:08:15,495 --> 00:08:17,897 line:-1
In addition to hang detection
and labeling,


171
00:08:17.897 --> 00:08:20.900 line:-1 position:50%
it allows you to configure
a hang duration threshold


172
00:08:20,900 --> 00:08:24,838 line:-1
to find specific periods
of unresponsiveness.


173
00:08:24.838 --> 00:08:26.773 line:-1 position:50%
You have now learned
how to use Xcode


174
00:08:26.773 --> 00:08:30.043 line:-1 position:50%
to discover
and diagnose hangs at desk.


175
00:08:30.043 --> 00:08:32.846 line:-1 position:50%
Even with great testing
coverage during development,


176
00:08:32,846 --> 00:08:35,181 line:-1
beta and public release
environments are likely


177
00:08:35,181 --> 00:08:39,586 line:-1
to uncover hangs in code paths
you hadn't considered.


178
00:08:39.586 --> 00:08:42.255 line:-1 position:50%
Next, I will introduce
how to track down hangs


179
00:08:42.255 --> 00:08:45.525 line:-1 position:50%
once the app is deployed
in a beta environment.


180
00:08:45.525 --> 00:08:48.161 line:-1 position:50%
I've now deployed
a build of the Food Truck app


181
00:08:48.161 --> 00:08:50.430 line:-1 position:50%
to TestFlight through
App Store Connect


182
00:08:50.430 --> 00:08:53.400 line:-1 position:50%
and it is downloaded
on my personal device.


183
00:08:53.400 --> 00:08:56.302 line:-1 position:50%
I'll test the app when
selling donuts around town,


184
00:08:56,302 --> 00:08:58,505 line:-1
including in places where
I don't always have


185
00:08:58,505 --> 00:09:00,507 line:-1
a strong network connection.


186
00:09:00,507 --> 00:09:03,343 line:-1
But how do I discover
and diagnose hangs


187
00:09:03,343 --> 00:09:08,314 line:-1
if my device
is not connected to Xcode?


188
00:09:08,314 --> 00:09:11,317 line:-1
To continue to monitor for hangs
under these conditions,


189
00:09:11.317 --> 00:09:16.122 line:-1 position:50%
iOS 16 introduces on-device hang
detection in Developer settings,


190
00:09:16.122 --> 00:09:18.758 line:-1 position:50%
which provides real-time
hang notifications


191
00:09:18,758 --> 00:09:21,461 line:-1
and supporting diagnostics.


192
00:09:21.461 --> 00:09:23.363 line:-1 position:50%
This is available
for development-signed


193
00:09:23.363 --> 00:09:25.765 line:-1 position:50%
or TestFlight apps.


194
00:09:25,765 --> 00:09:28,435 line:-1
It's time to start
selling orders.


195
00:09:28,435 --> 00:09:30,703 line:-1
When I attempt to open
my current orders,


196
00:09:30,703 --> 00:09:33,473 line:-1
I receive an on-device
hang detection notification


197
00:09:33,473 --> 00:09:35,108 line:-1
that my app is hanging,


198
00:09:35.108 --> 00:09:38.311 line:-1 position:50%
this time for over
three seconds.


199
00:09:38.311 --> 00:09:40.146 line:-1 position:50%
I wonder why
I didn't notice this hang


200
00:09:40.146 --> 00:09:42.749 line:-1 position:50%
when I was developing
with Xcode?


201
00:09:42.749 --> 00:09:45.051 line:-1 position:50%
I will need to use
the diagnostic information


202
00:09:45.051 --> 00:09:49.389 line:-1 position:50%
provided by the on-device hang
detection tool to learn more.


203
00:09:49,389 --> 00:09:51,324 line:-1
Once your app is setup
for development,


204
00:09:51,324 --> 00:09:52,992 line:-1
this feature can be
enabled by opening


205
00:09:52.992 --> 00:09:55.728 line:-1 position:50%
Settings > Developer >
Hang Detection,


206
00:09:55,728 --> 00:09:58,798 line:-1
and toggling the switch.


207
00:09:58.798 --> 00:10:00.633 line:-1 position:50%
The Hang Threshold setting
allows you to configure


208
00:10:00.633 --> 00:10:03.303 line:-1 position:50%
the minimum duration
of hangs to detect.


209
00:10:03.303 --> 00:10:06.539 line:-1 position:50%
The shortest hang threshold
is 250 milliseconds


210
00:10:06.539 --> 00:10:10.009 line:-1 position:50%
and can be bumped
to 500 milliseconds or higher.


211
00:10:10.009 --> 00:10:12.812 line:-1 position:50%
Long hangs tend to have
a higher user-impact,


212
00:10:12.812 --> 00:10:15.849 line:-1 position:50%
but even shorter ones can be
disruptive to the experience,


213
00:10:15.849 --> 00:10:17.517 line:-1 position:50%
depending on the context,


214
00:10:17.517 --> 00:10:20.286 line:-1 position:50%
especially if they happen
consecutively.


215
00:10:20.286 --> 00:10:21.621 line:-1 position:50%
After installing your app,


216
00:10:21.621 --> 00:10:24.724 line:-1 position:50%
it will appear in the list
of monitored apps.


217
00:10:24.724 --> 00:10:27.293 line:-1 position:50%
The final section
shows a chronological list


218
00:10:27.293 --> 00:10:30.763 line:-1 position:50%
of available logs for the hangs
you were alerted to.


219
00:10:30,763 --> 00:10:33,199 line:-1
Note that these diagnostics
are best-effort


220
00:10:33.199 --> 00:10:36.035 line:-1 position:50%
and processed in the background
at a low priority


221
00:10:36.035 --> 00:10:39.072 line:-1 position:50%
to minimize
performance overhead.


222
00:10:39,072 --> 00:10:41,241 line:-1
This means the processing
can take longer,


223
00:10:41,241 --> 00:10:44,377 line:-1
especially if the system
is busy.


224
00:10:44,377 --> 00:10:47,046 line:-1
Fortunately, a passive
notification is displayed


225
00:10:47.046 --> 00:10:50.283 line:-1 position:50%
when new diagnostics
become available.


226
00:10:50.283 --> 00:10:53.620 line:-1 position:50%
Let's examine the diagnostics
for the hang that was detected


227
00:10:53,620 --> 00:10:55,588 line:-1
when I was opening
the orders in the app


228
00:10:55,588 --> 00:10:58,591 line:-1
while selling donuts
around town.


229
00:10:58,591 --> 00:11:00,760 line:-1
I am given both
a text-based hang log


230
00:11:00,760 --> 00:11:03,596 line:-1
and a tailspin
for the detected hang.


231
00:11:03,596 --> 00:11:06,065 line:-1
A text-based hang log
has less information,


232
00:11:06.065 --> 00:11:08.201 line:-1 position:50%
but can give us
an understanding of the hang


233
00:11:08,201 --> 00:11:10,069 line:-1
at a glance.


234
00:11:10,069 --> 00:11:12,605 line:-1
For a deeper investigation,
open the tailspin


235
00:11:12.605 --> 00:11:15.642 line:-1 position:50%
in Instruments for viewing
the thread interaction within


236
00:11:15,642 --> 00:11:19,412 line:-1
your process or identifying
the usage of system resources,


237
00:11:19,412 --> 00:11:21,381 line:-1
for example.


238
00:11:21,381 --> 00:11:23,216 line:-1
To start, I'll use
the Share button


239
00:11:23.216 --> 00:11:25.652 line:-1 position:50%
to send the text-based hang log
to a Mac,


240
00:11:25,652 --> 00:11:30,423 line:-1
where I can symbolicate it
and view it on a larger screen.


241
00:11:30,423 --> 00:11:33,126 line:-1
From viewing an excerpt
of the text-based hang log


242
00:11:33.126 --> 00:11:36.396 line:-1 position:50%
I transferred and symbolicated,
I see that during the hang,


243
00:11:36.396 --> 00:11:38.531 line:-1 position:50%
I am calling a method
on the main thread


244
00:11:38,531 --> 00:11:42,735 line:-1
that I know performs synchronous
requests to the network.


245
00:11:42,735 --> 00:11:44,804 line:-1
When I am testing
the application at my desk


246
00:11:44,804 --> 00:11:47,674 line:-1
with Xcode and a strong
network connection,


247
00:11:47,674 --> 00:11:49,075 line:-1
there may not be any delay


248
00:11:49,075 --> 00:11:51,644 line:-1
when requesting data
from the network.


249
00:11:51.644 --> 00:11:53.880 line:-1 position:50%
However, when testing
the app in places


250
00:11:53.880 --> 00:11:55.848 line:-1 position:50%
with a limited
network connection,


251
00:11:55.848 --> 00:12:00.086 line:-1 position:50%
the request takes longer
and results in a hang.


252
00:12:00.086 --> 00:12:02.255 line:-1 position:50%
It is important to test
the beta version of your app


253
00:12:02.255 --> 00:12:04.624 line:-1 position:50%
under these different,
real-world conditions,


254
00:12:04,624 --> 00:12:07,760 line:-1
and on-device hang detection
allows you to monitor for hangs


255
00:12:07,760 --> 00:12:10,663 line:-1
using just your device.


256
00:12:10,663 --> 00:12:13,499 line:-1
At this point, I have discovered
and diagnosed hangs


257
00:12:13.499 --> 00:12:16.869 line:-1 position:50%
using the available tooling in
the development and beta phases,


258
00:12:16.869 --> 00:12:19.305 line:-1 position:50%
and I am ready to make
the Food Truck app available


259
00:12:19,305 --> 00:12:22,075 line:-1
to customers in the App Store.


260
00:12:22.075 --> 00:12:24.711 line:-1 position:50%
I'll now present how to track
down hangs once your app


261
00:12:24.711 --> 00:12:26.512 line:-1 position:50%
is in the hands
of your customers,


262
00:12:26.512 --> 00:12:28.047 line:-1 position:50%
on various OS versions,


263
00:12:28.047 --> 00:12:30.583 line:-1 position:50%
devices, and in other
real-world conditions


264
00:12:30.583 --> 00:12:35.855 line:-1 position:50%
you may not have been able to
replicate in your prior testing.


265
00:12:35.855 --> 00:12:38.891 line:-1 position:50%
New in Xcode 14,
the Xcode Organizer


266
00:12:38,891 --> 00:12:42,762 line:-1
supports hang reports to deliver
aggregated hang diagnostics


267
00:12:42.762 --> 00:12:46.332 line:-1 position:50%
from customer devices.


268
00:12:46,332 --> 00:12:49,035 line:-1
The collected data is from
customers which have consented


269
00:12:49.035 --> 00:12:51.838 line:-1 position:50%
to share app analytics,
and they contain information


270
00:12:51,838 --> 00:12:57,377 line:-1
about the main thread stack
trace that led to the hangs.


271
00:12:57,377 --> 00:13:00,613 line:-1
Hang reports are available
from the left-side navigation


272
00:13:00.613 --> 00:13:03.750 line:-1 position:50%
of the Xcode Organizer.


273
00:13:03.750 --> 00:13:05.785 line:-1 position:50%
When similar stack traces
are collected,


274
00:13:05,785 --> 00:13:09,555 line:-1
they are grouped together
to form a single signature.


275
00:13:09.555 --> 00:13:11.924 line:-1 position:50%
In the list,
the signatures are shown sorted


276
00:13:11,924 --> 00:13:14,427 line:-1
based on the user impact.


277
00:13:14.427 --> 00:13:18.031 line:-1 position:50%
For each signature, you can
find a few sample hang logs.


278
00:13:18.031 --> 00:13:20.933 line:-1 position:50%
Each hang log contains
the main thread stack trace


279
00:13:20,933 --> 00:13:24,871 line:-1
containing the code responsible
for the hang, the hang duration,


280
00:13:24.871 --> 00:13:28.641 line:-1 position:50%
and the device and OS version
from which the log originated.


281
00:13:28,641 --> 00:13:32,145 line:-1
Each signature also provides
aggregate statistics about


282
00:13:32.145 --> 00:13:35.448 line:-1 position:50%
how many hang logs the signature
was responsible for


283
00:13:35,448 --> 00:13:39,385 line:-1
and a breakdown of those logs
by OS Version and device.


284
00:13:39,385 --> 00:13:42,288 line:-1
To identify the hangs
most affecting your customers,


285
00:13:42.288 --> 00:13:45.692 line:-1 position:50%
pay close attention
to your top signatures.


286
00:13:45,692 --> 00:13:49,662 line:-1
In this case, the top signature
is responsible for 21 percent


287
00:13:49.662 --> 00:13:53.266 line:-1 position:50%
of the hang time
in this release.


288
00:13:53.266 --> 00:13:55.168 line:-1 position:50%
Since I've submitted
the app to the App Store


289
00:13:55,168 --> 00:13:58,004 line:-1
with symbol information,
the hangs report shows me


290
00:13:58,004 --> 00:14:02,341 line:-1
all of the functions named just
as they are in the source code.


291
00:14:02,341 --> 00:14:05,812 line:-1
By examining the functions in
this main thread's call stack,


292
00:14:05,812 --> 00:14:08,881 line:-1
I can infer that this hang was
caused by synchronously reading


293
00:14:08,881 --> 00:14:11,617 line:-1
a file from disk
on the main thread,


294
00:14:11.617 --> 00:14:15.955 line:-1 position:50%
which is known to block
for significant periods of time.


295
00:14:15.955 --> 00:14:18.091 line:-1 position:50%
It is important to tackle
the performance problems


296
00:14:18.091 --> 00:14:20.093 line:-1 position:50%
that are most affecting
your customers,


297
00:14:20.093 --> 00:14:23.663 line:-1 position:50%
and the Organizer is
a great tool to identify them.


298
00:14:23.663 --> 00:14:25.898 line:-1 position:50%
Check this data after
each app release


299
00:14:25.898 --> 00:14:28.634 line:-1 position:50%
to validate the previous hangs
have been resolved,


300
00:14:28,634 --> 00:14:31,738 line:-1
and to address new hangs
that may appear.


301
00:14:33,740 --> 00:14:36,109 line:0
You can also retrieve
the same hang report data


302
00:14:36,109 --> 00:14:39,145 line:0
through the App Store
Connect REST APIs.


303
00:14:39,145 --> 00:14:41,147 line:0
This can help you integrate
performance data


304
00:14:41,147 --> 00:14:45,118 line:0
with your own systems,
or run additional analysis.


305
00:14:45,118 --> 00:14:46,886 line:0
I highly recommend you check out


306
00:14:46,886 --> 00:14:50,223 line:0
the "Identify trends with the
Power and Performance API" video


307
00:14:50,223 --> 00:14:54,393 position:50%
to learn more about using
the Power and Performance APIs.


308
00:14:54,393 --> 00:14:58,464 line:-1
Added in Xcode 13.2, you can
now receive notifications


309
00:14:58,464 --> 00:15:02,535 line:-1
when monitoring power and
performance metrics in your app.


310
00:15:02,535 --> 00:15:04,570 line:-1
I recommend
you enable notifications


311
00:15:04,570 --> 00:15:07,306 line:-1
by clicking the Notifications
button in the top right


312
00:15:07,306 --> 00:15:10,510 line:-1
of the Xcode Organizer's
Regressions view.


313
00:15:10,510 --> 00:15:14,514 line:-1
This will alert you to sudden
rises in your app's hang rate.


314
00:15:14,514 --> 00:15:16,649 line:0
Find out more about performance
regressions in the


315
00:15:16,649 --> 00:15:19,652 line:0
"Diagnose Power and Performance
Regressions in your app" talk


316
00:15:19,652 --> 00:15:21,754 position:50%
from 2021.


317
00:15:21.754 --> 00:15:24.423 line:-1 position:50%
To improve your experience
in the Xcode Organizer,


318
00:15:24.423 --> 00:15:27.460 line:-1 position:50%
I strongly recommend
you build and submit your app


319
00:15:27.460 --> 00:15:30.563 line:-1 position:50%
to the App Store
with symbol information.


320
00:15:30,563 --> 00:15:33,332 line:-1
This symbol information is used
to add function names


321
00:15:33.332 --> 00:15:36.569 line:-1 position:50%
from your app to reports
in the Xcode Organizer.


322
00:15:36.569 --> 00:15:37.804 line:-1 position:50%
This makes stack traces


323
00:15:37.804 --> 00:15:40.373 line:-1 position:50%
significantly easier
to understand.


324
00:15:40,373 --> 00:15:42,742 line:-1
It also enables
one-click navigation


325
00:15:42.742 --> 00:15:44.477 line:-1 position:50%
from a function name
in a stack trace


326
00:15:44.477 --> 00:15:47.880 line:-1 position:50%
to the function definition
in the Xcode source editor.


327
00:15:47.880 --> 00:15:49.448 line:-1 position:50%
The information extracted


328
00:15:49,448 --> 00:15:51,584 line:-1
is limited to function
and methods,


329
00:15:51.584 --> 00:15:53.686 line:-1 position:50%
names and paths
of source code files,


330
00:15:53,686 --> 00:15:55,655 line:-1
and line number information.


331
00:15:55,655 --> 00:15:58,491 line:-1
It is important to note that
the limited symbol information


332
00:15:58.491 --> 00:16:02.295 line:-1 position:50%
will be securely stored
and will never be shared.


333
00:16:02.295 --> 00:16:03.830 line:-1 position:50%
Fantastic!


334
00:16:03.830 --> 00:16:06.032 line:-1 position:50%
You now know how to discover
and diagnose hangs


335
00:16:06.032 --> 00:16:09.602 line:-1 position:50%
at each phase
in the development process.


336
00:16:09,602 --> 00:16:11,838 line:-1
Going forward,
discover, diagnose,


337
00:16:11,838 --> 00:16:14,240 line:-1
and fix hangs
in the earliest possible phase


338
00:16:14.240 --> 00:16:16.075 line:-1 position:50%
of the development process.


339
00:16:16.075 --> 00:16:18.211 line:-1 position:50%
Use the tools available to help,


340
00:16:18.211 --> 00:16:22.815 line:-1 position:50%
including proactively profiling
new features using Instruments.


341
00:16:22.815 --> 00:16:25.284 line:-1 position:50%
Be sure to enable
the Thread Performance Checker


342
00:16:25.284 --> 00:16:28.287 line:-1 position:50%
and on-device hang detection.


343
00:16:28.287 --> 00:16:31.157 line:-1 position:50%
After each release,
use the Xcode Organizer


344
00:16:31,157 --> 00:16:33,826 line:-1
to tackle hangs that are most
affecting your customers


345
00:16:33,826 --> 00:16:36,362 line:-1
and to validate that hangs
from previous app versions


346
00:16:36,362 --> 00:16:38,564 line:-1
have been resolved.


347
00:16:38.564 --> 00:16:41.734 line:-1 position:50%
Enable regression notifications
to be proactively alerted


348
00:16:41.734 --> 00:16:43.803 line:-1 position:50%
to regressed
performance metrics,


349
00:16:43.803 --> 00:16:48.007 line:-1 position:50%
which can be the first sign of
power and performance problems.


350
00:16:48,007 --> 00:16:50,977 line:-1
And finally, build and submit
your app to the App Store


351
00:16:50.977 --> 00:16:52.478 line:-1 position:50%
with symbol information


352
00:16:52.478 --> 00:16:55.815 line:-1 position:50%
to improve the usefulness
of the Xcode Organizer.


353
00:16:55.815 --> 00:16:57.250 line:-1 position:50%
By following these steps,


354
00:16:57.250 --> 00:16:59.352 line:-1 position:50%
your apps will have
even better performance


355
00:16:59.352 --> 00:17:02.121 line:-1 position:50%
to provide the best possible
user experience.


356
00:17:02.121 --> 00:17:05.591 line:-1 position:50%
Thanks for hanging out at WWDC!


357
00:17:05,591 --> 00:17:09,028 line:0 size:2% position:90%
♪

