2
00:00:00,167 --> 00:00:03,003 line:-1
â™ª Mellow instrumental
hip-hop music â™ª


3
00:00:03,003 --> 00:00:09,977 line:0 position:90% size:2%
â™ª


4
00:00:09,977 --> 00:00:14,281 line:-1
Devin Clary: Hi. I'm Devin, an
engineer on the Messages team.


5
00:00:14.281 --> 00:00:17.017 line:-1 position:50%
Lance Parker: And I'm Lance,
also a Messages engineer.


6
00:00:17.017 --> 00:00:20.053 line:-1 position:50%
Devin: Welcome to "Integrate
your custom collaboration app


7
00:00:20.053 --> 00:00:22.222 line:-1 position:50%
with Messages."


8
00:00:22,222 --> 00:00:24,625 line:-1
Collaboration starts
with a conversation,


9
00:00:24.625 --> 00:00:27.227 line:-1 position:50%
and in iOS 16
and macOS Ventura,


10
00:00:27.227 --> 00:00:29.897 line:-1 position:50%
you can bring your app's
custom collaboration experience


11
00:00:29.897 --> 00:00:32.466 line:-1 position:50%
right into the fabric
of the conversation.


12
00:00:32.466 --> 00:00:36.870 line:-1 position:50%
In this video, we'll go over the
life cycle of a collaboration.


13
00:00:36,870 --> 00:00:38,438 line:-1
Then, we'll show you
how to prepare


14
00:00:38.438 --> 00:00:42.809 line:-1 position:50%
your app's collaborative content
to be shared through Messages.


15
00:00:42.809 --> 00:00:45.879 line:-1 position:50%
Next, we'll give you everything
you need to instantly verify


16
00:00:45,879 --> 00:00:49,650 line:-1
recipient access, and respond
to participant changes,


17
00:00:49,650 --> 00:00:52,619 line:-1
all without
compromising privacy.


18
00:00:52,619 --> 00:00:55,355 line:-1
Finally, we'll show you
how your app can post notices


19
00:00:55.355 --> 00:00:59.293 line:-1 position:50%
about the content right
to the Messages conversation.


20
00:00:59,293 --> 00:01:00,928 position:50%
This video assumes your app


21
00:01:00,928 --> 00:01:03,263 line:0
has existing collaboration
infrastructure,


22
00:01:03,263 --> 00:01:06,066 position:50%
and has already adopted
universal links.


23
00:01:06,066 --> 00:01:08,268 position:50%
We'll also build on some
concepts introduced in


24
00:01:08,268 --> 00:01:09,870 position:50%
"Add Shared with You
to your app"


25
00:01:09,870 --> 00:01:14,574 position:50%
and "Enhance collaboration
experiences with Messages."


26
00:01:14.574 --> 00:01:16.677 line:-1 position:50%
First up,
I'll go over the life cycle


27
00:01:16,677 --> 00:01:18,979 line:-1
of a custom
collaboration message


28
00:01:18.979 --> 00:01:21.515 line:-1 position:50%
to illustrate how this API
allows your users


29
00:01:21,515 --> 00:01:24,818 line:-1
to start collaborating
faster than ever.


30
00:01:24.818 --> 00:01:26.987 line:-1 position:50%
When a user decides
to share a collaboration


31
00:01:26,987 --> 00:01:29,756 line:-1
from your app through Messages,


32
00:01:29.756 --> 00:01:33.427 line:-1 position:50%
you first create metadata
to represent the content.


33
00:01:33,427 --> 00:01:36,463 line:-1
The metadata includes share
options the user can configure


34
00:01:36,463 --> 00:01:37,965 line:-1
prior to sending the message,


35
00:01:37.965 --> 00:01:41.301 line:-1 position:50%
and a number of other properties
you can customize.


36
00:01:41,301 --> 00:01:43,971 line:0
Next, you provide that metadata
to the share sheet,


37
00:01:43,971 --> 00:01:46,039 line:0
or to drag and drop.


38
00:01:46,039 --> 00:01:48,375 position:50%
This allows a draft
of the content to be staged


39
00:01:48,375 --> 00:01:51,144 position:50%
in the Messages compose field.


40
00:01:51,144 --> 00:01:55,215 position:50%
The collaboration needs to be
represented by a universal link.


41
00:01:55,215 --> 00:01:57,918 position:50%
That can be created immediately,
but it's best deferred


42
00:01:57,918 --> 00:02:00,721 line:0
until right before
the message is sent.


43
00:02:00,721 --> 00:02:02,422 line:0
This is useful
if your app's link creation


44
00:02:02,422 --> 00:02:05,325 position:50%
depends on the selected
share options, or recipients,


45
00:02:05,325 --> 00:02:08,395 line:0
as configured in
the Messages compose field.


46
00:02:08,395 --> 00:02:11,365 position:50%
The user chooses the recipients
and share options


47
00:02:11,365 --> 00:02:14,201 position:50%
and taps the send button.


48
00:02:14,201 --> 00:02:15,569 position:50%
Before the message is sent,


49
00:02:15,569 --> 00:02:17,971 position:50%
Messages asks your app
for the universal link


50
00:02:17,971 --> 00:02:21,575 position:50%
and a device independent
identifier for the content.


51
00:02:21,575 --> 00:02:23,877 position:50%
Using that identifier,
Messages provides a set of


52
00:02:23,877 --> 00:02:26,747 position:50%
cryptographic identities
representing the recipients


53
00:02:26,747 --> 00:02:29,916 position:50%
of that specific
collaboration message.


54
00:02:29,916 --> 00:02:31,685 line:0
Your app will
use these identities later


55
00:02:31,685 --> 00:02:34,087 position:50%
to allow the recipients
to immediately open the link


56
00:02:34,087 --> 00:02:38,725 line:0
on any of their devices.


57
00:02:38,725 --> 00:02:41,261 line:0
Your app stores those
identities on its servers


58
00:02:41,261 --> 00:02:44,364 line:0
and associates them
with the shared content.


59
00:02:44,364 --> 00:02:46,033 line:0
Once your app
finishes this step,


60
00:02:46,033 --> 00:02:50,470 position:50%
the message is sent
to the recipients.


61
00:02:50,470 --> 00:02:53,440 line:0
Now, here's what happens
on the receiving device.


62
00:02:53,440 --> 00:02:56,009 line:-1
The goal is to instantly
verify access,


63
00:02:56.009 --> 00:02:59.913 line:-1 position:50%
pairing a recipient identity
with an account on your server.


64
00:02:59.913 --> 00:03:01.681 line:-1 position:50%
When the recipient
opens the link,


65
00:03:01.681 --> 00:03:04.351 line:-1 position:50%
your app receives
a call to open the URL,


66
00:03:04.351 --> 00:03:08.388 line:-1 position:50%
just like it does
for any other link.


67
00:03:08.388 --> 00:03:10.090 line:-1 position:50%
When your app detects
that a user account


68
00:03:10,090 --> 00:03:12,325 line:-1
doesn't yet have access
to the document,


69
00:03:12.325 --> 00:03:15.262 line:-1 position:50%
it queries the system
for a proof of user identity


70
00:03:15,262 --> 00:03:18,865 line:-1
cryptographically signed
by the recipient device.


71
00:03:18,865 --> 00:03:20,901 line:-1
Your app sends
that signed identity proof


72
00:03:20,901 --> 00:03:23,870 line:-1
to your server for validation.


73
00:03:23,870 --> 00:03:26,373 line:-1
If the signature is valid,
the server compares the proof


74
00:03:26.373 --> 00:03:28.308 line:-1 position:50%
against the identities
previously provided


75
00:03:28.308 --> 00:03:30.310 line:-1 position:50%
by the sending device.


76
00:03:30,310 --> 00:03:33,213 line:-1
If there's a match,
your server grants access


77
00:03:33,213 --> 00:03:35,215 line:-1
to the user's account.


78
00:03:35,215 --> 00:03:36,716 line:-1
And with that,
the recipient has gained


79
00:03:36,716 --> 00:03:39,419 line:-1
instant and secure access
to the content,


80
00:03:39,419 --> 00:03:42,022 line:-1
all without exchanging
account information!


81
00:03:42.022 --> 00:03:45.826 line:-1 position:50%
And that's the life cycle
of a collaboration message!


82
00:03:45,826 --> 00:03:47,561 line:-1
Next,
let's look more closely


83
00:03:47,561 --> 00:03:51,198 line:-1
at the API
for starting a collaboration.


84
00:03:51.198 --> 00:03:55.168 line:-1 position:50%
The system needs some metadata
about the collaboration.


85
00:03:55,168 --> 00:03:56,970 line:-1
And for that,
you use a new class


86
00:03:56,970 --> 00:04:01,575 line:-1
in the Shared with You framework
called SWCollaborationMetadata.


87
00:04:01.575 --> 00:04:05.011 line:-1 position:50%
This class has a few properties
for you to configure:


88
00:04:05.011 --> 00:04:08.148 line:-1 position:50%
the content's title,
a local identifier


89
00:04:08,148 --> 00:04:10,851 line:-1
to reference the content
before its been shared;


90
00:04:10.851 --> 00:04:13.220 line:-1 position:50%
the initiator name
and account handle,


91
00:04:13.220 --> 00:04:14.788 line:-1 position:50%
to provide transparency
to the user


92
00:04:14.788 --> 00:04:16.890 line:-1 position:50%
about the account
they're sharing from;


93
00:04:16.890 --> 00:04:21.528 line:-1 position:50%
and the default share options,
for the user to configure.


94
00:04:21.528 --> 00:04:23.330 line:-1 position:50%
Here's how to create
a metadata object


95
00:04:23,330 --> 00:04:27,033 line:-1
and configure its properties.


96
00:04:27,033 --> 00:04:31,104 line:-1
Create a local identifier using
SWLocalCollaborationIdentifier


97
00:04:31.104 --> 00:04:33.874 line:-1 position:50%
initialized with a string.


98
00:04:33,874 --> 00:04:36,143 line:-1
The string only needs
to be sufficient for your app


99
00:04:36.143 --> 00:04:41.114 line:-1 position:50%
to identify the content locally,
not across devices.


100
00:04:41.114 --> 00:04:43.183 line:-1 position:50%
Initialize
a new metadata instance


101
00:04:43.183 --> 00:04:47.020 line:-1 position:50%
using the local identifier.


102
00:04:47,020 --> 00:04:52,025 line:-1
Set the content title,
the initiator's account handle,


103
00:04:52.025 --> 00:04:54.628 line:-1 position:50%
and their name
using PersonNameComponents


104
00:04:54,628 --> 00:04:57,164 line:-1
from the foundation framework.


105
00:04:57,164 --> 00:04:59,566 line:-1
The handle and name
are only displayed locally


106
00:04:59,566 --> 00:05:04,371 line:-1
so the user can confirm the
account they're sharing from.


107
00:05:04.371 --> 00:05:07.474 line:-1 position:50%
Next,
set the defaultShareOptions.


108
00:05:07.474 --> 00:05:08.942 line:-1 position:50%
Before I show you
how to do that,


109
00:05:08,942 --> 00:05:12,012 line:-1
I'll first describe
how options work.


110
00:05:12.012 --> 00:05:14.548 line:-1 position:50%
Share options are
the settings a user configures


111
00:05:14.548 --> 00:05:18.251 line:-1 position:50%
on the collaboration
in Messages or the share sheet.


112
00:05:18,251 --> 00:05:20,620 line:-1
The options selected by the user
are provided to you


113
00:05:20,620 --> 00:05:23,323 line:-1
before the message is sent.


114
00:05:23,323 --> 00:05:25,325 line:-1
Share options
might include settings like


115
00:05:25,325 --> 00:05:27,694 line:-1
who can make edits
to a collaboration


116
00:05:27.694 --> 00:05:32.199 line:-1 position:50%
or who should have access
to the content.


117
00:05:32.199 --> 00:05:34.768 line:-1 position:50%
You use a few classes
to define options,


118
00:05:34.768 --> 00:05:38.238 line:-1 position:50%
starting with
SWCollaborationOption.


119
00:05:38.238 --> 00:05:39.639 line:-1 position:50%
Depending on how
they're grouped,


120
00:05:39.639 --> 00:05:42.209 line:-1 position:50%
options represent
individual switches,


121
00:05:42.209 --> 00:05:46.279 line:-1 position:50%
or mutually exclusive values
for a setting.


122
00:05:46,279 --> 00:05:48,715 line:-1
Options have a title
and an identifier,


123
00:05:48,715 --> 00:05:53,920 line:-1
and they are either
selected or unselected.


124
00:05:53.920 --> 00:05:58.091 line:-1 position:50%
There are two classes
to represent a group of options:


125
00:05:58.091 --> 00:06:00.060 line:-1 position:50%
SWCollaborationOptionsGroup


126
00:06:00.060 --> 00:06:04.197 line:-1 position:50%
and SWCollaborationOptions
PickerGroup.


127
00:06:04.197 --> 00:06:06.766 line:-1 position:50%
You use
SWCollaborationOptionsGroup


128
00:06:06.766 --> 00:06:09.269 line:-1 position:50%
to represent
a collection of switches,


129
00:06:09.269 --> 00:06:11.905 line:-1 position:50%
while SWCollaborationOptions
PickerGroup


130
00:06:11,905 --> 00:06:16,610 line:-1
represents mutually exclusive
values for a setting.


131
00:06:16,610 --> 00:06:19,246 line:-1
Finally,
SWCollaborationShareOptions


132
00:06:19.246 --> 00:06:21.681 line:-1 position:50%
defines the full set
of option groups,


133
00:06:21,681 --> 00:06:25,252 line:-1
to be set on the metadata's
defaultShareOptions property.


134
00:06:25,252 --> 00:06:29,489 line:-1
You can also provide a summary
string to describe the options.


135
00:06:29,489 --> 00:06:31,658 line:-1
Now that I've described
the option classes,


136
00:06:31.658 --> 00:06:34.661 line:-1 position:50%
here's an example
showing how to use them.


137
00:06:34.661 --> 00:06:38.765 line:-1 position:50%
This code defines
two option groups.


138
00:06:38.765 --> 00:06:41.368 line:-1 position:50%
The first group is initialized
with an identifier


139
00:06:41,368 --> 00:06:43,937 line:-1
and two possible options.


140
00:06:43,937 --> 00:06:45,972 line:-1
The identifier is
an arbitrary string


141
00:06:45.972 --> 00:06:50.710 line:-1 position:50%
you later use to identify which
option was selected by the user.


142
00:06:50,710 --> 00:06:52,145 line:-1
Since this is a picker group,


143
00:06:52.145 --> 00:06:54.914 line:-1 position:50%
the options are
mutually exclusive.


144
00:06:54.914 --> 00:06:56.883 line:-1 position:50%
This group represents
the permission settings


145
00:06:56.883 --> 00:07:00.787 line:-1 position:50%
for the content:
readwrite or readonly.


146
00:07:00.787 --> 00:07:06.092 line:-1 position:50%
Then, the first option in that
group is selected by default.


147
00:07:06,092 --> 00:07:11,231 line:-1
And the title is set to a string
describing this group.


148
00:07:11.231 --> 00:07:13.667 line:-1 position:50%
The second option group
is initialized the same way,


149
00:07:13,667 --> 00:07:16,202 line:-1
and also contains two options.


150
00:07:16.202 --> 00:07:18.305 line:-1 position:50%
But since this is
a generic option group,


151
00:07:18,305 --> 00:07:19,673 line:-1
the user will be able
to configure


152
00:07:19.673 --> 00:07:23.710 line:-1 position:50%
whether to allow mentions
and comments independently.


153
00:07:23,710 --> 00:07:26,546 line:-1
Finally, the two option groups
are used to initialize


154
00:07:26.546 --> 00:07:30.183 line:-1 position:50%
an instance of
SWCollaborationShareOptions,


155
00:07:30.183 --> 00:07:34.454 line:-1 position:50%
which is then set
on the metadata.


156
00:07:34.454 --> 00:07:37.090 line:-1 position:50%
Next, the metadata is provided
to the share sheet


157
00:07:37.090 --> 00:07:39.626 line:-1 position:50%
or drag and drop,
depending on how the user


158
00:07:39,626 --> 00:07:42,362 line:-1
decides to share the content.


159
00:07:42,362 --> 00:07:46,032 line:0
If your app uses SwiftUI,
SWCollaborationMetadata


160
00:07:46,032 --> 00:07:49,536 line:0
is compatible
with the new ShareLink API.


161
00:07:49,536 --> 00:07:52,105 position:50%
Watch "Meet Transferable"
and "What's new in SwiftUI"


162
00:07:52,105 --> 00:07:58,244 position:50%
to learn more about
Transferable and ShareLink.


163
00:07:58.244 --> 00:08:00.814 line:-1 position:50%
Here's how easy it is
to support collaboration


164
00:08:00,814 --> 00:08:05,552 line:-1
on a proxy representation
in SwiftUI!


165
00:08:05,552 --> 00:08:08,288 line:-1
From within
a Transferable model object,


166
00:08:08.288 --> 00:08:10.090 line:-1 position:50%
set up a ProxyRepresentation


167
00:08:10.090 --> 00:08:15.395 line:-1 position:50%
to return a collaboration
metadata instance.


168
00:08:15.395 --> 00:08:16.629 line:-1 position:50%
Then, from a view,


169
00:08:16,629 --> 00:08:22,836 line:-1
initialize ShareLink
with that model object.


170
00:08:22.836 --> 00:08:26.673 line:-1 position:50%
For UIKit and AppKit apps,
you use NSItemProvider


171
00:08:26.673 --> 00:08:28.408 line:-1 position:50%
to support sharing.


172
00:08:28.408 --> 00:08:31.010 line:-1 position:50%
And SWCollaborationMetadata
conforms to


173
00:08:31.010 --> 00:08:33.780 line:-1 position:50%
NSItemProviderReading
and writing.


174
00:08:33.780 --> 00:08:36.216 line:-1 position:50%
So you simply register
a metadata instance


175
00:08:36,216 --> 00:08:39,853 line:-1
with an item provider,
to support collaboration.


176
00:08:39.853 --> 00:08:41.254 line:-1 position:50%
It's also good practice


177
00:08:41.254 --> 00:08:43.757 line:-1 position:50%
to register multiple
representations of the content


178
00:08:43.757 --> 00:08:47.527 line:-1 position:50%
to support sharing through
as many channels as possible.


179
00:08:47.527 --> 00:08:49.596 line:-1 position:50%
For example,
Messages automatically


180
00:08:49,596 --> 00:08:52,232 line:-1
offers an option to send
the content as a copy


181
00:08:52.232 --> 00:08:55.969 line:-1 position:50%
if you provide
a file representation.


182
00:08:55.969 --> 00:08:58.671 line:-1 position:50%
You'll use
the NSItemProvider API with


183
00:08:58,671 --> 00:09:03,476 line:-1
UIActivityViewController and
UIDragItem on iOS and iPadOS


184
00:09:03.476 --> 00:09:08.281 line:-1 position:50%
and NSSharingServicePicker
on macOS.


185
00:09:08.281 --> 00:09:12.519 line:-1 position:50%
Here's how to set that up
with the share sheet on iOS.


186
00:09:12,519 --> 00:09:16,189 line:-1
Create an NSItemProvider
instance.


187
00:09:16.189 --> 00:09:18.091 line:-1 position:50%
Register
the collaboration metadata


188
00:09:18.091 --> 00:09:19.826 line:-1 position:50%
created in the previous example,


189
00:09:19,826 --> 00:09:25,031 line:-1
with visibility set
to all processes on the system.


190
00:09:25.031 --> 00:09:27.734 line:-1 position:50%
Initialize
UIActivityItemsConfiguration


191
00:09:27,734 --> 00:09:30,603 line:-1
with the item provider,


192
00:09:30,603 --> 00:09:32,972 line:-1
then initialize
UIActivityViewController


193
00:09:32,972 --> 00:09:36,042 line:-1
with that configuration.


194
00:09:36.042 --> 00:09:40.947 line:-1 position:50%
And finally,
present the view controller.


195
00:09:40.947 --> 00:09:44.918 line:-1 position:50%
It's just as easy
to support drag and drop.


196
00:09:44.918 --> 00:09:46.186 line:-1 position:50%
Initialize NSItemProvider


197
00:09:46.186 --> 00:09:50.590 line:-1 position:50%
and register the metadata
the same way,


198
00:09:50,590 --> 00:09:53,359 line:-1
then create a UIDragItem
with the item provider


199
00:09:53.359 --> 00:09:58.565 line:-1 position:50%
to use
with the drag and drop APIs.


200
00:09:58,565 --> 00:10:03,236 line:-1
The API is similar on macOS
for the sharing popover.


201
00:10:03.236 --> 00:10:06.573 line:-1 position:50%
Again, set up the item provider.


202
00:10:06,573 --> 00:10:08,241 line:-1
And this time,
use it to initialize


203
00:10:08,241 --> 00:10:11,878 line:-1
NSSharingServicePicker.


204
00:10:11.878 --> 00:10:17.183 line:-1 position:50%
And then show the picker
relative to a target view.


205
00:10:17.183 --> 00:10:20.620 line:-1 position:50%
Drag and drop on macOS
utilizes NSPasteboardItem


206
00:10:20.620 --> 00:10:22.822 line:-1 position:50%
rather than NSItemProvider.


207
00:10:22,822 --> 00:10:24,624 line:-1
To support this,
SharedWithYou exports


208
00:10:24,624 --> 00:10:29,329 line:-1
an NSPasteboardItem extension.


209
00:10:29.329 --> 00:10:31.865 line:-1 position:50%
Using that extension,
set the collaboration metadata


210
00:10:31.865 --> 00:10:34.834 line:-1 position:50%
directly on a new
NSPasteboardItem instance


211
00:10:34.834 --> 00:10:39.105 line:-1 position:50%
in order to support
drag and drop.


212
00:10:39.105 --> 00:10:40.640 line:-1 position:50%
And that's all you need
for a draft


213
00:10:40.640 --> 00:10:45.745 line:-1 position:50%
of your collaborative content
to be staged in Messages!


214
00:10:45.745 --> 00:10:47.981 line:-1 position:50%
Next, when the user
taps the send button,


215
00:10:47.981 --> 00:10:52.552 line:-1 position:50%
the system coordinates with
your app to set up the share.


216
00:10:52,552 --> 00:10:54,387 line:-1
It does this through
a new class called


217
00:10:54.387 --> 00:10:57.390 line:-1 position:50%
SWCollaborationCoordinator.


218
00:10:57,390 --> 00:11:00,193 line:-1
SWCollaborationCoordinator
is a singleton,


219
00:11:00.193 --> 00:11:03.229 line:-1 position:50%
meaning there is
a global shared instance.


220
00:11:03.229 --> 00:11:05.498 line:-1 position:50%
That shared instance
coordinates the collaboration


221
00:11:05.498 --> 00:11:09.335 line:-1 position:50%
through a delegate you define
called an actionHandler.


222
00:11:09,335 --> 00:11:11,137 line:-1
To ensure your app
is always available


223
00:11:11,137 --> 00:11:12,805 line:-1
to coordinate collaborations,


224
00:11:12,805 --> 00:11:15,174 line:-1
it will be launched
in the background when needed.


225
00:11:15.174 --> 00:11:17.677 line:-1 position:50%
So you should register
the delegate soon after launch


226
00:11:17,677 --> 00:11:22,181 line:-1
and handle actions
immediately to avoid timeouts.


227
00:11:22,181 --> 00:11:24,250 line:-1
Here's how to set up
the collaboration coordinator


228
00:11:24,250 --> 00:11:28,021 line:-1
after your app
finishes launching.


229
00:11:28,021 --> 00:11:30,256 line:-1
Access the singleton
coordinator instance


230
00:11:30,256 --> 00:11:33,593 line:-1
through the shared property.


231
00:11:33.593 --> 00:11:34.827 line:-1 position:50%
Then, in the app delegate's


232
00:11:34,827 --> 00:11:36,963 line:-1
didFinishLaunchingWithOptions
method,


233
00:11:36,963 --> 00:11:38,264 line:-1
set the actionHandler property


234
00:11:38.264 --> 00:11:39.799 line:-1 position:50%
to an object
that conforms to the


235
00:11:39,799 --> 00:11:44,370 line:-1
SWCollaborationActionHandler
protocol.


236
00:11:44.370 --> 00:11:46.873 line:-1 position:50%
The action handler
protocol uses a new class


237
00:11:46,873 --> 00:11:49,175 line:-1
called SWAction.


238
00:11:49,175 --> 00:11:53,813 line:-1
SWActions represent work
your app is expected to perform.


239
00:11:53,813 --> 00:11:56,115 line:-1
You fulfill actions
to mark them as complete,


240
00:11:56,115 --> 00:11:59,018 line:-1
and fail them otherwise.


241
00:11:59,018 --> 00:12:01,087 line:-1
The first action your app
needs to handle


242
00:12:01.087 --> 00:12:03.923 line:-1 position:50%
is the start collaboration
action.


243
00:12:03,923 --> 00:12:05,558 line:-1
SWStartCollaborationAction


244
00:12:05,558 --> 00:12:08,595 line:-1
contains the collaboration
metadata you set up earlier,


245
00:12:08,595 --> 00:12:12,298 line:-1
updated with the user's
selected share options.


246
00:12:12,298 --> 00:12:14,233 line:-1
Once you've performed
the necessary setup,


247
00:12:14,233 --> 00:12:17,036 line:-1
you fulfill the start action
with the universal link


248
00:12:17,036 --> 00:12:18,972 line:-1
and a device-independent
identifier


249
00:12:18.972 --> 00:12:20.974 line:-1 position:50%
for the collaboration.


250
00:12:20,974 --> 00:12:23,276 line:-1
If you explicitly
fail the start action,


251
00:12:23.276 --> 00:12:26.012 line:-1 position:50%
the message is canceled.


252
00:12:26.012 --> 00:12:28.281 line:-1 position:50%
Here's an implementation
to handle the start action


253
00:12:28.281 --> 00:12:32.218 line:-1 position:50%
using an example
server request.


254
00:12:32.218 --> 00:12:34.287 line:-1 position:50%
First,
retrieve the local identifier,


255
00:12:34.287 --> 00:12:36.022 line:-1 position:50%
and user-selected share options


256
00:12:36,022 --> 00:12:40,226 line:-1
from the action's
metadata property.


257
00:12:40,226 --> 00:12:42,795 line:-1
Set up a server request
to prepare the collaboration


258
00:12:42.795 --> 00:12:47.333 line:-1 position:50%
using the identifier
and options.


259
00:12:47.333 --> 00:12:50.169 line:-1 position:50%
Then, send the request
to the server.


260
00:12:50,169 --> 00:12:54,507 line:-1
This example uses async await.


261
00:12:54.507 --> 00:12:56.976 line:-1 position:50%
Finally, fulfill the action
with the universal link


262
00:12:56.976 --> 00:13:01.714 line:-1 position:50%
and the device independent
identifier from the response.


263
00:13:01,714 --> 00:13:03,116 line:-1
Or, if there was an error,


264
00:13:03.116 --> 00:13:05.952 line:-1 position:50%
fail the action
to cancel the message.


265
00:13:05.952 --> 00:13:07.954 line:-1 position:50%
If the start action
was successful,


266
00:13:07,954 --> 00:13:10,223 line:-1
the system sends your app
a second action


267
00:13:10,223 --> 00:13:13,092 line:-1
to update
the collaboration participants.


268
00:13:13,092 --> 00:13:15,461 line:-1
The SWUpdateCollaboration
ParticipantsAction


269
00:13:15.461 --> 00:13:17.664 line:-1 position:50%
contains
the cryptographic identities


270
00:13:17,664 --> 00:13:19,866 line:-1
for the participants.


271
00:13:19.866 --> 00:13:22.468 line:-1 position:50%
The identities are derived from
the collaboration identifier


272
00:13:22,468 --> 00:13:26,839 line:-1
fulfilled by the start action
in the previous step.


273
00:13:26.839 --> 00:13:28.474 line:-1 position:50%
Store the identities
on your server


274
00:13:28.474 --> 00:13:30.877 line:-1 position:50%
associated with the content.


275
00:13:30.877 --> 00:13:32.879 line:-1 position:50%
You'll use this data
for verifying access


276
00:13:32.879 --> 00:13:35.381 line:-1 position:50%
on the recipient devices.


277
00:13:35.381 --> 00:13:36.949 line:-1 position:50%
Finally,
fulfilling this action


278
00:13:36,949 --> 00:13:40,586 line:-1
will send the universal link
in Messages.


279
00:13:40,586 --> 00:13:42,088 line:-1
This example shows
how to handle


280
00:13:42,088 --> 00:13:45,024 line:-1
the update participants action.


281
00:13:45,024 --> 00:13:46,592 line:-1
Retrieve
the collaboration identifier


282
00:13:46.592 --> 00:13:49.162 line:-1 position:50%
from the action's metadata.


283
00:13:49.162 --> 00:13:50.730 line:-1 position:50%
This is the identifier
you fulfilled


284
00:13:50,730 --> 00:13:53,999 line:-1
while handling the start action.


285
00:13:53,999 --> 00:13:57,203 line:-1
Next, retrieve the participant
data to store on your servers


286
00:13:57.203 --> 00:14:01.074 line:-1 position:50%
using the action's
addedIdentities property.


287
00:14:01.074 --> 00:14:05.111 line:-1 position:50%
Each identity has a Data
property called a root hash.


288
00:14:05.111 --> 00:14:06.713 line:-1 position:50%
This is the data you should
store on your server


289
00:14:06.713 --> 00:14:09.315 line:-1 position:50%
for later use.


290
00:14:09.315 --> 00:14:10.783 line:-1 position:50%
Lance will go over
more of the details


291
00:14:10,783 --> 00:14:16,189 line:-1
about this property in
the Verifying Access section.


292
00:14:16,189 --> 00:14:18,424 line:-1
Set up another server
request, this time to add


293
00:14:18.424 --> 00:14:20.393 line:-1 position:50%
the participants
to the collaboration


294
00:14:20,393 --> 00:14:23,930 line:-1
with the target identifier.


295
00:14:23.930 --> 00:14:26.666 line:-1 position:50%
And just like before,
send the request to your server,


296
00:14:26,666 --> 00:14:29,502 line:-1
and fulfill or fail the action.


297
00:14:29,502 --> 00:14:34,474 line:-1
This time, the fulfill method
does not take any parameters.


298
00:14:34,474 --> 00:14:36,442 line:-1
Now that you've set up
the collaboration,


299
00:14:36.442 --> 00:14:39.545 line:-1 position:50%
your app has everything it needs
to grant immediate access


300
00:14:39,545 --> 00:14:42,048 line:-1
to the recipients
of the message.


301
00:14:42,048 --> 00:14:44,817 line:-1
I'll hand it over to Lance
to show you how to do that!


302
00:14:44.817 --> 00:14:47.253 line:-1 position:50%
Lance: Thanks, Devin.
In this section,


303
00:14:47.253 --> 00:14:49.689 line:-1 position:50%
I'll show how to provide
immediate access


304
00:14:49,689 --> 00:14:52,125 line:-1
to the recipients using
the identity data


305
00:14:52.125 --> 00:14:56.329 line:-1 position:50%
you stored on your server
in the previous step.


306
00:14:56,329 --> 00:14:58,998 line:-1
The rootHash property
on SWPersonIdentity


307
00:14:58.998 --> 00:15:02.135 line:-1 position:50%
is used to do this verification.


308
00:15:02.135 --> 00:15:05.938 line:-1 position:50%
A rootHash is a secure value
used to uniquely identify


309
00:15:05,938 --> 00:15:08,941 line:-1
a participant on their devices.


310
00:15:08.941 --> 00:15:11.043 line:-1 position:50%
In order to perform
verification,


311
00:15:11.043 --> 00:15:14.213 line:-1 position:50%
you'll need to understand
how to compute a root hash.


312
00:15:14,213 --> 00:15:16,883 line:-1
I'll take you through that now.


313
00:15:16,883 --> 00:15:18,951 position:50%
When a collaboration
message is sent,


314
00:15:18,951 --> 00:15:24,590 line:0
it's actually sent individually
to each of a person's devices.


315
00:15:24,590 --> 00:15:26,492 line:0
Messages identifies each device


316
00:15:26,492 --> 00:15:29,562 position:50%
using a cryptographic
public key.


317
00:15:29,562 --> 00:15:31,464 position:50%
Since the goal
is to allow access


318
00:15:31,464 --> 00:15:35,134 position:50%
only on this set of devices,
the root hash is derived


319
00:15:35,134 --> 00:15:39,972 position:50%
from the set of public keys
registered to each recipient.


320
00:15:39,972 --> 00:15:42,575 position:50%
The root hash is the root node
of a data structure


321
00:15:42,575 --> 00:15:45,077 position:50%
called a Merkle tree.


322
00:15:45,077 --> 00:15:47,580 position:50%
A Merkle tree is
a binary tree that is built


323
00:15:47,580 --> 00:15:51,784 position:50%
by performing a sequence
of hashing operations.


324
00:15:51,784 --> 00:15:54,620 position:50%
In order to derive an identity
for the user based on their


325
00:15:54,620 --> 00:15:59,458 position:50%
public keys, the keys are used
as the leaves of this tree.


326
00:15:59,458 --> 00:16:02,628 position:50%
The hashing algorithm used
in the Merkle tree ensures


327
00:16:02,628 --> 00:16:07,900 line:0
that the root node can only be
computed from that set of keys.


328
00:16:07.900 --> 00:16:11.838 line:-1 position:50%
In this example,
this user has three devices


329
00:16:11.838 --> 00:16:15.174 line:-1 position:50%
and three public keys.


330
00:16:15.174 --> 00:16:18.277 line:-1 position:50%
The keys will be unique for
each collaboration identifier


331
00:16:18.277 --> 00:16:19.846 line:-1 position:50%
provided by your app,


332
00:16:19.846 --> 00:16:24.317 line:-1 position:50%
using a process called
key diversification.


333
00:16:24.317 --> 00:16:28.054 line:-1 position:50%
To prevent tracking the number
of devices registered to a user,


334
00:16:28.054 --> 00:16:31.958 line:-1 position:50%
the set is padded with
random keys up to a fixed size.


335
00:16:31.958 --> 00:16:34.627 line:-1 position:50%
The leaf nodes of the tree
are created by hashing


336
00:16:34,627 --> 00:16:38,431 line:-1
the padded set
of diversified keys.


337
00:16:38,431 --> 00:16:41,968 line:-1
The SHA256 algorithm is used
for the hashing operations


338
00:16:41.968 --> 00:16:44.170 line:-1 position:50%
in this tree.


339
00:16:44.170 --> 00:16:47.406 line:-1 position:50%
Then, each pair of leaf nodes
are concatenated


340
00:16:47.406 --> 00:16:51.944 line:-1 position:50%
and then hashed to derive
their parent nodes.


341
00:16:51,944 --> 00:16:56,048 position:50%
This process is repeated
with the parent nodes


342
00:16:56,048 --> 00:17:00,653 line:0
and repeated again until
a single root node remains.


343
00:17:00,653 --> 00:17:03,789 line:0
This is the root hash
used to uniquely represent


344
00:17:03,789 --> 00:17:09,896 line:0
this recipient's identity
across their devices.


345
00:17:09,896 --> 00:17:12,565 line:0
Notice that it's possible
to generate a root hash


346
00:17:12,565 --> 00:17:17,203 position:50%
using a subset of the nodes
from a complete Merkle tree.


347
00:17:17,203 --> 00:17:20,740 position:50%
The root hash in this tree
can be reproduced using just


348
00:17:20,740 --> 00:17:25,144 position:50%
the hashes H4, 7, and 11,


349
00:17:25,144 --> 00:17:29,315 position:50%
along with the diversified
public key P3.


350
00:17:29,315 --> 00:17:35,688 line:0
First, hash the public key
to get the missing leaf node H3.


351
00:17:35,688 --> 00:17:39,892 line:0
Use H3 and H4 to generate H8.


352
00:17:39,892 --> 00:17:44,697 line:0
Use the given H7 node
with H8 to generate H10.


353
00:17:44,697 --> 00:17:49,969 position:50%
And finally, H10 and H11
produce the root hash.


354
00:17:49,969 --> 00:17:53,205 position:50%
It's important to note that you
can prove the public key P3


355
00:17:53,205 --> 00:17:55,775 position:50%
was used to generate
a given root hash,


356
00:17:55,775 --> 00:17:59,645 line:0
without needing
to reconstruct the entire tree.


357
00:17:59,645 --> 00:18:01,781 line:0
The subset of nodes
needed to do this is called


358
00:18:01,781 --> 00:18:05,351 line:0
a proof of inclusion.


359
00:18:05.351 --> 00:18:08.254 line:-1 position:50%
Verification begins
when a universal link


360
00:18:08.254 --> 00:18:10.489 line:-1 position:50%
is opened in your app.


361
00:18:10.489 --> 00:18:12.091 line:-1 position:50%
To do this,
you first need to check


362
00:18:12.091 --> 00:18:15.027 line:-1 position:50%
that the link is collaborative.


363
00:18:15.027 --> 00:18:18.497 line:-1 position:50%
SWCollaborationHighlight
represents a collaborative link


364
00:18:18.497 --> 00:18:22.501 line:-1 position:50%
and is retrieved
from SWHighlightCenter.


365
00:18:22,501 --> 00:18:24,070 line:-1
Use that collaboration highlight


366
00:18:24.070 --> 00:18:28.741 line:-1 position:50%
to generate
the proof of inclusion.


367
00:18:28.741 --> 00:18:31.310 line:-1 position:50%
To represent
a proof of inclusion,


368
00:18:31,310 --> 00:18:35,348 line:-1
use a class called
SWPersonIdentityProof.


369
00:18:35.348 --> 00:18:37.550 line:-1 position:50%
To perform verification,
you'll first generate


370
00:18:37,550 --> 00:18:40,553 line:-1
this object along
with a cryptographic signature


371
00:18:40.553 --> 00:18:43.089 line:-1 position:50%
to send to your server.


372
00:18:43.089 --> 00:18:46.325 line:-1 position:50%
Retrieve the proof using the
getSignedIdentityProof method


373
00:18:46.325 --> 00:18:48.861 line:-1 position:50%
on SWHighlightCenter.


374
00:18:48.861 --> 00:18:51.731 line:-1 position:50%
It takes an
SWCollaborationHighlight


375
00:18:51,731 --> 00:18:57,403 line:-1
and some arbitrary data
to be signed by the device.


376
00:18:57,403 --> 00:19:00,840 line:-1
Use the signature to ensure
the request cannot be replayed


377
00:19:00.840 --> 00:19:05.911 line:-1 position:50%
by a bad actor to gain access
to your collaboration.


378
00:19:05,911 --> 00:19:09,148 line:-1
The data could be a challenge
you request from your server,


379
00:19:09.148 --> 00:19:13.185 line:-1 position:50%
or a nonce generated
on the device.


380
00:19:13.185 --> 00:19:16.555 line:-1 position:50%
This example uses
the challenge approach.


381
00:19:16.555 --> 00:19:19.458 line:-1 position:50%
The URL is passed
to this method on your app's


382
00:19:19.458 --> 00:19:22.194 line:-1 position:50%
UIApplicationDelegate.


383
00:19:22.194 --> 00:19:24.063 line:-1 position:50%
This URL is the universal link


384
00:19:24.063 --> 00:19:28.234 line:-1 position:50%
associated
with the collaboration.


385
00:19:28,234 --> 00:19:31,003 line:-1
The URL is used
to fetch the associated


386
00:19:31.003 --> 00:19:36.909 line:-1 position:50%
SWCollaborationHighlight
from the SWHighlightCenter.


387
00:19:36.909 --> 00:19:39.912 line:-1 position:50%
Next, I'll request the challenge
from my server,


388
00:19:39,912 --> 00:19:41,914 line:-1
and pass the data I get back


389
00:19:41,914 --> 00:19:46,719 line:-1
to the getSignedIdentityProof
method on SWHighlightCenter,


390
00:19:46.719 --> 00:19:50.189 line:-1 position:50%
along with the highlight.


391
00:19:50.189 --> 00:19:53.626 line:-1 position:50%
This method returns
a signed identity proof.


392
00:19:53.626 --> 00:19:55.428 line:-1 position:50%
I'll discuss
what your server should do


393
00:19:55,428 --> 00:19:58,531 line:-1
to validate this data later on.


394
00:19:58,531 --> 00:20:03,035 line:-1
Now I can send the signed proof
to my server for verification.


395
00:20:03.035 --> 00:20:09.175 line:-1 position:50%
Finally, I update my user
interface with the result.


396
00:20:09.175 --> 00:20:11.544 line:-1 position:50%
The app sends
the proof to the server,


397
00:20:11,544 --> 00:20:16,716 line:-1
along with the public key
and the signed data.


398
00:20:16,716 --> 00:20:18,517 line:-1
The data is signed
using the elliptic curve


399
00:20:18.517 --> 00:20:23.055 line:-1 position:50%
digital signature algorithm
over the P-256 elliptic curve,


400
00:20:23.055 --> 00:20:27.293 line:-1 position:50%
using SHA256
as a hash function.


401
00:20:27.293 --> 00:20:29.495 line:-1 position:50%
Verify the signature on the data


402
00:20:29.495 --> 00:20:32.932 line:-1 position:50%
using the public key
in the identity proof.


403
00:20:32.932 --> 00:20:35.034 line:-1 position:50%
You can do this
with most commonly used


404
00:20:35,034 --> 00:20:38,571 line:-1
encryption libraries.


405
00:20:38,571 --> 00:20:40,573 line:-1
Once you have verified
the signature,


406
00:20:40.573 --> 00:20:43.409 line:-1 position:50%
you can trust
that the identity proof was sent


407
00:20:43.409 --> 00:20:46.979 line:-1 position:50%
from the device associated
with that public key.


408
00:20:46.979 --> 00:20:52.251 line:-1 position:50%
Next, you use the identity proof
to recompute the root hash.


409
00:20:52,251 --> 00:20:55,321 position:50%
Here is an example of what
an SWPersonIdentityProof


410
00:20:55,321 --> 00:20:59,825 line:0
would contain using the example
tree we looked at before.


411
00:20:59,825 --> 00:21:04,029 line:0
Use it to reconstruct
the root hash of a Merkle tree.


412
00:21:04,029 --> 00:21:06,932 position:50%
The public key is P3.


413
00:21:06,932 --> 00:21:12,004 line:0
The inclusion hashes are
H4, 7, and 11.


414
00:21:12,004 --> 00:21:15,007 line:0
A local key index of 2
indicates the position


415
00:21:15,007 --> 00:21:19,111 line:0
of the public key in the tree.


416
00:21:19,111 --> 00:21:21,580 line:-1
Here is an example
implementation that reconstructs


417
00:21:21.580 --> 00:21:26.285 line:-1 position:50%
a root hash from the properties
on the proof.


418
00:21:26,285 --> 00:21:28,320 line:-1
A recursive algorithm
works nicely when working


419
00:21:28.320 --> 00:21:32.758 line:-1 position:50%
with tree data structures,
so that's what I've done here.


420
00:21:32.758 --> 00:21:37.830 line:-1 position:50%
On the initial invocation, pass
in the hash of the public key,


421
00:21:37,830 --> 00:21:44,537 line:-1
the set of inclusion hashes,
and the public key index.


422
00:21:44.537 --> 00:21:49.008 line:-1 position:50%
Next, the first inclusion hash
is pulled out.


423
00:21:49,008 --> 00:21:51,710 line:-1
The public key index
is checked to see if the key


424
00:21:51,710 --> 00:21:56,482 line:-1
is on the left or the right
of its sibling.


425
00:21:56.482 --> 00:21:58.784 line:-1 position:50%
The selected hashes
are concatenated


426
00:21:58,784 --> 00:22:03,088 line:-1
in the correct order,
and then hashed.


427
00:22:03,088 --> 00:22:06,525 position:50%
Next, the consumed node
in the inclusionHashes array


428
00:22:06,525 --> 00:22:09,028 line:0
is removed,
and the rest are passed


429
00:22:09,028 --> 00:22:14,133 position:50%
to a recursive call
to this same function.


430
00:22:14,133 --> 00:22:16,235 line:0
The public key index
is also updated


431
00:22:16,235 --> 00:22:20,806 position:50%
so that it's ready
for the next node in the tree.


432
00:22:20,806 --> 00:22:23,409 line:0
With this simple function,
you can quickly compute


433
00:22:23,409 --> 00:22:28,547 position:50%
a root hash given
an identity proof.


434
00:22:28.547 --> 00:22:31.183 line:-1 position:50%
The server can now check
that this generated root hash


435
00:22:31.183 --> 00:22:33.986 line:-1 position:50%
is in the list of root hashes
the owner of the document


436
00:22:33.986 --> 00:22:36.388 line:-1 position:50%
uploaded during sending.


437
00:22:36.388 --> 00:22:38.924 line:-1 position:50%
The hash is present
in the list of known hashes,


438
00:22:38.924 --> 00:22:42.561 line:-1 position:50%
so the server can grant access
to the document.


439
00:22:42,561 --> 00:22:46,265 line:-1
Now you can grant access
to the document with confidence!


440
00:22:46,265 --> 00:22:49,735 line:-1
To recap the steps you'll follow
to verify an identity:


441
00:22:49.735 --> 00:22:51.971 line:-1 position:50%
first, look up
the collaboration highlight


442
00:22:51.971 --> 00:22:55.441 line:-1 position:50%
for your content while handling
its universal link.


443
00:22:55,441 --> 00:22:59,745 line:-1
Next, sign some data and
retrieve the proof of inclusion.


444
00:22:59,745 --> 00:23:04,016 line:-1
Send the signed data
and proof to your server.


445
00:23:04.016 --> 00:23:07.586 line:-1 position:50%
Verify the signature
on the data.


446
00:23:07,586 --> 00:23:11,523 line:-1
Using the proof of inclusion,
generate the root hash.


447
00:23:11,523 --> 00:23:14,860 line:-1
Finally, compare the root hash
to the list of known identities


448
00:23:14.860 --> 00:23:19.832 line:-1 position:50%
associated with that content.


449
00:23:19,832 --> 00:23:22,134 line:-1
Now that you know
all about verifying access


450
00:23:22,134 --> 00:23:24,503 line:-1
to your collaboration links,
I'll talk about


451
00:23:24.503 --> 00:23:28.307 line:-1 position:50%
how to coordinate participant
changes with Messages.


452
00:23:28,307 --> 00:23:31,143 line:-1
When the participants
in a Messages group change,


453
00:23:31.143 --> 00:23:33.746 line:-1 position:50%
and that group
is collaborating together,


454
00:23:33,746 --> 00:23:37,283 line:-1
a user can choose to propagate
those changes to your app,


455
00:23:37.283 --> 00:23:40.352 line:-1 position:50%
right from a banner
in the Messages thread.


456
00:23:40.352 --> 00:23:42.855 line:-1 position:50%
In this scenario,
your app receives another


457
00:23:42,855 --> 00:23:46,191 line:-1
SWUpdateCollaboration
ParticipantsAction


458
00:23:46,191 --> 00:23:50,562 line:-1
containing the added
and removed identities.


459
00:23:50.562 --> 00:23:53.565 line:-1 position:50%
You'll use the same code
you wrote to handle this action


460
00:23:53.565 --> 00:23:55.434 line:-1 position:50%
when setting up
a collaboration,


461
00:23:55.434 --> 00:24:00.039 line:-1 position:50%
but you'll also need
to handle removed participants.


462
00:24:00.039 --> 00:24:02.741 line:-1 position:50%
For removal, simply look up
any account associated


463
00:24:02.741 --> 00:24:06.946 line:-1 position:50%
with a removed identity
and revoke their access.


464
00:24:06,946 --> 00:24:09,248 line:-1
If no account is yet associated,


465
00:24:09.248 --> 00:24:12.885 line:-1 position:50%
simply delete the root hash
from your database.


466
00:24:12.885 --> 00:24:14.186 line:-1 position:50%
Here's
the implementation for


467
00:24:14.186 --> 00:24:19.224 line:-1 position:50%
the update participants action
that Devin went over earlier.


468
00:24:19.224 --> 00:24:20.392 line:-1 position:50%
This example uses


469
00:24:20,392 --> 00:24:24,964 line:-1
the removed identities property
on the action


470
00:24:24,964 --> 00:24:28,834 line:-1
and passes them to
a similar removal API request.


471
00:24:28,834 --> 00:24:33,072 line:-1
Note that this code only shows
handling removed identities,


472
00:24:33,072 --> 00:24:34,907 line:-1
but a complete implementation
should handle


473
00:24:34.907 --> 00:24:38.577 line:-1 position:50%
both added
and removed identities.


474
00:24:38,577 --> 00:24:42,481 line:-1
And that's all you need
to handle participant changes!


475
00:24:42.481 --> 00:24:45.818 line:-1 position:50%
Lastly, when changes
are made to a collaboration,


476
00:24:45.818 --> 00:24:48.320 line:-1 position:50%
your app posts notices
about those changes


477
00:24:48.320 --> 00:24:50.923 line:-1 position:50%
to be shown
directly in Messages.


478
00:24:50,923 --> 00:24:53,125 line:-1
There are a few types
of supported notices


479
00:24:53,125 --> 00:24:55,294 line:-1
I'll go over in this section.


480
00:24:55.294 --> 00:24:57.129 line:-1 position:50%
Notices are displayed
as a banner


481
00:24:57.129 --> 00:25:01.133 line:-1 position:50%
right in the conversation
where the link was shared.


482
00:25:01.133 --> 00:25:03.936 line:-1 position:50%
The banner includes
a description of what changed,


483
00:25:03.936 --> 00:25:07.573 line:-1 position:50%
as well as who made the change.


484
00:25:07.573 --> 00:25:09.808 line:-1 position:50%
In this conversation,
Charlie made edits


485
00:25:09.808 --> 00:25:12.778 line:-1 position:50%
to the Baking Recipes document.


486
00:25:12,778 --> 00:25:14,580 line:-1
Tapping the show button
connects them


487
00:25:14.580 --> 00:25:17.516 line:-1 position:50%
right back to the content.


488
00:25:17.516 --> 00:25:19.885 line:-1 position:50%
To represent a notice,
the SharedWithYou framework


489
00:25:19.885 --> 00:25:24.423 line:-1 position:50%
has a protocol named
SWHighlightEvent.


490
00:25:24.423 --> 00:25:27.226 line:-1 position:50%
Highlight events are
initialized with SWHighlights


491
00:25:27,226 --> 00:25:31,730 line:-1
retrieved
from the SWHighlightCenter API.


492
00:25:31.730 --> 00:25:36.201 line:-1 position:50%
Messages supports
several categories of events.


493
00:25:36,201 --> 00:25:40,239 line:-1
A change event
for content updates or comments,


494
00:25:40.239 --> 00:25:44.243 line:-1 position:50%
a membership event when
a participant joins or leaves,


495
00:25:44.243 --> 00:25:49.448 line:-1 position:50%
a mention event when a user
is mentioned in a collaboration,


496
00:25:49.448 --> 00:25:54.019 line:-1 position:50%
and a persistence event when
content is moved or deleted.


497
00:25:54,019 --> 00:25:56,655 line:-1
Here's an example showing
how to post a change event


498
00:25:56.655 --> 00:25:59.758 line:-1 position:50%
for an edit to a collaboration.


499
00:25:59.758 --> 00:26:02.161 line:-1 position:50%
Using the highlight center API,


500
00:26:02,161 --> 00:26:03,929 line:-1
retrieve
a collaboration highlight


501
00:26:03.929 --> 00:26:06.098 line:-1 position:50%
for the target identifier.


502
00:26:06,098 --> 00:26:09,768 line:-1
Remember, this identifier
is one you defined during


503
00:26:09,768 --> 00:26:13,172 line:-1
the collaboration initiation,
so your app should have this


504
00:26:13,172 --> 00:26:17,109 line:-1
available for use when
a content change is made.


505
00:26:17,109 --> 00:26:21,747 line:-1
Next, create a highlight change
event instance.


506
00:26:21,747 --> 00:26:23,749 line:-1
The initializer
takes a highlight,


507
00:26:23.749 --> 00:26:25.951 line:-1 position:50%
and a trigger enum value;


508
00:26:25,951 --> 00:26:30,122 line:-1
in this case,
set it to the edit type.


509
00:26:30.122 --> 00:26:32.858 line:-1 position:50%
Finally, again using
the highlight center,


510
00:26:32.858 --> 00:26:36.195 line:-1 position:50%
post the notice for that event.


511
00:26:36.195 --> 00:26:39.298 line:-1 position:50%
Similarly,
for membership changes,


512
00:26:39,298 --> 00:26:41,100 line:-1
post a membership event,


513
00:26:41,100 --> 00:26:44,203 line:-1
this time passing
the addedCollaborator


514
00:26:44.203 --> 00:26:49.174 line:-1 position:50%
or removedCollaborator
trigger type.


515
00:26:49.174 --> 00:26:52.344 line:-1 position:50%
Next, if your app
supports user mentions,


516
00:26:52.344 --> 00:26:55.180 line:-1 position:50%
you can post a mention event.


517
00:26:55,180 --> 00:26:56,815 line:-1
Initialize a person identity


518
00:26:56.815 --> 00:27:00.085 line:-1 position:50%
with the root hash
of the mentioned user.


519
00:27:00.085 --> 00:27:02.621 line:-1 position:50%
Recall that you associated
a person identity


520
00:27:02.621 --> 00:27:07.759 line:-1 position:50%
with a user account in your app
while verifying access.


521
00:27:07.759 --> 00:27:11.430 line:-1 position:50%
Then, post the mention event
in the same way,


522
00:27:11,430 --> 00:27:15,634 line:-1
this time passing the mentioned
identity as a parameter.


523
00:27:15,634 --> 00:27:17,803 line:-1
This notice will only be shown
in Messages


524
00:27:17.803 --> 00:27:21.840 line:-1 position:50%
to the mentioned user.


525
00:27:21.840 --> 00:27:24.543 line:-1 position:50%
Finally,
use the persistence event type


526
00:27:24.543 --> 00:27:29.748 line:-1 position:50%
when content is moved,
renamed, or deleted.


527
00:27:29.748 --> 00:27:32.117 line:-1 position:50%
Here, the renamed
trigger type is used,


528
00:27:32,117 --> 00:27:37,789 line:-1
to signify that the user
changed the name of the content.


529
00:27:37.789 --> 00:27:41.159 line:-1 position:50%
And that is how your app
can notify collaborators,


530
00:27:41.159 --> 00:27:46.231 line:-1 position:50%
and they will get those
updates right in Messages.


531
00:27:46.231 --> 00:27:48.100 line:-1 position:50%
Devin: And with that,
you're ready to integrate


532
00:27:48,100 --> 00:27:50,669 line:-1
your app's collaboration
experience with messages


533
00:27:50.669 --> 00:27:52.771 line:-1 position:50%
by following a few steps.


534
00:27:52,771 --> 00:27:55,674 line:-1
Set up your content
to be shared collaboratively,


535
00:27:55,674 --> 00:27:58,644 line:-1
cryptographically verify
participant access,


536
00:27:58.644 --> 00:28:00.779 line:-1 position:50%
keep track
of participant changes,


537
00:28:00,779 --> 00:28:03,782 line:-1
and post notices in Messages
to connect your users


538
00:28:03.782 --> 00:28:06.552 line:-1 position:50%
right back to the content.


539
00:28:06.552 --> 00:28:07.953 line:-1 position:50%
Be sure to check out


540
00:28:07,953 --> 00:28:11,256 line:-1
the "Enhance collaboration
experiences with Messages" video


541
00:28:11.256 --> 00:28:13.191 line:-1 position:50%
to learn more about
the new UI elements


542
00:28:13,191 --> 00:28:15,994 line:-1
you can display
for collaborations.


543
00:28:15,994 --> 00:28:18,297 line:-1
Lance: We can't wait to get
collaborating with your apps!


544
00:28:18.297 --> 00:28:20.966 line:-1 position:50%
Devin and Lance,
cryptographically signing off.


545
00:28:20.966 --> 00:28:22.334 line:-1 position:50%
Devin: Thanks for watching!


546
00:28:22,334 --> 00:28:25,938 align:right size:2% position:90%
â™ª

