2
00:00:00.000 --> 00:00:03.003 line:-1 position:50%
♪ (Mellow instrumental
hip-hop music) ♪


3
00:00:03,003 --> 00:00:09,710 line:1 align:right position:90%
♪


4
00:00:09.710 --> 00:00:11.678 line:-1 position:50%
Hi, my name is Michael Sumner.


5
00:00:11,678 --> 00:00:15,148 line:-1
I'm a software engineer
working on Siri and App Intents.


6
00:00:15,148 --> 00:00:17,117 line:-1
In this session,
I want to talk to you


7
00:00:17.117 --> 00:00:19.219 line:-1 position:50%
about creating app shortcuts
for your app,


8
00:00:19.219 --> 00:00:22.155 line:-1 position:50%
using the new
App Intents framework.


9
00:00:22,155 --> 00:00:25,425 line:-1
I'll start with an overview
of what App Shortcuts are


10
00:00:25,425 --> 00:00:28,095 line:-1
and how they relate
to App Intents.


11
00:00:28.095 --> 00:00:31.665 line:-1 position:50%
Then, I'll walk through creating
an app shortcut in Swift,


12
00:00:31,665 --> 00:00:34,301 line:-1
and adding a parameter.


13
00:00:34.301 --> 00:00:38.205 line:-1 position:50%
Finally, I'll cover how to make
your app shortcut discoverable,


14
00:00:38,205 --> 00:00:41,775 line:-1
so users can benefit
from your hard work.


15
00:00:41.775 --> 00:00:44.177 line:-1 position:50%
Let's get started with
the App Intents framework


16
00:00:44.177 --> 00:00:46.280 line:-1 position:50%
and App Shortcuts.


17
00:00:46.280 --> 00:00:48.982 line:-1 position:50%
People use shortcuts
to create multistep workflows


18
00:00:48.982 --> 00:00:51.785 line:-1 position:50%
with your apps that can be used
from the Shortcuts app


19
00:00:51.785 --> 00:00:53.553 line:-1 position:50%
and from Siri.


20
00:00:53.553 --> 00:00:56.790 line:-1 position:50%
Until now, someone first
had to set up a shortcut


21
00:00:56.790 --> 00:00:59.826 line:-1 position:50%
via an Add to Siri button
or the Shortcuts app


22
00:00:59,826 --> 00:01:02,429 line:-1
before they could use
your intent.


23
00:01:02,429 --> 00:01:05,032 line:-1
We're excited to introduce
App Shortcuts,


24
00:01:05,032 --> 00:01:08,268 line:-1
which require zero user setup.


25
00:01:08,268 --> 00:01:10,871 line:-1
This makes it easier than ever
for people to benefit


26
00:01:10,871 --> 00:01:12,773 line:-1
from your shortcuts.


27
00:01:12.773 --> 00:01:14.808 line:-1 position:50%
By integrating
with App Shortcuts,


28
00:01:14,808 --> 00:01:16,677 line:-1
intents from your app
will be available


29
00:01:16.677 --> 00:01:19.346 line:-1 position:50%
as soon as your app
is installed.


30
00:01:19.346 --> 00:01:21.982 line:-1 position:50%
This makes it easy for someone
to discover and use


31
00:01:21.982 --> 00:01:24.251 line:-1 position:50%
your app's functionality.


32
00:01:24.251 --> 00:01:26.687 line:-1 position:50%
They no longer need
to head to the Shortcuts app


33
00:01:26.687 --> 00:01:31.024 line:-1 position:50%
or use an Add to Siri button
to set anything up.


34
00:01:31.024 --> 00:01:33.760 line:-1 position:50%
App Shortcuts,
like user-built shortcuts,


35
00:01:33,760 --> 00:01:35,662 line:-1
can be run from
the Shortcuts app,


36
00:01:35.662 --> 00:01:38.198 line:-1 position:50%
Spotlight, and Siri.


37
00:01:38.198 --> 00:01:40.901 line:-1 position:50%
This gives people multiple ways
to discover and interact


38
00:01:40.901 --> 00:01:44.638 line:-1 position:50%
with your application from
various places in the system.


39
00:01:44.638 --> 00:01:46.873 line:-1 position:50%
For example,
when searching in Spotlight,


40
00:01:46.873 --> 00:01:48.442 line:-1 position:50%
your app shortcut
will be displayed


41
00:01:48.442 --> 00:01:52.045 line:-1 position:50%
right in the search results
for easy access.


42
00:01:52,045 --> 00:01:53,947 line:-1
By implementing App Shortcuts,


43
00:01:53,947 --> 00:01:57,417 line:-1
your users will be able to
interact with your app in quick,


44
00:01:57,417 --> 00:01:59,853 line:-1
lightweight interactions
that make it easier for them


45
00:01:59.853 --> 00:02:03.724 line:-1 position:50%
to complete their task
and be on their way.


46
00:02:03,724 --> 00:02:06,226 line:-1
My team is working on an app --
Meditation --


47
00:02:06.226 --> 00:02:08.428 line:-1 position:50%
that helps users meditate
by guiding them


48
00:02:08,428 --> 00:02:11,031 line:-1
through a set of audio prompts
and sounds


49
00:02:11.031 --> 00:02:13.667 line:-1 position:50%
to help them focus
on what matters.


50
00:02:13.667 --> 00:02:17.871 line:-1 position:50%
Today, to start a meditation,
users have to launch the app,


51
00:02:17.871 --> 00:02:22.242 line:-1 position:50%
log in, and find the meditation
session that they want to run.


52
00:02:22.242 --> 00:02:24.244 line:-1 position:50%
By integrating
with App Shortcuts,


53
00:02:24.244 --> 00:02:27.581 line:-1 position:50%
my users can quickly access
these features from anywhere


54
00:02:27.581 --> 00:02:30.217 line:-1 position:50%
just by asking Siri.


55
00:02:30.217 --> 00:02:32.919 line:-1 position:50%
And by making it faster
to start a session,


56
00:02:32,919 --> 00:02:36,223 line:-1
users can integrate meditation
into their daily routine,


57
00:02:36.223 --> 00:02:38.125 line:-1 position:50%
either in the morning
before work


58
00:02:38,125 --> 00:02:43,830 line:-1
or in the evening to help
wind down after a long day.


59
00:02:43.830 --> 00:02:46.500 line:-1 position:50%
Alright, let's dive right in
to the code needed


60
00:02:46,500 --> 00:02:51,204 line:-1
to create an App Intent and
turn it into an app shortcut.


61
00:02:51,204 --> 00:02:52,873 line:-1
Unlike previous shortcuts,


62
00:02:52,873 --> 00:02:57,244 line:-1
App Shortcuts are built with
the new App Intents framework.


63
00:02:57,244 --> 00:02:59,813 line:-1
App Intents is a new,
Swift-only framework


64
00:02:59.813 --> 00:03:02.182 line:-1 position:50%
built from the ground up
to make it faster


65
00:03:02.182 --> 00:03:05.318 line:-1 position:50%
and easier to build
great intents.


66
00:03:05,318 --> 00:03:07,187 line:-1
With App Intents,
everything is defined


67
00:03:07,187 --> 00:03:09,189 line:-1
right in your Swift source code,


68
00:03:09,189 --> 00:03:12,125 line:-1
instead of a separate
metadata file.


69
00:03:12,125 --> 00:03:14,628 line:-1
This removes any
code generation steps


70
00:03:14,628 --> 00:03:17,330 line:-1
and allows you to stay focused
without switching contexts


71
00:03:17.330 --> 00:03:20.634 line:-1 position:50%
between the source editor
and the metadata editor.


72
00:03:20.634 --> 00:03:22.169 line:-1 position:50%
They're also easier
to code review


73
00:03:22.169 --> 00:03:24.638 line:-1 position:50%
and solve merge conflicts.


74
00:03:24.638 --> 00:03:26.039 line:-1 position:50%
To build App Shortcuts,


75
00:03:26,039 --> 00:03:28,575 line:-1
you'll need to write
an AppShortcutsProvider


76
00:03:28,575 --> 00:03:31,845 line:-1
that lists the phrases
and other metadata needed


77
00:03:31,845 --> 00:03:35,615 line:-1
to turn your App Intent
into a full-fledged shortcut.


78
00:03:35,615 --> 00:03:37,818 line:-1
And note that because
these are set up


79
00:03:37,818 --> 00:03:40,454 line:-1
without any user interaction,
you'll need to include


80
00:03:40.454 --> 00:03:44.024 line:-1 position:50%
your application's name
in the trigger phrase.


81
00:03:44.024 --> 00:03:46.326 line:-1 position:50%
Intents are defined
as Swift structs,


82
00:03:46,326 --> 00:03:49,262 line:-1
that implement
the AppIntent protocol.


83
00:03:49.262 --> 00:03:52.165 line:-1 position:50%
A basic intent has
just two requirements --


84
00:03:52.165 --> 00:03:54.701 line:-1 position:50%
a title, which is used
to display your intent


85
00:03:54,701 --> 00:03:58,438 line:-1
in the Shortcuts app,
and a method called perform.


86
00:03:58,438 --> 00:04:01,074 line:-1
The perform method is where
you run your intent's logic


87
00:04:01.074 --> 00:04:03.210 line:-1 position:50%
and return a result.


88
00:04:03.210 --> 00:04:05.946 line:-1 position:50%
Additionally, you can trigger
prompts for the user


89
00:04:05,946 --> 00:04:08,648 line:-1
and await their response.


90
00:04:08,648 --> 00:04:11,852 line:-1
In this intent, I'll start
the default meditation session


91
00:04:11.852 --> 00:04:14.788 line:-1 position:50%
using my app's
MeditationService.


92
00:04:14.788 --> 00:04:16.990 line:-1 position:50%
Because the perform method
is async,


93
00:04:16.990 --> 00:04:21.294 line:-1 position:50%
I can run asynchronous code
to start my session.


94
00:04:21.294 --> 00:04:22.896 line:-1 position:50%
Once the session has started,


95
00:04:22.896 --> 00:04:25.832 line:-1 position:50%
I'll return a dialog
that is shown to the user.


96
00:04:25,832 --> 00:04:27,467 line:-1
And if your app is localized,


97
00:04:27.467 --> 00:04:32.539 line:-1 position:50%
you'll want to localize this
string in all of your locales.


98
00:04:32.539 --> 00:04:34.608 line:-1 position:50%
So far, with what I've built,


99
00:04:34.608 --> 00:04:37.677 line:-1 position:50%
the StartMeditationIntent
will appear in the Shortcuts app


100
00:04:37.677 --> 00:04:39.813 line:-1 position:50%
when authoring a shortcut.


101
00:04:39.813 --> 00:04:42.249 line:-1 position:50%
A motivated user
can take this intent


102
00:04:42,249 --> 00:04:45,418 line:-1
and create a shortcut
that will kick off a session.


103
00:04:45,418 --> 00:04:46,653 line:-1
In this shortcut,


104
00:04:46,653 --> 00:04:51,191 line:-1
I've also added a second intent
to enable a Focus.


105
00:04:51.191 --> 00:04:54.194 line:-1 position:50%
By default, my App Intent
is rendered using the title


106
00:04:54,194 --> 00:04:56,830 line:-1
I specified in my source code.


107
00:04:56.830 --> 00:04:59.499 line:-1 position:50%
To customize the rendering
for your action,


108
00:04:59,499 --> 00:05:04,004 line:-1
be sure to add a parameter
summary to your App Intent.


109
00:05:04.004 --> 00:05:05.906 line:-1 position:50%
Parameter summaries
allow you to customize


110
00:05:05.906 --> 00:05:10.410 line:-1 position:50%
the look of your intent,
as well as show values inline.


111
00:05:10.410 --> 00:05:14.681 line:-1 position:50%
However, this intent works great
as a shortcut all by itself.


112
00:05:14.681 --> 00:05:17.417 line:-1 position:50%
Ideally, someone would be able
to run my intent


113
00:05:17.417 --> 00:05:20.754 line:-1 position:50%
without first having to author
a shortcut at all.


114
00:05:20.754 --> 00:05:22.422 line:-1 position:50%
By creating an app shortcut,


115
00:05:22.422 --> 00:05:25.892 line:-1 position:50%
I can perform this setup step
on behalf of the user,


116
00:05:25,892 --> 00:05:27,994 line:-1
so they can start
using my intent


117
00:05:27.994 --> 00:05:31.164 line:-1 position:50%
as soon as the app is installed.


118
00:05:31,164 --> 00:05:32,899 line:-1
Now that I've written an intent,


119
00:05:32.899 --> 00:05:35.735 line:-1 position:50%
I'll create
an app shortcut for it.


120
00:05:35.735 --> 00:05:37.437 line:-1 position:50%
Similar to an intent,


121
00:05:37.437 --> 00:05:39.773 line:-1 position:50%
App Shortcuts are defined
in Swift code,


122
00:05:39.773 --> 00:05:43.410 line:-1 position:50%
by implementing the
AppShortcutsProvider protocol.


123
00:05:43.410 --> 00:05:44.978 line:-1 position:50%
To implement the protocol,


124
00:05:44,978 --> 00:05:47,514 line:-1
I'll simply create
a single getter that returns


125
00:05:47,514 --> 00:05:50,850 line:-1
all the app shortcuts
I want to set up for the user.


126
00:05:50,850 --> 00:05:53,720 line:-1
Note that in total,
your app can have a maximum


127
00:05:53.720 --> 00:05:55.922 line:-1 position:50%
of 10 app shortcuts.


128
00:05:55.922 --> 00:06:00.093 line:-1 position:50%
However, most apps
only need a few.


129
00:06:00.093 --> 00:06:02.429 line:-1 position:50%
So I'll create
a single AppShortcut


130
00:06:02.429 --> 00:06:05.098 line:-1 position:50%
for my StartMeditationIntent.


131
00:06:05.098 --> 00:06:08.635 line:-1 position:50%
To get started, I'll pass
an instance of my intent.


132
00:06:08.635 --> 00:06:11.137 line:-1 position:50%
If my intent's initializer
took parameters,


133
00:06:11.137 --> 00:06:14.074 line:-1 position:50%
I could specify values here.


134
00:06:14.074 --> 00:06:17.143 line:-1 position:50%
Second, I'll create an array
of spoken phrases


135
00:06:17.143 --> 00:06:20.413 line:-1 position:50%
that will invoke
my AppShortcut from Siri.


136
00:06:20.413 --> 00:06:23.149 line:-1 position:50%
You'll notice that rather than
writing my application's name


137
00:06:23.149 --> 00:06:24.584 line:-1 position:50%
directly in the string,


138
00:06:24.584 --> 00:06:27.787 line:-1 position:50%
I used a special
.applicationName token.


139
00:06:27.787 --> 00:06:31.258 line:-1 position:50%
This allows Siri to insert not
only my application's main name,


140
00:06:31.258 --> 00:06:35.996 line:-1 position:50%
but also any app name synonyms
that I've configured.


141
00:06:35.996 --> 00:06:39.432 line:-1 position:50%
Because users may say different
phrases to start meditation,


142
00:06:39.432 --> 00:06:42.636 line:-1 position:50%
I'll provide a few more
alternative phrases here.


143
00:06:42.636 --> 00:06:44.137 line:-1 position:50%
If your app is localized,


144
00:06:44.137 --> 00:06:46.840 line:-1 position:50%
you'll need to localize
these phrases as well.


145
00:06:48,842 --> 00:06:51,711 line:-1
Great. So now when someone
wants to mediate,


146
00:06:51,711 --> 00:06:55,081 line:-1
they just stay to Siri,
"Start a meditation."


147
00:06:55,081 --> 00:06:57,751 line:-1
Siri will call
the StartMeditationIntent


148
00:06:57.751 --> 00:07:00.887 line:-1 position:50%
and speak the dialog
that I returned.


149
00:07:00.887 --> 00:07:04.257 line:-1 position:50%
Also, if someone searches
for my app in Spotlight,


150
00:07:04.257 --> 00:07:06.559 line:-1 position:50%
they'll see the first
App Shortcut I've listed


151
00:07:06.559 --> 00:07:08.161 line:-1 position:50%
in my code.


152
00:07:08.161 --> 00:07:09.829 line:-1 position:50%
When the user taps the result,


153
00:07:09.829 --> 00:07:11.631 line:-1 position:50%
the shortcut
will immediately run


154
00:07:11.631 --> 00:07:14.000 line:-1 position:50%
without launching
the application.


155
00:07:14.000 --> 00:07:15.935 line:-1 position:50%
It's important to note
that if your intent


156
00:07:15.935 --> 00:07:19.906 line:-1 position:50%
does trigger an app launch,
it won't be shown in Spotlight.


157
00:07:19.906 --> 00:07:22.709 line:-1 position:50%
So, with just a very small
amount of code,


158
00:07:22,709 --> 00:07:25,478 line:-1
I've now made it much,
much simpler for my users


159
00:07:25.478 --> 00:07:28.982 line:-1 position:50%
to meditate with my app.


160
00:07:28.982 --> 00:07:31.751 line:-1 position:50%
But right now, Siri shows
a default view


161
00:07:31.751 --> 00:07:33.820 line:-1 position:50%
whenever running my intent.


162
00:07:33,820 --> 00:07:36,623 line:-1
This is OK, but I'd really
like to show the user


163
00:07:36,623 --> 00:07:40,293 line:-1
more information when they run
my app shortcut.


164
00:07:40,293 --> 00:07:43,163 line:-1
To do this, I'll need
to implement a custom view


165
00:07:43.163 --> 00:07:47.901 line:-1 position:50%
that Siri can show whenever
my intent is run.


166
00:07:47,901 --> 00:07:49,969 line:-1
Views in the App Intents
framework are built


167
00:07:49.969 --> 00:07:54.841 line:-1 position:50%
using SwiftUI and leverage the
same view technology as widgets.


168
00:07:54.841 --> 00:07:57.977 line:-1 position:50%
This means you, as a developer,
don't need to build


169
00:07:57.977 --> 00:08:01.181 line:-1 position:50%
a separate UI extension
for your custom view.


170
00:08:01.181 --> 00:08:03.316 line:-1 position:50%
Instead, you can simply
return the view


171
00:08:03.316 --> 00:08:05.685 line:-1 position:50%
when running your intent.


172
00:08:05.685 --> 00:08:08.188 line:-1 position:50%
It's important to think about
the specific constraints


173
00:08:08,188 --> 00:08:10,190 line:-1
this brings for your views.


174
00:08:10.190 --> 00:08:13.026 line:-1 position:50%
Just like widgets,
custom App Intent views


175
00:08:13,026 --> 00:08:17,530 line:-1
can't include things like
interactivity or animations.


176
00:08:17,530 --> 00:08:21,801 line:-1
Make sure to take this into
account when designing your UI.


177
00:08:21,801 --> 00:08:26,206 line:-1
App Intents supports showing
custom UI at three phases:


178
00:08:26,206 --> 00:08:29,142 line:-1
value confirmation,
intent confirmation,


179
00:08:29.142 --> 00:08:31.478 line:-1 position:50%
and after the intent
is finished.


180
00:08:31.478 --> 00:08:34.247 line:-1 position:50%
For my app, I'm going to return
a custom view


181
00:08:34,247 --> 00:08:36,816 line:-1
at the end of running my intent.


182
00:08:36.816 --> 00:08:38.885 line:-1 position:50%
If you're using
these other prompts,


183
00:08:38,885 --> 00:08:41,521 line:-1
be sure to think about how
you can integrate custom UI


184
00:08:41.521 --> 00:08:44.257 line:-1 position:50%
at those steps too.


185
00:08:44,257 --> 00:08:48,328 line:-1
Finally, as I mentioned,
displaying custom UI is easy.


186
00:08:48,328 --> 00:08:52,065 line:-1
You simply need to return
your view from your intent.


187
00:08:52.065 --> 00:08:55.235 line:-1 position:50%
Alright, time to jump
into some code.


188
00:08:55.235 --> 00:08:57.203 line:-1 position:50%
Adding a custom view is easy.


189
00:08:57.203 --> 00:09:01.241 line:-1 position:50%
As I mentioned, I'll just return
the view alongside my dialog.


190
00:09:01.241 --> 00:09:03.276 line:-1 position:50%
The App Intents framework
will take care


191
00:09:03,276 --> 00:09:06,846 line:-1
of presenting my view
inside the Siri snippet.


192
00:09:06.846 --> 00:09:09.215 line:-1 position:50%
Keep in mind that your views
are going to be shown


193
00:09:09,215 --> 00:09:11,551 line:-1
alongside other Siri views,


194
00:09:11,551 --> 00:09:14,654 line:-1
like the snippet title
or confirmation buttons.


195
00:09:14,654 --> 00:09:16,289 line:-1
So you'll want
your snippet's design


196
00:09:16.289 --> 00:09:19.559 line:-1 position:50%
to feel at home inside of Siri.


197
00:09:19,559 --> 00:09:22,695 line:-1
Up next, let's check out how
I can extend an app shortcut


198
00:09:22.695 --> 00:09:26.766 line:-1 position:50%
to include parameters.


199
00:09:26.766 --> 00:09:28.601 line:-1 position:50%
In my previous implementation,


200
00:09:28.601 --> 00:09:32.238 line:-1 position:50%
I chose to start
the default meditation session.


201
00:09:32.238 --> 00:09:35.575 line:-1 position:50%
But my app includes
many great session types,


202
00:09:35.575 --> 00:09:37.811 line:-1 position:50%
and users will want to start
a particular session


203
00:09:37.811 --> 00:09:39.746 line:-1 position:50%
they have in mind.


204
00:09:39.746 --> 00:09:42.415 line:-1 position:50%
Ideally, my user would be able
to specify the session


205
00:09:42.415 --> 00:09:45.251 line:-1 position:50%
they want to start
when running my intent.


206
00:09:45.251 --> 00:09:46.820 line:-1 position:50%
To support these use cases,


207
00:09:46.820 --> 00:09:49.622 line:-1 position:50%
I'll need to extend my intent
by adding a parameter


208
00:09:49.622 --> 00:09:54.461 line:-1 position:50%
that captures the session
the user wants to run.


209
00:09:54,461 --> 00:09:55,728 line:-1
To add a parameter,


210
00:09:55.728 --> 00:09:58.698 line:-1 position:50%
I first need to define
the parameter's type.


211
00:09:58.698 --> 00:10:01.034 line:-1 position:50%
I'll create
a MeditationSession struct


212
00:10:01,034 --> 00:10:03,870 line:-1
that has the relevant
information for a session.


213
00:10:03,870 --> 00:10:05,138 line:-1
I'll include a name,


214
00:10:05.138 --> 00:10:06.873 line:-1 position:50%
and I'll give it
an identifier field,


215
00:10:06.873 --> 00:10:10.009 line:-1 position:50%
which can be a UUID.


216
00:10:10.009 --> 00:10:13.079 line:-1 position:50%
To use this struct
as a parameter for my intent,


217
00:10:13.079 --> 00:10:16.983 line:-1 position:50%
I also need to implement
the AppEntity protocol.


218
00:10:16.983 --> 00:10:19.152 line:-1 position:50%
Implementing
the AppEntity protocol


219
00:10:19,152 --> 00:10:22,055 line:-1
tells the App Intents framework
about my type


220
00:10:22.055 --> 00:10:24.524 line:-1 position:50%
and lets me specify
additional information,


221
00:10:24,524 --> 00:10:27,527 line:-1
like how the entity
is displayed.


222
00:10:27.527 --> 00:10:31.130 line:-1 position:50%
The entity protocol requires
that my type has an identifier,


223
00:10:31.130 --> 00:10:32.866 line:-1 position:50%
which I've already provided.


224
00:10:32.866 --> 00:10:37.370 line:-1 position:50%
I could use other types as well,
like integers or strings.


225
00:10:37.370 --> 00:10:39.072 line:-1 position:50%
I also need to provide
some information


226
00:10:39.072 --> 00:10:41.207 line:-1 position:50%
on how to display my entity.


227
00:10:41,207 --> 00:10:42,809 line:-1
This will be used
in the Shortcuts app


228
00:10:42,809 --> 00:10:46,246 line:-1
and other places
where my entity is shown.


229
00:10:46.246 --> 00:10:49.449 line:-1 position:50%
Finally, I need to wire up
a default query.


230
00:10:49,449 --> 00:10:52,252 line:-1
I'll call my query
the MeditationSessionQuery,


231
00:10:52,252 --> 00:10:55,388 line:-1
and I'll implement it next.


232
00:10:55.388 --> 00:10:58.057 line:-1 position:50%
In order to work with my entity,
the App Intents framework


233
00:10:58.057 --> 00:10:59.859 line:-1 position:50%
needs to be able
to look up my entities


234
00:10:59.859 --> 00:11:01.928 line:-1 position:50%
based on their identifier.


235
00:11:01,928 --> 00:11:03,229 line:-1
To make this possible,


236
00:11:03.229 --> 00:11:06.633 line:-1 position:50%
the EntityQuery protocol
defines just one requirement:


237
00:11:06.633 --> 00:11:08.568 line:-1 position:50%
a function
that takes identifiers


238
00:11:08.568 --> 00:11:11.237 line:-1 position:50%
and returns matching entities.


239
00:11:11.237 --> 00:11:13.573 line:-1 position:50%
I'll implement this function
by looking up the sessions


240
00:11:13.573 --> 00:11:16.709 line:-1 position:50%
in my SessionManager.


241
00:11:16.709 --> 00:11:19.646 line:-1 position:50%
Next, I'll update
my StartMeditationIntent


242
00:11:19.646 --> 00:11:21.748 line:-1 position:50%
to add a parameter.


243
00:11:21.748 --> 00:11:23.016 line:-1 position:50%
Parameters are
straightforward;


244
00:11:23.016 --> 00:11:25.852 line:-1 position:50%
they are just a normal
property on my struct.


245
00:11:25.852 --> 00:11:28.488 line:-1 position:50%
But to tell App Intents
about my parameter,


246
00:11:28.488 --> 00:11:31.991 line:-1 position:50%
I also need to add the
@Parameter property wrapper.


247
00:11:31,991 --> 00:11:33,993 line:-1
This property wrapper
lets App Intents know


248
00:11:33,993 --> 00:11:37,330 line:-1
that the session property
is part of my intent.


249
00:11:37.330 --> 00:11:39.532 line:-1 position:50%
I can also specify
additional metadata


250
00:11:39.532 --> 00:11:44.404 line:-1 position:50%
in the Parameter property
wrapper, like the display name.


251
00:11:44,404 --> 00:11:47,173 line:-1
Now that I've added
a parameter to my intent,


252
00:11:47.173 --> 00:11:50.443 line:-1 position:50%
I need to ask the user which
session they'd like to run.


253
00:11:50,443 --> 00:11:52,745 line:-1
The App Intents framework
has robust support


254
00:11:52,745 --> 00:11:54,714 line:-1
for asking users
follow-up questions


255
00:11:54.714 --> 00:11:58.184 line:-1 position:50%
to gather values
for my intent's parameters.


256
00:11:58,184 --> 00:12:02,121 line:-1
These prompts will be displayed
anywhere my intent is run.


257
00:12:02.121 --> 00:12:05.058 line:-1 position:50%
When run from Siri, Siri will
speak out the questions,


258
00:12:05,058 --> 00:12:07,827 line:-1
and ask the user
to speak the answer.


259
00:12:07,827 --> 00:12:09,729 line:-1
In Spotlight
and the Shortcuts app,


260
00:12:09,729 --> 00:12:11,864 line:-1
the user will be presented
with the same prompt


261
00:12:11,864 --> 00:12:14,667 line:-1
in a touch-driven UI.


262
00:12:14.667 --> 00:12:19.138 line:-1 position:50%
App Intents supports
three types of value prompts.


263
00:12:19.138 --> 00:12:23.643 line:-1 position:50%
Disambiguations asks the user
to select from a fixed list.


264
00:12:23.643 --> 00:12:26.079 line:-1 position:50%
Disambiguations are great
to present the user


265
00:12:26.079 --> 00:12:28.581 line:-1 position:50%
when you have small
fixed set of options


266
00:12:28.581 --> 00:12:32.452 line:-1 position:50%
for a parameter
in your intent.


267
00:12:32.452 --> 00:12:34.687 line:-1 position:50%
Value prompts allow you
to ask the user


268
00:12:34.687 --> 00:12:37.056 line:-1 position:50%
for an open-ended value.


269
00:12:37,056 --> 00:12:39,926 line:-1
These are great for types
like strings or integers,


270
00:12:39,926 --> 00:12:42,996 line:-1
which can take any value.


271
00:12:42.996 --> 00:12:45.632 line:-1 position:50%
Finally, confirmation
asks the user


272
00:12:45,632 --> 00:12:48,668 line:-1
to verify a particular value
and can be helpful


273
00:12:48,668 --> 00:12:50,503 line:-1
if you want to double-check
with the user


274
00:12:50.503 --> 00:12:53.039 line:-1 position:50%
that you understand
their intent.


275
00:12:53,039 --> 00:12:55,375 line:-1
Prompting for values is
a great way to make intents


276
00:12:55.375 --> 00:12:58.578 line:-1 position:50%
more flexible and allows you
to gather more information


277
00:12:58.578 --> 00:13:00.179 line:-1 position:50%
from the user.


278
00:13:00.179 --> 00:13:03.182 line:-1 position:50%
But they also slow down
the conversation,


279
00:13:03,182 --> 00:13:06,586 line:-1
and can frustrate users
if you use them too often.


280
00:13:06,586 --> 00:13:09,889 line:-1
For more insight into
designing great intents,


281
00:13:09,889 --> 00:13:11,357 line:-1
check out the session titled


282
00:13:11.357 --> 00:13:15.595 line:-1 position:50%
"Design App Shortcuts"
from Lynn.


283
00:13:15.595 --> 00:13:18.464 line:-1 position:50%
All right, now that I've added
the session parameter


284
00:13:18.464 --> 00:13:22.035 line:-1 position:50%
to the StartMeditationIntent,
I'll go ahead and add logic


285
00:13:22.035 --> 00:13:25.772 line:-1 position:50%
to my perform method
to prompt for this value.


286
00:13:25.772 --> 00:13:28.841 line:-1 position:50%
In my app, I have a small
fixed number of sessions


287
00:13:28,841 --> 00:13:30,410 line:-1
the user can run.


288
00:13:30.410 --> 00:13:32.779 line:-1 position:50%
If the session
isn't already specified,


289
00:13:32.779 --> 00:13:35.081 line:-1 position:50%
I'll retrieve the list
from my SessionManager


290
00:13:35,081 --> 00:13:38,084 line:-1
and present a disambiguation
to the user.


291
00:13:38,084 --> 00:13:41,354 line:-1
Using the display representation
for each of my sessions,


292
00:13:41,354 --> 00:13:44,390 line:-1
App Intents will format
sessions into list items


293
00:13:44,390 --> 00:13:46,859 line:-1
and display them
to the user.


294
00:13:46.859 --> 00:13:48.094 line:-1 position:50%
When the user picks one,


295
00:13:48.094 --> 00:13:51.497 line:-1 position:50%
the selected item
will be returned to me.


296
00:13:51,497 --> 00:13:54,634 line:-1
I'll pass the selected session
to my MeditationService,


297
00:13:54.634 --> 00:13:56.736 line:-1 position:50%
which will start
the session.


298
00:13:56,736 --> 00:13:59,305 line:-1
I can then return a dialog
to let the user know


299
00:13:59,305 --> 00:14:01,541 line:-1
that the intent has started.


300
00:14:01,541 --> 00:14:03,976 line:-1
Since the user
provided a session,


301
00:14:03.976 --> 00:14:06.012 line:-1 position:50%
it's a good idea to put the name
of the session


302
00:14:06.012 --> 00:14:11.217 line:-1 position:50%
in the dialog so the user knows
we understood their request.


303
00:14:11.217 --> 00:14:15.221 line:-1 position:50%
Great, so now when my users
say, "Start a Meditation,"


304
00:14:15.221 --> 00:14:17.990 line:-1 position:50%
my app can prompt the user
for the particular session


305
00:14:17,990 --> 00:14:19,859 line:-1
they want to run.


306
00:14:19.859 --> 00:14:21.894 line:-1 position:50%
However, as I
mentioned before,


307
00:14:21.894 --> 00:14:26.432 line:-1 position:50%
users prefer Siri interactions
that are quick and to the point.


308
00:14:26.432 --> 00:14:29.469 line:-1 position:50%
Ideally, I'd be able
to let my users tell Siri


309
00:14:29,469 --> 00:14:32,438 line:-1
the session they'd like
to run in the initial phrase,


310
00:14:32.438 --> 00:14:35.174 line:-1 position:50%
rather than
in a follow-up question.


311
00:14:35,174 --> 00:14:37,643 line:-1
Well, I have good news.


312
00:14:37,643 --> 00:14:40,413 line:-1
App Shortcuts has support
for extending trigger phrases


313
00:14:40.413 --> 00:14:43.216 line:-1 position:50%
with predefined parameters.


314
00:14:43.216 --> 00:14:46.018 line:-1 position:50%
By implementing
parameterized phrases,


315
00:14:46.018 --> 00:14:48.187 line:-1 position:50%
my app can support
utterances like


316
00:14:48.187 --> 00:14:52.959 line:-1 position:50%
"Start a calming meditation"
or "Start a walking meditation."


317
00:14:52.959 --> 00:14:54.293 line:-1 position:50%
Parameters are great
when you have


318
00:14:54.293 --> 00:14:56.929 line:-1 position:50%
a fixed set of well-known
parameter values


319
00:14:56,929 --> 00:15:00,032 line:-1
that you can specify
to Siri ahead of time.


320
00:15:00.032 --> 00:15:04.003 line:-1 position:50%
For my app,
I'll use my session names.


321
00:15:04,003 --> 00:15:07,440 line:-1
Parameters are not meant
for open-ended values.


322
00:15:07.440 --> 00:15:11.010 line:-1 position:50%
For example, it's not possible
to gather an arbitrary string


323
00:15:11.010 --> 00:15:13.513 line:-1 position:50%
from the user
in the initial utterance.


324
00:15:13.513 --> 00:15:15.715 line:-1 position:50%
So, my app couldn't support
a phrase


325
00:15:15.715 --> 00:15:18.518 line:-1 position:50%
like "Search my
diary for X,"


326
00:15:18.518 --> 00:15:22.121 line:-1 position:50%
where X could be
any input from the user.


327
00:15:22.121 --> 00:15:25.491 line:-1 position:50%
Instead, parameter values
are specified ahead of time,


328
00:15:25.491 --> 00:15:27.393 line:-1 position:50%
when your app is running.


329
00:15:27.393 --> 00:15:30.630 line:-1 position:50%
Let's implement
some parameterized phrases.


330
00:15:30.630 --> 00:15:32.899 line:-1 position:50%
To implement parameterized
phrases in my app,


331
00:15:32.899 --> 00:15:35.535 line:-1 position:50%
I need to make
a few changes.


332
00:15:35.535 --> 00:15:38.704 line:-1 position:50%
First, I'll update the query
for my SessionEntity


333
00:15:38,704 --> 00:15:41,007 line:-1
to implement the
suggestedResults() method


334
00:15:41,007 --> 00:15:45,444 line:-1
to return the list of entities
for my parameterized shortcut.


335
00:15:45,444 --> 00:15:48,381 line:-1
Second, I'll need to notify
the App Intents framework


336
00:15:48,381 --> 00:15:51,651 line:-1
when the list of available
SessionEntities has changed.


337
00:15:51,651 --> 00:15:53,119 line:-1
This allows
the App Intents framework


338
00:15:53,119 --> 00:15:56,756 line:-1
to create new shortcut phrases
for use in Siri.


339
00:15:56,756 --> 00:15:59,292 line:-1
I'll do this by updating
my app's model layer


340
00:15:59.292 --> 00:16:00.860 line:-1 position:50%
to notify
the App Intents framework


341
00:16:00.860 --> 00:16:03.729 line:-1 position:50%
whenever my session list
changes.


342
00:16:03.729 --> 00:16:06.899 line:-1 position:50%
Finally, I'll add some new
phrases to my App Shortcut


343
00:16:06.899 --> 00:16:08.701 line:-1 position:50%
that reference
the session parameter


344
00:16:08.701 --> 00:16:12.171 line:-1 position:50%
on my StartMeditationIntent.


345
00:16:12,171 --> 00:16:15,808 line:-1
So first, I'll update
the MeditationSessionQuery


346
00:16:15,808 --> 00:16:18,945 line:-1
by implementing the
suggestedEntities function.


347
00:16:18,945 --> 00:16:21,214 line:-1
The App Intents framework
uses the sessions


348
00:16:21,214 --> 00:16:25,318 line:-1
returned from this function to
create parameterized shortcuts.


349
00:16:25.318 --> 00:16:28.354 line:-1 position:50%
It's important to note that
while this method is optional,


350
00:16:28,354 --> 00:16:30,356 line:-1
if I don't implement
this method,


351
00:16:30.356 --> 00:16:34.861 line:-1 position:50%
I won't get any
parameterized shortcuts at all.


352
00:16:34,861 --> 00:16:37,697 line:-1
Second, I'll need to update
my app's model layer


353
00:16:37,697 --> 00:16:39,699 line:-1
to notify
the App Intents framework


354
00:16:39.699 --> 00:16:42.935 line:-1 position:50%
whenever my list
of sessions changes.


355
00:16:42.935 --> 00:16:46.172 line:-1 position:50%
In my app, I infrequently
publish new session types


356
00:16:46,172 --> 00:16:48,875 line:-1
that I fetch from the server
in the background.


357
00:16:48,875 --> 00:16:51,043 line:-1
I'll update my SessionModel
to call the


358
00:16:51,043 --> 00:16:53,846 line:-1
updateAppShortcutParameters()
method


359
00:16:53,846 --> 00:16:56,616 line:-1
any time I receive
new sessions.


360
00:16:56.616 --> 00:16:59.185 line:-1 position:50%
This method is provided
by the App Intents framework;


361
00:16:59,185 --> 00:17:01,554 line:-1
you don't need
to implement it yourself.


362
00:17:01.554 --> 00:17:04.891 line:-1 position:50%
When called, App Intents
will invoke your entity's query


363
00:17:04,891 --> 00:17:09,195 line:-1
to gather the list of parameters
for your shortcut phrases.


364
00:17:09,195 --> 00:17:12,265 line:-1
Finally, I'll add new phrases
for my App Shortcut


365
00:17:12.265 --> 00:17:15.601 line:-1 position:50%
that include the session
keypath on my intent.


366
00:17:15.601 --> 00:17:18.271 line:-1 position:50%
The App Intents framework
will combine this phrase


367
00:17:18,271 --> 00:17:21,574 line:-1
with all of the sessions
returned from my query.


368
00:17:21.574 --> 00:17:25.678 line:-1 position:50%
The text used for each value is
pulled from the title property


369
00:17:25.678 --> 00:17:29.248 line:-1 position:50%
on the SessionEntity's
display representation.


370
00:17:29.248 --> 00:17:31.350 line:-1 position:50%
Just like before,
I'll want to include


371
00:17:31,350 --> 00:17:35,421 line:-1
a few different ways that users
might phrase my App Shortcut.


372
00:17:35.421 --> 00:17:37.523 line:-1 position:50%
This ensures
a smoother experience


373
00:17:37.523 --> 00:17:41.360 line:-1 position:50%
if the user doesn't remember
your preferred phrase.


374
00:17:41,360 --> 00:17:44,931 line:-1
All right, I now have a great,
full-featured App Shortcut,


375
00:17:44,931 --> 00:17:48,034 line:-1
and I can't wait for my users
to give it a try.


376
00:17:48.034 --> 00:17:50.336 line:-1 position:50%
But in order
for that to happen,


377
00:17:50.336 --> 00:17:55.675 line:-1 position:50%
I need to do some work to help
users discover my new Shortcut.


378
00:17:55.675 --> 00:17:59.478 line:-1 position:50%
The first thing I want to talk
about is picking great phrases.


379
00:17:59.478 --> 00:18:03.516 line:-1 position:50%
Great phrases for App Shortcuts
are short and memorable.


380
00:18:03.516 --> 00:18:05.751 line:-1 position:50%
Users will have a lot
of apps on their phone


381
00:18:05,751 --> 00:18:07,353 line:-1
that support App Shortcuts;


382
00:18:07.353 --> 00:18:09.822 line:-1 position:50%
and in practice,
users can have a hard time


383
00:18:09,822 --> 00:18:12,792 line:-1
remembering exactly how
to phrase their shortcuts.


384
00:18:12.792 --> 00:18:17.997 line:-1 position:50%
So where possible, keep your
phrases short and to the point.


385
00:18:17,997 --> 00:18:20,132 line:-1
Along these lines,
if your app name


386
00:18:20,132 --> 00:18:22,468 line:-1
can be used
as a noun or verb,


387
00:18:22.468 --> 00:18:25.304 line:-1 position:50%
consider using it that way
in your phrase.


388
00:18:25,304 --> 00:18:28,174 line:-1
In my app, I've used
Meditation like a noun,


389
00:18:28.174 --> 00:18:31.677 line:-1 position:50%
so that the phrase
can be short and memorable.


390
00:18:31.677 --> 00:18:36.782 line:-1 position:50%
Finally, app name synonyms
can help your users immensely.


391
00:18:36.782 --> 00:18:38.250 line:-1 position:50%
If users call your app


392
00:18:38,250 --> 00:18:40,653 line:-1
something other than
your app's display name,


393
00:18:40.653 --> 00:18:44.557 line:-1 position:50%
you'll want to consider adding
an app name synonym for it.


394
00:18:44.557 --> 00:18:48.361 line:-1 position:50%
iOS 11 added support
for app name synonyms.


395
00:18:48.361 --> 00:18:53.065 line:-1 position:50%
If you haven't created one, now
may be a great time to do so.


396
00:18:53,065 --> 00:18:54,700 line:-1
The next thing
I want to talk about


397
00:18:54.700 --> 00:18:58.371 line:-1 position:50%
is the Siri Tip
and the Shortcuts link.


398
00:18:58.371 --> 00:19:01.640 line:-1 position:50%
Because App Shortcuts
don't require any user setup,


399
00:19:01.640 --> 00:19:04.777 line:-1 position:50%
discoverability is vital
for users to find


400
00:19:04.777 --> 00:19:07.613 line:-1 position:50%
and use your App Shortcuts.


401
00:19:07,613 --> 00:19:10,016 line:-1
With App Shortcuts,
users no longer need


402
00:19:10.016 --> 00:19:13.419 line:-1 position:50%
the Add to Siri button
to add your Shortcut.


403
00:19:13.419 --> 00:19:14.787 line:-1 position:50%
It's already added!


404
00:19:14,787 --> 00:19:18,024 line:-1
However, we don't want to lose
the discoverability benefits


405
00:19:18,024 --> 00:19:20,259 line:-1
that the Add to Siri button
provided.


406
00:19:20.259 --> 00:19:24.697 line:-1 position:50%
With that in mind, we've
created a new Siri Tip view.


407
00:19:24.697 --> 00:19:27.166 line:-1 position:50%
This view works great
anywhere you may have used


408
00:19:27.166 --> 00:19:29.902 line:-1 position:50%
the Add To Siri button
in the past.


409
00:19:29,902 --> 00:19:34,106 line:1
The Tip view is available
in both SwiftUI and UIKit.


410
00:19:34,106 --> 00:19:35,908 position:50%
And we've provided
a number of styles


411
00:19:35,908 --> 00:19:40,012 position:50%
so that the Tip looks great
in any application.


412
00:19:40,012 --> 00:19:42,615 position:50%
Siri Tips are best placed
contextually,


413
00:19:42,615 --> 00:19:45,518 line:1
when they're relevant
to the content onscreen.


414
00:19:45.518 --> 00:19:48.454 line:-1 position:50%
If a user just placed
an order in your app,


415
00:19:48,454 --> 00:19:50,589 line:-1
consider showing a Tip
for your Shortcut


416
00:19:50,589 --> 00:19:52,958 line:-1
that provides
the order status.


417
00:19:52,958 --> 00:19:55,227 line:-1
Siri Tips should be
placed thoughtfully,


418
00:19:55.227 --> 00:19:57.329 line:-1 position:50%
when you feel a user
is likely to engage


419
00:19:57.329 --> 00:20:00.566 line:-1 position:50%
with your App Shortcut
in the near future.


420
00:20:00.566 --> 00:20:03.736 line:-1 position:50%
The Siri Tip also
supports dismissal.


421
00:20:03.736 --> 00:20:06.472 line:-1 position:50%
The view includes a dismiss
button and will trigger


422
00:20:06.472 --> 00:20:09.608 line:-1 position:50%
a custom closure
in your code when tapped.


423
00:20:09.608 --> 00:20:11.844 line:-1 position:50%
You'll want to remove
the view from your layout,


424
00:20:11.844 --> 00:20:13.779 line:-1 position:50%
and consider
not showing it again


425
00:20:13.779 --> 00:20:16.348 line:-1 position:50%
until you feel
it's relevant.


426
00:20:16,348 --> 00:20:19,585 line:1
Finally, we've also included
a new ShortcutsLink


427
00:20:19,585 --> 00:20:22,988 line:1
that will launch to a list
of Shortcuts from your app.


428
00:20:22,988 --> 00:20:24,990 position:50%
This new element is great


429
00:20:24,990 --> 00:20:27,259 line:1
if your app has a lot
of App Shortcuts


430
00:20:27,259 --> 00:20:30,863 line:1
and you want to let users
explore all of them.


431
00:20:30.863 --> 00:20:33.365 line:-1 position:50%
Now, the great thing
about App Shortcuts


432
00:20:33,365 --> 00:20:36,769 line:-1
is they're available as soon
as your app is installed.


433
00:20:36,769 --> 00:20:39,038 line:-1
Even before the app
is first launched,


434
00:20:39.038 --> 00:20:41.273 line:-1 position:50%
users can see and run
your Shortcuts


435
00:20:41.273 --> 00:20:44.743 line:-1 position:50%
from Spotlight, Siri,
and the Shortcuts app.


436
00:20:44.743 --> 00:20:46.512 line:-1 position:50%
You may need to take this
into account


437
00:20:46,512 --> 00:20:48,414 line:-1
when building
your App Shortcut.


438
00:20:48.414 --> 00:20:51.784 line:-1 position:50%
For example, if your app
requires a log-in flow,


439
00:20:51.784 --> 00:20:55.121 line:-1 position:50%
the user may not have logged in
before running your intent.


440
00:20:55,121 --> 00:20:58,257 line:-1
Your intent should fail
gracefully with an error message


441
00:20:58,257 --> 00:21:01,861 line:-1
explaining to the user
that they need to log in.


442
00:21:01.861 --> 00:21:05.364 line:-1 position:50%
Second, parameterized phrases
for your App Shortcuts


443
00:21:05.364 --> 00:21:08.467 line:-1 position:50%
won't be available until
your app has been launched


444
00:21:08,467 --> 00:21:10,402 line:-1
and notified
the App Intents framework


445
00:21:10.402 --> 00:21:12.905 line:-1 position:50%
that you have new
parameter values.


446
00:21:12,905 --> 00:21:14,607 line:-1
If your App Shortcut
doesn't contain


447
00:21:14.607 --> 00:21:17.977 line:-1 position:50%
any non-parameterized
phrases, the user won't see


448
00:21:17.977 --> 00:21:21.714 line:-1 position:50%
your App Shortcut at all until
they first launch your app.


449
00:21:21,714 --> 00:21:25,084 line:-1
You may consider adding a
few non-parameterized phrases


450
00:21:25,084 --> 00:21:27,553 line:-1
to avoid this issue.


451
00:21:27,553 --> 00:21:30,923 line:-1
Additionally, Siri has added
support for phrases like,


452
00:21:30.923 --> 00:21:35.094 line:-1 position:50%
"What can I do here?" and
"What can I do with Meditation?"


453
00:21:35.094 --> 00:21:37.463 line:-1 position:50%
Siri will automatically
gather and recommend


454
00:21:37,463 --> 00:21:41,634 line:-1
any App Shortcut phrases and
present them on your behalf.


455
00:21:41,634 --> 00:21:44,003 line:-1
Your app doesn't need
to do anything additional


456
00:21:44,003 --> 00:21:46,305 line:-1
for this
functionality to work.


457
00:21:46.305 --> 00:21:49.275 line:-1 position:50%
Finally, in both Siri
and the Shortcuts app,


458
00:21:49.275 --> 00:21:52.011 line:-1 position:50%
the order your App Shortcuts
are displayed is determined


459
00:21:52,011 --> 00:21:54,246 line:-1
by the order that you list
your App Shortcuts


460
00:21:54,246 --> 00:21:55,948 line:-1
in your source code.


461
00:21:55,948 --> 00:21:58,384 line:-1
You'll want to consider putting
your best and most useful


462
00:21:58.384 --> 00:22:02.087 line:-1 position:50%
App Shortcuts first, so that
they get the most attention.


463
00:22:02.087 --> 00:22:05.591 line:-1 position:50%
Similarly, the first phrase
you list in the phrase array


464
00:22:05.591 --> 00:22:09.495 line:-1 position:50%
will be considered the primary
phrase for that App Shortcut.


465
00:22:09.495 --> 00:22:13.566 line:-1 position:50%
The primary phrase is used as
the label on the Shortcut tile,


466
00:22:13.566 --> 00:22:15.601 line:-1 position:50%
and it's shown
when the user asks Siri


467
00:22:15.601 --> 00:22:18.404 line:-1 position:50%
for help with your app.


468
00:22:18.404 --> 00:22:22.274 line:-1 position:50%
OK, we covered a lot
about App Intents framework


469
00:22:22.274 --> 00:22:24.310 line:-1 position:50%
and App Shortcuts.


470
00:22:24.310 --> 00:22:27.246 line:-1 position:50%
I want to leave you
with two key thoughts.


471
00:22:27.246 --> 00:22:31.483 line:-1 position:50%
First, App Shortcuts make it
easy for users to use your app


472
00:22:31.483 --> 00:22:35.921 line:-1 position:50%
from anywhere in the system, so
think about the best use cases


473
00:22:35,921 --> 00:22:40,059 line:-1
in your app that fit
this more lightweight model.


474
00:22:40.059 --> 00:22:43.395 line:-1 position:50%
Second, once you've
implemented an App Shortcut,


475
00:22:43,395 --> 00:22:46,832 line:-1
users will not know about it
unless you tell them!


476
00:22:46.832 --> 00:22:50.302 line:-1 position:50%
Think hard about how to make
your App Shortcut discoverable.


477
00:22:50.302 --> 00:22:52.605 line:-1 position:50%
Consider places in your app
where you can show


478
00:22:52.605 --> 00:22:56.008 line:-1 position:50%
the Siri Tip, as well as
off-product locations,


479
00:22:56.008 --> 00:22:59.345 line:-1 position:50%
like a website
or a sign in your store.


480
00:22:59,345 --> 00:23:02,014 line:-1
We can't wait to see
all the great App Shortcuts


481
00:23:02.014 --> 00:23:05.217 line:-1 position:50%
that you create with the
new App Intents framework.


482
00:23:05,217 --> 00:23:07,319 line:1
To dig deeper into design,


483
00:23:07,319 --> 00:23:09,622 position:50%
as well as
the App Intents framework,


484
00:23:09,622 --> 00:23:12,424 line:1
be sure to check out
other talks this week.


485
00:23:12.424 --> 00:23:15.494 line:-1 position:50%
Thanks, and have
a great WWDC.


486
00:23:15,494 --> 00:23:19,531 line:1 align:right position:90%
♪

