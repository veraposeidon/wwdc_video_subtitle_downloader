2
00:00:00,000 --> 00:00:02,970 line:-1
♪ instrumental hip hop music ♪


3
00:00:02,970 --> 00:00:09,409 align:right size:2% position:90%
♪


4
00:00:09.409 --> 00:00:13.247 line:-1 position:50%
Hi. I'm Curt, an engineer
on the SwiftUI team.


5
00:00:13,247 --> 00:00:16,950 line:-1
There are some exciting new APIs
for navigation in SwiftUI.


6
00:00:16.950 --> 00:00:19.720 line:-1 position:50%
I've been enjoying building apps
with these new APIs


7
00:00:19.720 --> 00:00:23.290 line:-1 position:50%
and I'm thrilled to be able
to share them with you.


8
00:00:23.290 --> 00:00:25.893 line:-1 position:50%
These APIs scale
from basic stacks --


9
00:00:25.893 --> 00:00:28.929 line:-1 position:50%
like on Apple TV,
iPhone, and Apple Watch --


10
00:00:28.929 --> 00:00:31.565 line:-1 position:50%
to powerful multicolumn
presentations.


11
00:00:31.565 --> 00:00:33.901 line:-1 position:50%
The new APIs
bring robust support


12
00:00:33.901 --> 00:00:36.703 line:-1 position:50%
for programmatic navigation
and deep linking,


13
00:00:36.703 --> 00:00:40.140 line:-1 position:50%
letting you compose pieces
to build the perfect structure


14
00:00:40,140 --> 00:00:42,109 line:-1
for your app.


15
00:00:42,109 --> 00:00:45,412 line:-1
In this talk, I'll give you
some straightforward recipes


16
00:00:45.412 --> 00:00:48.782 line:-1 position:50%
for cooking up an app
with navigation in SwiftUI.


17
00:00:48,782 --> 00:00:51,118 line:-1
And if you're already
using SwiftUI,


18
00:00:51,118 --> 00:00:54,554 line:-1
we hope these new APIs will
help you kick it up a notch.


19
00:00:54.554 --> 00:00:55.889 line:-1 position:50%
I'll start with the ingredients


20
00:00:55,889 --> 00:00:59,559 line:-1
that go into the new
data-driven navigation APIs.


21
00:00:59.559 --> 00:01:01.695 line:-1 position:50%
Then, we'll move
to our tasting menu:


22
00:01:01,695 --> 00:01:03,497 line:-1
several quick and easy recipes


23
00:01:03.497 --> 00:01:06.533 line:-1 position:50%
for full programmatic
control of navigation.


24
00:01:06.533 --> 00:01:09.136 line:-1 position:50%
For the dessert course,
I'll share some tips


25
00:01:09,136 --> 00:01:14,374 line:-1
on using the new APIs to persist
navigation state in your apps.


26
00:01:14.374 --> 00:01:17.344 line:-1 position:50%
If you've used navigation
in SwiftUI before,


27
00:01:17.344 --> 00:01:20.514 line:-1 position:50%
you might be wondering
how the new APIs are different.


28
00:01:20,514 --> 00:01:25,052 line:-1
So before digging in, let's
review some of the existing API.


29
00:01:25.052 --> 00:01:28.755 line:-1 position:50%
The existing APIs are based
on links that send views


30
00:01:28.755 --> 00:01:31.625 line:-1 position:50%
that are shown in other columns
or on a stack.


31
00:01:31,625 --> 00:01:33,026 line:-1
For example, I might have a list


32
00:01:33.026 --> 00:01:35.495 line:-1 position:50%
of navigation links
in a root view.


33
00:01:35,495 --> 00:01:37,331 line:-1
When I tap one of these links,


34
00:01:37.331 --> 00:01:40.600 line:-1 position:50%
the link pushes
its view on the stack.


35
00:01:40,600 --> 00:01:42,869 line:-1
This works great
for basic navigation,


36
00:01:42.869 --> 00:01:45.272 line:-1 position:50%
and you can continue
using this pattern.


37
00:01:45,272 --> 00:01:48,809 line:-1
But let's pop back
to the root view.


38
00:01:48,809 --> 00:01:51,345 line:-1
With the existing
navigation API,


39
00:01:51,345 --> 00:01:53,246 line:-1
to present a link
programmatically,


40
00:01:53.246 --> 00:01:55.382 line:-1 position:50%
I add a binding to the link.


41
00:01:55.382 --> 00:01:57.985 line:-1 position:50%
For example,
I can present this link's view


42
00:01:57.985 --> 00:02:01.421 line:-1 position:50%
by setting item.showDetail
to true.


43
00:02:01,421 --> 00:02:06,693 line:-1
But this means I need a separate
binding for each link.


44
00:02:06,693 --> 00:02:09,363 line:-1
With the new API,
we lift the binding up


45
00:02:09.363 --> 00:02:13.066 line:-1 position:50%
to the entire container,
called a NavigationStack.


46
00:02:13,066 --> 00:02:14,601 line:-1
The path here
is a collection


47
00:02:14.601 --> 00:02:18.672 line:-1 position:50%
that represents all the values
pushed on the stack.


48
00:02:18.672 --> 00:02:21.475 line:-1 position:50%
NavigationLinks
append values to the path.


49
00:02:21.475 --> 00:02:23.810 line:-1 position:50%
You can deep link
by mutating the path;


50
00:02:23,810 --> 00:02:26,513 line:-1
or pop to the root view
by removing all the items


51
00:02:26.513 --> 00:02:28.248 line:-1 position:50%
from the path.


52
00:02:28,248 --> 00:02:31,651 line:-1
In this talk, I'll show you
how the new navigation API


53
00:02:31.651 --> 00:02:34.955 line:-1 position:50%
enables data-driven
programmatic navigation.


54
00:02:34,955 --> 00:02:38,792 line:-1
I hope you find it
powerful and easy to use.


55
00:02:38.792 --> 00:02:42.629 line:-1 position:50%
Before jumping into recipes for
using the new navigation APIs,


56
00:02:42,629 --> 00:02:46,066 line:-1
I thought it would be helpful
to share what's on the menu.


57
00:02:46,066 --> 00:02:48,135 line:-1
I've really gotten
into cooking lately


58
00:02:48,135 --> 00:02:51,304 line:-1
and I've been working on an app
to keep track of my recipes.


59
00:02:51.304 --> 00:02:52.506 line:-1 position:50%
I have a lot of ideas


60
00:02:52.506 --> 00:02:55.075 line:-1 position:50%
about different ways
to present this info.


61
00:02:55.075 --> 00:02:58.178 line:-1 position:50%
For example,
here's a three-column approach.


62
00:02:58,178 --> 00:03:01,381 line:-1
The first column lets me
select a recipe category.


63
00:03:01,381 --> 00:03:02,883 line:-1
When I select a category,


64
00:03:02.883 --> 00:03:06.186 line:-1 position:50%
the second column lists
the recipes I've collected.


65
00:03:06.186 --> 00:03:07.554 line:-1 position:50%
And when I select a recipe,


66
00:03:07.554 --> 00:03:11.525 line:-1 position:50%
the detail area shows
the ingredients for that recipe.


67
00:03:11,525 --> 00:03:13,326 line:-1
The detail area also has links


68
00:03:13,326 --> 00:03:15,829 line:-1
to a selection
of related recipes.


69
00:03:15.829 --> 00:03:19.599 line:-1 position:50%
My grandma always said,
"The crust makes the pie."


70
00:03:19.599 --> 00:03:21.701 line:-1 position:50%
So that's what
we're cooking up today.


71
00:03:21.701 --> 00:03:24.638 line:-1 position:50%
Our ingredients are
the new navigation APIs.


72
00:03:24.638 --> 00:03:25.906 line:-1 position:50%
Let's dig into those,


73
00:03:25,906 --> 00:03:28,675 line:-1
then we'll look at some
specific navigation recipes


74
00:03:28.675 --> 00:03:31.578 line:-1 position:50%
that mix them together.


75
00:03:31,578 --> 00:03:34,081 line:-1
The new navigation APIs
introduce a couple


76
00:03:34.081 --> 00:03:36.416 line:-1 position:50%
of new container types
that you can use


77
00:03:36.416 --> 00:03:38.885 line:-1 position:50%
to describe
the structure of your app,


78
00:03:38.885 --> 00:03:41.521 line:-1 position:50%
along with a fresh new varietal
of NavigationLink


79
00:03:41,521 --> 00:03:45,492 line:-1
for helping your guests
move around that structure.


80
00:03:45.492 --> 00:03:48.728 line:-1 position:50%
The first new container
is NavigationStack.


81
00:03:48.728 --> 00:03:51.398 line:-1 position:50%
NavigationStack represents
a push-pop interface


82
00:03:51.398 --> 00:03:53.867 line:-1 position:50%
like you see
in Find My on Apple Watch,


83
00:03:53,867 --> 00:03:55,135 line:-1
Settings on iPhone,


84
00:03:55,135 --> 00:04:00,874 line:-1
and the new System Settings app
on macOS Ventura.


85
00:04:00,874 --> 00:04:04,945 line:-1
The second new container type
is NavigationSplitView.


86
00:04:04.945 --> 00:04:07.747 line:-1 position:50%
NavigationSplitView
is perfect for multicolumn apps


87
00:04:07.747 --> 00:04:11.418 line:-1 position:50%
like Mail or Notes
on Mac and iPad.


88
00:04:11.418 --> 00:04:13.820 line:-1 position:50%
And NavigationSplitView
automatically adapts


89
00:04:13,820 --> 00:04:16,323 line:-1
to a single-column stack
on iPhone,


90
00:04:16.323 --> 00:04:17.891 line:-1 position:50%
in Slide Over on iPad,


91
00:04:17,891 --> 00:04:20,927 line:-1
and even on Apple Watch
and Apple TV.


92
00:04:20.927 --> 00:04:24.097 line:-1 position:50%
NavigationSplitView
has two sets of initializers.


93
00:04:24,097 --> 00:04:29,970 line:-1
One set, like shown here,
creates a two-column experience.


94
00:04:29.970 --> 00:04:31.338 line:-1 position:50%
The other set of initializers


95
00:04:31,338 --> 00:04:33,840 line:-1
creates a three-column
experience.


96
00:04:33,840 --> 00:04:36,109 line:-1
NavigationSplitView
comes with a cartload


97
00:04:36,109 --> 00:04:39,446 line:-1
of configuration options that
let you customize column widths,


98
00:04:39,446 --> 00:04:41,281 line:-1
sidebar presentation,


99
00:04:41.281 --> 00:04:45.118 line:-1 position:50%
and even programmatically
show and hide columns.


100
00:04:45,118 --> 00:04:46,887 position:50%
I won't dive into
the configuration options


101
00:04:46,887 --> 00:04:50,223 line:0
in this talk, but please check
out my colleague Raj's talk,


102
00:04:50,223 --> 00:04:53,660 position:50%
"SwiftUI on iPad:
Organize your interface"


103
00:04:53,660 --> 00:04:55,996 line:0
and the great documentation
on how to tune


104
00:04:55,996 --> 00:05:00,634 line:0
NavigationSplitView
to be just right for your app.


105
00:05:00.634 --> 00:05:03.737 line:-1 position:50%
Previously, NavigationLinks
always included


106
00:05:03,737 --> 00:05:06,106 line:-1
a title and view to present.


107
00:05:06.106 --> 00:05:08.542 line:-1 position:50%
The new varieties
still include a title,


108
00:05:08.542 --> 00:05:10.510 line:-1 position:50%
but instead
of a view to present,


109
00:05:10,510 --> 00:05:12,379 line:-1
they present a value.


110
00:05:12.379 --> 00:05:14.181 line:-1 position:50%
For example,
this link is presenting


111
00:05:14.181 --> 00:05:16.349 line:-1 position:50%
the recipe for apple pie.


112
00:05:16.349 --> 00:05:18.718 line:-1 position:50%
As we'll see,
NavigationLink is smart.


113
00:05:18.718 --> 00:05:21.721 line:-1 position:50%
A link's behavior depends on
the NavigationStack or list


114
00:05:21.721 --> 00:05:24.758 line:-1 position:50%
that it appears in.


115
00:05:24,758 --> 00:05:28,295 line:-1
To see how these
tasty new APIs work together,


116
00:05:28,295 --> 00:05:31,097 line:-1
let's look at some specific
recipes for using them


117
00:05:31.097 --> 00:05:34.601 line:-1 position:50%
in my cookbook app,
and in your apps.


118
00:05:34.601 --> 00:05:37.137 line:-1 position:50%
Our first recipe
is a basic stack of views,


119
00:05:37,137 --> 00:05:39,306 line:-1
like you'd find in
Find My on Apple Watch


120
00:05:39.306 --> 00:05:41.374 line:-1 position:50%
or Settings on iPhone.


121
00:05:41.374 --> 00:05:43.910 line:-1 position:50%
I have a section
for each category.


122
00:05:43.910 --> 00:05:47.647 line:-1 position:50%
Within a section, I can tap
on a recipe to see the details.


123
00:05:47,647 --> 00:05:51,218 line:-1
Within any recipe, I can tap
one of the related recipes


124
00:05:51,218 --> 00:05:53,753 line:-1
to push it onto the stack.


125
00:05:53.753 --> 00:05:56.690 line:-1 position:50%
I can use the back button
to return to the original recipe


126
00:05:56,690 --> 00:06:01,728 line:-1
and then to the categories list.


127
00:06:01.728 --> 00:06:04.264 line:-1 position:50%
This recipe combines
a NavigationStack


128
00:06:04,264 --> 00:06:06,499 line:-1
with the new variety
of NavigationLink,


129
00:06:06,499 --> 00:06:09,536 line:-1
and a navigation
destination modifier.


130
00:06:09,536 --> 00:06:11,805 line:-1
Let's see how.


131
00:06:11,805 --> 00:06:15,175 line:-1
I'll start with a basic
NavigationStack.


132
00:06:15,175 --> 00:06:19,713 line:-1
Inside, I have a List that
iterates over all my categories


133
00:06:19,713 --> 00:06:22,315 line:-1
and a navigationTitle.


134
00:06:22,315 --> 00:06:26,453 line:-1
Inside the List, I have
a section for each category.


135
00:06:26,453 --> 00:06:30,123 line:-1
Next, inside each section,
I'll add a NavigationLink


136
00:06:30.123 --> 00:06:33.560 line:-1 position:50%
for each recipe in the category.


137
00:06:33.560 --> 00:06:36.896 line:-1 position:50%
For now, I'll make the link
present my RecipeDetail view.


138
00:06:36,896 --> 00:06:38,231 line:-1
This is using the existing


139
00:06:38,231 --> 00:06:41,001 line:-1
view destination
NavigationLink.


140
00:06:41.001 --> 00:06:43.069 line:-1 position:50%
And that's enough to get
this navigation experience


141
00:06:43,069 --> 00:06:45,338 line:-1
cooking along.


142
00:06:45.338 --> 00:06:48.275 line:-1 position:50%
But what about
programmatic navigation?


143
00:06:48.275 --> 00:06:50.210 line:-1 position:50%
To add programmatic navigation,


144
00:06:50,210 --> 00:06:53,680 line:-1
I need to tease apart two pieces
of this navigation link:


145
00:06:53,680 --> 00:06:55,582 line:-1
the value it presents


146
00:06:55,582 --> 00:06:57,951 line:-1
and the view
that goes with that value.


147
00:06:57,951 --> 00:06:59,853 line:-1
Let's see how.


148
00:06:59,853 --> 00:07:03,390 line:-1
First, I'll pull the destination
view out of the link


149
00:07:03.390 --> 00:07:08.028 line:-1 position:50%
and into the new
navigationDestination modifier.


150
00:07:08.028 --> 00:07:10.997 line:-1 position:50%
This modifier declares
the type of the presented data


151
00:07:10.997 --> 00:07:15.268 line:-1 position:50%
that it's responsible for;
here, that's a Recipe.


152
00:07:15,268 --> 00:07:17,270 line:-1
The modifier takes
a view builder


153
00:07:17,270 --> 00:07:20,173 line:-1
that describes what view
to push onto the stack


154
00:07:20.173 --> 00:07:23.910 line:-1 position:50%
when a recipe value
is presented.


155
00:07:23.910 --> 00:07:26.980 line:-1 position:50%
Then, I'll switch to one
of the new NavigationLinks


156
00:07:26.980 --> 00:07:30.050 line:-1 position:50%
and just present
the recipe value.


157
00:07:30.050 --> 00:07:31.117 line:-1 position:50%
Let's peek under the hood


158
00:07:31,117 --> 00:07:35,555 line:-1
and see how NavigationStack
makes this work.


159
00:07:35,555 --> 00:07:38,391 line:-1
Every navigation stack
keeps track of a path


160
00:07:38.391 --> 00:07:41.795 line:-1 position:50%
that represents all the data
that the stack is showing.


161
00:07:41,795 --> 00:07:43,830 line:-1
When the stack is
just showing its root view,


162
00:07:43.830 --> 00:07:47.267 line:-1 position:50%
like shown here,
the path is empty.


163
00:07:47.267 --> 00:07:49.436 line:-1 position:50%
Next, the stack also keeps track


164
00:07:49,436 --> 00:07:53,006 line:-1
of all the navigation
destinations declared inside it,


165
00:07:53,006 --> 00:07:55,842 line:-1
or inside any view
pushed onto the stack.


166
00:07:55.842 --> 00:07:58.378 line:-1 position:50%
In general, this is a set,
though for this example,


167
00:07:58.378 --> 00:08:01.448 line:-1 position:50%
we only have one destination.


168
00:08:01,448 --> 00:08:04,751 position:50%
Let's add the pushed views
to the diagram, too.


169
00:08:04,751 --> 00:08:09,255 position:50%
Now, because the path is empty,
so is the list of pushed views.


170
00:08:09,255 --> 00:08:10,690 line:0
Now, like milk and cookies,


171
00:08:10,690 --> 00:08:13,893 position:50%
the magic happens
when we put these together.


172
00:08:13,893 --> 00:08:16,162 line:-1
When I tap
a value-presenting link,


173
00:08:16.162 --> 00:08:19.099 line:-1 position:50%
it appends that value
to the path.


174
00:08:19,099 --> 00:08:23,169 line:0
Then, the navigation stack
maps its destinations over


175
00:08:23,169 --> 00:08:29,209 position:50%
the path values to decide which
views to push on the stack.


176
00:08:29.209 --> 00:08:34.180 line:-1 position:50%
Now, from my apple pie recipe,
if I tap Pie Crust,


177
00:08:34,180 --> 00:08:37,350 line:-1
the link appends
that to the path, too.


178
00:08:37,350 --> 00:08:42,021 line:-1
NavigationStack does its magic


179
00:08:42,021 --> 00:08:46,025 line:0
and pushes another RecipeDetail
view onto the stack.


180
00:08:46,025 --> 00:08:48,194 line:-1
For every value
I add to the path,


181
00:08:48.194 --> 00:08:51.831 line:-1 position:50%
NavigationStack
pushes another view.


182
00:08:51.831 --> 00:08:54.567 line:-1 position:50%
When I tap the back button,


183
00:08:54,567 --> 00:08:57,470 line:-1
NavigationStack removes
the last item from the path


184
00:08:57,470 --> 00:08:59,672 line:-1
and from the pushed views.


185
00:08:59.672 --> 00:09:02.642 line:-1 position:50%
And NavigationStack
has one more trick to offer.


186
00:09:02,642 --> 00:09:06,045 line:-1
It lets us connect to this path
using a binding.


187
00:09:06,045 --> 00:09:08,548 line:-1
Let's go back to our code.


188
00:09:08.548 --> 00:09:10.750 line:-1 position:50%
Here's where we were.


189
00:09:10,750 --> 00:09:13,686 line:-1
To bind the path,
first I'll add some State.


190
00:09:13,686 --> 00:09:17,023 line:-1
Because every value pushed
on this stack is a recipe,


191
00:09:17.023 --> 00:09:20.293 line:-1 position:50%
I can use an array
of recipes as my path.


192
00:09:20.293 --> 00:09:22.929 line:-1 position:50%
If you need to present
a variety of data on a stack,


193
00:09:22.929 --> 00:09:23.830 line:-1 position:50%
be sure to check out


194
00:09:23.830 --> 00:09:29.836 line:-1 position:50%
the new type-erasing
NavigationPath collection.


195
00:09:29,836 --> 00:09:32,505 line:-1
Once I have my path state,
I add an argument


196
00:09:32.505 --> 00:09:36.209 line:-1 position:50%
to my NavigationStack
and pass a binding to the path.


197
00:09:36.209 --> 00:09:40.280 line:-1 position:50%
With that in place,
I can make my stack sizzle.


198
00:09:40.280 --> 00:09:42.182 line:-1 position:50%
For example,
I could add a method


199
00:09:42,182 --> 00:09:44,751 line:-1
to jump to a particular recipe.


200
00:09:44.751 --> 00:09:46.152 line:-1 position:50%
Or from anywhere on my stack,


201
00:09:46.152 --> 00:09:51.157 line:-1 position:50%
I can pop back to the root
just by resetting the path.


202
00:09:51.157 --> 00:09:53.793 line:-1 position:50%
That's how to prepare
a pushable stack using


203
00:09:53,793 --> 00:09:55,628 line:-1
the new NavigationStack,


204
00:09:55.628 --> 00:09:57.864 line:-1 position:50%
value-presenting
NavigationLinks,


205
00:09:57,864 --> 00:10:02,068 line:-1
and navigationDestinations
in SwiftUI.


206
00:10:02.068 --> 00:10:05.338 line:-1 position:50%
This recipe works on all
platforms, including the Mac,


207
00:10:05.338 --> 00:10:10.076 line:-1 position:50%
but really shines on iPhone,
Apple TV, and Apple Watch.


208
00:10:10,076 --> 00:10:12,912 position:50%
To see NavigationStack in
action, be sure to check out


209
00:10:12,912 --> 00:10:18,251 line:0
"Build a productivity app
for Apple Watch."


210
00:10:18.251 --> 00:10:21.387 line:-1 position:50%
Our next recipe is for
multicolumn presentation


211
00:10:21,387 --> 00:10:25,792 line:-1
without any stacks, like you'd
find in Mail on Mac and iPad.


212
00:10:25,792 --> 00:10:28,661 line:-1
On iPad,
the sidebar is initially hidden.


213
00:10:28.661 --> 00:10:31.164 line:-1 position:50%
I can reveal it
and choose a category.


214
00:10:31,164 --> 00:10:34,334 line:-1
Then, in the second column,
I can choose a recipe.


215
00:10:34.334 --> 00:10:38.471 line:-1 position:50%
The third column
shows the recipe details.


216
00:10:38,471 --> 00:10:41,708 line:-1
This recipe combines
a NavigationSplitView


217
00:10:41,708 --> 00:10:43,877 line:-1
with the new variety
of NavigationLink,


218
00:10:43,877 --> 00:10:45,678 line:-1
and a List selection.


219
00:10:45.678 --> 00:10:47.914 line:-1 position:50%
This recipe is great
on larger devices


220
00:10:47.914 --> 00:10:50.049 line:-1 position:50%
because it helps avoid modality.


221
00:10:50.049 --> 00:10:53.286 line:-1 position:50%
I can see all my information
without having to drill in.


222
00:10:53.286 --> 00:10:55.522 line:-1 position:50%
Let's see how.


223
00:10:55.522 --> 00:10:59.092 line:-1 position:50%
I'll start with a three-column
NavigationSplitView


224
00:10:59,092 --> 00:11:02,462 line:-1
with placeholder views
for the content and detail.


225
00:11:02.462 --> 00:11:04.664 line:-1 position:50%
Then, I'll add a List
in the sidebar


226
00:11:04,664 --> 00:11:07,700 line:-1
that iterates over
all my categories,


227
00:11:07.700 --> 00:11:09.869 line:-1 position:50%
and a navigationTitle.


228
00:11:09.869 --> 00:11:10.970 line:-1 position:50%
Inside the List,


229
00:11:10.970 --> 00:11:14.541 line:-1 position:50%
I have a NavigationLink
for each category.


230
00:11:14.541 --> 00:11:16.476 line:-1 position:50%
Next, I'll introduce some State


231
00:11:16.476 --> 00:11:19.479 line:-1 position:50%
to keep track of which category
is selected.


232
00:11:19.479 --> 00:11:21.014 line:-1 position:50%
I'll tweak our list
in the sidebar


233
00:11:21,014 --> 00:11:23,283 line:-1
to use the selectedCategory.


234
00:11:23,283 --> 00:11:26,019 line:-1
Note that we're passing
a binding to the selection.


235
00:11:26,019 --> 00:11:27,987 line:-1
This lets the list
and its contents


236
00:11:27.987 --> 00:11:30.423 line:-1 position:50%
manipulate the selection.


237
00:11:30,423 --> 00:11:32,792 line:-1
When you put a value-presenting
link inside a list


238
00:11:32.792 --> 00:11:35.028 line:-1 position:50%
with a matching
selection type --


239
00:11:35,028 --> 00:11:37,730 line:-1
category here --
the link will automatically


240
00:11:37.730 --> 00:11:41.100 line:-1 position:50%
update the selection
when tapped or clicked.


241
00:11:41.100 --> 00:11:43.670 line:-1 position:50%
So now when I select
a category in the sidebar,


242
00:11:43.670 --> 00:11:47.140 line:-1 position:50%
SwiftUI updates
the selectedCategory.


243
00:11:47,140 --> 00:11:49,208 line:-1
Check out Raj's
"Organize your interface" talk


244
00:11:49,208 --> 00:11:50,476 line:-1
that I mentioned earlier


245
00:11:50,476 --> 00:11:56,349 line:-1
for some great information
on selection and lists.


246
00:11:56,349 --> 00:11:58,484 line:-1
Next,
I'll replace my placeholder


247
00:11:58.484 --> 00:12:00.987 line:-1 position:50%
in the content column
with a list of the recipes


248
00:12:00.987 --> 00:12:03.523 line:-1 position:50%
for the selected category,


249
00:12:03,523 --> 00:12:06,893 line:-1
and add a navigationTitle
for this column too.


250
00:12:06,893 --> 00:12:09,028 line:-1
Just like
for the selected category,


251
00:12:09,028 --> 00:12:10,463 line:-1
I can use the same technique


252
00:12:10,463 --> 00:12:14,567 line:-1
to keep track of the selected
recipe in the content list.


253
00:12:14,567 --> 00:12:17,337 line:-1
I'll use State
for the selectedRecipe,


254
00:12:17,337 --> 00:12:20,206 line:-1
have my content list
use that state,


255
00:12:20,206 --> 00:12:24,444 line:-1
and use a value-presenting link
for each recipe.


256
00:12:24,444 --> 00:12:26,446 line:-1
Finally,
I'll update the detail column


257
00:12:26.446 --> 00:12:30.917 line:-1 position:50%
to show, well, the details
for the selectedRecipe.


258
00:12:30.917 --> 00:12:32.051 line:-1 position:50%
With this in place,


259
00:12:32.051 --> 00:12:37.790 line:-1 position:50%
I again have full programmatic
control over navigation.


260
00:12:37,790 --> 00:12:40,727 line:-1
For example, to navigate
to my recipe of the day,


261
00:12:40,727 --> 00:12:45,665 line:-1
I just need to update
my selection state.


262
00:12:45.665 --> 00:12:47.433 line:-1 position:50%
That's how to prepare
a multi-column


263
00:12:47.433 --> 00:12:51.504 line:-1 position:50%
navigation experience using
the new NavigationSplitView,


264
00:12:51,504 --> 00:12:54,774 line:-1
value-presenting
NavigationLinks,


265
00:12:54.774 --> 00:13:00.446 line:-1 position:50%
and Lists with selection
in SwiftUI.


266
00:13:00.446 --> 00:13:03.282 line:-1 position:50%
One super cool thing
about combining List selection


267
00:13:03.282 --> 00:13:05.084 line:-1 position:50%
and NavigationSplitView
like this,


268
00:13:05,084 --> 00:13:07,820 line:-1
is that SwiftUI
can automatically adapt


269
00:13:07.820 --> 00:13:10.723 line:-1 position:50%
the split view
to a single stack on iPhone


270
00:13:10.723 --> 00:13:14.127 line:-1 position:50%
or in Slide Over on iPad.


271
00:13:14.127 --> 00:13:16.763 line:-1 position:50%
Changes to selection
automatically translate


272
00:13:16.763 --> 00:13:20.667 line:-1 position:50%
into the appropriate
pushes and pops on iPhone.


273
00:13:20.667 --> 00:13:22.535 line:-1 position:50%
Of course,
this multicolumn presentation


274
00:13:22.535 --> 00:13:24.671 line:-1 position:50%
also works great on the Mac.


275
00:13:24,671 --> 00:13:26,539 line:-1
And although Apple TV
and Apple Watch


276
00:13:26,539 --> 00:13:29,842 line:-1
don't show multiple columns,
those platforms also get


277
00:13:29,842 --> 00:13:33,346 line:-1
the automatic translation
to a single stack.


278
00:13:33,346 --> 00:13:39,118 line:-1
NavigationSplitView in SwiftUI
works on all platforms.


279
00:13:39,118 --> 00:13:42,021 line:-1
Next, let's look at how we can
put all these ingredients


280
00:13:42,021 --> 00:13:45,525 line:-1
together by building a
two-column navigation experience


281
00:13:45.525 --> 00:13:48.628 line:-1 position:50%
like that in Photos
on iPad and Mac.


282
00:13:48,628 --> 00:13:50,096 line:-1
When I select a category,


283
00:13:50,096 --> 00:13:55,234 line:-1
the detail area shows a grid of
all my recipes in that category.


284
00:13:55.234 --> 00:13:58.004 line:-1 position:50%
When I tap a recipe,
it's pushed onto a stack


285
00:13:58,004 --> 00:13:59,806 line:-1
in the detail area.


286
00:13:59.806 --> 00:14:03.543 line:-1 position:50%
When I tap a related recipe,
it's also pushed onto the stack.


287
00:14:03,543 --> 00:14:07,013 line:-1
And I can navigate back
to the grid of recipes.


288
00:14:10.016 --> 00:14:12.952 line:-1 position:50%
This recipe is our
pièce de résistance,


289
00:14:12.952 --> 00:14:14.887 line:-1 position:50%
combining navigation split view,


290
00:14:14,887 --> 00:14:17,857 line:-1
stack, link, destination,
and list.


291
00:14:17,857 --> 00:14:21,661 line:-1
Let's see how all these
ingredients go together.


292
00:14:21,661 --> 00:14:24,797 line:-1
I'll start with a two-column
NavigationSplitView.


293
00:14:24.797 --> 00:14:27.800 line:-1 position:50%
The first column is exactly
like the previous recipe.


294
00:14:27.800 --> 00:14:30.770 line:-1 position:50%
I have some State to track
the selectedCategory


295
00:14:30,770 --> 00:14:33,539 line:-1
and a List that uses
a binding to that state


296
00:14:33.539 --> 00:14:36.509 line:-1 position:50%
and a value-presenting
NavigationLink,


297
00:14:36.509 --> 00:14:39.045 line:-1 position:50%
and the requisite
navigationTitle.


298
00:14:39,045 --> 00:14:42,782 line:-1
The differences in this recipe
are in the detail area.


299
00:14:42.782 --> 00:14:46.419 line:-1 position:50%
The new navigation APIs really
take advantage of composition.


300
00:14:46.419 --> 00:14:48.154 line:-1 position:50%
Just like I can put a list


301
00:14:48,154 --> 00:14:51,190 line:-1
inside a column
of a NavigationSplitView,


302
00:14:51,190 --> 00:14:56,028 line:-1
I can also put a NavigationStack
inside a column.


303
00:14:56.028 --> 00:14:58.264 line:-1 position:50%
The root view
of this Navigation Stack


304
00:14:58.264 --> 00:15:00.233 line:-1 position:50%
is my RecipeGrid.


305
00:15:00.233 --> 00:15:04.337 line:-1 position:50%
Notice that the RecipeGrid
is inside the NavigationStack.


306
00:15:04.337 --> 00:15:06.639 line:-1 position:50%
That means I can put
stack-related modifiers


307
00:15:06,639 --> 00:15:09,075 line:-1
inside RecipeGrid.


308
00:15:09,075 --> 00:15:11,077 line:-1
Let's zoom in to
the body of RecipeGrid


309
00:15:11.077 --> 00:15:14.847 line:-1 position:50%
to see what that means.


310
00:15:14.847 --> 00:15:18.584 line:-1 position:50%
RecipeGrid is a view and takes
a category as a parameter.


311
00:15:18.584 --> 00:15:22.622 line:-1 position:50%
Because category is optional
here, I'll start with an if-let.


312
00:15:22.622 --> 00:15:25.825 line:-1 position:50%
The else case handles
an empty selection.


313
00:15:25,825 --> 00:15:30,263 line:-1
Inside my if, I'll add
a scroll view and a lazy grid.


314
00:15:30,263 --> 00:15:33,166 line:-1
Lazy grid layout
takes a sequence of views.


315
00:15:33,166 --> 00:15:36,569 line:-1
Here, I'm using ForEach
to iterate over my recipes.


316
00:15:36.569 --> 00:15:37.770 line:-1 position:50%
For each recipe,


317
00:15:37.770 --> 00:15:41.107 line:-1 position:50%
I have a value-presenting
NavigationLink.


318
00:15:41,107 --> 00:15:43,576 line:-1
The link presents
a recipe value.


319
00:15:43,576 --> 00:15:45,878 line:-1
The link's label,
in this trailing closure,


320
00:15:45,878 --> 00:15:50,449 line:-1
is my RecipeTile
with the thumbnail and title.


321
00:15:50,449 --> 00:15:52,852 line:-1
So what's left
to finish this grid?


322
00:15:52,852 --> 00:15:54,453 line:-1
Well, I haven't told
the NavigationStack


323
00:15:54.453 --> 00:15:57.723 line:-1 position:50%
how to map
from recipes to detail views.


324
00:15:57,723 --> 00:15:59,659 line:-1
Like I mentioned
with the first recipe,


325
00:15:59,659 --> 00:16:01,127 line:-1
the new NavigationStack


326
00:16:01.127 --> 00:16:04.030 line:-1 position:50%
uses the navigationDestination
modifier


327
00:16:04.030 --> 00:16:08.034 line:-1 position:50%
to map from values on its path
to views shown on the stack.


328
00:16:08.034 --> 00:16:11.737 line:-1 position:50%
So let's add a
navigationDestination modifier.


329
00:16:11.737 --> 00:16:14.440 line:-1 position:50%
But where should I attach it?


330
00:16:14,440 --> 00:16:17,276 line:-1
I'm tempted to attach it
directly to the link,


331
00:16:17,276 --> 00:16:19,779 line:-1
but this is wrong
for two reasons.


332
00:16:19.779 --> 00:16:23.683 line:-1 position:50%
Lazy containers, like List,
Table, or, here, LazyVGrid,


333
00:16:23,683 --> 00:16:26,485 line:-1
don't load all of their views
immediately.


334
00:16:26,485 --> 00:16:28,087 line:-1
If I put the modifier here,


335
00:16:28.087 --> 00:16:30.122 line:-1 position:50%
the destination
might not be loaded,


336
00:16:30,122 --> 00:16:31,858 line:-1
so the surrounding
NavigationStack


337
00:16:31.858 --> 00:16:33.793 line:-1 position:50%
might not see it.


338
00:16:33,793 --> 00:16:36,062 line:-1
Second, if I put
the modifier here,


339
00:16:36,062 --> 00:16:39,465 line:-1
it will be repeated
for every item in my grid.


340
00:16:39.465 --> 00:16:43.870 line:-1 position:50%
Instead, I'll attach
the modifier to my ScrollView.


341
00:16:43.870 --> 00:16:47.039 line:-1 position:50%
By attaching the modifier
outside the ScrollView,


342
00:16:47,039 --> 00:16:49,008 line:-1
I ensure that
the NavigationStack


343
00:16:49,008 --> 00:16:51,377 line:-1
can see
this navigationDestination


344
00:16:51,377 --> 00:16:54,280 line:-1
regardless
of the scroll position.


345
00:16:54,280 --> 00:16:57,083 line:-1
Another thing I like about
putting the modifier here


346
00:16:57,083 --> 00:17:00,152 line:-1
is that it's still close
to the links that target it.


347
00:17:00,152 --> 00:17:04,290 line:-1
Navigation destination gives me
flexibility to organize my code


348
00:17:04.290 --> 00:17:07.827 line:-1 position:50%
the way that makes sense
to me or my team.


349
00:17:07,827 --> 00:17:10,363 line:-1
Popping back
to my NavigationSplitView,


350
00:17:10,363 --> 00:17:11,964 line:-1
there's just one more thing


351
00:17:11.964 --> 00:17:14.867 line:-1 position:50%
to enable full programmatic
navigation here.


352
00:17:14.867 --> 00:17:17.937 line:-1 position:50%
I need to add a navigation path.


353
00:17:17,937 --> 00:17:20,506 line:-1
I'll add State to hold the path


354
00:17:20,506 --> 00:17:24,043 line:-1
and bind the state
to my NavigationStack.


355
00:17:24,043 --> 00:17:27,380 line:-1
With full programmatic
navigation in place,


356
00:17:27.380 --> 00:17:29.849 line:-1 position:50%
I can write a method
to show my recipe of the day


357
00:17:29,849 --> 00:17:33,052 line:-1
in this navigation experience.


358
00:17:33.052 --> 00:17:33.986 line:-1 position:50%
That's how to prepare


359
00:17:33,986 --> 00:17:37,189 line:-1
a multicolumn navigation
experience with stacks


360
00:17:37,189 --> 00:17:40,459 line:-1
using the new
NavigationSplitView,


361
00:17:40.459 --> 00:17:42.061 line:-1 position:50%
NavigationStack,


362
00:17:42.061 --> 00:17:44.096 line:-1 position:50%
value-presenting
NavigationLinks,


363
00:17:44,096 --> 00:17:48,801 line:-1
and Lists with selection
in SwiftUI.


364
00:17:48,801 --> 00:17:51,904 line:-1
As with the previous recipe,
this one also automatically


365
00:17:51.904 --> 00:17:57.243 line:-1 position:50%
adapts to narrow presentations
and works on all platforms.


366
00:17:57.243 --> 00:17:59.545 line:-1 position:50%
It was fun exploring
these recipes for structuring


367
00:17:59,545 --> 00:18:04,417 line:-1
the navigation in my app,
but our navigation feast


368
00:18:04,417 --> 00:18:06,986 line:-1
wouldn't be complete
without dessert.


369
00:18:06.986 --> 00:18:11.457 line:-1 position:50%
For that, let's look at how
to persist the navigation state.


370
00:18:11,457 --> 00:18:13,726 line:-1
To persist navigation state
in my app,


371
00:18:13.726 --> 00:18:15.661 line:-1 position:50%
I just need
two more ingredients:


372
00:18:15.661 --> 00:18:18.764 line:-1 position:50%
Codable and SceneStorage.


373
00:18:18,764 --> 00:18:21,367 line:-1
This recipe
has three basic steps.


374
00:18:21,367 --> 00:18:23,736 line:-1
First, I'll encapsulate
my navigation state


375
00:18:23.736 --> 00:18:26.238 line:-1 position:50%
in a NavigationModel type.


376
00:18:26,238 --> 00:18:28,507 line:-1
That lets me save
and restore it as a unit


377
00:18:28,507 --> 00:18:30,843 line:-1
so it's always consistent.


378
00:18:30,843 --> 00:18:34,580 line:-1
Then, I'll make my
navigation model Codable.


379
00:18:34.580 --> 00:18:38.784 line:-1 position:50%
Finally, I'll use SceneStorage
to save and restore my model.


380
00:18:38.784 --> 00:18:40.386 line:-1 position:50%
I'll have to take care
along the way --


381
00:18:40.386 --> 00:18:43.122 line:-1 position:50%
I don't want my app to crash
like a fallen soufflé --


382
00:18:43,122 --> 00:18:45,858 line:-1
but the steps
are straightforward.


383
00:18:45.858 --> 00:18:48.127 line:-1 position:50%
Let's look at step one.


384
00:18:48.127 --> 00:18:51.030 line:-1 position:50%
Here's the code
from the end of our last recipe.


385
00:18:51.030 --> 00:18:54.233 line:-1 position:50%
My navigation state is stored
in the selectedCategory


386
00:18:54.233 --> 00:18:55.935 line:-1 position:50%
and path properties.


387
00:18:55.935 --> 00:18:59.472 line:-1 position:50%
The selectedCategory tracks
the selection in the sidebar.


388
00:18:59,472 --> 00:19:02,141 line:-1
The path tracks the views
pushed onto the stack


389
00:19:02,141 --> 00:19:04,310 line:-1
in the detail area.


390
00:19:04.310 --> 00:19:06.979 line:-1 position:50%
I'll introduce
a new NavigationModel class


391
00:19:06.979 --> 00:19:12.718 line:-1 position:50%
and make it conform
to ObservableObject.


392
00:19:12.718 --> 00:19:17.490 line:-1 position:50%
Next, I'll move my navigation
state into my model object,


393
00:19:17,490 --> 00:19:22,161 line:-1
changing the property wrappers
from State to Published.


394
00:19:22,161 --> 00:19:24,497 line:-1
Then,
I'll introduce a StateObject


395
00:19:24,497 --> 00:19:27,900 line:-1
to hold an instance
of my NavigationModel


396
00:19:27,900 --> 00:19:33,072 line:-1
and change the parameters
to use the new model object.


397
00:19:33.072 --> 00:19:37.043 line:-1 position:50%
Next, I'll make my
navigation model Codable.


398
00:19:37,043 --> 00:19:38,811 line:-1
I'll start by adding
the Codable conformance


399
00:19:38,811 --> 00:19:39,612 line:-1
to the class.


400
00:19:39,612 --> 00:19:41,113 line:-1
In many cases,


401
00:19:41,113 --> 00:19:43,816 line:-1
Swift can automatically generate
Codable conformance,


402
00:19:43.816 --> 00:19:46.919 line:-1 position:50%
but I want to implement
my own conformance here.


403
00:19:46.919 --> 00:19:50.256 line:-1 position:50%
The main reason is that
Recipe is a model value.


404
00:19:50,256 --> 00:19:52,425 line:-1
I don't want to store
the entire model value


405
00:19:52.425 --> 00:19:54.093 line:-1 position:50%
for state restoration.


406
00:19:54,093 --> 00:19:55,928 line:-1
There are two reasons for this.


407
00:19:55,928 --> 00:19:57,897 line:-1
First, my recipe database


408
00:19:57.897 --> 00:20:00.766 line:-1 position:50%
already contains all the details
for the recipe.


409
00:20:00,766 --> 00:20:03,369 line:-1
It's not a good use of storage
to repeat that information


410
00:20:03.369 --> 00:20:06.038 line:-1 position:50%
in my saved navigation state.


411
00:20:06,038 --> 00:20:09,241 line:-1
Second, if my recipe database
can change independently


412
00:20:09.241 --> 00:20:11.410 line:-1 position:50%
of my local navigation state --


413
00:20:11.410 --> 00:20:14.747 line:-1 position:50%
say, because I finally get
around to adding syncing --


414
00:20:14,747 --> 00:20:19,819 line:-1
I don't want my local navigation
state to contain stale data.


415
00:20:19.819 --> 00:20:23.155 line:-1 position:50%
For custom codability,
next I'll add CodingKeys.


416
00:20:23,155 --> 00:20:25,458 line:-1
One of the keys
is just selectedCategory.


417
00:20:25.458 --> 00:20:29.728 line:-1 position:50%
But notice that I named
the other "recipePathIds”


418
00:20:29.728 --> 00:20:30.729 line:-1 position:50%
I'm planning to just store


419
00:20:30.729 --> 00:20:34.233 line:-1 position:50%
the identifiers of the recipes
on the path.


420
00:20:34.233 --> 00:20:37.002 line:-1 position:50%
In my encode method,
I'll create a keyed container


421
00:20:37,002 --> 00:20:40,106 line:-1
using my coding keys
and add the selected category


422
00:20:40.106 --> 00:20:42.808 line:-1 position:50%
to the container.


423
00:20:42.808 --> 00:20:44.677 line:-1 position:50%
I'm using encodeIfPresent,


424
00:20:44,677 --> 00:20:48,881 line:-1
so I only write the value
if it's non-nil.


425
00:20:48,881 --> 00:20:52,418 line:-1
Then, I'll add
the recipe path identifiers.


426
00:20:52.418 --> 00:20:54.220 line:-1 position:50%
Note that I'm
mapping over the path


427
00:20:54.220 --> 00:20:57.056 line:-1 position:50%
to get the identifiers
to encode.


428
00:20:57,056 --> 00:20:59,458 line:-1
For example,
suppose my navigation state


429
00:20:59,458 --> 00:21:02,495 line:-1
included Dessert
as a selected category,


430
00:21:02.495 --> 00:21:05.331 line:-1 position:50%
with Apple Pie
and Pie Crust on the path,


431
00:21:05,331 --> 00:21:07,933 line:-1
like shown
in the green box on top.


432
00:21:07,933 --> 00:21:14,273 position:50%
This might be encoded to JSON,
like shown in this other box.


433
00:21:14.273 --> 00:21:15.941 line:-1 position:50%
To finish up Codability,


434
00:21:15,941 --> 00:21:18,277 line:-1
I'll add the required
initializer.


435
00:21:18,277 --> 00:21:22,381 line:-1
The interesting bit is here
where I decode the recipe IDs,


436
00:21:22.381 --> 00:21:23.983 line:-1 position:50%
then use my shared data model


437
00:21:23.983 --> 00:21:28.354 line:-1 position:50%
to convert the IDs
back into recipes.


438
00:21:28.354 --> 00:21:30.856 line:-1 position:50%
I'm using compactMap
to discard any recipes


439
00:21:30,856 --> 00:21:32,324 line:-1
that couldn't be found.


440
00:21:32.324 --> 00:21:34.827 line:-1 position:50%
For example, this might happen
if I delete a recipe


441
00:21:34.827 --> 00:21:37.830 line:-1 position:50%
on another device
after I have sync working --


442
00:21:37,830 --> 00:21:40,666 line:-1
something I'm definitely
going to do someday.


443
00:21:40.666 --> 00:21:42.868 line:-1 position:50%
This is a place you'll need
to use discretion


444
00:21:42.868 --> 00:21:46.105 line:-1 position:50%
in your own apps to make sure
any restored navigation state


445
00:21:46.105 --> 00:21:50.142 line:-1 position:50%
still makes sense.


446
00:21:50.142 --> 00:21:52.111 line:-1 position:50%
Finally,
I'll add a computed property


447
00:21:52.111 --> 00:21:56.749 line:-1 position:50%
for reading and writing
my model as JSON data.


448
00:21:56.749 --> 00:21:58.284 line:-1 position:50%
Now that I have
a navigation model


449
00:21:58.284 --> 00:22:00.586 line:-1 position:50%
and it knows how to encode
and decode itself,


450
00:22:00.586 --> 00:22:03.856 line:-1 position:50%
all that's left is to actually
save and restore it.


451
00:22:03,856 --> 00:22:07,092 line:-1
For that I'll use SceneStorage.


452
00:22:07.092 --> 00:22:09.161 line:-1 position:50%
Here's where we left
our main view.


453
00:22:09.161 --> 00:22:12.231 line:-1 position:50%
I was using a StateObject
to hold my NavigationModel.


454
00:22:12,231 --> 00:22:14,667 line:-1
Now, I'll introduce
some SceneStorage


455
00:22:14,667 --> 00:22:18,204 line:-1
to persist my NavigationModel.


456
00:22:18,204 --> 00:22:21,040 line:-1
SceneStorage properties
automatically save and restore


457
00:22:21.040 --> 00:22:22.942 line:-1 position:50%
their associated values.


458
00:22:22,942 --> 00:22:26,312 line:-1
When the type of the storage
is optional, like my data here,


459
00:22:26,312 --> 00:22:30,049 line:-1
the value is nil when
a new scene is created.


460
00:22:30,049 --> 00:22:31,784 line:-1
When the system
restores a scene,


461
00:22:31,784 --> 00:22:35,187 line:-1
SwiftUI ensures that the value
of the SceneStorage property


462
00:22:35,187 --> 00:22:36,922 line:-1
is also restored.


463
00:22:36,922 --> 00:22:40,926 line:-1
I'll take advantage of this
to persist my NavigationModel.


464
00:22:40,926 --> 00:22:45,431 line:-1
To do that, I'll add
a task modifier to my view.


465
00:22:45,431 --> 00:22:48,534 line:-1
The task modifier
runs its closure asynchronously.


466
00:22:48,534 --> 00:22:50,202 line:-1
It starts when the view appears


467
00:22:50,202 --> 00:22:53,772 line:-1
and is cancelled
when the view goes away.


468
00:22:53,772 --> 00:22:56,508 line:-1
Whenever my view appears,
I'll first check whether I have


469
00:22:56.508 --> 00:23:00.913 line:-1 position:50%
any existing data
from a previous run of the app.


470
00:23:00.913 --> 00:23:05.451 line:-1 position:50%
If so, I'll update my
navigation model with that data.


471
00:23:05.451 --> 00:23:09.121 line:-1 position:50%
Then, I'll start an asynchronous
for loop that will iterate


472
00:23:09,121 --> 00:23:11,657 line:-1
whenever my
navigation model changes.


473
00:23:11.657 --> 00:23:15.194 line:-1 position:50%
The body of this loop
will run on each change,


474
00:23:15,194 --> 00:23:17,596 line:-1
so I can use that
to save my navigation state


475
00:23:17.596 --> 00:23:21.634 line:-1 position:50%
back to my scene storage data.


476
00:23:21.634 --> 00:23:23.369 line:-1 position:50%
And that's it!


477
00:23:23.369 --> 00:23:24.670 line:-1 position:50%
When I leave my app
to go check out


478
00:23:24,670 --> 00:23:27,539 line:-1
some vintage Julia Child
cooking shows on the web,


479
00:23:27,539 --> 00:23:29,308 line:-1
it remembers where I was.


480
00:23:29,308 --> 00:23:30,643 line:-1
When I return to the app,


481
00:23:30.643 --> 00:23:34.146 line:-1 position:50%
it takes me back
to where I left off.


482
00:23:34.146 --> 00:23:35.814 line:-1 position:50%
Now, no cookbook
would be complete


483
00:23:35.814 --> 00:23:39.418 line:-1 position:50%
without a weird section at
the end with handy kitchen tips.


484
00:23:39,418 --> 00:23:41,987 line:-1
I don't have three great
substitutes for cilantro,


485
00:23:41,987 --> 00:23:45,791 line:-1
but I do have some
navigation tips to share.


486
00:23:45,791 --> 00:23:47,860 line:-1
Switch to the new
NavigationStack


487
00:23:47,860 --> 00:23:50,929 line:-1
and NavigationSplitView
as soon as you can.


488
00:23:50,929 --> 00:23:53,932 line:-1
If you're using NavigationView
with the stack style,


489
00:23:53.932 --> 00:23:55.901 line:-1 position:50%
switch to NavigationStack.


490
00:23:55,901 --> 00:23:59,438 line:-1
NavigationStack is also
a good first choice on Apple TV,


491
00:23:59,438 --> 00:24:03,008 line:-1
Apple Watch,
or in sheets on iPad and iPhone,


492
00:24:03.008 --> 00:24:06.211 line:-1 position:50%
where the stack style
has always been the default.


493
00:24:06.211 --> 00:24:08.781 line:-1 position:50%
If you're using
a multicolumn NavigationView,


494
00:24:08.781 --> 00:24:11.450 line:-1 position:50%
switch to NavigationSplitView.


495
00:24:11.450 --> 00:24:14.520 line:-1 position:50%
And if you've already adopted
programmatic navigation


496
00:24:14,520 --> 00:24:16,422 line:-1
using the links
that take bindings,


497
00:24:16.422 --> 00:24:18.190 line:-1 position:50%
I strongly encourage you to move


498
00:24:18,190 --> 00:24:20,893 line:-1
to the new value-presenting
NavigationLink


499
00:24:20,893 --> 00:24:24,663 line:-1
along with navigation paths
and list selection.


500
00:24:24,663 --> 00:24:27,633 line:-1
The old-style programmatic links
are deprecated


501
00:24:27,633 --> 00:24:31,937 line:-1
beginning in iOS 16
and aligned releases.


502
00:24:31,937 --> 00:24:35,240 position:50%
For details and examples
on migrating to the new APIs,


503
00:24:35,240 --> 00:24:36,542 line:0
check out the article,


504
00:24:36,542 --> 00:24:38,644 position:50%
"Migrating to new
navigation types"


505
00:24:38,644 --> 00:24:41,814 position:50%
in the developer documentation.


506
00:24:41.814 --> 00:24:45.184 line:-1 position:50%
Next, keep in mind that List
and the new NavigationSplitView


507
00:24:45,184 --> 00:24:48,520 line:-1
and NavigationStack
were made to mix together.


508
00:24:48,520 --> 00:24:51,357 line:-1
Compose them to create
navigation experiences


509
00:24:51,357 --> 00:24:54,059 line:-1
your guests will love.


510
00:24:54.059 --> 00:24:56.962 line:-1 position:50%
When using navigation stacks,
navigation destinations


511
00:24:56,962 --> 00:25:00,632 line:-1
can be anywhere inside
the stack or its subviews.


512
00:25:00.632 --> 00:25:03.369 line:-1 position:50%
Consider putting destinations
near the corresponding links


513
00:25:03,369 --> 00:25:05,104 line:-1
to make maintenance easier,


514
00:25:05,104 --> 00:25:08,907 line:-1
but remember not to put them
inside of lazy containers.


515
00:25:08,907 --> 00:25:11,176 line:-1
Finally, I'd encourage you
to start building


516
00:25:11.176 --> 00:25:14.213 line:-1 position:50%
your navigation experiences
with NavigationSplitView


517
00:25:14.213 --> 00:25:15.681 line:-1 position:50%
when it makes sense.


518
00:25:15.681 --> 00:25:17.783 line:-1 position:50%
Even if you're initially
developing for iPhone,


519
00:25:17.783 --> 00:25:20.185 line:-1 position:50%
NavigationSplitView
will automatically adapt


520
00:25:20.185 --> 00:25:22.087 line:-1 position:50%
to the narrower device.


521
00:25:22.087 --> 00:25:25.424 line:-1 position:50%
And when you're ready to support
iPhone Pro Max in landscape,


522
00:25:25.424 --> 00:25:27.793 line:-1 position:50%
or to bring your app
to iPad or Mac,


523
00:25:27.793 --> 00:25:29.061 line:-1 position:50%
NavigationSplitView


524
00:25:29,061 --> 00:25:32,498 line:-1
will take advantage
of all that additional space.


525
00:25:32,498 --> 00:25:33,532 line:-1
Thanks for the chance


526
00:25:33,532 --> 00:25:36,935 line:-1
to share the new SwiftUI
Navigation APIs with you!


527
00:25:36,935 --> 00:25:39,037 line:0
Besides the talks
I mentioned earlier,


528
00:25:39,037 --> 00:25:40,139 line:0
I invite you to check out


529
00:25:40,139 --> 00:25:42,975 line:0
"Bring multiple windows
to your SwiftUI app"


530
00:25:42,975 --> 00:25:45,978 position:50%
for some great info on opening
new windows and scenes


531
00:25:45,978 --> 00:25:47,579 line:0
in your apps.


532
00:25:47.579 --> 00:25:50.382 line:-1 position:50%
I hope that these recipes for
navigation in our cookbook app


533
00:25:50.382 --> 00:25:51.717 line:-1 position:50%
were palate-pleasing.


534
00:25:51.717 --> 00:25:54.119 line:-1 position:50%
I'm looking forward to seeing
the great experiences


535
00:25:54.119 --> 00:25:55.954 line:-1 position:50%
you cook up in your own apps.


536
00:25:55.954 --> 00:25:58.190 line:-1 position:50%
Bon appétit!
[LIPS SMACK]


537
00:25:58,190 --> 00:26:03,796 position:90% line:0 size:2%
♪

