2
00:00:01,268 --> 00:00:07,274 line:-1
[spacey music]


3
00:00:09,977 --> 00:00:12,079 line:-1
Anne: Hello, and welcome!


4
00:00:12.112 --> 00:00:13.247 line:-1 align:center
I'm Anne Hitchcock,


5
00:00:13.280 --> 00:00:15.616 line:-1 align:center
and I'm a watchOS software engineer.


6
00:00:15.649 --> 00:00:17.017 line:-1 align:center
Today, I want to show you


7
00:00:17,050 --> 00:00:18,585 line:-1
how to create a productivity app


8
00:00:18,619 --> 00:00:20,521 line:-1
on watchOS.


9
00:00:20,554 --> 00:00:22,422 line:-1
Since the introduction of SwiftUI


10
00:00:22,456 --> 00:00:25,292 line:-1
and Independent Watch apps in watchOS 6,


11
00:00:25,325 --> 00:00:27,961 line:-2
you've been able to do more
in your Watch apps.


12
00:00:28,529 --> 00:00:33,166 line:-2
Each year, SwiftUI on watchOS gets
more capabilities.


13
00:00:33.200 --> 00:00:34.501 line:-1 align:center
At the same time,


14
00:00:34,535 --> 00:00:37,771 line:-2
watchOS has gotten new features,
like the keyboard,


15
00:00:37,804 --> 00:00:41,208 line:-2
that let you build whole new kinds of apps
for Watch.


16
00:00:41,875 --> 00:00:45,045 line:-2
I'd like to show you how to knit together
some of those features


17
00:00:45,078 --> 00:00:48,182 line:-2
to build an app to track
a list of things to get done.


18
00:00:49,016 --> 00:00:52,319 line:-1
We're going to create a new Watch app,


19
00:00:52,352 --> 00:00:55,889 line:-1
add a simple list of items to display,


20
00:00:55,923 --> 00:00:58,225 line:-1
Let people add items to the list,


21
00:00:58,258 --> 00:00:59,927 line:-1
and then edit the items.


22
00:01:00.894 --> 00:01:02.596 line:-1 align:center
As we add these features,


23
00:01:02,629 --> 00:01:06,700 line:-2
we'll talk about common app
navigation strategies in Watch apps


24
00:01:06,733 --> 00:01:08,735 line:-1
and how to pick the correct one.


25
00:01:10.103 --> 00:01:13.106 line:-2 align:center
We'll share items with a friend
to share the load.


26
00:01:14.241 --> 00:01:16.243 line:-1 align:center
Then we'll add a chart to our app


27
00:01:16,276 --> 00:01:20,080 line:-2
to help us spot productivity trends
and keep us motivated.


28
00:01:21.281 --> 00:01:23.150 line:-1 align:center
And we'll use the Digital Crown to make


29
00:01:23,183 --> 00:01:24,751 line:-1
our chart scrollable


30
00:01:24.785 --> 00:01:27.054 line:-1 align:center
to show a larger data range.


31
00:01:28.188 --> 00:01:31.158 line:-2 align:center
Let's get started by creating
a new app.


32
00:01:32,492 --> 00:01:34,361 line:-1
Create a new project in Xcode.


33
00:01:35.262 --> 00:01:39.032 line:-2 align:center
In the watchOS tab, choose App
and click Next.


34
00:01:40,400 --> 00:01:44,605 line:-2
After choosing a product name,
you have a couple of choices.


35
00:01:44,638 --> 00:01:46,073 line:-1
The most important one


36
00:01:46,106 --> 00:01:48,775 line:-1
is whether to create a Watch-only App


37
00:01:48.809 --> 00:01:52.246 line:-2 align:center
or to create a Watch app
with a companion iOS app.


38
00:01:52.846 --> 00:01:55.849 line:-2 align:center
Let's talk about what makes
a great Watch app


39
00:01:55.883 --> 00:01:58.919 line:-1 align:center
and when you want a companion iOS app.


40
00:01:59,953 --> 00:02:03,156 line:-1
Great Watch apps enable quick interaction,


41
00:02:03,190 --> 00:02:04,992 line:-1
like the interface in Workout


42
00:02:05,025 --> 00:02:08,595 line:-2
that allows you to start
your favorite workouts quickly.


43
00:02:08,629 --> 00:02:11,532 line:-2
No one wants to stand around,
holding up their arm,


44
00:02:11.565 --> 00:02:13.267 line:-1 align:center
tapping through to try to find something.


45
00:02:14.101 --> 00:02:18.038 line:-2 align:center
Great Watch apps make it easy
to access important information


46
00:02:18,071 --> 00:02:19,206 line:-1
and features.


47
00:02:20.707 --> 00:02:24.011 line:-2 align:center
Great Watch apps focus
on the essential purpose of the app.


48
00:02:24,912 --> 00:02:29,283 line:-2
For example, the Weather app displays
the forecast for today,


49
00:02:29.316 --> 00:02:33.353 line:-2 align:center
relevant current conditions,
and a simple 10-day forecast.


50
00:02:34,488 --> 00:02:36,690 line:-1
Focus on the essentials in your app


51
00:02:36.723 --> 00:02:39.159 line:-1 align:center
so people can easily find the information


52
00:02:39,193 --> 00:02:40,694 line:-1
and actions they need.


53
00:02:42,229 --> 00:02:44,698 line:-1
A great Watch app is designed to be used


54
00:02:44.731 --> 00:02:47.034 line:-1 align:center
independently of the companion iPhone.


55
00:02:47,901 --> 00:02:52,172 line:-2
The Contacts app, for example,
synchronizes with your phone,


56
00:02:52.206 --> 00:02:54.608 line:-2 align:center
but doesn't require your iPhone
to be nearby


57
00:02:54.641 --> 00:02:56.376 line:-1 align:center
to access contact information


58
00:02:56.410 --> 00:02:57.878 line:-1 align:center
on your Apple Watch.


59
00:02:59,479 --> 00:03:02,049 line:-1
There are many reasons you might also want


60
00:03:02,082 --> 00:03:05,118 line:-1
a companion iOS app for your Watch app,


61
00:03:05.152 --> 00:03:10.090 line:-2 align:center
including providing a historical record
of data captured by Apple Watch


62
00:03:10,123 --> 00:03:13,794 line:-2
or detailed analysis of trends,
as in the Fitness app.


63
00:03:15.729 --> 00:03:18.432 line:-1 align:center
Since our app has a focused feature set,


64
00:03:18.465 --> 00:03:20.901 line:-1 align:center
quick interaction, and limited data,


65
00:03:20.934 --> 00:03:23.003 line:-1 align:center
we're going to create a Watch-only app.


66
00:03:24,705 --> 00:03:27,508 line:-2
At this point,
I want to spend a few minutes


67
00:03:27.541 --> 00:03:29.810 line:-2 align:center
talking about the targets that
are created.


68
00:03:31,612 --> 00:03:33,714 line:-1
If you've built a Watch app in the past,


69
00:03:33,747 --> 00:03:36,550 line:-1
your project has two targets for Watch:


70
00:03:36,583 --> 00:03:39,086 line:-1
a WatchKit App target with a storyboard,


71
00:03:39,119 --> 00:03:42,990 line:-2
assets, and perhaps
some localization-related files,


72
00:03:43.023 --> 00:03:47.160 line:-2 align:center
and a WatchKit Extension target
with all of your app code.


73
00:03:47.194 --> 00:03:49.897 line:-1 align:center
These dual targets are a holdover


74
00:03:49,930 --> 00:03:52,199 line:-1
from the early days of watchOS,


75
00:03:52,232 --> 00:03:56,737 line:-2
and there really isn't a good reason
for multiple Watch targets anymore.


76
00:03:57,671 --> 00:04:03,510 line:-2
Starting in Xcode 14, new Watch apps
have a single Watch app target.


77
00:04:03,544 --> 00:04:06,547 line:-1
All of the code, assets, localizations,


78
00:04:06.580 --> 00:04:08.916 line:-1 align:center
and Siri Intent and Widget extensions


79
00:04:08.949 --> 00:04:10.551 line:-1 align:center
associated with your Watch app


80
00:04:10.584 --> 00:04:12.085 line:-1 align:center
belong in this target.


81
00:04:13.353 --> 00:04:16.623 line:-2 align:center
The great news is
that single-target Watch apps


82
00:04:16.657 --> 00:04:19.526 line:-1 align:center
are supported back to watchOS 7!


83
00:04:19.560 --> 00:04:24.097 line:-2 align:center
You can simplify your project structure
and reduce confusion and duplication


84
00:04:24,131 --> 00:04:26,800 line:-2
while still supporting customers
who aren't running


85
00:04:26,834 --> 00:04:28,168 line:-1
the latest watchOS.


86
00:04:29,636 --> 00:04:31,338 line:-1
If you have an existing app


87
00:04:31,371 --> 00:04:33,307 line:-1
with a WatchKit Extension target,


88
00:04:33.340 --> 00:04:34.942 line:-1 align:center
it will continue to work,


89
00:04:34,975 --> 00:04:38,245 line:-2
and you can continue
to update your app using Xcode


90
00:04:38,278 --> 00:04:40,848 line:-2
and publish your app
through the App Store.


91
00:04:42.282 --> 00:04:44.284 line:-1 align:center
If you already have a Watch app that uses


92
00:04:44.318 --> 00:04:46.286 line:-1 align:center
the SwiftUI lifecycle,


93
00:04:46.320 --> 00:04:52.626 line:-2 align:center
transitioning to a single target is easy
using the migration tool in Xcode 14.


94
00:04:52.659 --> 00:04:55.562 line:-2 align:center
Select your target and choose
Validate Settings


95
00:04:55.596 --> 00:04:57.598 line:-1 align:center
from the Editor menu.


96
00:04:57,631 --> 00:04:59,967 line:-2
The target collapsing option
will be offered


97
00:05:00.000 --> 00:05:02.936 line:-2 align:center
if your deployment target
is watchOS 7 or later.


98
00:05:04.705 --> 00:05:06.673 line:-1 align:center
If you haven't already made the leap,


99
00:05:06,707 --> 00:05:08,876 line:-1
now is a good time to start the process


100
00:05:08,909 --> 00:05:12,179 line:-2
of converting your app to use
the SwiftUI life cycle


101
00:05:12.212 --> 00:05:15.749 line:-2 align:center
to enjoy the simplicity
of a single-target Watch app


102
00:05:15,782 --> 00:05:18,585 line:-1
and all of the features of SwiftUI.


103
00:05:20,087 --> 00:05:24,391 line:-2
The targets aren't the only thing
we simplified in Xcode 14!


104
00:05:24,424 --> 00:05:26,426 line:-1
We've also made it a lot easier


105
00:05:26,460 --> 00:05:28,295 line:-1
to add an icon for your app


106
00:05:28.328 --> 00:05:33.000 line:-2 align:center
by only requiring
a single 1024x1024 pixel image.


107
00:05:34,067 --> 00:05:35,903 line:-1
The app icon image will be scaled


108
00:05:35.936 --> 00:05:38.172 line:-1 align:center
for display on all Watch devices.


109
00:05:39.473 --> 00:05:41.074 line:-1 align:center
Be sure to test with your app icon


110
00:05:41.108 --> 00:05:43.310 line:-1 align:center
on devices on the home screen,


111
00:05:43,343 --> 00:05:45,479 line:-1
in notifications,


112
00:05:45,512 --> 00:05:47,381 line:-1
and in the settings for your app


113
00:05:47,414 --> 00:05:49,216 line:-1
in the Watch app on the iPhone.


114
00:05:50,584 --> 00:05:52,286 line:-1
You can add custom images


115
00:05:52,319 --> 00:05:55,756 line:-1
for specific smaller sizes if necessary.


116
00:05:55,789 --> 00:05:56,823 line:-1
For example,


117
00:05:56.857 --> 00:05:59.359 line:-1 align:center
if your app icon has details in the image


118
00:05:59,393 --> 00:06:01,795 line:-1
that get lost at smaller sizes,


119
00:06:01,828 --> 00:06:04,932 line:-2
you can add specific icon images
for those sizes


120
00:06:04.965 --> 00:06:07.234 line:-1 align:center
with the image details removed.


121
00:06:07,267 --> 00:06:09,803 line:-2
Now let's add some functionality
to our app


122
00:06:09,837 --> 00:06:12,072 line:-1
by adding a list of task items.


123
00:06:12.806 --> 00:06:14.775 line:-1 align:center
We'll start by creating a data model


124
00:06:14.808 --> 00:06:16.944 line:-1 align:center
for our list of tasks.


125
00:06:16,977 --> 00:06:20,647 line:-2
The ListItem struct
will be Identifiable and Hashable,


126
00:06:20,681 --> 00:06:22,816 line:-2
and we'll give it a description
to display.


127
00:06:24,284 --> 00:06:27,387 line:-2
Then, create a simple model to store
our data


128
00:06:27,421 --> 00:06:29,489 line:-1
and publish the array of list items.


129
00:06:30.624 --> 00:06:33.927 line:-2 align:center
And finally, add the model
as an environment object


130
00:06:33,961 --> 00:06:35,929 line:-1
so our views can access our model.


131
00:06:37.397 --> 00:06:41.502 line:-2 align:center
Now let's create a List in SwiftUI
with our data model.


132
00:06:41.535 --> 00:06:44.037 line:-1 align:center
Since there are no tasks yet,


133
00:06:44.071 --> 00:06:46.607 line:-2 align:center
when we preview this,
we get an empty list.


134
00:06:47,641 --> 00:06:50,010 line:-1
We need to do something about that.


135
00:06:50,043 --> 00:06:53,447 line:-2
We should give people a way to add
some tasks to their list.


136
00:06:54.448 --> 00:06:57.017 line:-2 align:center
We'd like to add a Button
that people can tap


137
00:06:57,050 --> 00:06:59,052 line:-1
to add a new item to the list.


138
00:06:59.887 --> 00:07:03.023 line:-1 align:center
Text field link, new in watchOS 9,


139
00:07:03,056 --> 00:07:06,159 line:-2
lets you invoke text input options
from a button,


140
00:07:06,193 --> 00:07:08,028 line:-1
and offers several styling options


141
00:07:08.061 --> 00:07:10.697 line:-1 align:center
to make it feel right at home in your app.


142
00:07:12,266 --> 00:07:16,436 line:-2
You can create a TextFieldLink
with a simple string


143
00:07:16.470 --> 00:07:19.039 line:-1 align:center
or use a Label for a more custom button.


144
00:07:20.374 --> 00:07:23.477 line:-2 align:center
Modify the button's appearance
with view modifiers,


145
00:07:23,510 --> 00:07:25,746 line:-1
including foregroundColor,


146
00:07:25.779 --> 00:07:27.814 line:-1 align:center
foregroundStyle,


147
00:07:27,848 --> 00:07:29,249 line:-1
and buttonStyle.


148
00:07:30.784 --> 00:07:33.086 line:-1 align:center
We'll create an AddItemLink view


149
00:07:33.120 --> 00:07:35.689 line:-1 align:center
to encapsulate the styling and behavior


150
00:07:35,722 --> 00:07:38,525 line:-2
of the TextFieldLink
we're using in our app.


151
00:07:39,593 --> 00:07:42,462 line:-1
We'll use a custom label for the button,


152
00:07:42,496 --> 00:07:44,231 line:-1
and when someone enters text,


153
00:07:44.264 --> 00:07:46.366 line:-1 align:center
we'll add the new item to our list.


154
00:07:47.734 --> 00:07:49.870 line:-2 align:center
Now that we've decided
to use TextFieldLink


155
00:07:49,903 --> 00:07:52,806 line:-1
to add a button to add a new list item,


156
00:07:52,840 --> 00:07:55,876 line:-2
we need to think about where to put
the TextFieldLink.


157
00:07:57,644 --> 00:08:00,280 line:-2
When adding actions to lists
in Watch apps,


158
00:08:00.314 --> 00:08:02.783 line:-1 align:center
we have a couple of options.


159
00:08:02.816 --> 00:08:06.320 line:-2 align:center
Use a button, navigation link,
or TextFieldLink


160
00:08:06,353 --> 00:08:11,859 line:-2
at the end of the list
for primary actions in short lists.


161
00:08:11,892 --> 00:08:15,262 line:-2
Adding an action as an item
at the end of a list


162
00:08:15,295 --> 00:08:17,531 line:-1
is a good choice for a primary action


163
00:08:17.564 --> 00:08:18.966 line:-1 align:center
in a short list of items


164
00:08:18.999 --> 00:08:21.068 line:-1 align:center
like the list of cities in World Clock.


165
00:08:21,802 --> 00:08:23,036 line:-1
However,


166
00:08:23.070 --> 00:08:25.439 line:-1 align:center
if you anticipate a long list of items,


167
00:08:25.472 --> 00:08:27.975 line:-2 align:center
people will have to keep scrolling
to the end of the list


168
00:08:28.008 --> 00:08:31.578 line:-1 align:center
each time they want to do the action.


169
00:08:31.612 --> 00:08:33.046 line:-1 align:center
For commonly used actions


170
00:08:33,080 --> 00:08:36,083 line:-1
with longer lists, use a toolbar item.


171
00:08:37.451 --> 00:08:41.755 line:-2 align:center
To add a toolbar item,
add the toolbar modifier to the list,


172
00:08:41,788 --> 00:08:44,791 line:-1
and use your action view as the content.


173
00:08:44,825 --> 00:08:47,594 line:-2
This will add a single toolbar item
to the list


174
00:08:47,628 --> 00:08:50,097 line:-1
with automatic toolbar item placement.


175
00:08:50,130 --> 00:08:52,466 line:-1
While I'd like to think I'll always keep


176
00:08:52,499 --> 00:08:53,800 line:-1
my to-do list short,


177
00:08:53.834 --> 00:08:55.836 line:-1 align:center
I'm fairly sure that I won't.


178
00:08:55,869 --> 00:08:58,705 line:-2
So I'm going to put the text field links
in a toolbar item


179
00:08:58,739 --> 00:09:00,707 line:-1
to make it easy to access.


180
00:09:02,242 --> 00:09:05,479 line:-2
Let's take a moment to review
what we've accomplished.


181
00:09:05.512 --> 00:09:08.315 line:-1 align:center
We've created a model for our list items,


182
00:09:08,348 --> 00:09:11,485 line:-1
stored it as an environment object,


183
00:09:11,518 --> 00:09:13,554 line:-1
created a list to display the items,


184
00:09:13.587 --> 00:09:16.723 line:-2 align:center
and added a text field link
to add new items.


185
00:09:23,330 --> 00:09:25,432 line:-1
Creating an item with only a description


186
00:09:25.465 --> 00:09:28.535 line:-1 align:center
is simple, but it isn't very useful.


187
00:09:28.569 --> 00:09:31.638 line:-2 align:center
We're going to need
to mark the item as complete,


188
00:09:31,672 --> 00:09:34,041 line:-1
and we might want a way to set a priority


189
00:09:34.074 --> 00:09:36.143 line:-1 align:center
or add an estimate of the amount of work


190
00:09:36,176 --> 00:09:37,778 line:-1
for a task.


191
00:09:37,811 --> 00:09:40,781 line:-1
To do this, we'll add a detail view.


192
00:09:40,814 --> 00:09:42,783 line:-1
Before we do this, I want to review


193
00:09:42.816 --> 00:09:45.052 line:-1 align:center
the options for app navigation structure


194
00:09:45,085 --> 00:09:47,387 line:-1
in SwiftUI on Watch.


195
00:09:48.222 --> 00:09:50.657 line:-1 align:center
Hierarchical navigation is used for views


196
00:09:50,691 --> 00:09:53,594 line:-1
with a list-detail relationship.


197
00:09:53,627 --> 00:09:57,397 line:-2
Starting in watchOS 9,
use the SwiftUI NavigationStack


198
00:09:57.431 --> 00:10:00.834 line:-2 align:center
to create interfaces
with this type of navigation structure.


199
00:10:02.135 --> 00:10:04.571 line:-1 align:center
Page-based navigation is used for views


200
00:10:04,605 --> 00:10:06,173 line:-1
with a flat structure,


201
00:10:06.206 --> 00:10:08.242 line:-1 align:center
where all of the views are peers.


202
00:10:09,510 --> 00:10:12,212 line:-1
A great example of page-based navigation


203
00:10:12,246 --> 00:10:15,015 line:-1
is the in-workout view of the Workout app,


204
00:10:15,048 --> 00:10:16,650 line:-1
where people can easily swipe


205
00:10:16,683 --> 00:10:20,587 line:-2
between the workout controls, metrics,
and playback controls


206
00:10:20.621 --> 00:10:21.788 line:-1 align:center
during a workout.


207
00:10:23.223 --> 00:10:25.459 line:-1 align:center
A full-screen app has a single view


208
00:10:25,492 --> 00:10:27,861 line:-1
that uses the entire display.


209
00:10:27.895 --> 00:10:30.464 line:-1 align:center
This is generally used for apps like games


210
00:10:30.497 --> 00:10:32.966 line:-2 align:center
and other apps
that have a single main view.


211
00:10:34.234 --> 00:10:38.205 line:-2 align:center
For a full-screen view,
use the ignoresSafeArea modifier


212
00:10:38,238 --> 00:10:41,642 line:-2
to extend your content
to the edges of the display,


213
00:10:41.675 --> 00:10:45.245 line:-2 align:center
and the toolbar modifier
with a visibility value of hidden


214
00:10:45,279 --> 00:10:46,914 line:-1
to hide the navigation bar.


215
00:10:48,415 --> 00:10:50,450 line:-1
A modal sheet is a full-screen view


216
00:10:50,484 --> 00:10:52,653 line:-1
that slides over the current view.


217
00:10:52.686 --> 00:10:54.755 line:-1 align:center
It should be used for important tasks


218
00:10:54,788 --> 00:10:57,491 line:-2
that should be completed
as part of the current workflow.


219
00:10:58,892 --> 00:11:00,727 line:-1
It's important to differentiate


220
00:11:00,761 --> 00:11:03,197 line:-1
when to use a hierarchical flow


221
00:11:03.230 --> 00:11:05.532 line:-1 align:center
versus when to use a modal sheet.


222
00:11:07,000 --> 00:11:11,839 line:-2
Mail uses a hierarchical style
to display the list of messages


223
00:11:11.872 --> 00:11:15.976 line:-2 align:center
and show each message or thread
as a detail view.


224
00:11:16.009 --> 00:11:18.979 line:-2 align:center
There are actions you can do
from the message detail,


225
00:11:19.012 --> 00:11:21.014 line:-1 align:center
but there is nothing you must do


226
00:11:21.048 --> 00:11:22.816 line:-1 align:center
before returning to the list.


227
00:11:23,917 --> 00:11:27,387 line:-2
If you go back to the list,
and tap New Message,


228
00:11:27.421 --> 00:11:31.225 line:-2 align:center
Mail uses a modal sheet to show
the New Message view.


229
00:11:32,125 --> 00:11:34,294 line:-1
A modal sheet is the right choice


230
00:11:34.328 --> 00:11:37.598 line:-2 align:center
because you need to fill in the details
of the new message, or cancel,


231
00:11:37,631 --> 00:11:39,233 line:-1
before continuing.


232
00:11:40,267 --> 00:11:41,935 line:-1
To display a modal sheet,


233
00:11:41,969 --> 00:11:46,173 line:-2
create a property to control
the sheet presentation state.


234
00:11:46,206 --> 00:11:50,344 line:-2
Set the property based on an action in
the user interface,


235
00:11:50.377 --> 00:11:52.145 line:-1 align:center
and use the sheet modifier


236
00:11:52,179 --> 00:11:54,681 line:-1
to display the custom modal sheet content


237
00:11:54,715 --> 00:11:57,317 line:-2
when the presentation state property
is true.


238
00:11:58.986 --> 00:12:01.889 line:-2 align:center
To add custom toolbar items
to the modal sheet,


239
00:12:01,922 --> 00:12:04,558 line:-1
add a toolbar with your items.


240
00:12:04,591 --> 00:12:07,661 line:-2
Note that your toolbar items should use
modal placements


241
00:12:07,694 --> 00:12:09,530 line:-1
like confirmationAction,


242
00:12:09,563 --> 00:12:11,031 line:-1
cancellationAction,


243
00:12:11,064 --> 00:12:12,432 line:-1
and destructiveAction.


244
00:12:14.201 --> 00:12:17.070 line:-2 align:center
We're going to use the modal sheet
for our detail view


245
00:12:17.104 --> 00:12:18.972 line:-1 align:center
because we're editing an item


246
00:12:19,006 --> 00:12:21,241 line:-1
and we want to focus on this single task


247
00:12:21,275 --> 00:12:23,544 line:-1
until we've finished and tapped Done.


248
00:12:24,745 --> 00:12:27,514 line:-1
To learn more about navigation in SwiftUI,


249
00:12:27.548 --> 00:12:30.083 line:-4 align:center
including more details
about NavigationStack


250
00:12:30.117 --> 00:12:31.885 line:-3 align:center
and programmatic navigation,


251
00:12:31,919 --> 00:12:35,189 line:-4
check out "The SwiftUI cookbook
for navigation."


252
00:12:36.757 --> 00:12:40.060 line:-2 align:center
Now that we've decided how to navigate
to our detail view,


253
00:12:40,093 --> 00:12:42,396 line:-1
we'll update our list item struct.


254
00:12:42,429 --> 00:12:45,132 line:-2
We have new properties to store
estimated work,


255
00:12:45,165 --> 00:12:47,568 line:-1
creation date, and completion date.


256
00:12:49,102 --> 00:12:52,206 line:-2
Let's give people a way to view and edit
these details.


257
00:12:53,240 --> 00:12:57,444 line:-2
We'll create a detail view
with a TextField to edit the description


258
00:12:57.477 --> 00:13:01.648 line:-2 align:center
and a toggle to mark the task as complete
or not.


259
00:13:01,682 --> 00:13:05,285 line:-2
But what should we do
with the estimated work?


260
00:13:05.319 --> 00:13:07.721 line:-1 align:center
We know the values will all be numbers,


261
00:13:07.754 --> 00:13:10.657 line:-2 align:center
and we can specify a range
of valid values.


262
00:13:11,758 --> 00:13:14,228 line:-1
Beginning in watchOS 9,


263
00:13:14.261 --> 00:13:16.697 line:-1 align:center
we can use the Stepper.


264
00:13:16,730 --> 00:13:18,699 line:-1
The Stepper is a great option


265
00:13:18,732 --> 00:13:22,469 line:-2
when you want to provide granular control
to edit sequential values.


266
00:13:23.470 --> 00:13:27.774 line:-2 align:center
You can specify a range
of values and optionally provide a step.


267
00:13:29,543 --> 00:13:33,113 line:-2
You can also use the Stepper to edit
logically sequential,


268
00:13:33.146 --> 00:13:35.749 line:-1 align:center
but not necessarily numeric values.


269
00:13:36,683 --> 00:13:39,286 line:-1
For example, maybe we want to note


270
00:13:39,319 --> 00:13:41,588 line:-1
the estimated stress level for an item.


271
00:13:42.623 --> 00:13:44.791 line:-1 align:center
We could create an array of emoji


272
00:13:44,825 --> 00:13:47,294 line:-1
to indicate the stress level,


273
00:13:47.327 --> 00:13:49.730 line:-1 align:center
then create a Stepper,


274
00:13:49.763 --> 00:13:54.601 line:-2 align:center
binding the value to the selected index
in the stress level emoji array


275
00:13:54,635 --> 00:13:58,672 line:-2
and setting the range to the range
of emoji indices.


276
00:13:58.705 --> 00:14:00.073 line:-1 align:center
Stepping through the values


277
00:14:00,107 --> 00:14:01,675 line:-1
increases or decreases


278
00:14:01,708 --> 00:14:04,178 line:-2
the stress level we're estimating
for the item.


279
00:14:05.312 --> 00:14:08.582 line:-1 align:center
Preparing a WWDC session is fun,


280
00:14:08.615 --> 00:14:12.019 line:-2 align:center
but sharing great Watch app development
with all of you is a party.


281
00:14:12.853 --> 00:14:15.589 line:-1 align:center
When I have stressful items on my list,


282
00:14:15.622 --> 00:14:19.459 line:-2 align:center
or just a lot of items on my list
that are making me feel stressed,


283
00:14:19.493 --> 00:14:21.962 line:-2 align:center
I'd like to share an item from my list
with a friend


284
00:14:21.995 --> 00:14:23.230 line:-1 align:center
to ask for help.


285
00:14:24.498 --> 00:14:27.301 line:-2 align:center
We're going to add a button
to our detail view


286
00:14:27.334 --> 00:14:29.036 line:-1 align:center
to allow people to share an item


287
00:14:29.069 --> 00:14:31.171 line:-1 align:center
using the share sheet.


288
00:14:31.205 --> 00:14:33.674 line:-2 align:center
I want to be able to tap a button
on my detail view


289
00:14:33,707 --> 00:14:35,375 line:-1
to share the item,


290
00:14:35,409 --> 00:14:38,178 line:-2
pick from a list of friends
to ask for help,


291
00:14:38,212 --> 00:14:40,080 line:-1
edit my message, and send it.


292
00:14:41.348 --> 00:14:43.817 line:-1 align:center
To do this, we're going to use a new tool


293
00:14:43,851 --> 00:14:47,588 line:-1
available to us in SwiftUI on watchOS 9:


294
00:14:47,621 --> 00:14:49,723 line:-1
ShareLink.


295
00:14:49,756 --> 00:14:53,827 line:-2
We can share our list item by creating
a ShareLink with our item.


296
00:14:53,861 --> 00:14:55,495 line:-1
We can optionally customize


297
00:14:55.529 --> 00:14:57.130 line:-1 align:center
the initial text of the message


298
00:14:57.164 --> 00:15:00.033 line:-1 align:center
with a subject and message.


299
00:15:00,067 --> 00:15:02,936 line:-2
And provide a Preview
to display in the Share Sheet


300
00:15:02.970 --> 00:15:05.539 line:-1 align:center
when someone shares the item.


301
00:15:05.572 --> 00:15:08.876 line:-2 align:center
You can use ShareLink to share
from your SwiftUI app


302
00:15:08.909 --> 00:15:12.513 line:-1 align:center
in iOS, macOS, and watchOS.


303
00:15:13.847 --> 00:15:15.983 line:-3 align:center
Be sure to check out "Meet Transferable"


304
00:15:16.016 --> 00:15:18.051 line:-3 align:center
to learn more details and options


305
00:15:18,085 --> 00:15:19,786 line:-3
for ShareLink.


306
00:15:19.820 --> 00:15:22.890 line:-2 align:center
Now that I can track when I completed
items


307
00:15:22.923 --> 00:15:25.492 line:-1 align:center
and call for help to get things done,


308
00:15:25,526 --> 00:15:27,294 line:-1
I'd also like to add a chart


309
00:15:27,327 --> 00:15:29,096 line:-1
to see my productivity.


310
00:15:29,863 --> 00:15:32,199 line:-1
I've chosen to use a bar chart


311
00:15:32,232 --> 00:15:34,468 line:-1
because I have a single data series


312
00:15:34.501 --> 00:15:36.136 line:-1 align:center
and distinct data values.


313
00:15:37.037 --> 00:15:38.705 line:-1 align:center
A bar chart will clearly show


314
00:15:38,739 --> 00:15:40,774 line:-1
this data on a Watch display


315
00:15:40,807 --> 00:15:45,779 line:-2
as long as I limit the amount of data
I display at one time.


316
00:15:45.812 --> 00:15:48.015 line:-2 align:center
We're going to start by adding
the chart view


317
00:15:48.048 --> 00:15:50.717 line:-1 align:center
to our app's navigation structure.


318
00:15:50.751 --> 00:15:53.654 line:-2 align:center
I've chosen
a page-based navigation strategy


319
00:15:53.687 --> 00:15:55.989 line:-2 align:center
because there is
no list-detail relationship


320
00:15:56.023 --> 00:15:57.991 line:-1 align:center
between the item list and the chart.


321
00:15:58.759 --> 00:16:00.427 line:-1 align:center
Someone can swipe between the list


322
00:16:00,460 --> 00:16:02,029 line:-1
and the chart at any time.


323
00:16:03.664 --> 00:16:05.432 line:-1 align:center
To add the page-based navigation


324
00:16:05,465 --> 00:16:07,234 line:-1
for our list and chart,


325
00:16:07.267 --> 00:16:11.405 line:-2 align:center
let's start by creating an ItemList struct
to encapsulate the list view.


326
00:16:12.940 --> 00:16:15.642 line:-2 align:center
I moved the entire content
of the content view


327
00:16:15,676 --> 00:16:18,045 line:-1
to this new item list.


328
00:16:18,078 --> 00:16:20,948 line:-2
Encapsulating the item list here
will allow us


329
00:16:20,981 --> 00:16:23,584 line:-1
to have simple, easy-to-read tab view code


330
00:16:23,617 --> 00:16:24,852 line:-1
in the content view.


331
00:16:26,553 --> 00:16:29,623 line:-2
We also need to create a struct
for our chart view.


332
00:16:31.225 --> 00:16:33.527 line:-1 align:center
I'll temporarily put in a placeholder


333
00:16:33.560 --> 00:16:36.096 line:-2 align:center
so we can focus
on our navigation structure


334
00:16:36.129 --> 00:16:37.898 line:-1 align:center
before we build our chart.


335
00:16:39,466 --> 00:16:42,069 line:-1
Now we'll set up a content view


336
00:16:42,102 --> 00:16:44,972 line:-1
with a page-style tab view with 2 tabs:


337
00:16:45,005 --> 00:16:47,274 line:-1
the item list and the chart.


338
00:16:49,309 --> 00:16:51,845 line:-2
Since we've set up
our navigation structure,


339
00:16:51.879 --> 00:16:53.914 line:-1 align:center
let's talk about how to build this chart.


340
00:16:54,615 --> 00:16:57,117 line:-1
I know I could use a SwiftUI Canvas


341
00:16:57,150 --> 00:16:58,952 line:-1
and draw a chart,


342
00:16:58,986 --> 00:17:00,687 line:-1
but starting in watchOS 9,


343
00:17:00.721 --> 00:17:04.091 line:-1 align:center
we have an easier answer: Swift Charts.


344
00:17:04.825 --> 00:17:09.563 line:-2 align:center
Swift Charts are also available on iOS,
macOS, and tvOS,


345
00:17:09,596 --> 00:17:13,267 line:-2
so you can reuse your charts anywhere
you're using SwiftUI.


346
00:17:14,401 --> 00:17:16,803 line:-1
We'll aggregate the data we want to chart


347
00:17:16.837 --> 00:17:19.406 line:-2 align:center
and then let Swift Charts display it
for us.


348
00:17:21,041 --> 00:17:25,712 line:-2
For our chart, we want to show the number
of items completed by date.


349
00:17:25,746 --> 00:17:28,815 line:-2
We'll create a struct
to store the aggregate data for the chart.


350
00:17:30.050 --> 00:17:31.685 line:-1 align:center
Then we'll write a small method


351
00:17:31,718 --> 00:17:33,453 line:-1
to aggregate our list item data


352
00:17:33.487 --> 00:17:35.155 line:-1 align:center
into chart data elements.


353
00:17:36.690 --> 00:17:41.128 line:-2 align:center
Display a simple chart by specifying
the data to display


354
00:17:41,161 --> 00:17:43,997 line:-1
and defining the series from the data.


355
00:17:44,031 --> 00:17:46,633 line:-1
We're using the date as the x-value


356
00:17:46,667 --> 00:17:49,603 line:-2
and the number of items completed
as the y-value.


357
00:17:51.338 --> 00:17:54.541 line:-2 align:center
To achieve the appearance I want
on my Watch display,


358
00:17:54,575 --> 00:17:56,844 line:-1
I'm customizing the x-axis


359
00:17:56.877 --> 00:18:00.013 line:-1 align:center
using the Chart's chartXAxis modifier.


360
00:18:00.614 --> 00:18:04.818 line:-2 align:center
I'm specifying a format style
for the axis value labels.


361
00:18:04,852 --> 00:18:07,254 line:-1
I also don't want vertical gridlines,


362
00:18:07,287 --> 00:18:10,791 line:-1
so I omitted an AxisGridLine mark.


363
00:18:10,824 --> 00:18:16,029 line:-2
I'm also customizing the y-axis using
the chartYAxis modifier.


364
00:18:16,063 --> 00:18:20,767 line:-2
I specify a gridline style that looks
good with my chart on Watch.


365
00:18:20,801 --> 00:18:23,937 line:-2
I'm formatting the axis value labels
as integers


366
00:18:23,971 --> 00:18:25,873 line:-1
and omitting the top label


367
00:18:25,906 --> 00:18:29,142 line:-2
to prevent it from being clipped
at the top of the chart.


368
00:18:29,176 --> 00:18:33,747 line:1
To learn more about the amazing things
you can achieve with Swift Charts,


369
00:18:33,780 --> 00:18:36,283 align:center
check out "Hello Swift Charts"


370
00:18:36,316 --> 00:18:39,319 line:1
and "Swift Charts: Raise the bar."


371
00:18:40.854 --> 00:18:42.689 line:-1 align:center
Our chart looks pretty good,


372
00:18:42,723 --> 00:18:44,925 line:-1
but I'd like to show a little more data


373
00:18:44,958 --> 00:18:47,828 line:-1
but still keep a great Watch experience,


374
00:18:47.861 --> 00:18:50.297 line:-1 align:center
so I'm going to make it scrollable.


375
00:18:50.330 --> 00:18:52.900 line:-1 align:center
To accomplish this, we're going to use


376
00:18:52.933 --> 00:18:55.636 line:-1 align:center
a new digitalCrownRotation modifier


377
00:18:55,669 --> 00:18:57,838 line:-1
that allows us to set a callback


378
00:18:57.871 --> 00:18:59.773 line:-1 align:center
for digital crown events,


379
00:18:59.806 --> 00:19:01.041 line:-1 align:center
and we're going to implement


380
00:19:01.074 --> 00:19:03.610 line:-1 align:center
a custom scrolling behavior for our chart.


381
00:19:05.412 --> 00:19:08.549 line:-2 align:center
Let's get ready to add
the digitalCrownRotation modifier


382
00:19:08.582 --> 00:19:10.984 line:-2 align:center
by adding some properties to store
the state


383
00:19:11.018 --> 00:19:12.920 line:-1 align:center
as someone scrolls across the chart.


384
00:19:13,854 --> 00:19:17,824 line:-2
The highlightedDateIndex
is the index of the data point


385
00:19:17.858 --> 00:19:20.027 line:-1 align:center
for the current scroll position.


386
00:19:21.061 --> 00:19:22.729 line:-1 align:center
We'll store the crown offset


387
00:19:22.763 --> 00:19:25.232 line:-2 align:center
so we can display
the current crown position


388
00:19:25,265 --> 00:19:27,634 line:-2
as the person is scrolling
across the chart.


389
00:19:28.368 --> 00:19:32.239 line:-2 align:center
This is an intermediate value,
on or between data points,


390
00:19:32.272 --> 00:19:34.208 line:-1 align:center
while the crown is moving.


391
00:19:35.409 --> 00:19:38.478 line:-2 align:center
To keep track of whether
someone is actively scrolling,


392
00:19:38,512 --> 00:19:40,848 line:-1
we'll store the the idle state.


393
00:19:40,881 --> 00:19:42,316 line:-1
We'll use this information


394
00:19:42.349 --> 00:19:44.017 line:-1 align:center
to add a little animation


395
00:19:44,051 --> 00:19:46,854 line:-1
as crown scrolling stops and starts.


396
00:19:48,856 --> 00:19:52,059 line:-2
Now that we have the properties
to store values,


397
00:19:52,092 --> 00:19:54,828 line:-2
we can add
the digitalCrownRotation modifier.


398
00:19:56.129 --> 00:20:00.033 line:-2 align:center
We'll bind the detent value
to the highlightedDateIndex property.


399
00:20:01,134 --> 00:20:04,771 line:-2
In mechanical terms,
a detent is a mechanism


400
00:20:04.805 --> 00:20:06.507 line:-1 align:center
that holds something in a position


401
00:20:06.540 --> 00:20:09.309 line:-1 align:center
until enough force is applied to move it.


402
00:20:09,343 --> 00:20:12,446 line:-1
For instance, when I open my car door,


403
00:20:12.479 --> 00:20:15.516 line:-2 align:center
there is a "stop" position
where the door will settle.


404
00:20:15.549 --> 00:20:17.017 line:-1 align:center
I can push a little harder


405
00:20:17,050 --> 00:20:19,953 line:-1
and open the door wider to another "stop."


406
00:20:19,987 --> 00:20:22,656 line:-1
To close it, I need to pull hard enough


407
00:20:22,689 --> 00:20:26,527 line:-2
to overcome the resistance
to pull it out of the "stop."


408
00:20:26.560 --> 00:20:30.631 line:-2 align:center
Otherwise, it will spring back
into that resting position.


409
00:20:30.664 --> 00:20:32.599 line:-1 align:center
This is a detent.


410
00:20:33,367 --> 00:20:34,735 line:-1
The stop for the car door


411
00:20:34.768 --> 00:20:37.504 line:-1 align:center
helps us understand detent in this API.


412
00:20:38.338 --> 00:20:40.741 line:-1 align:center
The detent is the resting notch position


413
00:20:40,774 --> 00:20:42,376 line:-1
of the crown on your view.


414
00:20:44.211 --> 00:20:46.980 line:-1 align:center
In the handler for the onChange callback,


415
00:20:47.014 --> 00:20:49.983 line:-2 align:center
we'll set the value for isCrownIdle
to false,


416
00:20:50.017 --> 00:20:52.686 line:-1 align:center
since we know that the crown is scrolling,


417
00:20:52,719 --> 00:20:55,789 line:-2
and we'll set the crownOffset value
to the current value


418
00:20:55.822 --> 00:20:59.560 line:-2 align:center
to let us show the current position
on the chart during scrolling.


419
00:21:00.827 --> 00:21:03.564 line:-1 align:center
In the handler for the onIdle callback,


420
00:21:03,597 --> 00:21:06,466 line:-2
we'll set the value for isCrownIdle
to true.


421
00:21:08,068 --> 00:21:10,270 line:-2
Now we can display the position
of the crown


422
00:21:10,304 --> 00:21:11,872 line:-1
as we scroll on the chart.


423
00:21:12,773 --> 00:21:16,777 line:-2
To do this, we can use
the RuleMark from Swift Charts.


424
00:21:17.644 --> 00:21:20.881 line:-2 align:center
A RuleMark is
a straight line on your chart.


425
00:21:20,914 --> 00:21:24,351 line:-2
You can use it to display
a horizontal or vertical line,


426
00:21:24,384 --> 00:21:26,787 line:-1
to display a threshold, for example,


427
00:21:26.820 --> 00:21:28.555 line:-1 align:center
or to display a sloped line.


428
00:21:29.656 --> 00:21:31.592 line:-1 align:center
We're going to create a RuleMark


429
00:21:31.625 --> 00:21:33.393 line:-1 align:center
with the crown offset date value


430
00:21:33,427 --> 00:21:36,363 line:-2
to display the current location
of crown scrolling.


431
00:21:38,031 --> 00:21:40,033 line:-1
Just to make this look a little better,


432
00:21:40,067 --> 00:21:42,703 line:-2
I'd like to have
the crown position line fade


433
00:21:42.736 --> 00:21:44.238 line:-1 align:center
when the crown stops moving.


434
00:21:45.072 --> 00:21:46.840 line:-1 align:center
It's simple to animate this


435
00:21:46.874 --> 00:21:49.643 line:-1 align:center
using the isCrownIdle property we added.


436
00:21:50.777 --> 00:21:54.147 line:-2 align:center
We'll add a property to store the opacity
for the color we're using


437
00:21:54.181 --> 00:21:56.650 line:-1 align:center
in the foregroundStyle for the RuleMark.


438
00:21:57,985 --> 00:22:01,054 line:-1
And add an onChange modifier to the chart


439
00:22:01,088 --> 00:22:04,391 line:-2
to animate
the crownPositionOpacity value change


440
00:22:04.424 --> 00:22:07.160 line:-1 align:center
when the isCrownIdle value changes.


441
00:22:08,262 --> 00:22:12,766 line:-2
Then update the foregroundStyle
for the RuleMark to use the opacity.


442
00:22:14.568 --> 00:22:18.705 line:-2 align:center
To display the value next to the bar
on the chart as we scroll,


443
00:22:18.739 --> 00:22:21.208 line:-1 align:center
we can add an annotation to the BarMark.


444
00:22:21.975 --> 00:22:26.246 line:-2 align:center
We'll position the annotation
on the top leading side of the bar


445
00:22:26.280 --> 00:22:28.348 line:-1 align:center
when it's the last bar.


446
00:22:28.382 --> 00:22:29.917 line:-1 align:center
Otherwise, we'll position it


447
00:22:29.950 --> 00:22:31.785 line:-1 align:center
on the top trailing side.


448
00:22:33,387 --> 00:22:35,722 line:-2
Let's take a moment to see
what we've accomplished


449
00:22:35,756 --> 00:22:38,559 line:-2
with just
the digitalCrownRotation modifier,


450
00:22:38,592 --> 00:22:40,494 line:-1
the RuleMark in Swift Charts,


451
00:22:40.527 --> 00:22:42.829 line:-1 align:center
and a simple SwiftUI animation.


452
00:22:44.731 --> 00:22:48.202 line:-2 align:center
The final step to creating
our custom scrollable chart


453
00:22:48.235 --> 00:22:52.606 line:-2 align:center
is adjusting the data range for the chart
as someone scrolls.


454
00:22:52,639 --> 00:22:54,975 line:-2
Create a property to store
the visible range.


455
00:22:56.009 --> 00:23:00.414 line:-2 align:center
Create the chartData variable to provide
the data in the range to the chart.


456
00:23:01,281 --> 00:23:04,284 line:-1
When the highlightedDateIndex changes,


457
00:23:04.318 --> 00:23:07.020 line:-1 align:center
call a method to check the chartDataRange


458
00:23:07.054 --> 00:23:09.056 line:-1 align:center
and update it if necessary.


459
00:23:10,157 --> 00:23:14,161 line:-2
As someone scrolls across the chart using
the Digital Crown,


460
00:23:14.194 --> 00:23:16.897 line:-2 align:center
the chart will scroll to display
the available data.


461
00:23:17.865 --> 00:23:21.602 line:-2 align:center
Now we've finished implementing
all the features we had planned.


462
00:23:23.303 --> 00:23:26.139 line:-4 align:center
To learn more
about the new SwiftUI features


463
00:23:26.173 --> 00:23:28.008 line:-3 align:center
available in watchOS 9,


464
00:23:28.041 --> 00:23:30.911 line:-3 align:center
check out "What's New in SwiftUI."


465
00:23:31.712 --> 00:23:33.614 line:-1 align:center
As you're planning your Watch app,


466
00:23:33.647 --> 00:23:35.716 line:-1 align:center
or your new Watch app features,


467
00:23:35.749 --> 00:23:36.783 line:-1 align:center
think about what makes


468
00:23:36,817 --> 00:23:38,785 line:-1
a great Watch app experience.


469
00:23:39,686 --> 00:23:41,421 line:-1
While you're designing your app,


470
00:23:41,455 --> 00:23:43,891 line:-1
consider your app navigation strategy


471
00:23:43.924 --> 00:23:46.960 line:-2 align:center
to ensure that your app is easy
and intuitive.


472
00:23:47,828 --> 00:23:52,165 line:-2
And use SwiftUI for simpler
and richer development options.


473
00:23:52.199 --> 00:23:54.868 line:-1 align:center
Keep building great Watch apps.


474
00:23:54,902 --> 00:23:56,203 line:-1
And remember,


475
00:23:56,236 --> 00:23:58,438 line:-1
because of you, there's an app for that!


476
00:23:59.006 --> 00:24:01.074 line:-1 align:center
[spacey music]

