2
00:00:00,334 --> 00:00:06,340 line:-1
[upbeat music]


3
00:00:09.309 --> 00:00:11.245 line:-1 align:center
- Hello, I am Michael Ilseman


4
00:00:11,278 --> 00:00:13,947 line:-2
and I'm an engineer
on the Swift standard library team.


5
00:00:13.981 --> 00:00:17.084 line:-2 align:center
Join me as we meet
and get to know Regex in Swift.


6
00:00:17,117 --> 00:00:18,619 line:-1
There's a lot to Swift Regex,


7
00:00:18.652 --> 00:00:21.922 line:-2 align:center
and we'll be getting just a taste
of everything it has to offer.


8
00:00:21,955 --> 00:00:25,592 align:center
Let's say we're developers collaborating
with some financial investigators


9
00:00:25,626 --> 00:00:30,030 align:center
on a tool to analyze
transactions for irregularities.


10
00:00:30,063 --> 00:00:33,133 line:-2
Now, you'd think that for
a task this important


11
00:00:33.166 --> 00:00:36.136 line:-1 align:center
we'd be processing well-structured data.


12
00:00:36,170 --> 00:00:40,307 line:-1
But instead, we have a bunch of strings.


13
00:00:40,340 --> 00:00:43,744 align:center
Here the first field
has the transaction kind,


14
00:00:43,777 --> 00:00:46,280 line:0
the second the transaction date,


15
00:00:46,313 --> 00:00:49,283 align:center
the third field
the individual or institution,


16
00:00:49,316 --> 00:00:53,120 line:0
the fourth and final field
the amount in US dollars.


17
00:00:53,153 --> 00:00:59,126 align:center
Fields are separated
by either 2-or-more spaces or a tab


18
00:00:59,159 --> 00:01:02,563 line:0
for a very important technical reason


19
00:01:02,596 --> 00:01:06,333 line:0
that no one involved can remember.


20
00:01:06,366 --> 00:01:11,338 line:0
And, yes,
that date field is totally ambiguous.


21
00:01:11,371 --> 00:01:16,543 line:0
We're just going to hope that it's
month/day/year and see what happens.


22
00:01:16.577 --> 00:01:20.480 line:-2 align:center
Processing these transactions
involves processing strings,


23
00:01:20,514 --> 00:01:22,516 line:-1
and string is a collection,


24
00:01:22,549 --> 00:01:26,220 line:-2
which means we get access
to generic collection algorithms.


25
00:01:26.253 --> 00:01:29.289 line:-2 align:center
These algorithms
basically come in two kinds,


26
00:01:29.323 --> 00:01:33.627 line:-2 align:center
those that operate over elements,
and those that operate over indices.


27
00:01:34,461 --> 00:01:36,897 align:center
We can try to use
the element-based algorithms


28
00:01:36,930 --> 00:01:39,233 line:0
by splitting out the transaction fields,


29
00:01:39,266 --> 00:01:43,070 line:0
but the field separator being either tab
or 2-or-more spaces


30
00:01:43,103 --> 00:01:45,539 line:0
makes this difficult.


31
00:01:45,572 --> 00:01:48,675 line:0
Splitting on whitespace alone
doesn't cut it.


32
00:01:48,709 --> 00:01:50,978 line:-1
Another approach is to drop down


33
00:01:51,011 --> 00:01:53,580 line:-1
to low-level index manipulation code.


34
00:01:55,282 --> 00:01:56,550 line:-1
But it's hard to do right,


35
00:01:56.583 --> 00:01:58.485 line:-1 align:center
and even if you know what you're doing,


36
00:01:58,519 --> 00:02:01,188 line:-1
it still takes a lot of code.


37
00:02:01,221 --> 00:02:02,689 line:-1
Let's come back to split.


38
00:02:02,723 --> 00:02:06,059 line:-2
The reason this approach doesn't work
is because it is element-based


39
00:02:06.093 --> 00:02:09.730 line:-2 align:center
while the field separator
is a more complex pattern.


40
00:02:09.763 --> 00:02:12.766 line:-2 align:center
A solution found in a wide variety
of languages


41
00:02:12,799 --> 00:02:15,369 line:-1
is to write a regular expression.


42
00:02:15,402 --> 00:02:18,939 line:-2
Regular expressions emerged
from formal language theory


43
00:02:18,972 --> 00:02:21,808 line:-1
where they define a regular language.


44
00:02:21.842 --> 00:02:25.913 line:-2 align:center
They entered practical application for
search in editors and command-line tools


45
00:02:25.946 --> 00:02:28.949 line:-1 align:center
as well as lexical analysis in compilers.


46
00:02:28,982 --> 00:02:31,218 line:-2
These applications
take regular expressions


47
00:02:31,251 --> 00:02:33,287 line:-1
beyond their theoretical roots,


48
00:02:33,320 --> 00:02:36,089 line:-2
as they need to extract
portions of the input,


49
00:02:36.123 --> 00:02:39.059 line:-1 align:center
control and direct execution,


50
00:02:39.092 --> 00:02:40.694 line:-1 align:center
and add expressive power.


51
00:02:40,727 --> 00:02:42,629 line:-1
And Swift is taking them further.


52
00:02:42,663 --> 00:02:45,032 line:-1
We call this derivative Regex.


53
00:02:45,532 --> 00:02:48,836 line:-2
Regex is a struct generic
over its Output,


54
00:02:48,869 --> 00:02:52,105 line:-2
which is the result of applying it,
including captures.


55
00:02:52,139 --> 00:02:56,009 line:-2
You can create one using a literal
containing regex syntax


56
00:02:56,043 --> 00:02:58,245 line:-1
in between slash delimiters.


57
00:02:58.278 --> 00:03:02.983 line:-2 align:center
Swift's regex syntax is compatible
with Perl, Python, Ruby, Java,


58
00:03:03,016 --> 00:03:06,453 line:-2
NSRegularExpression,
and many, many others.


59
00:03:07,421 --> 00:03:10,624 line:-1
This regex matches one or more digits.


60
00:03:10,657 --> 00:03:14,695 line:-2
The compiler knows regex syntax,
so you'll get syntax highlighting,


61
00:03:14.728 --> 00:03:17.965 line:-2 align:center
compile-time errors,
and even strongly-typed captures,


62
00:03:17.998 --> 00:03:20.767 line:-1 align:center
which we'll be meeting later.


63
00:03:20.801 --> 00:03:22.669 line:-1 align:center
A regex can be created at run-time


64
00:03:22,703 --> 00:03:25,739 line:-2
from a string containing
the same regex syntax.


65
00:03:25.772 --> 00:03:29.543 line:-2 align:center
This is useful for search fields
in editors or command-line tools.


66
00:03:29,576 --> 00:03:34,681 line:-2
This will throw an error at run-time
if the input contains invalid syntax.


67
00:03:34.715 --> 00:03:38.452 line:-2 align:center
The output type
is an existential AnyRegexOutput,


68
00:03:38,485 --> 00:03:42,990 line:-2
because the types and number of
captures won't be known until run-time.


69
00:03:44,157 --> 00:03:47,461 align:center
And the same regex can be
written using a declarative


70
00:03:47,494 --> 00:03:51,698 line:0
and well-structured,
albeit more verbose, regex builder.


71
00:03:53,100 --> 00:03:57,771 line:-2
Let's adapt our split approach
from earlier to use a regex literal.


72
00:03:57.804 --> 00:04:03.277 line:-2 align:center
The first portion matches 2-or-more
occurrences of any whitespace character.


73
00:04:03.310 --> 00:04:07.848 line:-2 align:center
The second portion
matches a single horizontal tab.


74
00:04:07,881 --> 00:04:11,685 line:-2
And the pipe character
denotes a choice between alternatives,


75
00:04:11,718 --> 00:04:17,324 line:-2
giving us a field separator of either
2-or-more-spaces or a single tab.


76
00:04:17.357 --> 00:04:19.459 line:-1 align:center
Now that our fields are split,


77
00:04:19.493 --> 00:04:23.197 line:-2 align:center
let's make a contribution
to civilization itself


78
00:04:23,230 --> 00:04:29,169 line:-2
and normalize that field separator
to a single tab and be done with it.


79
00:04:29,203 --> 00:04:32,272 align:center
We could call 'join'
on the result after splitting,


80
00:04:32,306 --> 00:04:34,641 align:center
but there's a better algorithm
for that:


81
00:04:34,675 --> 00:04:39,213 align:center
'replacing' lets us replace
all field separators with a single tab.


82
00:04:40.247 --> 00:04:44.484 line:-2 align:center
So we go out and evangelize
our clearly superior approach


83
00:04:44,518 --> 00:04:46,253 line:-1
to anyone who will listen.


84
00:04:46,286 --> 00:04:49,990 line:-1
Adoption is...slow but promising.


85
00:04:50,023 --> 00:04:52,326 line:-2
If you are familiar
with regular expressions,


86
00:04:52,359 --> 00:04:55,629 line:-2
you may also know
of their mixed reputation.


87
00:04:55,662 --> 00:05:00,367 line:-2
As the old saying goes, "I had a problem,
so I wrote a regular expression.


88
00:05:00.400 --> 00:05:02.903 line:-1 align:center
Now I have two problems."


89
00:05:02.936 --> 00:05:03.770 line:-1 align:center
But Swift regex is different.


90
00:05:05,372 --> 00:05:09,142 line:-2
Swift advances the art
in four key areas.


91
00:05:09,176 --> 00:05:12,446 line:-1
Regex syntax is concise and expressive,


92
00:05:12.479 --> 00:05:15.048 line:-2 align:center
but it can become terse
and difficult to read.


93
00:05:15.082 --> 00:05:19.019 line:-2 align:center
And newer features have to use
increasingly cryptic syntax.


94
00:05:20.387 --> 00:05:23.090 line:-2 align:center
Swift regexes can be structured
and organized


95
00:05:23.123 --> 00:05:26.760 line:-2 align:center
the way we structure and organize
source code through Regex builders.


96
00:05:26,793 --> 00:05:31,498 line:-2
Literals are concise,
builders give structure,


97
00:05:31,532 --> 00:05:35,869 line:-2
and literals can be used within builders
to find that perfect balance.


98
00:05:36.803 --> 00:05:40.307 line:-2 align:center
Textual representations for data
have become a lot more complicated,


99
00:05:40,340 --> 00:05:45,512 line:-2
and handling them correctly requires
a standards-conforming parser.


100
00:05:45,546 --> 00:05:49,316 line:-2
Swift regex lets you
interweave industrial-strength parsers


101
00:05:49,349 --> 00:05:52,085 line:-1
as individual components of a regex.


102
00:05:52,119 --> 00:05:54,755 line:-2
This is done
in a library-extensible fashion,


103
00:05:54,788 --> 00:05:57,124 line:-1
meaning any parsers can participate.


104
00:05:58.458 --> 00:06:01.061 line:-2 align:center
Much of the history of applied
regular expressions


105
00:06:01,094 --> 00:06:04,965 line:-2
took place in a world
where the entire computer system


106
00:06:04.998 --> 00:06:08.602 line:-2 align:center
only supported
a single language and encoding,


107
00:06:08,635 --> 00:06:10,838 line:-1
most notably ASCII.


108
00:06:10,871 --> 00:06:13,140 line:-1
But the modern world is Unicode.


109
00:06:13,173 --> 00:06:18,145 line:-2
Swift regex does the Unicode
without compromising expressivity.


110
00:06:18.178 --> 00:06:21.014 line:-2 align:center
And finally,
the power of regular expressions


111
00:06:21,048 --> 00:06:25,519 line:-2
can open up a broad search space
that must be exhaustively explored.


112
00:06:25.552 --> 00:06:28.589 line:-2 align:center
This makes their execution
difficult to reason about.


113
00:06:28.622 --> 00:06:30.791 line:-1 align:center
Some languages support controls,


114
00:06:30,824 --> 00:06:33,327 line:-2
but because
they're behind cryptic syntax,


115
00:06:33,360 --> 00:06:35,462 line:-1
they tend to be obscure.


116
00:06:35,495 --> 00:06:41,335 line:-2
Swift regex provides predictable execution
and surfaces controls prominently.


117
00:06:41,368 --> 00:06:44,738 line:-2
Let's go back to the financial statements
we've been working with


118
00:06:44.771 --> 00:06:48.709 line:-2 align:center
and fully parse each transaction
using Regex builders,


119
00:06:48,742 --> 00:06:52,312 line:-2
a declarative approach
to string processing in Swift.


120
00:06:52.346 --> 00:06:56.383 line:-2 align:center
We'll import the RegexBuilder module
to get started.


121
00:06:56,416 --> 00:07:01,088 line:-2
We can re-use the field separator
regex that we just defined.


122
00:07:01,121 --> 00:07:05,459 line:-2
The first field is simple;
it's either a CREDIT or a DEBIT.


123
00:07:05.492 --> 00:07:10.230 line:-2 align:center
We can use the regex literal syntax
we've already seen to write that.


124
00:07:10,264 --> 00:07:13,534 line:-2
After that comes a field separator,
and then the date.


125
00:07:13.567 --> 00:07:16.737 line:-1 align:center
Parsing dates by hand is a bad idea.


126
00:07:16.770 --> 00:07:20.040 line:-2 align:center
Foundation has really good parsers
for types like dates,


127
00:07:20.073 --> 00:07:24.511 line:-2 align:center
numbers, and URLs, and we can
use them directly in a Regex Builder.


128
00:07:25.812 --> 00:07:30.951 line:-2 align:center
We supply an explicit locale which is
our best guess at the author's intent.


129
00:07:30.984 --> 00:07:35.255 line:-2 align:center
We do this instead of implicitly
using the system's current locale.


130
00:07:35,289 --> 00:07:37,958 line:-2
We can always change it later,
and it's easy to do


131
00:07:37,991 --> 00:07:41,895 line:-2
because we made our
assumptions _explicit_ in code.


132
00:07:43,063 --> 00:07:44,898 line:-1
The third field can be "anything,"


133
00:07:44,932 --> 00:07:48,402 line:-2
so it's tempting to just write
"one or more of anything."


134
00:07:48,435 --> 00:07:50,871 line:-2
And while
that will give us the right answer,


135
00:07:50.904 --> 00:07:53.373 line:-1 align:center
it does a lot of unnecessary work first,


136
00:07:53,407 --> 00:07:57,978 line:-2
because it starts off by matching
anything else that comes after it.


137
00:07:58,011 --> 00:08:02,916 line:-2
The regex will back up one character
at a time and try the rest of the pattern.


138
00:08:02,950 --> 00:08:08,288 line:-2
We want to tell the regex to stop when
it sees the terminating field separator.


139
00:08:08,322 --> 00:08:10,858 line:-2
There are a quite a few ways
that we could accomplish this.


140
00:08:10,891 --> 00:08:14,728 line:-2
One good way to do this
is to use NegativeLookahead


141
00:08:14,761 --> 00:08:20,000 line:-2
which peeks at the next part of the input
without actually consuming it.


142
00:08:20.033 --> 00:08:22.269 line:-1 align:center
Here we peek at the input to make sure


143
00:08:22.302 --> 00:08:26.540 line:-2 align:center
a field separator isn't coming up
before matching any character.


144
00:08:26,573 --> 00:08:30,043 line:-2
NegativeLookahead
is one of a family of tools


145
00:08:30,077 --> 00:08:34,481 line:-2
that let you precisely control
how a Regex matches its components.


146
00:08:35,816 --> 00:08:40,053 line:0
Finally, we match the amount,
again using one of Foundation's parsers,


147
00:08:40,087 --> 00:08:42,122 align:center
this time for currency.


148
00:08:42,155 --> 00:08:45,325 align:center
We've been assuming that comma
is a thousands separator


149
00:08:45,359 --> 00:08:50,397 line:0
while period is a decimal separator,
and we make this assumption explicit.


150
00:08:51,331 --> 00:08:55,903 line:-2
We've built a regex that lets us parse
a line from the transaction ledger.


151
00:08:55.936 --> 00:09:01.408 line:-2 align:center
We don't just want to recognize the lines.
We want to extract some of this data out.


152
00:09:01.441 --> 00:09:04.611 line:-1 align:center
To do this, we use captures,


153
00:09:04.645 --> 00:09:08.782 line:-2 align:center
which extract portions
of our input for later processing.


154
00:09:08.815 --> 00:09:12.452 line:-2 align:center
By convention,
the '0th' capture is the part of the input


155
00:09:12.486 --> 00:09:17.791 line:-2 align:center
that the entire regex matched,
and each explicit capture follows.


156
00:09:17,824 --> 00:09:23,697 align:center
Our transaction kind is captured as
a Substring that is a slice of our input.


157
00:09:23,730 --> 00:09:27,234 align:center
For dates, we actually capture
the strongly-typed value


158
00:09:27,267 --> 00:09:31,271 align:center
that was parsed out
without needing to post-process the text.


159
00:09:31,305 --> 00:09:37,044 line:0
The individual or institution is again
captured as a portion of our input,


160
00:09:37,077 --> 00:09:41,048 align:center
and the decimal capture
is another strongly-typed value.


161
00:09:41,081 --> 00:09:44,618 line:-2
To use it, we extract date and decimal
values from the match result,


162
00:09:44.651 --> 00:09:47.287 line:-1 align:center
and the investigators take it from here.


163
00:09:47,321 --> 00:09:52,192 line:-2
It's at this point that we recommend
they dump the data into a real database


164
00:09:52.226 --> 00:09:55.996 line:-2 align:center
for obvious benefits
like structured queries.


165
00:09:56,029 --> 00:09:58,799 line:-1
They have a...different opinion.


166
00:09:58.832 --> 00:10:01.668 line:-2 align:center
They want to
keep everything as strings.


167
00:10:01.702 --> 00:10:07.207 line:-2 align:center
Which is good news for this talk because
we get to see even more of Swift Regex.


168
00:10:07,241 --> 00:10:11,512 line:-2
Everything's going well
until suddenly it's not.


169
00:10:11,545 --> 00:10:14,681 line:-2
We just learned that the date order
in the transaction text,


170
00:10:14.715 --> 00:10:20.354 line:-2 align:center
which we told everyone was
totally ambiguous, is in fact ambiguous.


171
00:10:20,387 --> 00:10:22,322 line:-1
It's not always the same,


172
00:10:22.356 --> 00:10:28.495 line:-2 align:center
and the leading theory is that it depends
on the currency used in the transaction.


173
00:10:28,529 --> 00:10:30,898 line:-1
Because of course it does.


174
00:10:30.931 --> 00:10:35.869 line:-2 align:center
This means that US dollars
is month/day/year


175
00:10:35,903 --> 00:10:40,407 line:-1
and British pounds is day/month/year.


176
00:10:40,440 --> 00:10:44,745 line:-2
So let's write a sed-like script
to disambiguate this.


177
00:10:44.778 --> 00:10:48.215 line:-2 align:center
For our regex, we're going to use
an extended delimiter.


178
00:10:48,248 --> 00:10:53,220 line:-2
This allows us to have slashes inside
without having to escape them.


179
00:10:53.253 --> 00:10:57.524 line:-2 align:center
This also gives us access
to an extended syntax mode


180
00:10:57,558 --> 00:10:59,660 line:-1
where whitespace is ignored,


181
00:10:59,693 --> 00:11:05,065 line:-2
which means we can use whitespace
for readability, just like in normal code.


182
00:11:05.098 --> 00:11:10.871 line:-2 align:center
We used named captures, which show up
in the Regex's output as tuple labels.


183
00:11:11,772 --> 00:11:15,776 line:-2
And we use a Unicode Property
to recognize currency symbols.


184
00:11:15.809 --> 00:11:18.312 line:-1 align:center
This makes our regex more adaptable;


185
00:11:18,345 --> 00:11:21,582 line:-2
we will handle the specific symbols
in application logic.


186
00:11:23.450 --> 00:11:27.221 line:-2 align:center
Rather than try
to cut and splice text manually,


187
00:11:27,254 --> 00:11:30,390 line:-2
we're going to yet again use
Foundation's date parser.


188
00:11:30,424 --> 00:11:33,026 line:-1
pickStrategy receives the currency symbol


189
00:11:33,060 --> 00:11:35,929 line:-2
and will determine
a parse strategy based on it.


190
00:11:35.963 --> 00:11:38.699 line:-2 align:center
All of our assumptions
are explicit in code,


191
00:11:38.732 --> 00:11:41.101 line:-2 align:center
which makes it easier to adapt
and evolve,


192
00:11:41,134 --> 00:11:43,871 line:-2
something we almost
certainly will end up needing.


193
00:11:46,707 --> 00:11:50,644 line:-2
Let's use our regex and helper function
with a find-and-replace algorithm


194
00:11:50,677 --> 00:11:55,315 line:-2
by supplying a closure which uses
the match result, including captures,


195
00:11:55,349 --> 00:11:58,218 line:-1
to construct the replacement string.


196
00:11:58,252 --> 00:12:02,856 line:-2
We pick a strategy based on the captured
currency and parse the captured date.


197
00:12:02.890 --> 00:12:07.361 line:-2 align:center
We can access the captures by name,
instead of only by position.


198
00:12:07,394 --> 00:12:12,099 line:-2
For our output,
we'll format the new date using ISO-8601,


199
00:12:12,132 --> 00:12:14,902 line:-1
an unambiguous industry standard.


200
00:12:14,935 --> 00:12:20,207 line:-2
Our tool transforms this ledger Into
an unambiguous one.


201
00:12:20.240 --> 00:12:23.610 line:-2 align:center
Because we're using
a real date parser and formatter,


202
00:12:23,644 --> 00:12:27,281 line:-2
we're far more adaptable
to changing requirements.


203
00:12:27,314 --> 00:12:30,851 line:-2
And using a Unicode property
to recognize currency symbols


204
00:12:30.884 --> 00:12:33.620 line:-1 align:center
helps us evolve that much quicker.


205
00:12:33.654 --> 00:12:38.825 line:-2 align:center
A regex declares an algorithm
over some model of String.


206
00:12:38.859 --> 00:12:43.497 line:-2 align:center
Swift's String presents multiple models
for working with Unicode.


207
00:12:43,530 --> 00:12:50,137 line:-2
This string, representing a love story
for the ages, contains 3 characters.


208
00:12:50.170 --> 00:12:52.573 line:-1 align:center
These characters are complex entities


209
00:12:52,606 --> 00:12:56,210 line:-2
formally called Unicode
extended grapheme clusters.


210
00:12:56,243 --> 00:13:02,549 align:center
A single Character is composed
of one or more Unicode scalar values.


211
00:13:02,583 --> 00:13:04,918 align:center
String provides a UnicodeScalarView


212
00:13:04,952 --> 00:13:08,989 align:center
to access this lower-level
representation of its contents.


213
00:13:09,022 --> 00:13:14,895 line:0
This enables advanced usage as well
as compatibility with other systems.


214
00:13:15.963 --> 00:13:19.132 line:-2 align:center
Our first Character,
who is our story's protagonist,


215
00:13:19.166 --> 00:13:22.336 line:-1 align:center
is composed of 4 Unicode scalars:


216
00:13:22,369 --> 00:13:27,875 align:center
ZOMBIE,
Zero Width Joiner, FEMALE SIGN, and uh...


217
00:13:27,908 --> 00:13:29,710 align:center
VARIATION SELECTOR-16,


218
00:13:29,743 --> 00:13:35,182 line:0
which in this context signals
a preference to be rendered as emoji.


219
00:13:35,215 --> 00:13:37,284 line:-1
Of course!


220
00:13:37,317 --> 00:13:41,421 line:-2
These scalars produce
the single emoji we see visually.


221
00:13:41,455 --> 00:13:47,227 align:center
When strings are stored in memory,
they are encoded as UTF-8 bytes.


222
00:13:47,261 --> 00:13:50,564 line:0
We can view these bytes
using the UTF-8 view.


223
00:13:50,597 --> 00:13:56,069 line:0
UTF-8 is a variable-width encoding,
meaning multiple bytes may be needed


224
00:13:56,103 --> 00:13:58,338 align:center
for a single scalar, and as we saw,


225
00:13:58,372 --> 00:14:03,010 line:0
multiple scalars may be needed
for a single character.


226
00:14:03.043 --> 00:14:07.581 line:-2 align:center
Our story's protagonist,
represented by 4 Unicode scalars,


227
00:14:07.614 --> 00:14:11.251 line:-1 align:center
is encoded using 13 UTF-8 bytes.


228
00:14:11.285 --> 00:14:15.255 line:-2 align:center
In addition
to being composed of multiple scalars,


229
00:14:15,289 --> 00:14:20,427 line:-2
the same exact character can sometimes be
represented by different sets of scalars.


230
00:14:20,460 --> 00:14:24,898 line:-2
This comes up a lot when handling
languages other than English.


231
00:14:24,932 --> 00:14:27,701 line:-2
In this example,
the 'e' with an acute accent


232
00:14:27,734 --> 00:14:33,340 line:-2
can be represented as either a single
scalar, precomposed ‘e’ with acute accent,


233
00:14:33.373 --> 00:14:38.245 line:-2 align:center
or as an ASCII 'e' followed
by a combining acute accent.


234
00:14:38.278 --> 00:14:43.183 line:-2 align:center
These are the same characters,
so String comparison will return true.


235
00:14:43,217 --> 00:14:45,819 line:-2
This is because String obeys
what is formally called


236
00:14:45,853 --> 00:14:48,322 line:-1
Unicode Canonical Equivalence.


237
00:14:49,590 --> 00:14:52,292 line:0
From the perspective
of the UnicodeScalarView,


238
00:14:52,326 --> 00:14:55,429 line:0
or the UTF-8 view,
the contents are different,


239
00:14:55,462 --> 00:14:59,933 line:0
and we see this difference when we
compare within these lower-level views.


240
00:14:59.967 --> 00:15:05.239 line:-2 align:center
Just like String, Swift regex is
obsessively Unicode correct by default.


241
00:15:05,272 --> 00:15:09,009 line:-2
But it does this without
compromising expressivity.


242
00:15:09.042 --> 00:15:11.545 line:-1 align:center
Let's switch over a pair of strings.


243
00:15:11.578 --> 00:15:16.383 line:-2 align:center
For the first string, we'll match the
named Unicode Scalar SPARKLING HEART


244
00:15:16.416 --> 00:15:19.620 line:-2 align:center
surrounded by
any characters denoted by dot (.).


245
00:15:21.288 --> 00:15:24.291 line:-2 align:center
The any character class
will match any Swift character;


246
00:15:24.324 --> 00:15:27.027 line:-2 align:center
that is, any Unicode extended
grapheme cluster.


247
00:15:29,830 --> 00:15:34,801 line:-2
For the second string, characters
that are equal compare as equals...


248
00:15:34,835 --> 00:15:37,004 line:-1
and we can ignore case.


249
00:15:37.037 --> 00:15:41.475 line:-2 align:center
And now our simple love story
has become a lot more complicated.


250
00:15:41,508 --> 00:15:45,779 line:-1
Sometimes life, or in this case un-life,


251
00:15:45,812 --> 00:15:48,382 line:-1
has complexities that we need to process.


252
00:15:49,416 --> 00:15:54,555 line:-2
Just like String, if you do need to
process Unicode scalar values yourself,


253
00:15:54.588 --> 00:15:58.625 line:-2 align:center
either for compatibility or sub-grapheme
cluster precision,


254
00:15:58,659 --> 00:16:02,262 line:-2
you can by matching with
'unicodeScalar' semantics.


255
00:16:02,296 --> 00:16:04,598 line:-1
When we match at the Unicode Scalar level,


256
00:16:04.631 --> 00:16:07.501 line:-2 align:center
the dot matches
a single Unicode Scalar value


257
00:16:07,534 --> 00:16:09,870 line:-1
instead of a full Swift Character.


258
00:16:09.903 --> 00:16:14.508 line:-2 align:center
Which means we get to see our
friend again: VARIATION-SELECTOR 16.


259
00:16:14,541 --> 00:16:18,645 line:-2
This friendly little selector gets
matched by the dot, and you can't see it


260
00:16:18,679 --> 00:16:23,083 line:-2
because when it's all alone,
it renders as empty whitespace.


261
00:16:23,116 --> 00:16:25,118 line:-1
So helpful.


262
00:16:26,920 --> 00:16:30,524 line:-2
Now that we've worked with
precision and correctness,


263
00:16:30,557 --> 00:16:34,027 line:-2
let's do something a little different,
and get back to finance.


264
00:16:34,061 --> 00:16:36,296 line:-1
The investigators have returned,


265
00:16:36,330 --> 00:16:40,234 line:-2
and this time they have
an interesting request.


266
00:16:40.267 --> 00:16:43.770 line:-2 align:center
They modified our transaction
matching tool to sniff transactions


267
00:16:43.804 --> 00:16:48.909 line:-2 align:center
live off the wire instead of
processing ledgers after the fact.


268
00:16:48,942 --> 00:16:52,513 line:-2
Looking at their code,
they actually did a reasonably good job,


269
00:16:52.546 --> 00:16:56.116 line:-2 align:center
but they're facing scaling issues
and need our help.


270
00:16:56,149 --> 00:17:01,555 align:center
The transactions they are processing are
very similar, but with minor differences.


271
00:17:01,588 --> 00:17:05,792 align:center
Instead of a date,
they have a precise time stamp instead.


272
00:17:05.826 --> 00:17:09.162 line:-2 align:center
This is represented in a clear,
unambiguous,


273
00:17:09.196 --> 00:17:12.866 line:-1 align:center
and shockingly proprietary format.


274
00:17:12,900 --> 00:17:16,737 line:-2
They have a regular expression
written in a prior century


275
00:17:16.770 --> 00:17:19.106 line:-1 align:center
that matches this just fine.


276
00:17:19.139 --> 00:17:22.042 line:-1 align:center
It's fine.


277
00:17:22.075 --> 00:17:23.911 line:-1 align:center
Next they have a details field


278
00:17:23.944 --> 00:17:26.813 line:-2 align:center
which includes individuals
and identification codes.


279
00:17:26.847 --> 00:17:29.416 line:-2 align:center
They filter transactions
against this field


280
00:17:29,449 --> 00:17:33,453 line:-2
by using a run-time compiled regex
derived from input.


281
00:17:33.487 --> 00:17:36.990 line:-2 align:center
Because this is live,
and there are more fields later on,


282
00:17:37,024 --> 00:17:41,295 line:-2
they like to bail early on
any uninteresting transactions.


283
00:17:41.328 --> 00:17:44.898 line:-2 align:center
Then comes an amount
and other fields like checksums,


284
00:17:44,932 --> 00:17:47,234 line:-1
which they handle just fine on their own.


285
00:17:47,267 --> 00:17:54,208 line:-2
And of course, fields are still separated
by 2-or-more spaces or a tab.


286
00:17:55.375 --> 00:17:58.512 line:-2 align:center
Their transaction matcher
looks a lot like ours.


287
00:17:58,545 --> 00:18:01,114 line:-2
They have their own regex
for the timestamp,


288
00:18:01,148 --> 00:18:04,551 line:-2
their details regex
is compiled from input,


289
00:18:04.585 --> 00:18:06.887 line:-1 align:center
and they handle the rest of the fields.


290
00:18:06.920 --> 00:18:10.724 line:-2 align:center
They did a reasonably good job.
Everything technically works.


291
00:18:10,757 --> 00:18:12,793 line:-1
It just isn't scaling well.


292
00:18:12.826 --> 00:18:15.829 line:-2 align:center
They notice that their timestamp
and details regexes


293
00:18:15.863 --> 00:18:19.433 line:-2 align:center
often match much more
of the input than their fields.


294
00:18:19,466 --> 00:18:22,202 line:-2
Ideally, these regexes
would be constrained


295
00:18:22,236 --> 00:18:25,539 line:-1
to only run over a single field.


296
00:18:25,572 --> 00:18:29,910 line:-2
We handled a similar issue in
our project by using negative lookahead,


297
00:18:29.943 --> 00:18:32.079 line:-1 align:center
so let's pull that regex in.


298
00:18:33.714 --> 00:18:36.083 line:-2 align:center
'field' will efficiently match
any character


299
00:18:36,116 --> 00:18:38,619 line:-1
until it encounters a field separator,


300
00:18:38.652 --> 00:18:43.090 line:-2 align:center
and we'd like to use it
to contain their regexes.


301
00:18:43.123 --> 00:18:47.661 line:-2 align:center
We could do this as a post-processing
step, but because this is running live,


302
00:18:47.694 --> 00:18:52.132 line:-2 align:center
we want to bail early if these
regexes don't match their fields.


303
00:18:52.165 --> 00:18:55.802 line:-1 align:center
We can do this using TryCapture.


304
00:18:55,836 --> 00:18:59,873 line:-2
TryCapture passes the matched field
to our closure,


305
00:18:59.907 --> 00:19:04.978 line:-2 align:center
where we test against the investigator's
timestamp and details regexes.


306
00:19:05,012 --> 00:19:08,749 line:-2
If they match,
we return the field's value,


307
00:19:08.782 --> 00:19:12.486 line:-2 align:center
meaning that matching succeeded
and the field is captured.


308
00:19:12,519 --> 00:19:17,157 line:-2
Otherwise we return nil,
which signals that matching failed.


309
00:19:18.125 --> 00:19:21.862 line:-2 align:center
TryCapture's closure
actively participates in matching,


310
00:19:21.895 --> 00:19:24.598 line:-1 align:center
which is exactly what we need.


311
00:19:24,631 --> 00:19:27,668 line:-2
And with this,
we've solved a major scaling issue.


312
00:19:27,701 --> 00:19:29,203 line:-1
But there's still one more problem:


313
00:19:29,236 --> 00:19:32,606 line:-2
when something later on
in the transaction matcher fails,


314
00:19:32,639 --> 00:19:35,309 line:-1
it can take a long time to exit.


315
00:19:37.578 --> 00:19:41.048 line:-2 align:center
Our fieldSeparator regex
we defined at the very beginning


316
00:19:41.081 --> 00:19:45.986 line:-2 align:center
matches 2-or-more whitespaces or a tab,
which is what we want.


317
00:19:46,019 --> 00:19:48,522 line:-1
If there are 8 whitespace characters,


318
00:19:48,555 --> 00:19:53,160 line:-2
it will match all of them
before trying the rest of the regex.


319
00:19:53,193 --> 00:19:56,129 line:-2
But if the regex later fails,
it will back up


320
00:19:56.163 --> 00:20:00.367 line:-2 align:center
and only match 7 whitespace characters
before trying again.


321
00:20:00.400 --> 00:20:05.672 line:-2 align:center
And if that fails, it will match
only 6 whitespace characters, and so on.


322
00:20:10.544 --> 00:20:15.949 line:-2 align:center
Only after trying all alternatives
does matching fail.


323
00:20:15,983 --> 00:20:21,622 line:-2
This backing up in order to try
alternatives is called global backtracking


324
00:20:21,655 --> 00:20:24,791 line:-1
or, in formal logics, the Kleene closure.


325
00:20:24.825 --> 00:20:28.996 line:-2 align:center
It's what gives regular expressions
their characteristic power.


326
00:20:29.029 --> 00:20:32.399 line:-2 align:center
But it opens up
a broad search space to explore,


327
00:20:32.432 --> 00:20:36.069 line:-2 align:center
and here we want
a more linear search space.


328
00:20:36.103 --> 00:20:39.973 line:-2 align:center
We want to match all of the whitespace
and never give any up.


329
00:20:40.007 --> 00:20:42.943 line:-2 align:center
There are a couple tools
that we could use;


330
00:20:42.976 --> 00:20:45.679 line:-2 align:center
the more general tool
is to put fieldSeparator


331
00:20:45,712 --> 00:20:50,284 line:-2
in a local backtracking scope
instead of a global one.


332
00:20:51.318 --> 00:20:54.321 line:-1 align:center
The Local builder creates a scope where,


333
00:20:54.354 --> 00:20:57.891 line:-2 align:center
if the contained regex
ever successfully matches,


334
00:20:57.925 --> 00:21:01.528 line:-1 align:center
any untried alternatives are discarded.


335
00:21:02.896 --> 00:21:06.633 line:-2 align:center
Even if our transaction matcher
fails later on,


336
00:21:06.667 --> 00:21:10.771 line:-2 align:center
we don't go back
to try consuming fewer spaces.


337
00:21:10,804 --> 00:21:14,107 line:-2
Global backtracking,
the default for regex,


338
00:21:14,141 --> 00:21:17,544 line:-1
is great for search and fuzzy matching.


339
00:21:17,578 --> 00:21:22,449 line:-2
Local is useful for matching
precisely specified tokens.


340
00:21:22,482 --> 00:21:28,222 line:-2
The field separator,
as vexing as it may be, is precise.


341
00:21:29.389 --> 00:21:33.527 line:-2 align:center
Local is known elsewhere as
an atomic non-capturing group,


342
00:21:33.560 --> 00:21:36.864 line:-1 align:center
which can be a… frightening name.


343
00:21:36,897 --> 00:21:40,100 line:-2
Makes it seem like
your regex might blow up.


344
00:21:40,133 --> 00:21:45,038 line:-2
But it actually does the opposite--
it contains the search space.


345
00:21:46,573 --> 00:21:50,677 line:-2
And with this, we've helped them
solve their scaling issues.


346
00:21:50,711 --> 00:21:53,680 line:-1
Today we got to meet Swift Regex,


347
00:21:53,714 --> 00:21:56,950 line:-2
but there's so much more
that we weren't able to cover.


348
00:21:56,984 --> 00:22:02,256 line:0
Be sure to check out Swift Regex: Beyond
the Basics by my colleague Richard.


349
00:22:02,289 --> 00:22:05,826 line:0
Before we leave,
I want to highlight a few points.


350
00:22:05,859 --> 00:22:11,131 line:0
Regex builders give structure.
Regex literals are concise.


351
00:22:11,164 --> 00:22:14,268 line:0
The choice between when to use one
over the other


352
00:22:14,301 --> 00:22:16,870 align:center
will ultimately be subjective.


353
00:22:17,771 --> 00:22:21,608 align:center
Make sure to use real parsers
whenever possible.


354
00:22:21,642 --> 00:22:26,980 line:0
This will save you massive
amounts of time and avoid headaches.


355
00:22:27,014 --> 00:22:29,816 align:center
Just by using Swift's defaults,
you're going to get


356
00:22:29,850 --> 00:22:33,687 align:center
far more Unicode support
and goodness than anywhere else.


357
00:22:33,720 --> 00:22:37,558 align:center
Look for ways to use things
like character properties effectively,


358
00:22:37,591 --> 00:22:40,928 align:center
such as when we
matched the currency symbols.


359
00:22:40,961 --> 00:22:44,731 align:center
And finally, simplify
your search and processing algorithms


360
00:22:44,765 --> 00:22:49,703 line:0
by using controls such as lookahead
and local backtracking scopes.


361
00:22:49,736 --> 00:22:51,338 line:-1
Thank you for watching.

