2
00:00:00,033 --> 00:00:03,036 line:-1
â™ª Mellow instrumental
hip-hop music â™ª


3
00:00:03,036 --> 00:00:10,377 position:90% size:2% line:1
â™ª


4
00:00:10.377 --> 00:00:11.645 line:-1 position:50%
Hello, I'm Donghao.


5
00:00:11.645 --> 00:00:14.348 line:-1 position:50%
In this session, we are going
to learn more about how to build


6
00:00:14,348 --> 00:00:16,950 line:-1
great data visualizations
with Swift Charts.


7
00:00:16.950 --> 00:00:18.886 line:-1 position:50%
In other words,
we will raise the bar


8
00:00:18.886 --> 00:00:21.855 line:-1 position:50%
of what you can do
with charts in your apps.


9
00:00:21,855 --> 00:00:25,225 line:-1
A great data visualization
makes your app more informative


10
00:00:25,225 --> 00:00:26,927 line:-1
and more engaging.


11
00:00:26,927 --> 00:00:29,129 line:-1
In order to build
a great chart in our apps,


12
00:00:29.129 --> 00:00:31.431 line:-1 position:50%
there are many things
to consider.


13
00:00:31,431 --> 00:00:33,734 line:-1
Of course, we would want
our charts to faithfully


14
00:00:33,734 --> 00:00:38,372 line:-1
communicate the underlying data
and be accessible for everyone.


15
00:00:38.372 --> 00:00:41.241 line:-1 position:50%
But charts in an app
don't live in a vacuum.


16
00:00:41,241 --> 00:00:43,911 line:-1
They are part of the app's
user interface.


17
00:00:43.911 --> 00:00:47.748 line:-1 position:50%
We have to support localization
and OS features like Dark Mode.


18
00:00:47.748 --> 00:00:50.517 line:-1 position:50%
A chart has to have a proper
layout that fits seamlessly


19
00:00:50,517 --> 00:00:52,519 line:-1
into the rest of the UI;


20
00:00:52.519 --> 00:00:57.224 line:-1 position:50%
it should support Dynamic Type
and device screen sizes.


21
00:00:57,224 --> 00:01:00,160 line:-1
We'll also want charts
to work in all platforms,


22
00:01:00.160 --> 00:01:04.164 line:-1 position:50%
and have great animation
for the best look and feel.


23
00:01:04,164 --> 00:01:06,633 line:-1
Swift Charts takes care of
a lot of these basic features


24
00:01:06,633 --> 00:01:09,603 line:-1
for you automatically,
so you can focus more


25
00:01:09,603 --> 00:01:12,806 line:-1
on building the best charts to
communicate your unique data


26
00:01:12.806 --> 00:01:15.575 line:-1 position:50%
and make it accessible
for everyone.


27
00:01:15.575 --> 00:01:17.811 line:-1 position:50%
Swift Charts achieves
this by providing you


28
00:01:17,811 --> 00:01:21,882 line:-1
with a declarative syntax
that feels just like SwiftUI.


29
00:01:21.882 --> 00:01:23.750 line:-1 position:50%
You specify what you want
in a chart


30
00:01:23,750 --> 00:01:26,653 line:-1
with a small amount of code,
and Swift Charts will


31
00:01:26,653 --> 00:01:30,057 line:-1
automatically produce
a great chart out of the box.


32
00:01:30.057 --> 00:01:31.158 line:-1 position:50%
Swift Charts also provides


33
00:01:31.158 --> 00:01:33.794 line:-1 position:50%
a rich set
of customization options,


34
00:01:33.794 --> 00:01:37.364 line:-1 position:50%
so you can style the chart to
match your unique application.


35
00:01:37.364 --> 00:01:38.665 line:-1 position:50%
This session is about giving you


36
00:01:38,665 --> 00:01:41,802 line:-1
a deeper understanding
of Swift Charts.


37
00:01:41,802 --> 00:01:43,737 line:-1
We will start by covering
the basic building blocks


38
00:01:43.737 --> 00:01:45.472 line:-1 position:50%
of the declarative syntax:


39
00:01:45.472 --> 00:01:48.642 line:-1 position:50%
marks and the composition
of marks.


40
00:01:48.642 --> 00:01:51.945 line:-1 position:50%
Here are some examples where
we use charts in Apple products.


41
00:01:51,945 --> 00:01:54,514 line:-1
As you can see,
there is a wide variety of data,


42
00:01:54.514 --> 00:01:56.984 line:-1 position:50%
chart types, and styles.


43
00:01:56.984 --> 00:01:58.986 line:-1 position:50%
Instead of providing
a prebuilt component


44
00:01:58.986 --> 00:02:01.888 line:-1 position:50%
for each type of chart,
Swift Charts is built


45
00:02:01.888 --> 00:02:05.559 line:-1 position:50%
on the idea of creating charts
by composition.


46
00:02:05,559 --> 00:02:08,829 line:-1
It provides a small number
of basic building blocks


47
00:02:08,829 --> 00:02:10,931 line:-1
by combining them
in different ways,


48
00:02:10,931 --> 00:02:13,333 line:-1
you can create
a wide range of charts.


49
00:02:13,333 --> 00:02:14,968 line:-1
Let me show you how it works.


50
00:02:14,968 --> 00:02:17,371 line:-1
To do that,
I'll need an example.


51
00:02:17.371 --> 00:02:19.439 line:-1 position:50%
All of my teammates
love pancakes,


52
00:02:19.439 --> 00:02:22.142 line:-1 position:50%
so we are having an app
to track orders for a food truck


53
00:02:22.142 --> 00:02:24.711 line:-1 position:50%
selling various
kinds of pancakes.


54
00:02:24.711 --> 00:02:27.080 line:-1 position:50%
Here is a chart showing
the number of pancakes delivered


55
00:02:27.080 --> 00:02:30.717 line:-1 position:50%
over the last 30 days,
broken down by style.


56
00:02:30,717 --> 00:02:33,887 line:-1
This is widely known
as a bar chart.


57
00:02:33.887 --> 00:02:37.357 line:-1 position:50%
In Swift Charts, we consider
each of the six blue rectangles


58
00:02:37.357 --> 00:02:38.992 line:-1 position:50%
a mark.


59
00:02:38.992 --> 00:02:43.697 line:-1 position:50%
A mark is a graphical element
that represents data.


60
00:02:43,697 --> 00:02:45,966 line:-1
This is a bar mark
showing the number of cachapas


61
00:02:45.966 --> 00:02:48.935 line:-1 position:50%
sold over the last 30 days.


62
00:02:48,935 --> 00:02:51,438 line:-1
In this chart
we have six bar marks,


63
00:02:51,438 --> 00:02:53,673 line:-1
each showing a pancake style


64
00:02:53,673 --> 00:02:56,943 line:-1
and the corresponding
sales number.


65
00:02:56.943 --> 00:02:59.746 line:-1 position:50%
Let's see how
this is written in code.


66
00:02:59.746 --> 00:03:02.682 line:-1 position:50%
Here we have a SwiftUI view that
includes a descriptive title


67
00:03:02.682 --> 00:03:06.787 line:-1 position:50%
like "Most Sold Style, Cachapa,"
and an empty chart.


68
00:03:06,787 --> 00:03:08,989 line:-1
The chart type here
is the top-level view


69
00:03:08,989 --> 00:03:11,324 line:-1
that defines a single chart.


70
00:03:11.324 --> 00:03:13.727 line:-1 position:50%
You can add a chart
in your SwiftUI application


71
00:03:13,727 --> 00:03:16,363 line:-1
just like adding any other view.


72
00:03:16,363 --> 00:03:19,633 line:-1
For the rest of the talk,
we'll focus on the chart part.


73
00:03:19,633 --> 00:03:22,302 line:-1
You can add marks to a chart.


74
00:03:22,302 --> 00:03:24,404 line:-1
Here we have a single
BarMark showing cachapa


75
00:03:24.404 --> 00:03:26.440 line:-1 position:50%
and its sales number.


76
00:03:26,440 --> 00:03:29,142 line:-1
This makes a chart
with a single bar mark.


77
00:03:29,142 --> 00:03:31,778 line:-1
As shown in the screenshot,
the chart fits nicely


78
00:03:31.778 --> 00:03:33.880 line:-1 position:50%
into the rest
of the user interface


79
00:03:33.880 --> 00:03:36.249 line:-1 position:50%
and has a great default style.


80
00:03:36,249 --> 00:03:40,353 line:-1
For example, nicely rounded
numbers in the X-axis.


81
00:03:40.353 --> 00:03:43.457 line:-1 position:50%
If you add another bar mark
with different name and sales,


82
00:03:43.457 --> 00:03:45.358 line:-1 position:50%
you'll get a second bar.


83
00:03:45,358 --> 00:03:48,161 line:-1
You can repeat this
to add more bars.


84
00:03:48.161 --> 00:03:49.162 line:-1 position:50%
In a real app,


85
00:03:49.162 --> 00:03:51.965 line:-1 position:50%
we'll probably generate
these marks programmatically.


86
00:03:51.965 --> 00:03:54.601 line:-1 position:50%
You can do so by providing
an array of structs or tuples


87
00:03:54.601 --> 00:03:57.370 line:-1 position:50%
to the chart,
and use a ForEach


88
00:03:57,370 --> 00:04:00,707 line:-1
to create the bar marks with
the values from each element.


89
00:04:00,707 --> 00:04:04,244 line:-1
If ForEach is the only content
in the chart, like in this case,


90
00:04:04,244 --> 00:04:07,814 line:-1
you can also put data
in the chart directly.


91
00:04:07.814 --> 00:04:10.717 line:-1 position:50%
Many SwiftUI modifiers
are available for marks.


92
00:04:10.717 --> 00:04:13.153 line:-1 position:50%
For example, you could set
the color of the bars


93
00:04:13.153 --> 00:04:15.856 line:-1 position:50%
with the .foregroundStyle
modifier.


94
00:04:15,856 --> 00:04:17,724 line:-1
Here we are setting it
to a named color,


95
00:04:17,724 --> 00:04:21,862 line:-1
which can be created
in Xcode as a named asset.


96
00:04:21.862 --> 00:04:23.964 line:-1 position:50%
It's very important
that the chart is accessible


97
00:04:23,964 --> 00:04:25,599 line:-1
for everyone.


98
00:04:25.599 --> 00:04:28.869 line:-1 position:50%
By default, the chart will be
exposed to VoiceOver users


99
00:04:28.869 --> 00:04:32.672 line:-1 position:50%
with automatically generated
accessibility elements.


100
00:04:32,672 --> 00:04:35,142 line:-1
You can customize these
with the .accessibilityLabel


101
00:04:35.142 --> 00:04:37.944 line:-1 position:50%
and .accessibilityValue
modifiers.


102
00:04:37,944 --> 00:04:40,480 line:-1
Here for example,
we set the label to the name


103
00:04:40.480 --> 00:04:43.383 line:-1 position:50%
of the pancake,
and the value to the sales


104
00:04:43.383 --> 00:04:45.385 line:-1 position:50%
with the suffix "sold."


105
00:04:45.385 --> 00:04:50.123 line:-1 position:50%
As a result, we get a custom
experience for VoiceOver users.


106
00:04:50,123 --> 00:04:55,562 line:-1
VoiceOver: Cachapa, 916 sold.
Injera, 850 sold.


107
00:04:55.562 --> 00:04:59.499 line:-1 position:50%
CrÃªpe, 802 sold.


108
00:04:59,499 --> 00:05:01,868 line:-1
Donghao: Our app also tracks
pancake deliveries


109
00:05:01.868 --> 00:05:03.503 line:-1 position:50%
over the days.


110
00:05:03.503 --> 00:05:06.239 line:-1 position:50%
Here, we have a view showing
the number of pancakes sold


111
00:05:06,239 --> 00:05:08,141 line:-1
in the last 30 days.


112
00:05:08,141 --> 00:05:12,512 line:-1
The chart gives a detailed view
of each individual day.


113
00:05:12.512 --> 00:05:14.514 line:-1 position:50%
Let's see how
to make this chart.


114
00:05:14,514 --> 00:05:17,384 line:-1
Here, we have a data array
with day and sales.


115
00:05:17,384 --> 00:05:19,386 line:-1
The day is represented
by a Date value


116
00:05:19.386 --> 00:05:21.388 line:-1 position:50%
at the start of the day.


117
00:05:21,388 --> 00:05:23,723 line:-1
We visualize the data
with bar marks,


118
00:05:23,723 --> 00:05:26,493 line:-1
where x shows day,
and the unit parameter here


119
00:05:26.493 --> 00:05:28.595 line:-1 position:50%
means that the Date values
represent the duration


120
00:05:28,595 --> 00:05:30,697 line:-1
of a calendar day,


121
00:05:30.697 --> 00:05:33.466 line:-1 position:50%
and y shows the sales
of the day.


122
00:05:33,466 --> 00:05:35,001 line:-1
As you see on the right,


123
00:05:35,001 --> 00:05:38,838 line:-1
we get a bar chart
showing sales over the days.


124
00:05:38.838 --> 00:05:41.875 line:-1 position:50%
Bar chart is not the only way
to visualize this data.


125
00:05:41.875 --> 00:05:43.677 line:-1 position:50%
Let's try a line chart.


126
00:05:43,677 --> 00:05:45,011 line:-1
The only change we have to make


127
00:05:45.011 --> 00:05:48.048 line:-1 position:50%
is to replace BarMark
with LineMark.


128
00:05:48,048 --> 00:05:50,817 line:-1
With a declarative syntax,
it is very easy to switch


129
00:05:50.817 --> 00:05:54.187 line:-1 position:50%
between chart types
in Swift Charts.


130
00:05:54,187 --> 00:05:57,557 line:-1
The previous chart shows
total sales over time.


131
00:05:57.557 --> 00:06:00.827 line:-1 position:50%
But the food truck service has
been operating in two cities,


132
00:06:00.827 --> 00:06:03.530 line:-1 position:50%
and we would love to compare
the sales between the two cities


133
00:06:03,530 --> 00:06:07,801 line:-1
on each weekday,
to help us decide where to go.


134
00:06:07,801 --> 00:06:11,705 line:-1
The lines in this chart show
the sales from Monday to Sunday.


135
00:06:11,705 --> 00:06:13,974 line:-1
Each line represents a city.


136
00:06:13,974 --> 00:06:16,776 line:-1
Let's see how this is built.


137
00:06:16,776 --> 00:06:18,812 line:-1
Now suppose we have
two cities' data


138
00:06:18,812 --> 00:06:21,748 line:-1
defined here
with an array of tuples,


139
00:06:21,748 --> 00:06:25,819 line:-1
each contains city name
and the sales of the weekdays.


140
00:06:25,819 --> 00:06:28,555 line:-1
Then, we can wrap
the line chart we had before


141
00:06:28.555 --> 00:06:32.425 line:-1 position:50%
with a ForEach that loops
over the series data.


142
00:06:32,425 --> 00:06:34,794 line:1
In order to differentiate
the two cities,


143
00:06:34,794 --> 00:06:36,696 position:50%
we use the
.foregroundStyle(by:) modifier


144
00:06:36,696 --> 00:06:39,799 position:50%
to style the two lines
by the city name.


145
00:06:39,799 --> 00:06:42,769 position:50%
As you can see, Swift Charts
automatically picks two colors


146
00:06:42,769 --> 00:06:45,205 line:1
for the two cities,
color the lines,


147
00:06:45,205 --> 00:06:48,742 position:50%
and then add a legend to
indicate what each color means.


148
00:06:48,742 --> 00:06:51,278 position:50%
The default colors are chosen
to be system colors


149
00:06:51,278 --> 00:06:54,147 position:50%
that are easy to differentiate.


150
00:06:54,147 --> 00:06:55,715 position:50%
To make the chart
easier to read


151
00:06:55,715 --> 00:06:59,319 line:1
for people with color blindness,
we can add symbols to the lines


152
00:06:59,319 --> 00:07:01,588 position:50%
to further differentiate them.


153
00:07:01,588 --> 00:07:03,890 position:50%
This can be done by adding
the .symbol(by:) modifier


154
00:07:03,890 --> 00:07:06,026 line:1
with city as the data.


155
00:07:06,026 --> 00:07:08,995 position:50%
Finally, to make the lines
look smoother,


156
00:07:08,995 --> 00:07:11,197 position:50%
we can use a curve
as the interpolation method


157
00:07:11,197 --> 00:07:13,199 line:1
for the lines.


158
00:07:13,199 --> 00:07:15,135 line:1
Even with the two series
line chart,


159
00:07:15,135 --> 00:07:19,005 position:50%
we can still go back to bar mark
and see how it looks like.


160
00:07:19.005 --> 00:07:21.074 line:-1 position:50%
Changing the mark
type to BarMark,


161
00:07:21.074 --> 00:07:24.744 line:-1 position:50%
and remove the modifiers
that aren't relevant to bars,


162
00:07:24.744 --> 00:07:27.047 line:-1 position:50%
we get a stacked bar chart.


163
00:07:27,047 --> 00:07:28,648 line:-1
The bars are
automatically stacked


164
00:07:28,648 --> 00:07:31,618 line:-1
because we now have
two bars for each month.


165
00:07:31,618 --> 00:07:33,486 line:-1
While the stacked bar chart
is great for showing


166
00:07:33,486 --> 00:07:35,889 line:-1
the total sales value
for the two cities,


167
00:07:35,889 --> 00:07:39,526 line:-1
it's not very good for comparing
between the two cities.


168
00:07:39,526 --> 00:07:42,028 line:1
To make it easier to compare,
we can turn this


169
00:07:42,028 --> 00:07:46,633 line:1
into a grouped bar chart with
the .position(by:) modifier.


170
00:07:46,633 --> 00:07:49,736 line:-1
So far, we've seen
bar marks and line marks.


171
00:07:49,736 --> 00:07:52,472 line:-1
Swift Charts supports a couple
of other mark types


172
00:07:52.472 --> 00:07:57.777 line:-1 position:50%
including point mark, area mark,
rule mark, and rectangle mark.


173
00:07:57.777 --> 00:08:00.914 line:-1 position:50%
You can combine these marks
to build more complex charts.


174
00:08:00.914 --> 00:08:03.616 line:-1 position:50%
Let's see an example.


175
00:08:03.616 --> 00:08:06.019 line:-1 position:50%
Let's start with a line chart
showing the average daily sales


176
00:08:06.019 --> 00:08:07.620 line:-1 position:50%
for each month.


177
00:08:07.620 --> 00:08:09.255 line:-1 position:50%
While the average is useful,


178
00:08:09.255 --> 00:08:11.825 line:-1 position:50%
we also want to see the minimum
and maximum daily sales


179
00:08:11,825 --> 00:08:15,095 line:-1
to get an idea
of the more extreme values.


180
00:08:15.095 --> 00:08:18.164 line:-1 position:50%
Let's start by adding
these values to the data.


181
00:08:18.164 --> 00:08:21.034 line:-1 position:50%
We introduce daily min
and daily max to each element


182
00:08:21.034 --> 00:08:23.236 line:-1 position:50%
in the data array.


183
00:08:23,236 --> 00:08:26,573 line:-1
We can then visualize the min
and the max with an area mark,


184
00:08:26,573 --> 00:08:30,043 line:-1
where x is showing month,
and y starts at the daily min,


185
00:08:30.043 --> 00:08:32.011 line:-1 position:50%
and ends at the daily max.


186
00:08:32.011 --> 00:08:34.581 line:-1 position:50%
This way, we have a chart
showing daily average values


187
00:08:34.581 --> 00:08:36.783 line:-1 position:50%
with a line,
and daily min and max values


188
00:08:36.783 --> 00:08:39.419 line:-1 position:50%
with the area around the line.


189
00:08:39,419 --> 00:08:41,321 line:-1
A line plus area
isn't the only way


190
00:08:41.321 --> 00:08:43.390 line:-1 position:50%
to visualize this kind of data.


191
00:08:43,390 --> 00:08:44,858 line:-1
You can easily switch
to other mark types


192
00:08:44.858 --> 00:08:47.227 line:-1 position:50%
to explore more design options.


193
00:08:47.227 --> 00:08:49.996 line:-1 position:50%
For example,
here we are using a BarMark.


194
00:08:49.996 --> 00:08:54.200 line:-1 position:50%
However, the line doesn't seem
to fit very well with the bars.


195
00:08:54,200 --> 00:08:56,669 line:-1
Let's change the line mark
to a RectangleMark,


196
00:08:56,669 --> 00:08:58,905 line:-1
with a height of two points.


197
00:08:58.905 --> 00:09:02.008 line:-1 position:50%
This way, the rectangle mark
creates horizontal lines


198
00:09:02.008 --> 00:09:05.145 line:-1 position:50%
inside the bars
showing the average value.


199
00:09:05.145 --> 00:09:08.114 line:-1 position:50%
You can also adjust
the width of these marks.


200
00:09:08,114 --> 00:09:09,949 line:-1
Here, for example,
we are setting width


201
00:09:09,949 --> 00:09:12,051 line:-1
to be with a ratio of .6


202
00:09:12.051 --> 00:09:14.320 line:-1 position:50%
This means the width
of the bars and rectangles


203
00:09:14.320 --> 00:09:17.757 line:-1 position:50%
will be 60 percent
of the width of a whole month,


204
00:09:17.757 --> 00:09:20.393 line:-1 position:50%
as you can see
in the screenshot.


205
00:09:20.393 --> 00:09:22.095 line:-1 position:50%
Finally, we'd like
to have an option


206
00:09:22,095 --> 00:09:25,765 line:-1
to show the average daily sales
among all the months.


207
00:09:25.765 --> 00:09:27.700 line:-1 position:50%
To do so, we first set
the foreground style


208
00:09:27.700 --> 00:09:31.137 line:-1 position:50%
to a fade gray color
to deemphasize them.


209
00:09:31.137 --> 00:09:33.506 line:-1 position:50%
Then, we add a rule mark
outside the ForEach,


210
00:09:33.506 --> 00:09:35.742 line:-1 position:50%
with y showing
the average value.


211
00:09:35,742 --> 00:09:38,144 line:-1
This adds a horizontal rule.


212
00:09:38.144 --> 00:09:41.414 line:-1 position:50%
To make it clear that the rule
is showing the yearly average,


213
00:09:41,414 --> 00:09:43,383 line:-1
we can add
an annotation to the rule


214
00:09:43.383 --> 00:09:45.685 line:-1 position:50%
using the .annotation modifier.


215
00:09:45.685 --> 00:09:48.521 line:-1 position:50%
This adds a text label
at the top of the rule mark,


216
00:09:48.521 --> 00:09:50.790 line:-1 position:50%
with leading alignment.


217
00:09:50,790 --> 00:09:52,492 line:-1
We've discussed
a couple of examples


218
00:09:52.492 --> 00:09:54.727 line:-1 position:50%
of building charts
by composition.


219
00:09:54,727 --> 00:09:56,996 line:-1
There are many different ways
to use and combine


220
00:09:56.996 --> 00:09:58.631 line:-1 position:50%
these basic marks.


221
00:09:58.631 --> 00:10:03.736 line:-1 position:50%
Like a box plot, multi-series
line chart, population pyramid,


222
00:10:03.736 --> 00:10:08.441 line:-1 position:50%
range plot, stream graph,
multi-series scatter plot,


223
00:10:08.441 --> 00:10:12.245 line:-1 position:50%
heat map, or even a plot
of a vector field.


224
00:10:12,245 --> 00:10:14,781 line:-1
These are just some examples
of the wide variety of charts


225
00:10:14,781 --> 00:10:17,250 line:-1
you can build with Swift Charts.


226
00:10:17.250 --> 00:10:18.885 line:-1 position:50%
Let's dive into the next topic.


227
00:10:18.885 --> 00:10:21.588 line:-1 position:50%
Plotting data
with mark properties.


228
00:10:21,588 --> 00:10:24,791 line:-1
Swift Charts support
three major types or data:


229
00:10:24.791 --> 00:10:28.328 line:-1 position:50%
quantitative,
nominal, and temporal.


230
00:10:28.328 --> 00:10:30.897 line:-1 position:50%
Quantitative data
is a numerical value,


231
00:10:30.897 --> 00:10:33.199 line:-1 position:50%
such as the number
of products sold,


232
00:10:33.199 --> 00:10:36.936 line:-1 position:50%
the temperature of a room,
or the price of a stock.


233
00:10:36.936 --> 00:10:39.839 line:-1 position:50%
Swift Charts treats
Swift numerical types such as


234
00:10:39.839 --> 00:10:44.344 line:-1 position:50%
Int, Float, and Double
as quantitative data.


235
00:10:44,344 --> 00:10:46,613 line:-1
Nominal data,
or categorical data,


236
00:10:46.613 --> 00:10:49.749 line:-1 position:50%
represent discrete
categories or groups.


237
00:10:49,749 --> 00:10:51,718 line:-1
For example,
the name of a person,


238
00:10:51.718 --> 00:10:55.555 line:-1 position:50%
a continent,
or the type of a product.


239
00:10:55,555 --> 00:10:58,091 line:-1
You can use a string
or a custom string-valued enum


240
00:10:58,091 --> 00:10:59,993 line:-1
as nominal data.


241
00:10:59.993 --> 00:11:03.530 line:-1 position:50%
Temporal data represents
a point or interval in time.


242
00:11:03,530 --> 00:11:06,699 line:-1
For example, the duration
of a particular day,


243
00:11:06.699 --> 00:11:09.469 line:-1 position:50%
or the exact time
of a transaction.


244
00:11:09,469 --> 00:11:12,772 line:-1
Swift Charts treats
"Date" as temporal data.


245
00:11:12.772 --> 00:11:15.141 line:-1 position:50%
A chart works
by transforming abstract data,


246
00:11:15.141 --> 00:11:18.678 line:-1 position:50%
like sales value,
into the properties of marks.


247
00:11:18.678 --> 00:11:22.882 line:-1 position:50%
Let's take a look at BarMark,
which can plot data with X, Y,


248
00:11:22.882 --> 00:11:25.318 line:-1 position:50%
and Foreground Style properties.


249
00:11:25,318 --> 00:11:29,289 line:-1
In this example, we plot sales
value, which is quantitative,


250
00:11:29,289 --> 00:11:33,059 line:-1
with the x property,
and name, which is nominal,


251
00:11:33.059 --> 00:11:35.328 line:-1 position:50%
with the y property.


252
00:11:35.328 --> 00:11:37.864 line:-1 position:50%
The resulting chart
consists of horizontal bars,


253
00:11:37.864 --> 00:11:41.901 line:-1 position:50%
each showing Sales on X,
and Name on Y.


254
00:11:41.901 --> 00:11:45.772 line:-1 position:50%
If we swap Name and Sales,
such that Name is on X


255
00:11:45.772 --> 00:11:50.209 line:-1 position:50%
and Sales is on Y, we get
a vertical bar chart instead.


256
00:11:50.209 --> 00:11:52.312 line:-1 position:50%
As you can see,
the BarMark's behavior


257
00:11:52,312 --> 00:11:56,616 line:-1
depends on the data type plotted
with its X and Y properties.


258
00:11:56,616 --> 00:11:58,084 line:-1
The orientation of the bar


259
00:11:58.084 --> 00:12:01.454 line:-1 position:50%
depends on where
the quantitative property is.


260
00:12:01.454 --> 00:12:03.990 line:-1 position:50%
Now, let's look at another chart
with all three properties


261
00:12:03.990 --> 00:12:05.725 line:-1 position:50%
used to plot data.


262
00:12:05.725 --> 00:12:09.262 line:-1 position:50%
Here we plot Weekday,
which is temporal, with X,


263
00:12:09,262 --> 00:12:12,932 line:-1
Sales with Y,
and City with Foreground Style.


264
00:12:12.932 --> 00:12:15.301 line:-1 position:50%
The resulting chart
is a stacked bar chart,


265
00:12:15,301 --> 00:12:18,938 line:-1
where X-axis shows Weekday,
Y-axis shows Sales,


266
00:12:18,938 --> 00:12:21,240 line:-1
and the bars
are colored by city.


267
00:12:21,240 --> 00:12:23,276 line:-1
Swift Charts has six mark types,


268
00:12:23,276 --> 00:12:26,846 line:-1
and six mark properties
that you can plot data with.


269
00:12:26.846 --> 00:12:29.649 line:-1 position:50%
Remember that data
can be of the three kinds,


270
00:12:29.649 --> 00:12:33.186 line:-1 position:50%
so there is a vast array
of possible combinations.


271
00:12:33.186 --> 00:12:35.588 line:-1 position:50%
This is what allows Swift Charts
to support a wide range


272
00:12:35.588 --> 00:12:40.493 line:-1 position:50%
of chart designs with a small
number of basic building blocks.


273
00:12:40.493 --> 00:12:42.161 line:-1 position:50%
When you plot data
with a mark property,


274
00:12:42,161 --> 00:12:45,698 line:-1
for example, sales with Y,
Swift Charts creates a mapping


275
00:12:45.698 --> 00:12:47.567 line:-1 position:50%
that transforms
the abstract data


276
00:12:47,567 --> 00:12:50,503 line:-1
into a proper value
of the property.


277
00:12:50,503 --> 00:12:52,639 line:-1
In this case,
it will transform Sales value


278
00:12:52.639 --> 00:12:55.608 line:-1 position:50%
to Y coordinates
in screen space.


279
00:12:55.608 --> 00:12:57.810 line:-1 position:50%
We use the term "scale"
to refer to the mapping


280
00:12:57,810 --> 00:13:00,780 line:-1
from abstract data, like sales,
to mark property,


281
00:13:00.780 --> 00:13:02.482 line:-1 position:50%
like Y position.


282
00:13:02,482 --> 00:13:04,283 line:-1
You can think of Scale
as a function


283
00:13:04,283 --> 00:13:07,920 line:-1
that takes data value
and returns a property value.


284
00:13:07.920 --> 00:13:11.824 line:-1 position:50%
For example, here is a yScale
function that takes sales


285
00:13:11,824 --> 00:13:14,694 line:-1
and returns the Y position
of the bar.


286
00:13:14,694 --> 00:13:16,696 line:-1
The name "scale"
comes from the fact


287
00:13:16.696 --> 00:13:20.233 line:-1 position:50%
that for position properties,
we often scale the input value


288
00:13:20,233 --> 00:13:24,537 line:-1
by some factor to convert it to
a reasonable screen coordinate.


289
00:13:24,537 --> 00:13:26,706 line:-1
When you plot data
with mark properties,


290
00:13:26.706 --> 00:13:28.741 line:-1 position:50%
a scale is created
to transform the data


291
00:13:28.741 --> 00:13:31.210 line:-1 position:50%
into the corresponding
mark property.


292
00:13:31.210 --> 00:13:34.147 line:-1 position:50%
For example, in this chart
we have three scales,


293
00:13:34.147 --> 00:13:37.684 line:-1 position:50%
each transforming
Weekday to X, Sales to Y,


294
00:13:37,684 --> 00:13:41,087 line:-1
and City to Foreground Style,
respectively.


295
00:13:41,087 --> 00:13:44,490 line:-1
By default, Swift Charts infers
the scales automatically


296
00:13:44.490 --> 00:13:48.661 line:-1 position:50%
from the data, so you get
a nice chart out of the box.


297
00:13:48,661 --> 00:13:49,929 line:-1
You can use the scale modifiers


298
00:13:49.929 --> 00:13:52.398 line:-1 position:50%
to configure the scales
in a chart.


299
00:13:52,398 --> 00:13:54,801 line:-1
Let's take a look
at a few examples.


300
00:13:54,801 --> 00:13:57,270 line:-1
In this example,
the Y scale is automatically


301
00:13:57.270 --> 00:14:00.339 line:-1 position:50%
inferred to be zero to 150.


302
00:14:00.339 --> 00:14:02.742 line:-1 position:50%
However,
we'd like to fix the Y scale


303
00:14:02,742 --> 00:14:05,411 line:-1
so that no matter what
the current sales looks like,


304
00:14:05.411 --> 00:14:08.281 line:-1 position:50%
we always have
a consistent Y scale.


305
00:14:08,281 --> 00:14:10,083 line:-1
Let's change it
such that the Y scale


306
00:14:10.083 --> 00:14:13.619 line:-1 position:50%
always starts at zero
and ends at 200.


307
00:14:13.619 --> 00:14:16.989 line:-1 position:50%
To do so, we can use
the .chartYScale modifier,


308
00:14:16.989 --> 00:14:21.127 line:-1 position:50%
and set the domain
of the scale to be zero to 200.


309
00:14:21,127 --> 00:14:26,065 line:-1
Now, as you can see,
the axis goes from zero to 200.


310
00:14:26,065 --> 00:14:28,167 line:-1
Similarly, we can change
how the two cities


311
00:14:28.167 --> 00:14:30.069 line:-1 position:50%
map to foreground style using


312
00:14:30.069 --> 00:14:33.673 line:-1 position:50%
the .chartForegroundStyleScale
modifier.


313
00:14:33.673 --> 00:14:36.776 line:-1 position:50%
Now we have new colors
for the two cities.


314
00:14:36,776 --> 00:14:38,678 line:-1
Now we know
how to compose marks


315
00:14:38,678 --> 00:14:40,680 line:-1
and plot data
with mark properties.


316
00:14:40.680 --> 00:14:42.448 line:-1 position:50%
Let's dive into more
customization options


317
00:14:42.448 --> 00:14:44.951 line:-1 position:50%
that Swift Charts provides.


318
00:14:44,951 --> 00:14:47,920 line:-1
A chart consists of axes,
possibly a legend,


319
00:14:47,920 --> 00:14:50,089 line:-1
and a plot area.


320
00:14:50,089 --> 00:14:53,192 position:50%
Axes and legends
help us interpret the chart.


321
00:14:53.192 --> 00:14:56.629 line:-1 position:50%
The plot area is the area
between the two axes.


322
00:14:56,629 --> 00:14:59,866 line:-1
This is where we
plot data with marks.


323
00:14:59.866 --> 00:15:02.869 line:-1 position:50%
All of these elements are
customizable in Swift Charts.


324
00:15:02.869 --> 00:15:04.303 line:-1 position:50%
Let's first see a few examples


325
00:15:04,303 --> 00:15:07,306 line:-1
on how to customize
axes and legends.


326
00:15:07,306 --> 00:15:10,276 line:-1
Here is a chart showing
total monthly sales.


327
00:15:10,276 --> 00:15:12,612 line:-1
Without customization,
Swift Charts generates


328
00:15:12.612 --> 00:15:16.215 line:-1 position:50%
a default axis that features
nicely rounded values.


329
00:15:16.215 --> 00:15:20.520 line:-1 position:50%
Right now, the X-axis shows
a label for every quarter.


330
00:15:20.520 --> 00:15:22.522 line:-1 position:50%
Let's change it to show
a label every month,


331
00:15:22.522 --> 00:15:24.857 line:-1 position:50%
and use a single-letter
month label.


332
00:15:24,857 --> 00:15:27,593 line:-1
We'll start by adding
a .chartXAxis modifier


333
00:15:27.593 --> 00:15:32.665 line:-1 position:50%
to customize the X-axis,
with AxisMarks as the content.


334
00:15:32,665 --> 00:15:37,370 line:-1
AxisMarks with no parameter
recreates the default axis.


335
00:15:37,370 --> 00:15:40,072 line:-1
Let's start by changing
the axis values.


336
00:15:40.072 --> 00:15:42.742 line:-1 position:50%
Since we want to have
regular calendar intervals,


337
00:15:42.742 --> 00:15:45.311 line:-1 position:50%
we can use stride(by:),
similar to the stride function


338
00:15:45,311 --> 00:15:48,080 line:-1
from the standard library.


339
00:15:48,080 --> 00:15:50,082 line:-1
Now we have a label
for each month.


340
00:15:50,082 --> 00:15:52,485 line:-1
However, the default labels
feel too crowded,


341
00:15:52.485 --> 00:15:54.053 line:-1 position:50%
as you see in the screenshot.


342
00:15:54,053 --> 00:15:55,621 line:-1
Some labels get truncated


343
00:15:55.621 --> 00:15:58.658 line:-1 position:50%
because we don't have
enough space for them.


344
00:15:58,658 --> 00:16:02,495 line:-1
Let's change the labels
to use a single-letter format.


345
00:16:02.495 --> 00:16:04.630 line:-1 position:50%
To do so, let's build up
the axis marks


346
00:16:04.630 --> 00:16:06.032 line:-1 position:50%
from the individual components,


347
00:16:06.032 --> 00:16:10.903 line:-1 position:50%
including AxisGridLine,
AxisTick, and AxisValueLabel.


348
00:16:10.903 --> 00:16:14.774 line:-1 position:50%
Let's set the format of the
label to use narrow month names.


349
00:16:14,774 --> 00:16:17,810 line:-1
Now we have one letter
for each month.


350
00:16:17.810 --> 00:16:20.012 line:-1 position:50%
The value parameter passed
into the result builder


351
00:16:20.012 --> 00:16:23.349 line:-1 position:50%
provides information
about the current axis value.


352
00:16:23.349 --> 00:16:25.184 line:-1 position:50%
You can use this
to conditionally determine


353
00:16:25.184 --> 00:16:28.221 line:-1 position:50%
the existence and style
of axis marks.


354
00:16:28.221 --> 00:16:30.890 line:-1 position:50%
For example, here we have
a condition that tests


355
00:16:30.890 --> 00:16:35.027 line:-1 position:50%
whether the value as a date
is the first quarter of a month.


356
00:16:35.027 --> 00:16:37.797 line:-1 position:50%
If yes, we can highlight
the first month of each quarter


357
00:16:37,797 --> 00:16:40,199 line:-1
with a different
foreground style.


358
00:16:40.199 --> 00:16:42.735 line:-1 position:50%
If not, we only display
a grid line,


359
00:16:42,735 --> 00:16:44,670 line:-1
without tick and label.


360
00:16:44.670 --> 00:16:46.639 line:-1 position:50%
Since we are now
showing quarters,


361
00:16:46,639 --> 00:16:49,842 line:-1
we can change the format
to quarter style.


362
00:16:49.842 --> 00:16:51.978 line:-1 position:50%
With the customizations
we just did,


363
00:16:51.978 --> 00:16:55.615 line:-1 position:50%
we get a more unique
X-axis showing quarter data,


364
00:16:55.615 --> 00:16:59.485 line:-1 position:50%
with subgrid lines
showing every month.


365
00:16:59,485 --> 00:17:00,586 line:-1
In addition to values,


366
00:17:00,586 --> 00:17:02,688 line:-1
axis marks have other properties
that allows you


367
00:17:02.688 --> 00:17:05.725 line:-1 position:50%
to configure the general
appearance and style.


368
00:17:05,725 --> 00:17:07,927 line:-1
Suppose we'd like
to have the Y-axis appear


369
00:17:07.927 --> 00:17:09.228 line:-1 position:50%
at the leading edge of the chart


370
00:17:09,228 --> 00:17:12,031 line:-1
instead of the default
trailing edge,


371
00:17:12,031 --> 00:17:14,033 line:-1
we can set the position
parameter to leading


372
00:17:14.033 --> 00:17:17.169 line:-1 position:50%
to move them
to the leading edge.


373
00:17:17,169 --> 00:17:20,273 line:-1
Swift Charts provides a default
preset for the axis marks


374
00:17:20,273 --> 00:17:24,176 line:-1
based on the axis and the type
of data being visualized.


375
00:17:24.176 --> 00:17:27.146 line:-1 position:50%
You can override the default
using the preset parameter.


376
00:17:27.146 --> 00:17:29.749 line:-1 position:50%
For example, here we are using
the .extended preset


377
00:17:29,749 --> 00:17:32,685 line:-1
for the Y-axis to help
with visual alignment


378
00:17:32.685 --> 00:17:35.721 line:-1 position:50%
with the rest
of the user interface.


379
00:17:35.721 --> 00:17:39.125 line:-1 position:50%
In some charts, you may not
want the axis to be visible.


380
00:17:39.125 --> 00:17:41.994 line:-1 position:50%
For example, the purpose
of the top sales chart here


381
00:17:41.994 --> 00:17:44.196 line:-1 position:50%
is to give people
a brief overview,


382
00:17:44,196 --> 00:17:47,133 line:-1
so the axes aren't
really necessary.


383
00:17:47.133 --> 00:17:49.902 line:-1 position:50%
You can pass in .hidden
to the chart axis modifiers


384
00:17:49.902 --> 00:17:51.704 line:-1 position:50%
to hide an axis.


385
00:17:51,704 --> 00:17:54,473 line:1
Legend configuration
is similar to axis.


386
00:17:54,473 --> 00:17:55,608 position:50%
For example,


387
00:17:55,608 --> 00:17:58,778 position:50%
in this chart that highlights
the best day and location,


388
00:17:58,778 --> 00:18:01,681 line:1
we already use opacity
to highlight the best city,


389
00:18:01,681 --> 00:18:04,750 line:1
so we can hide the
automatically generated legend.


390
00:18:04,750 --> 00:18:07,420 position:50%
To do so, we can add
the .chartLegend modifier


391
00:18:07,420 --> 00:18:09,922 position:50%
with .hidden as parameter.


392
00:18:09.922 --> 00:18:12.758 line:-1 position:50%
Now let's talk
about the plot area.


393
00:18:12,758 --> 00:18:15,094 line:-1
You can use
the .chartPlotStyle modifier


394
00:18:15.094 --> 00:18:17.964 line:-1 position:50%
to configure
the plot area of a chart.


395
00:18:17.964 --> 00:18:20.066 line:-1 position:50%
In the trailing closure,
we will write a function


396
00:18:20.066 --> 00:18:21.734 line:-1 position:50%
that takes original plot area,


397
00:18:21.734 --> 00:18:24.303 line:-1 position:50%
and returns
a modified plot area.


398
00:18:24,303 --> 00:18:27,039 line:-1
Let's see a few examples.


399
00:18:27,039 --> 00:18:29,041 line:-1
In some cases,
we might want the plot area


400
00:18:29.041 --> 00:18:32.078 line:-1 position:50%
to have an exact size
or aspect ratio.


401
00:18:32,078 --> 00:18:35,081 line:-1
For example, in this case,
we want the plot area's height


402
00:18:35,081 --> 00:18:38,384 line:-1
to be driven by the number
of categories in the chart.


403
00:18:38,384 --> 00:18:41,187 line:-1
To achieve this, we can apply
a .frame modifier


404
00:18:41,187 --> 00:18:45,591 line:-1
to the plot area, and return
the modified plot area.


405
00:18:45,591 --> 00:18:48,728 line:-1
This will set the height
of the plot area.


406
00:18:48.728 --> 00:18:52.631 line:-1 position:50%
We can also use modifiers to
achieve a special visual effect.


407
00:18:52,631 --> 00:18:54,934 line:-1
For example,
in this Dark Mode chart,


408
00:18:54.934 --> 00:18:57.436 line:-1 position:50%
we use the .background modifier
to add a pink background


409
00:18:57.436 --> 00:19:02.008 line:-1 position:50%
with opacity of .2 to make the
chart stand out a little bit.


410
00:19:02,008 --> 00:19:05,644 line:-1
And then add a 1-pt border
with the same pink color.


411
00:19:05.644 --> 00:19:09.315 line:-1 position:50%
This creates a unique
visual effect for the chart.


412
00:19:09,315 --> 00:19:11,317 line:-1
Earlier in the session
we mentioned scales,


413
00:19:11.317 --> 00:19:13.219 line:-1 position:50%
which are functions
that map data values


414
00:19:13,219 --> 00:19:17,223 line:-1
to mark properties
such as X and Y.


415
00:19:17,223 --> 00:19:19,825 position:50%
Swift Charts provides
a ChartProxy that allows you


416
00:19:19,825 --> 00:19:23,396 line:1
to access the X and Y scales
in a chart.


417
00:19:23,396 --> 00:19:26,399 line:1
You can use the ChartProxy's
position(for:) method


418
00:19:26,399 --> 00:19:29,468 line:1
to get the position
for a given data value,


419
00:19:29,468 --> 00:19:31,404 line:1
or use the value(at:) method


420
00:19:31,404 --> 00:19:34,840 line:1
to get the data value
at a given position.


421
00:19:34,840 --> 00:19:38,577 position:50%
This allows you to coordinate
other views with the chart.


422
00:19:38,577 --> 00:19:41,013 line:1
Let's look at an example.


423
00:19:41.013 --> 00:19:43.382 line:-1 position:50%
We are going to build
this interactive brushing view.


424
00:19:43.382 --> 00:19:45.751 line:-1 position:50%
Here you can select
an interval from the chart


425
00:19:45,751 --> 00:19:48,354 line:-1
with a drag gesture,
and that interval


426
00:19:48.354 --> 00:19:52.058 line:-1 position:50%
will then be used to filter
the rows in the details view.


427
00:19:52.058 --> 00:19:54.393 line:-1 position:50%
We can get a chart proxy
object from the .chartOverlay


428
00:19:54,393 --> 00:19:56,595 line:-1
or .chartBackground modifiers.


429
00:19:56.595 --> 00:19:59.165 line:-1 position:50%
These two modifiers
are similar to SwiftUI's overlay


430
00:19:59.165 --> 00:20:00.966 line:-1 position:50%
and background modifiers,


431
00:20:00.966 --> 00:20:04.103 line:-1 position:50%
but they provide you
with a chart proxy.


432
00:20:04,103 --> 00:20:05,237 line:-1
To build this example,


433
00:20:05.237 --> 00:20:09.108 line:-1 position:50%
we'll start by defining
the base chart just like before.


434
00:20:09.108 --> 00:20:10.943 line:-1 position:50%
We then add
a .chartOverlay modifier


435
00:20:10.943 --> 00:20:13.412 line:-1 position:50%
that provides us
with the chart proxy.


436
00:20:13.412 --> 00:20:16.348 line:-1 position:50%
Inside, we have a geometry
reader that gives us access


437
00:20:16.348 --> 00:20:19.051 line:-1 position:50%
to the geometry
of the overlay view.


438
00:20:19.051 --> 00:20:22.354 line:-1 position:50%
Then, we have a Rectangle view
that is configured to respond


439
00:20:22,354 --> 00:20:25,191 line:-1
to SwiftUI's DragGesture.


440
00:20:25.191 --> 00:20:28.694 line:-1 position:50%
When the drag gesture happens,
we first find the x coordinates


441
00:20:28.694 --> 00:20:30.896 line:-1 position:50%
of the start
and the current locations


442
00:20:30,896 --> 00:20:32,998 line:-1
inside the chart's plot area.


443
00:20:32,998 --> 00:20:35,434 line:-1
This is done by subtracting
the plot area's origin


444
00:20:35.434 --> 00:20:39.138 line:-1 position:50%
from the locations
provided by the gestures.


445
00:20:39,138 --> 00:20:42,475 line:-1
Once we have these coordinates,
we can then use the chart proxy


446
00:20:42.475 --> 00:20:45.344 line:-1 position:50%
to find the corresponding
Date values,


447
00:20:45,344 --> 00:20:47,746 line:-1
and finally set it
to a SwiftUI state


448
00:20:47.746 --> 00:20:51.317 line:-1 position:50%
that keeps track of
the current date interval.


449
00:20:51.317 --> 00:20:54.220 line:-1 position:50%
With the range state, we can
then define a rectangle mark


450
00:20:54,220 --> 00:20:58,090 line:-1
in the chart to visualize the
currently selected date range.


451
00:20:58,090 --> 00:21:00,192 line:-1
This state can also be used
to control other parts


452
00:21:00,192 --> 00:21:01,994 line:-1
of your application


453
00:21:01.994 --> 00:21:03.629 line:-1 position:50%
for example,
to filter the contents


454
00:21:03.629 --> 00:21:05.898 line:-1 position:50%
of the details view
below the chart.


455
00:21:05.898 --> 00:21:06.999 line:-1 position:50%
This is a simple example


456
00:21:06.999 --> 00:21:09.802 line:-1 position:50%
to illustrate how
chart proxy works.


457
00:21:09,802 --> 00:21:11,737 line:-1
You can use it to build
many interesting features,


458
00:21:11,737 --> 00:21:13,973 line:-1
for example,
this interactive chart


459
00:21:13.973 --> 00:21:16.475 line:-1 position:50%
that shows the selected day
and sales value


460
00:21:16,475 --> 00:21:19,545 line:-1
with an overlay
that looks like a lollipop.


461
00:21:19,545 --> 00:21:20,980 line:1
In this session,
we have discussed


462
00:21:20,980 --> 00:21:23,482 line:1
how to create charts
by composing marks;


463
00:21:23,482 --> 00:21:25,417 line:1
how to plot data
with mark properties,


464
00:21:25,417 --> 00:21:27,887 position:50%
and how to customize a chart.


465
00:21:27,887 --> 00:21:30,022 line:1
You can go to the design
sessions to learn more


466
00:21:30,022 --> 00:21:32,858 position:50%
about how to design great
app experiences with charts


467
00:21:32,858 --> 00:21:35,761 position:50%
and how to design
an effective chart.


468
00:21:35,761 --> 00:21:37,596 line:-1
We think you will love
building data visualizations


469
00:21:37,596 --> 00:21:38,831 line:-1
with Swift Charts.


470
00:21:38,831 --> 00:21:39,932 line:-1
Thanks for watching.


471
00:21:39,932 --> 00:21:43,869 align:right position:90% size:2%
â™ª

