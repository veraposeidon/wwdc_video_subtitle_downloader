2
00:00:00.501 --> 00:00:08.509 line:-1 align:center
♪ ♪


3
00:00:09.710 --> 00:00:11.678 line:-1 align:center
Jake: Hi, my name's Jake.


4
00:00:11.712 --> 00:00:13.313 line:-1 align:center
I'm an engineer on the AVKit team,


5
00:00:13,347 --> 00:00:16,583 line:-2
and welcome to Creating
a Great Video Playback Experience.


6
00:00:16,617 --> 00:00:21,021 line:-2
In iOS and iPadOS 16,
we've built a completely new media player


7
00:00:21.054 --> 00:00:22.389 line:-1 align:center
from the ground up


8
00:00:22.422 --> 00:00:24.658 line:-1 align:center
bringing a whole new look and feel,


9
00:00:24.691 --> 00:00:27.594 line:-2 align:center
designed to keep the focus
on the content


10
00:00:27.628 --> 00:00:30.364 line:-1 align:center
and fit within a broader spectrum of apps.


11
00:00:30,397 --> 00:00:33,166 line:-2
We've also built in
many novel interaction models


12
00:00:33.200 --> 00:00:37.905 line:-2 align:center
that make using this new media player
feel even more intuitive and seamless,


13
00:00:37.938 --> 00:00:40.741 line:-1 align:center
and we think you're are gonna love it.


14
00:00:40.774 --> 00:00:45.379 line:-2 align:center
In this session, we'll take a deep dive
into the new system media player.


15
00:00:45.412 --> 00:00:49.449 line:-2 align:center
We'll learn how to design
amazing playback experiences.


16
00:00:49.483 --> 00:00:51.952 line:-2 align:center
We'll see some exciting new visual
intelligence features


17
00:00:51.985 --> 00:00:54.655 line:-1 align:center
coming to macOS and iOS.


18
00:00:54,688 --> 00:00:56,990 line:-2
I'll introduce
an all new interstitials experience


19
00:00:57.024 --> 00:00:59.092 line:-1 align:center
coming with the new media player


20
00:00:59,126 --> 00:01:02,930 line:-2
and go over some new APIs
we're bring over from tvOS.


21
00:01:02.963 --> 00:01:06.133 line:-2 align:center
And lastly,
we'll go over a new feature in AVKit:


22
00:01:06.166 --> 00:01:08.869 line:-1 align:center
selectable playback speeds.


23
00:01:08.902 --> 00:01:12.940 line:-2 align:center
For tvOS 15.0
we redesigned the system player,


24
00:01:12,973 --> 00:01:14,608 line:-1
bringing a whole new look and feel,


25
00:01:14.641 --> 00:01:17.611 line:-2 align:center
as well as a host of new features
and usability improvements


26
00:01:17,644 --> 00:01:19,513 line:-1
to the system player.


27
00:01:19.546 --> 00:01:21.648 line:-1 align:center
Well, we heard your requests.


28
00:01:21.682 --> 00:01:25.919 line:-2 align:center
I'm happy to say, we've revamped
the iOS system player as well.


29
00:01:25,953 --> 00:01:28,555 line:-2
We've completely redesigned
the native media player,


30
00:01:28.589 --> 00:01:31.191 line:-2 align:center
adopting the look and feel
of the tvOS player,


31
00:01:31.225 --> 00:01:35.095 line:-1 align:center
but reimagined for a touch first device.


32
00:01:35,128 --> 00:01:37,631 line:-2
We've removed the chrome
across the board,


33
00:01:37,664 --> 00:01:41,268 line:-2
allowing the interface to feel native
within broader spectrum of apps


34
00:01:41.301 --> 00:01:44.304 line:-2 align:center
and bringing a more modern feel
to the player.


35
00:01:44.338 --> 00:01:47.307 line:-2 align:center
Let's dig deeper into some
of the changes we've made.


36
00:01:47,341 --> 00:01:51,712 line:-2
First, we've brought the play/pause
and skip controls front and center


37
00:01:51.745 --> 00:01:54.681 line:-1 align:center
to make them even easier to interact with.


38
00:01:54.715 --> 00:01:58.952 line:-2 align:center
We've also adjusted the skip interval
from 15 seconds down to 10


39
00:01:58,986 --> 00:02:03,323 line:-2
making it easier to track how far
you've jumped with consecutive skips.


40
00:02:03,357 --> 00:02:06,193 line:-2
Next, we made some significant
improvements to the usability


41
00:02:06.226 --> 00:02:08.128 line:-1 align:center
of the timeline as well.


42
00:02:08,161 --> 00:02:12,566 line:-2
We're removing the slider knob
marking the timeline's current position.


43
00:02:12,599 --> 00:02:15,269 line:-2
Instead, the timeline can now
be interacted with


44
00:02:15.302 --> 00:02:17.471 line:-1 align:center
from anywhere along the slider.


45
00:02:17.504 --> 00:02:20.140 line:-2 align:center
Drags no longer needs to begin
at the current time marker.


46
00:02:20.174 --> 00:02:24.344 line:-2 align:center
This makes it even easier to find
exactly where you want to go.


47
00:02:24,378 --> 00:02:26,446 line:-2
We've also replaced
the video aspect control


48
00:02:26,480 --> 00:02:29,016 line:-2
with a more intuitive
pinch to zoom gesture,


49
00:02:29,049 --> 00:02:30,717 line:-1
which I'll show in a moment.


50
00:02:30,751 --> 00:02:35,155 line:-2
And of course, the new UI looks great
for portrait content as well.


51
00:02:37,257 --> 00:02:40,861 line:-2
On iPadOS, the player
integrates seamlessly into the system


52
00:02:40,894 --> 00:02:43,797 line:-2
with full support for keyboards,
trackpads,


53
00:02:43.830 --> 00:02:47.367 line:-1 align:center
mice, game controllers, and much more!


54
00:02:47.401 --> 00:02:50.470 line:-2 align:center
We also added a number of new ways
to interact with the controls


55
00:02:50.504 --> 00:02:53.807 line:-2 align:center
that make navigating the content
and some common interactions


56
00:02:53.841 --> 00:02:56.109 line:-1 align:center
even easier and more intuitive.


57
00:02:56,143 --> 00:02:58,145 line:-1
Let's take a look at these.


58
00:02:58.178 --> 00:03:01.882 line:-2 align:center
First, we've added a new way
to change the video's fill aspect.


59
00:03:01.915 --> 00:03:05.886 line:-2 align:center
You can now use a pinch gesture
to move through the available zoom levels.


60
00:03:05.919 --> 00:03:09.990 line:-2 align:center
Pinching in will bring the video within
the safe area of the display.


61
00:03:10.023 --> 00:03:13.627 line:-2 align:center
Pinching out will zoom the video
in to fully fill the display.


62
00:03:13.660 --> 00:03:17.631 line:-2 align:center
Next, we stream lined one of
the most common interactions,


63
00:03:17.664 --> 00:03:19.266 line:-1 align:center
play/pause.


64
00:03:19.299 --> 00:03:21.468 line:-1 align:center
You can now tap the center of the display,


65
00:03:21,502 --> 00:03:25,138 line:-2
even while the controls are hidden
to play and pause the video.


66
00:03:25,172 --> 00:03:29,376 line:-2
And lastly, we've added a new way
to navigate through the media timeline.


67
00:03:29.409 --> 00:03:32.880 line:-2 align:center
You can now scroll through the timeline
from anywhere over the video


68
00:03:32.913 --> 00:03:37.050 line:-2 align:center
using the same interactions
we all know and love in scroll views.


69
00:03:37,084 --> 00:03:39,253 line:-2
As you begin to scroll
through the video frames,


70
00:03:39.286 --> 00:03:43.924 line:-2 align:center
the interface drops away,
leaving only the most relevant UI,


71
00:03:43.957 --> 00:03:47.160 line:-1 align:center
allowing the focus to stay on the content.


72
00:03:47.194 --> 00:03:50.931 line:-2 align:center
We've also brought over some new features
from the tvOS player.


73
00:03:50.964 --> 00:03:54.134 line:-2 align:center
AVPlayerViewController now supports
displaying a content title,


74
00:03:54,168 --> 00:03:58,605 line:-2
subtitle, and description natively
from within the fullscreen UI.


75
00:03:59,406 --> 00:04:02,976 line:-2
You can provide strings for each of these
by passing AVMetadataItems


76
00:04:03.010 --> 00:04:04.611 line:-1 align:center
to an existing AVKit API.


77
00:04:04.645 --> 00:04:07.314 line:-1 align:center
Let's see how this is done.


78
00:04:07.347 --> 00:04:11.218 line:-2 align:center
By default, the title, subtitle,
and content description will be pulled


79
00:04:11.251 --> 00:04:13.287 line:-1 align:center
from the media's metadata.


80
00:04:13.320 --> 00:04:16.757 line:-2 align:center
However, the values in the media
can be overridden if needed


81
00:04:16.790 --> 00:04:19.426 line:-2 align:center
through the externalMetadata API
on AVPlayerItem.


82
00:04:20,961 --> 00:04:24,131 line:-2
A title can be added
by creating an AVMetadataItem


83
00:04:24,164 --> 00:04:26,900 line:-1
with the identifier commonIdentifierTitle


84
00:04:26.934 --> 00:04:30.838 line:-2 align:center
and adding it to the playerItems
externalMetadata property.


85
00:04:30.871 --> 00:04:35.342 line:-2 align:center
Titles should be short and descriptive
to avoid cluttering the UI.


86
00:04:35.375 --> 00:04:39.780 line:-2 align:center
Similarly, here we've added a subtitle
by creating an AVMetadataItem


87
00:04:39.813 --> 00:04:44.484 line:-2 align:center
with the identifier
.iTunesMetadataTrackSubtitle.


88
00:04:44.518 --> 00:04:47.087 line:-2 align:center
The subtitle will be displayed
above the content title


89
00:04:47,120 --> 00:04:49,790 line:-2
and should be a few words
describing the content.


90
00:04:51.358 --> 00:04:53.126 line:-1 align:center
Lastly, a description can be added


91
00:04:53,160 --> 00:04:56,964 line:-2
with the identifier
.commonIdentifierDescription.


92
00:04:56.997 --> 00:05:00.901 line:-2 align:center
This will display a chevron
to the right of the title and subtitle.


93
00:05:00.934 --> 00:05:05.973 line:-2 align:center
Selecting the title will display the info
panel containing the content description.


94
00:05:06.006 --> 00:05:11.011 line:-2 align:center
The description should be a few sentences
with more info about the content.


95
00:05:11,044 --> 00:05:13,714 line:-2
Tapping anywhere
will dismiss the info panel.


96
00:05:15.816 --> 00:05:19.219 line:-2 align:center
So to wrap up,
we've revamped the iOS system player


97
00:05:19,253 --> 00:05:23,924 line:-2
with an all new look and feel, with new
streamlined touch first interaction models


98
00:05:23,957 --> 00:05:26,827 line:-1
as well as a host of other improvements.


99
00:05:26,860 --> 00:05:29,429 line:-1
Using AVPlayerViewController in your app,


100
00:05:29.463 --> 00:05:32.132 line:-2 align:center
you'll have the full support
of the system player–


101
00:05:32.165 --> 00:05:36.403 line:-2 align:center
support for Picture in Picture,
SharePlay, Visual Analysis,


102
00:05:36,436 --> 00:05:40,240 line:-2
Native Catalyst Support,
New hardware and feature support,


103
00:05:40.274 --> 00:05:42.276 line:-1 align:center
and much, much more.


104
00:05:42.309 --> 00:05:46.780 line:-2 align:center
And of course, all of this
you get with just a few lines of code.


105
00:05:46.813 --> 00:05:52.653 line:-2 align:center
Now, let's talk about how you can design
amazing playback experiences in your apps.


106
00:05:52,686 --> 00:05:55,255 line:-2
When we set out to redesign
the system media player,


107
00:05:55,289 --> 00:05:57,958 line:-2
we took a step back
from what we had built in the past


108
00:05:57.991 --> 00:05:59.826 line:-1 align:center
and what we had built for other platforms


109
00:05:59,860 --> 00:06:04,431 line:-2
and we asked ourselves,
"What makes for a good user experience?"


110
00:06:04,464 --> 00:06:06,767 line:-1
We wanted to share this process with you;


111
00:06:06,800 --> 00:06:09,503 line:-2
how we've gone about designing
the new players,


112
00:06:09.536 --> 00:06:11.839 line:-1 align:center
why we designed them the way we did,


113
00:06:11,872 --> 00:06:15,909 line:-2
and what we think defines
an amazing media experience.


114
00:06:15.943 --> 00:06:20.314 line:-2 align:center
We think there are three things
that make a media experience great.


115
00:06:20,347 --> 00:06:23,016 line:-1
The experience should be intuitive.


116
00:06:23.050 --> 00:06:26.854 line:-1 align:center
It should feel easy, familiar, natural,


117
00:06:26.887 --> 00:06:29.656 line:-1 align:center
even if you've never used it.


118
00:06:29,690 --> 00:06:31,725 line:-1
It should be tightly integrated,


119
00:06:31.758 --> 00:06:35.262 line:-1 align:center
both within your app and with the system.


120
00:06:35,295 --> 00:06:38,699 line:-1
And lastly, it should be content forward.


121
00:06:38.732 --> 00:06:42.302 line:-2 align:center
At the end of the day,
people are there to experience the media


122
00:06:42,336 --> 00:06:46,473 line:-2
and your apps and designs
should reflect that.


123
00:06:46,507 --> 00:06:48,876 line:-1
Now let's dig deeper into these three,


124
00:06:48,909 --> 00:06:52,779 line:-2
starting with making your experience
intuitive.


125
00:06:52.813 --> 00:06:55.916 line:-1 align:center
Oftentimes, when an app feels intuitive


126
00:06:55,949 --> 00:06:59,453 line:-1
it can be hard to put your finger on why.


127
00:06:59.486 --> 00:07:02.289 line:-1 align:center
You just know it when you see it.


128
00:07:02.322 --> 00:07:04.157 line:-1 align:center
So what actually makes an interface


129
00:07:04.191 --> 00:07:06.927 line:-1 align:center
or an experience feel intuitive?


130
00:07:06,960 --> 00:07:10,063 line:-1
And how can you design for it?


131
00:07:10.097 --> 00:07:12.866 line:-1 align:center
We think it starts with familiarity.


132
00:07:12,900 --> 00:07:17,704 line:-2
When you can draw on your past experiences
to help understand something new,


133
00:07:17.738 --> 00:07:19.540 line:-1 align:center
that's intuitive.


134
00:07:19,573 --> 00:07:22,242 line:-2
When you don't need an explanation
of how it works


135
00:07:22.276 --> 00:07:24.278 line:-1 align:center
or even need to think about how it works–


136
00:07:24,311 --> 00:07:28,115 line:-1
it just works exactly as you expect.


137
00:07:29,483 --> 00:07:35,255 line:-2
Every one of us builds experiences daily
interacting technology and the real world.


138
00:07:35,289 --> 00:07:38,759 line:-2
Both of these are great sources
of experiential familiarity


139
00:07:38,792 --> 00:07:43,297 line:-2
and is often where we started when
designing the new system media players.


140
00:07:43.330 --> 00:07:46.266 line:-2 align:center
There are many types of experiences
to draw intuition from,


141
00:07:46,300 --> 00:07:48,635 line:-1
but I want to focus on two;


142
00:07:48,669 --> 00:07:53,507 line:-2
the two that we most often relied on
when designing the system media players.


143
00:07:53,540 --> 00:07:55,542 line:-1
Platform paradigms


144
00:07:55,576 --> 00:07:57,444 line:-1
and the real world.


145
00:07:57.477 --> 00:08:02.583 line:-2 align:center
The first comes from our experiences
using technology every day.


146
00:08:02.616 --> 00:08:05.853 line:-2 align:center
Years of using TV remotes tells you
that the arrow keys


147
00:08:05,886 --> 00:08:08,488 line:-1
move focus left and right.


148
00:08:08.522 --> 00:08:13.694 line:-2 align:center
Similarly, tapping a volume button on
a touch first device will mute the audio.


149
00:08:13,727 --> 00:08:17,464 line:-2
These interactions feel intuitive
because they're familiar.


150
00:08:17.497 --> 00:08:20.968 line:-2 align:center
You can use these types of familiar
interactions in your media experiences


151
00:08:21.001 --> 00:08:23.136 line:-2 align:center
to help make your apps feel
more intuitive,


152
00:08:23.170 --> 00:08:26.273 line:-1 align:center
engaging, and even natural to use.


153
00:08:26.306 --> 00:08:30.010 line:-2 align:center
Conversely, finding unfamiliar
or unexpected interactions


154
00:08:30.043 --> 00:08:34.648 line:-2 align:center
can be confusing
and sometimes even frustrating.


155
00:08:34.681 --> 00:08:38.752 line:-2 align:center
Let's look at some examples where we drew
on this type of platform familiarity


156
00:08:38,785 --> 00:08:41,255 line:-1
in the system players.


157
00:08:41,288 --> 00:08:44,658 line:-2
A great example of this
is the presentation and dismissal model


158
00:08:44.691 --> 00:08:46.793 line:-1 align:center
of the iOS system player.


159
00:08:46,827 --> 00:08:50,297 line:-2
The player animates its presentation
in from the bottom,


160
00:08:50.330 --> 00:08:55.335 line:-2 align:center
giving a subtle hit that the player
can be dismissed by pushing it back down.


161
00:08:55.369 --> 00:08:59.273 line:-2 align:center
We see this model used extensively
across our touch first devices.


162
00:08:59.306 --> 00:09:02.142 line:-1 align:center
For example, the now playing UI in Music


163
00:09:02.176 --> 00:09:03.777 line:-1 align:center
presents from the mini bar at the bottom


164
00:09:03.810 --> 00:09:08.048 line:-2 align:center
and can be dismissed
with an interactive swipe downwards.


165
00:09:08.081 --> 00:09:11.084 line:-2 align:center
In some cases though,
we may draw on experiences


166
00:09:11,118 --> 00:09:14,922 line:-2
not from our understanding of technology,
but from everyday life.


167
00:09:16.323 --> 00:09:20.027 line:-2 align:center
These types of experiences
come from the real world.


168
00:09:20.060 --> 00:09:22.763 line:-2 align:center
Millions of years of evolution
have helped us develop


169
00:09:22,796 --> 00:09:26,600 line:-2
a deep instinctual understanding
of natural processes.


170
00:09:26,633 --> 00:09:28,235 line:-1
You can tap in to this understanding


171
00:09:28,268 --> 00:09:32,172 line:-2
to help build familiar and intuitive
experiences in your software.


172
00:09:32,206 --> 00:09:36,777 line:-2
A great example of this is our new
scrolling gesture in the iOS player.


173
00:09:36,810 --> 00:09:39,413 line:-2
Similar to rolling a toy car
across a table,


174
00:09:39,446 --> 00:09:42,216 line:-1
each swipe over the video has momentum,


175
00:09:42,249 --> 00:09:46,186 line:-2
continuing the movement of the timeline
past the direct interaction


176
00:09:46,220 --> 00:09:49,990 line:-1
until the timeline slowly comes to a stop.


177
00:09:50,023 --> 00:09:52,459 line:-2
The momentum here alone
builds an association


178
00:09:52,492 --> 00:09:54,995 line:-1
with real world moving objects.


179
00:09:55.028 --> 00:09:59.499 line:-2 align:center
This association helps you discover
the subtle depths of the interaction.


180
00:09:59.533 --> 00:10:02.402 line:-2 align:center
Just like the toy car,
I can make it go faster


181
00:10:02,436 --> 00:10:04,471 line:-1
by pushing it harder,


182
00:10:04.505 --> 00:10:06.773 line:-1 align:center
or pushing it several times in a row.


183
00:10:06.807 --> 00:10:10.210 line:-1 align:center
And if I grab it, it stops.


184
00:10:10.244 --> 00:10:15.148 line:-1 align:center
It feels natural because it is natural.


185
00:10:15.182 --> 00:10:16.817 line:-1 align:center
And the best part about this is,


186
00:10:16.850 --> 00:10:21.121 line:-2 align:center
if you use the system players,
your app will feel intuitive.


187
00:10:21.154 --> 00:10:24.892 line:-2 align:center
All the natural interactions
we've built and inherit intuition


188
00:10:24,925 --> 00:10:27,995 line:-2
and familiarity people have
with the system player,


189
00:10:28.028 --> 00:10:30.597 line:-2 align:center
all of the design paradigms
optimized in a way


190
00:10:30.631 --> 00:10:35.669 line:-2 align:center
that tvOS, iOS, and macOS users
will understand natively–


191
00:10:35.702 --> 00:10:39.540 line:-2 align:center
all of this you get
with just a few lines of code.


192
00:10:40.641 --> 00:10:46.313 line:-2 align:center
Building an intuitive design is one aspect
of making your media experience great,


193
00:10:46,346 --> 00:10:50,217 line:-2
but without all the features
and integration points people expect,


194
00:10:50,250 --> 00:10:55,088 line:-2
your app can inadvertently pull focus
away from the content.


195
00:10:55,122 --> 00:11:00,027 line:-2
This leads us to the second crucial aspect
of an amazing media experience–


196
00:11:00,527 --> 00:11:02,329 line:-1
tight integration.


197
00:11:02,362 --> 00:11:06,600 line:-2
When an experience is tightly integrated,
all the functionality,


198
00:11:06.633 --> 00:11:11.271 line:-2 align:center
features, and devices
people expect to work just work.


199
00:11:11,305 --> 00:11:16,510 line:-2
And importantly, they work in a way
that's consistent with their expectations.


200
00:11:16,543 --> 00:11:19,213 line:-2
As people use their devices,
they become accustomed


201
00:11:19,246 --> 00:11:21,782 line:-2
to relying on the features
of the platform.


202
00:11:21.815 --> 00:11:24.918 line:-2 align:center
For example,
pulling down the Control Center


203
00:11:24.952 --> 00:11:30.390 line:-2 align:center
and seeing your content populated
in the Now Playing media controls,


204
00:11:30.424 --> 00:11:33.894 line:-2 align:center
or responding to a notification
while watching a TV show,


205
00:11:33,927 --> 00:11:38,432 line:-2
and having the video continue smoothly
into Picture in Picture.


206
00:11:38,465 --> 00:11:41,268 line:-2
Building this tight system integration
into your app


207
00:11:41.301 --> 00:11:46.173 line:-2 align:center
is key to making your experience
feel seamless.


208
00:11:46,206 --> 00:11:48,709 line:-2
Your app should feel like
a native part of the system


209
00:11:48,742 --> 00:11:52,679 line:-2
and we work hard to provide you with
the tools needed to make that possible.


210
00:11:52.713 --> 00:11:56.350 line:-2 align:center
This includes things like
CoreSpotlight integration


211
00:11:56.383 --> 00:11:58.652 line:-1 align:center
to make your content searchable,


212
00:11:58,685 --> 00:12:03,257 line:-2
Now Playing info so your content
can appear in the system media UIs,


213
00:12:03,290 --> 00:12:07,160 line:-2
MediaRemote commands allowing your app
to respond to things like


214
00:12:07,194 --> 00:12:10,864 line:-2
the play button being pressed
on a keyboard or TV remote.


215
00:12:10,898 --> 00:12:15,636 line:-2
We even provide the ability to integrate
your media directly into the TV app,


216
00:12:15.669 --> 00:12:19.072 line:-2 align:center
delivering your content
to an even wider audience.


217
00:12:19,106 --> 00:12:21,975 line:-2
In addition to making your apps
feel native,


218
00:12:22,009 --> 00:12:26,079 line:-2
it's important to provide
all the features that people love.


219
00:12:26.113 --> 00:12:31.018 line:-2 align:center
Features like AirPlay, SharePlay,
and Picture in Picture.


220
00:12:31,051 --> 00:12:33,353 line:-1
We think people will expect these features


221
00:12:33.387 --> 00:12:38.292 line:-2 align:center
and providing them
enhances the experience in using your app.


222
00:12:38.325 --> 00:12:41.161 line:-2 align:center
People will use your app
across many devices


223
00:12:41.195 --> 00:12:43.630 line:-1 align:center
and even more input formats.


224
00:12:43,664 --> 00:12:46,266 line:-1
Providing support for all these is crucial


225
00:12:46.300 --> 00:12:50.237 line:-2 align:center
in ensuring your experience
is accessible to everyone.


226
00:12:50.270 --> 00:12:52.840 line:-1 align:center
This is particularly important on tvOS,


227
00:12:52,873 --> 00:12:55,809 line:-2
where supporting all available remotes
is critical


228
00:12:55.843 --> 00:12:59.012 line:-1 align:center
to ensuring everyone can use your app.


229
00:12:59,046 --> 00:13:03,917 line:-2
This is one reason we always recommend
using the system media player on tvOS.


230
00:13:03,951 --> 00:13:08,555 line:-2
Your apps should ensure a fluid experience
with all TV remotes, keyboards,


231
00:13:08,589 --> 00:13:12,659 line:-2
trackpads, game controllers,
and headphone controls.


232
00:13:12.693 --> 00:13:15.329 line:-2 align:center
Additionally,
you should ensure your app's UI elements


233
00:13:15.362 --> 00:13:17.297 line:-1 align:center
are drawn within the screen's safe area


234
00:13:17,331 --> 00:13:22,269 line:-2
to avoid collision with rounded corners
or notches in the display.


235
00:13:22,302 --> 00:13:25,839 line:-2
We recognize building support
for all of these integration points,


236
00:13:25,873 --> 00:13:30,577 line:-2
features, and hardware configurations
can be daunting.


237
00:13:30,611 --> 00:13:33,280 line:-2
This is why we built
AVPlayerViewController,


238
00:13:33.313 --> 00:13:35.415 line:-1 align:center
so with just a few lines of code,


239
00:13:35,449 --> 00:13:39,052 line:-2
anyone using your app
can have an amazing media experience.


240
00:13:40,621 --> 00:13:42,689 line:-1
And all of this leads us, lastly,


241
00:13:42,723 --> 00:13:46,660 line:-2
to the most important aspect in designing
a media experience;


242
00:13:46,693 --> 00:13:49,329 line:-1
making it content forward.


243
00:13:49,363 --> 00:13:52,132 line:-2
This should be the primary goal
in your design,


244
00:13:52,165 --> 00:13:56,603 line:-2
and is what we considering the defining
aspect of a great media experience.


245
00:13:56.637 --> 00:13:58.605 line:-1 align:center
When your app feels intuitive,


246
00:13:58.639 --> 00:14:00.574 line:-1 align:center
when all of the integration points


247
00:14:00,607 --> 00:14:04,845 line:-2
and all features people expect
just work,


248
00:14:04.878 --> 00:14:07.814 line:-1 align:center
you bring your content into focus,


249
00:14:07,848 --> 00:14:10,817 line:-2
and everything else
fades into the background.


250
00:14:12,152 --> 00:14:14,454 line:-2
There are a few things
you should keep in mind, though,


251
00:14:14,488 --> 00:14:17,057 line:-1
specific to designing your content.


252
00:14:17.090 --> 00:14:20.360 line:-2 align:center
Make sure you provide
all of the appropriate metadata,


253
00:14:20,394 --> 00:14:23,697 line:-1
both in your interface and to the system.


254
00:14:23,730 --> 00:14:26,667 line:-2
Providing this info helps give context
to your media


255
00:14:26.700 --> 00:14:29.169 line:-2 align:center
and allows the system to provide
better experiences


256
00:14:29.203 --> 00:14:31.872 line:-1 align:center
in Control Center and the Lock Screen.


257
00:14:31.905 --> 00:14:35.075 line:-2 align:center
This includes things like
a title and subtitle,


258
00:14:35,108 --> 00:14:39,146 line:-2
a description, thumbnail,
season and episode information,


259
00:14:39,179 --> 00:14:41,582 line:-1
or start and end dates for live streams.


260
00:14:41.615 --> 00:14:45.719 line:-2 align:center
Always keep your media
in its original aspect ratio.


261
00:14:45.752 --> 00:14:48.722 line:-2 align:center
This allows the system
to position your videos on screen


262
00:14:48.755 --> 00:14:50.891 line:-1 align:center
in the correct location.


263
00:14:50.924 --> 00:14:55.762 line:-2 align:center
Letter boxing your content
can lead to experiences like this


264
00:14:55,796 --> 00:14:57,831 line:-1
or this.


265
00:14:57.865 --> 00:15:02.269 line:-2 align:center
Make sure to include support for
the latest media standards where possible.


266
00:15:02,302 --> 00:15:06,240 line:-1
For example, HDR and Dolby Atmos.


267
00:15:06,273 --> 00:15:09,910 line:-2
And lastly, make sure to include
audio and subtitle tracks


268
00:15:09.943 --> 00:15:11.879 line:-1 align:center
for multiple languages


269
00:15:11,912 --> 00:15:15,315 line:-2
so your media is accessible
to as many people as possible.


270
00:15:17.384 --> 00:15:20.654 line:-2 align:center
If there is one thing to take away
from this section of the talk,


271
00:15:20,687 --> 00:15:24,291 line:-2
it's that you should keep the focus
on your content.


272
00:15:24,324 --> 00:15:28,362 line:-2
We've built the system media players,
provided through AVPlayerViewController,


273
00:15:28.395 --> 00:15:32.699 line:-2 align:center
to make that goal as easy as possible
for you as a developer.


274
00:15:32.733 --> 00:15:36.937 line:-2 align:center
Now, let's go over some new features
we've added to AVPlayerViewController,


275
00:15:36.970 --> 00:15:40.040 line:-2 align:center
starting with the new
visual intelligence features.


276
00:15:40,073 --> 00:15:45,812 line:-2
In this example, we have a video paused
on a frame with a code snippet in it.


277
00:15:45,846 --> 00:15:48,615 line:-2
Long pressing the code snippet
will select it.


278
00:15:48.649 --> 00:15:53.687 line:-2 align:center
You can then copy and paste it
directly into playgrounds to try it out.


279
00:15:53,720 --> 00:15:55,956 line:-1
This works great for macOS as well.


280
00:15:55.989 --> 00:15:59.293 line:-2 align:center
Hovering your cursor over
the same code will show the I-beam


281
00:15:59.326 --> 00:16:01.595 line:-1 align:center
indicating the text is selectable.


282
00:16:01,628 --> 00:16:03,997 line:-2
You can then use your cursor
to highlight it


283
00:16:04,031 --> 00:16:06,767 line:-1
or use CMD+A to Select All.


284
00:16:06,800 --> 00:16:10,938 line:-2
We're introducing a new API
to go along with this functionality.


285
00:16:10,971 --> 00:16:16,009 line:-2
Available in AVPlayerViewController
on iOS and AVPlayerView on macOS,


286
00:16:16.043 --> 00:16:19.913 line:-2 align:center
allowsVideoFrameAnalysis
will toggle this feature.


287
00:16:19.947 --> 00:16:24.151 line:-2 align:center
This will be enabled by for all apps
linking against the new SDKs.


288
00:16:24,184 --> 00:16:26,987 line:-2
While allowsVideoFrameAnalysis
is set to true,


289
00:16:27.020 --> 00:16:28.755 line:-1 align:center
and once the media is paused,


290
00:16:28,789 --> 00:16:33,927 line:-2
AVKit will begin analyzing the current
video frame after a set period.


291
00:16:33,961 --> 00:16:36,597 line:-2
Note that we will not analyze frames
while scrolling,


292
00:16:36,630 --> 00:16:38,131 line:-1
for performance reasons,


293
00:16:38.165 --> 00:16:40.767 line:-1 align:center
or for FairPlay protected content.


294
00:16:40.801 --> 00:16:46.039 line:-2 align:center
In general, we think people will expect
this functionality in most situations.


295
00:16:46.073 --> 00:16:48.242 line:-1 align:center
However, there are some instances


296
00:16:48.275 --> 00:16:50.878 line:-2 align:center
where you may want to disable
visual analysis


297
00:16:50,911 --> 00:16:54,414 line:-1
as is appropriate in your application.


298
00:16:54,448 --> 00:16:57,518 line:-2
For example, in performance critical
applications,


299
00:16:57.551 --> 00:17:00.120 line:-1 align:center
such as a collection view of videos,


300
00:17:00.153 --> 00:17:03.257 line:-2 align:center
or in cases where interaction
with the video is not expected,


301
00:17:03.290 --> 00:17:05.459 line:-1 align:center
like splash screens.


302
00:17:05.492 --> 00:17:08.495 line:-2 align:center
For more info on how to integrate the
visual intelligence feature set


303
00:17:08,529 --> 00:17:12,866 line:0
into your apps,
see our related talks on VisionKit.


304
00:17:12,900 --> 00:17:17,971 line:-2
Next, let's take a look some improvements
we made to interstitials.


305
00:17:18,005 --> 00:17:20,807 line:-2
Up until now,
interstitials were only supported


306
00:17:20,841 --> 00:17:23,677 line:-1
in AVPlayerViewController on tvOS.


307
00:17:23,710 --> 00:17:28,482 line:-2
Well, I'm happy to announce we're bringing
the same level of support to iOS as well.


308
00:17:28.515 --> 00:17:32.186 line:-2 align:center
Interstitials,
either in the stream or defined locally


309
00:17:32.219 --> 00:17:33.987 line:-1 align:center
through AVPlayerInterstitialEvents,


310
00:17:34,021 --> 00:17:36,757 line:-1
will now be marked along the timeline.


311
00:17:36,790 --> 00:17:40,527 line:-2
When the timeline hits a marker,
we'll begin playing the interstitial.


312
00:17:40.561 --> 00:17:44.698 line:-2 align:center
If your interstitials are already
fully defined within your HLS playlist,


313
00:17:44,731 --> 00:17:46,934 line:-1
you'll get this behavior automatically–


314
00:17:46.967 --> 00:17:49.436 line:-1 align:center
no adoption required.


315
00:17:49,469 --> 00:17:53,373 line:-2
If not, or if you app requires
some more custom behavior,


316
00:17:53,407 --> 00:17:56,310 line:-1
we're introducing some new API as well.


317
00:17:56.343 --> 00:18:01.481 line:-2 align:center
AVInterstitialTimeRange is being brought
over from tvOS to iOS.


318
00:18:01.515 --> 00:18:05.085 line:-2 align:center
These will be populated automatically
into the AVPlayerItem property,


319
00:18:05,118 --> 00:18:07,221 line:-1
interstitialTimeRanges,


320
00:18:07,254 --> 00:18:10,657 line:-2
which is also being brought over
from tvOS.


321
00:18:10,691 --> 00:18:13,560 line:-2
When using an HLS stream,
an AVInterstitialTimeRange


322
00:18:13.594 --> 00:18:17.097 line:-2 align:center
will be synthesized
for each interstitial in the stream.


323
00:18:17,130 --> 00:18:20,934 line:-2
When creating interstitial events locally
through the AVFoundation API,


324
00:18:20,968 --> 00:18:23,103 line:-2
an AVInterstitialTimeRange
will be synthesized


325
00:18:23.136 --> 00:18:26.740 line:-1 align:center
for each AVPlayerInterstitialEvent.


326
00:18:26,773 --> 00:18:28,842 line:-1
Unlike on tvOS however,


327
00:18:28,876 --> 00:18:32,446 line:-2
interstitialTimeRanges
is a read-only property.


328
00:18:32,479 --> 00:18:35,816 line:-2
Interstitials will either need to be
defined within the HLS stream


329
00:18:35,849 --> 00:18:38,385 line:-1
or through AVPlayerInterstitialEvents.


330
00:18:38,418 --> 00:18:41,488 line:-2
For those migrating
their support from their tvOS apps,


331
00:18:41,522 --> 00:18:46,827 line:-2
this is in essence equivalent to setting
translatesPlayerInterstitialEvents to yes.


332
00:18:47,761 --> 00:18:52,533 line:-2
We're also bringing over two
delegate methods from tvOS as well.


333
00:18:52,566 --> 00:18:55,068 line:-2
These can be used to know
when an interstitial has begun


334
00:18:55,102 --> 00:18:57,538 line:-1
or ended playback.


335
00:18:57,571 --> 00:19:00,440 line:-2
Let's see how we can use these to APIs
to add a skip button


336
00:19:00,474 --> 00:19:03,043 line:-1
for a pre-roll ad on iOS.


337
00:19:03,076 --> 00:19:05,979 line:-2
First, we'll create an
AVPlayerInterstitialEventController


338
00:19:06.013 --> 00:19:08.549 line:-1 align:center
for the primary media's player.


339
00:19:08,582 --> 00:19:12,052 line:-1
Next, we'll create an interstitial event.


340
00:19:12,085 --> 00:19:14,288 line:-1
We'll define some restrictions for it.


341
00:19:14.321 --> 00:19:17.357 line:-2 align:center
These restrictions prevent seeking
within the interstitial


342
00:19:17,391 --> 00:19:20,761 line:-2
and prevent skipping past
the interstitial.


343
00:19:20,794 --> 00:19:24,765 line:-2
Then we'll add the interstitial
to the event controller.


344
00:19:24.798 --> 00:19:29.670 line:-2 align:center
And lastly, we can implement the new
willPresentInterstitial delegate callback


345
00:19:29,703 --> 00:19:33,307 line:-2
to bring up an ad skip button
after a set interval.


346
00:19:33,340 --> 00:19:36,944 line:-2
And once the button is pressed,
we'll cancel the interstitial.


347
00:19:36,977 --> 00:19:38,979 line:-1
It's that easy.


348
00:19:39.012 --> 00:19:42.950 line:-2 align:center
Note that when adding any custom
UI elements to an AVPlayerViewController,


349
00:19:42,983 --> 00:19:45,185 line:-1
such as this ad skip button,


350
00:19:45,219 --> 00:19:47,421 line:-2
always make sure to add to them
as subviews


351
00:19:47,454 --> 00:19:49,423 line:-1
of the contentOverlayView.


352
00:19:49.456 --> 00:19:51.892 line:-2 align:center
To learn more about how
you can integrate your interstitials


353
00:19:51.925 --> 00:19:54.061 line:-1 align:center
right into your HLS playlists


354
00:19:54,094 --> 00:19:57,231 line:-2
or how you can use
the AVFoundation interstitials API,


355
00:19:57,264 --> 00:20:02,436 line:0
check out our related talks on exploring
HLS dynamic pre-rolls and mid-rolls.


356
00:20:02,469 --> 00:20:06,940 line:-2
Now we'll go over a new feature we've
added this year across all our platforms;


357
00:20:06,974 --> 00:20:09,676 line:-1
native support for playback speed control.


358
00:20:09.710 --> 00:20:12.079 line:-2 align:center
Both AVPlayerView
and AVPlayerViewController


359
00:20:12,112 --> 00:20:16,717 line:-2
can now optionally show a playback speed
menu using some new API we've added.


360
00:20:18.185 --> 00:20:22.523 line:-2 align:center
We're making this available
on macOS, iOS, and tvOS.


361
00:20:22,556 --> 00:20:25,058 line:-1
Let's take a look at what this looks like.


362
00:20:25,092 --> 00:20:29,563 line:-2
On tvOS, you'll see a new control
in the transport bar.


363
00:20:29,596 --> 00:20:32,599 line:-2
Selecting the control will display
a list of the available playback speeds


364
00:20:32.633 --> 00:20:34.968 line:-1 align:center
to choose from.


365
00:20:35,002 --> 00:20:39,873 line:-2
On iOS, this menu will appear
in the transport control overflow menu.


366
00:20:39.907 --> 00:20:45.212 line:-2 align:center
And similarly, on macOS, the control
will appear in the overflow menu.


367
00:20:45,245 --> 00:20:49,816 line:-2
All apps linking against the new iOS,
macOS, and tvOS SDKs


368
00:20:49,850 --> 00:20:52,119 line:-1
will get this functionality automatically


369
00:20:52,152 --> 00:20:55,355 line:-1
with no additional changes required.


370
00:20:55.389 --> 00:20:57.891 line:-1 align:center
However, depending on your use case,


371
00:20:57,925 --> 00:21:01,495 line:-2
some applications may want to modify
the list of speeds,


372
00:21:01,528 --> 00:21:05,632 line:-2
programmatically select a speed,
or disable the menu entirely.


373
00:21:05,666 --> 00:21:08,869 line:-2
To accommodate these use cases,
we've added some new APIs


374
00:21:08,902 --> 00:21:11,939 line:-2
to AVPlayerView
and AVPlayerViewController.


375
00:21:11,972 --> 00:21:13,273 line:-1
Let's take a look at these.


376
00:21:14.875 --> 00:21:20.514 line:-2 align:center
First, we've added a new class in AVKit–
AVPlaybackSpeed.


377
00:21:20,547 --> 00:21:23,817 line:-2
AVPlaybackSpeeds represent
user selectable speed options


378
00:21:23.851 --> 00:21:27.120 line:-2 align:center
in a playback UI
and they have three properties.


379
00:21:27,154 --> 00:21:30,157 line:-1
A rate value, defined on initialized,


380
00:21:30,190 --> 00:21:34,127 line:-2
which will be set on the player
when the playback speed is selected.


381
00:21:34.161 --> 00:21:37.164 line:-2 align:center
A localized name,
used to represent the playback speed


382
00:21:37.197 --> 00:21:39.533 line:-1 align:center
within the accessibility system


383
00:21:39,566 --> 00:21:42,669 line:-2
For example,
a speed of 2.5 might use a localizedName


384
00:21:42,703 --> 00:21:45,172 line:-1
of "Two and a half times speeds."


385
00:21:45.205 --> 00:21:47.207 line:-1 align:center
And a localized numeric name.


386
00:21:47,241 --> 00:21:50,010 line:-2
This value is synthesized
from the rate property


387
00:21:50.043 --> 00:21:53.680 line:-2 align:center
and will be the String displayed
in the playback speed menu


388
00:21:53,714 --> 00:21:56,016 line:-2
If your app requires a custom
playback speed menu


389
00:21:56,049 --> 00:21:59,653 line:-2
external to the player,
use this string to represent the speed.


390
00:22:01,021 --> 00:22:05,025 line:-2
Lastly, AVPlaybackSpeed defines a list
of system default speeds


391
00:22:05,058 --> 00:22:08,362 line:-1
that should be used whenever possible.


392
00:22:08.395 --> 00:22:12.799 line:-2 align:center
You can use AVPlaybackSpeed in conjunction
with some new API on AVPlayerView


393
00:22:12,833 --> 00:22:17,938 line:-2
and AVPlayerViewController to adapt
this feature to fit within your app.


394
00:22:17,971 --> 00:22:23,076 line:-2
The speeds property allows defining
a custom list of playback speeds.


395
00:22:23,110 --> 00:22:26,680 line:-2
By default this property will be set
to the AVPlaybackSpeed


396
00:22:26.713 --> 00:22:29.082 line:-1 align:center
systemDefaultSpeeds list.


397
00:22:29,116 --> 00:22:32,953 line:-2
Setting this to an empty list
will hide the menu.


398
00:22:32,986 --> 00:22:37,858 line:-2
The selected speed property will return
the speed that's currently active.


399
00:22:37.891 --> 00:22:41.762 line:-2 align:center
And lastly, the selectSpeed function
allows programmatic selection


400
00:22:41.795 --> 00:22:44.231 line:-1 align:center
of the current speed.


401
00:22:44,264 --> 00:22:46,133 line:-2
Note that you should only
use this function


402
00:22:46.166 --> 00:22:50.871 line:-2 align:center
in response to explicit selection of
the speed outside of the player UI.


403
00:22:50.904 --> 00:22:54.808 line:-2 align:center
Never implicitly override
the chosen playback speed.


404
00:22:54.842 --> 00:22:58.145 line:-1 align:center
Let's take a look at an example.


405
00:22:58.178 --> 00:23:00.647 line:-2 align:center
Here we're creating
a AVPlayerViewController


406
00:23:00.681 --> 00:23:02.583 line:-1 align:center
and presenting it.


407
00:23:02.616 --> 00:23:07.287 line:-2 align:center
By default this will use the system
provided list of playback speeds.


408
00:23:07.321 --> 00:23:11.625 line:-2 align:center
You can add a new speed to the menu
by creating an AVPlaybackSpeed


409
00:23:11.658 --> 00:23:15.829 line:-2 align:center
and appending it to the list of speeds
in AVPlayerViewController.


410
00:23:15,863 --> 00:23:20,601 line:-2
We can also disable the menu
by setting an empty list of speeds.


411
00:23:20.634 --> 00:23:23.270 line:-1 align:center
It's as easy as that.


412
00:23:23,303 --> 00:23:27,708 line:-2
Note though, you should always call
AVPlayer play() to begin playback.


413
00:23:27.741 --> 00:23:30.744 line:-2 align:center
Never start playback
by calling setRate:1.0,


414
00:23:30,777 --> 00:23:34,348 line:-1
as the selected rate might not be 1.0.


415
00:23:34,381 --> 00:23:37,985 line:-2
And with that,
I'd like to wrap up the session.


416
00:23:38,018 --> 00:23:41,688 line:-2
We saw the new
redesigned iOS system player.


417
00:23:41,722 --> 00:23:46,026 line:-2
We heard how you can design
amazing playback experiences of your own.


418
00:23:46.059 --> 00:23:49.062 line:-2 align:center
We saw some cool
new visual intelligence features,


419
00:23:49,096 --> 00:23:53,200 line:-2
and went over our new interstitials
and playback speed APIs.


420
00:23:53,233 --> 00:23:54,868 line:-1
I hope you enjoyed the session


421
00:23:54,902 --> 00:23:58,338 line:-2
and look forward to seeing
these features in your apps.


422
00:23:58,372 --> 00:24:00,374 line:-1
Enjoy the rest of the conference.

