2
00:00:00,334 --> 00:00:07,341 line:-1
♪ ♪


3
00:00:09.676 --> 00:00:12.546 line:-2 align:center
Raj Ramamurthy: Hello,
and welcome to "SwiftUI on iPad:


4
00:00:12,579 --> 00:00:14,147 line:-1
Organize your interface."


5
00:00:14.181 --> 00:00:17.751 line:-1 align:center
I'm Raj, and I work on SwiftUI.


6
00:00:17.784 --> 00:00:22.055 line:-2 align:center
iPadOS 16 has a number of updates
to allow building more productive,


7
00:00:22,089 --> 00:00:25,592 line:-2
professional-grade apps
with rich features.


8
00:00:25.626 --> 00:00:28.562 line:-2 align:center
In this session,
I'm going to discuss a few of them


9
00:00:28.595 --> 00:00:34.268 line:-2 align:center
and talk about organizing the interface
of your SwiftUI apps to shine on iPad.


10
00:00:34.301 --> 00:00:38.305 line:-2 align:center
To start, I'll take you on a tour
of lists and tables.


11
00:00:38.338 --> 00:00:41.041 line:-2 align:center
Then, I'll talk about
the SwiftUI selection model


12
00:00:41.074 --> 00:00:44.378 line:-1 align:center
and how to integrate selection with menus.


13
00:00:44.411 --> 00:00:47.581 line:-2 align:center
Finally, I'll discuss how to structure
your app's navigation


14
00:00:47,614 --> 00:00:49,983 line:-1
for iPad by using split views.


15
00:00:50.017 --> 00:00:52.352 line:-1 align:center
But wait, there's more.


16
00:00:52,386 --> 00:00:55,689 line:-2
This is actually the first session
of a two-part series.


17
00:00:55,722 --> 00:00:58,492 line:-2
In the second part,
my colleague Harry takes a tour


18
00:00:58.525 --> 00:01:01.762 line:-1 align:center
through toolbars, titles, and more.


19
00:01:01.795 --> 00:01:03.797 line:-2 align:center
Harry covers
some really important additions


20
00:01:03,830 --> 00:01:06,733 line:-2
that take SwiftUI iPad apps
to the next level,


21
00:01:06,767 --> 00:01:09,970 line:-2
so please make sure
to watch both sessions.


22
00:01:10,003 --> 00:01:14,041 line:-1
Let's get started with lists and tables.


23
00:01:14.074 --> 00:01:18.011 line:-2 align:center
I recently joined a few book clubs,
but I'm running pretty behind.


24
00:01:18,045 --> 00:01:20,848 line:-2
It's so hard to find
a quiet place to read.


25
00:01:20.881 --> 00:01:24.051 line:-2 align:center
So to help me focus on my reading,
I've started working on an app


26
00:01:24,084 --> 00:01:26,620 line:-1
to find these mythical quiet places.


27
00:01:26.653 --> 00:01:30.858 line:-2 align:center
A quiet place is like a reading oasis,
where the pages just fly.


28
00:01:30.891 --> 00:01:35.062 line:-2 align:center
And this app helps me track
all the quiet places that I've found.


29
00:01:35.095 --> 00:01:38.131 line:-2 align:center
I've built the app for iPhone,
but I think it'd be a fun exercise


30
00:01:38.165 --> 00:01:42.035 line:-2 align:center
to update it for iPad to really
take advantage of the larger display.


31
00:01:42.069 --> 00:01:45.305 line:-2 align:center
By making the app better for iPad,
I'll also be further along


32
00:01:45,339 --> 00:01:48,175 line:-2
when I eventually bring it
to the Mac as well.


33
00:01:48.208 --> 00:01:50.811 line:-2 align:center
I won't be covering the Mac
explicitly in this session,


34
00:01:50.844 --> 00:01:54.815 line:-2 align:center
but many of the APIs shown
also apply on macOS.


35
00:01:54,848 --> 00:01:58,318 line:-2
Here is a list of all the quiet places
that I've found so far.


36
00:01:58.352 --> 00:02:01.989 line:-2 align:center
This list is a great place
to start with updating the app.


37
00:02:02.022 --> 00:02:04.424 line:-1 align:center
I've started working on the iPad version.


38
00:02:04.458 --> 00:02:08.395 line:-2 align:center
It's not terrible, but it doesn't
take advantage of the bigger screen.


39
00:02:08.428 --> 00:02:12.833 line:-2 align:center
There's quite a bit of wasted space,
and the information density is low.


40
00:02:12,866 --> 00:02:16,336 line:-2
Thankfully, in iPadOS 16,
there's a great solution


41
00:02:16,370 --> 00:02:19,072 line:-2
for these sorts
of information dense scenarios:


42
00:02:19,106 --> 00:02:21,441 line:-1
multi-column tables.


43
00:02:21,475 --> 00:02:24,178 line:-1
Let me show you what they look like.


44
00:02:24.211 --> 00:02:27.915 line:-2 align:center
Here's the “All Places" view
after adopting the SwiftUI API


45
00:02:27,948 --> 00:02:29,816 line:-1
for multi-column tables.


46
00:02:29.850 --> 00:02:33.420 line:-2 align:center
I'll work up towards this screenshot
over the next few minutes.


47
00:02:33.453 --> 00:02:37.291 line:-2 align:center
Multi-column tables in SwiftUI
were first introduced in macOS Monterey,


48
00:02:37,324 --> 00:02:42,663 line:-2
and starting in iPadOS 16, the same
table API is now available for iPad.


49
00:02:42.696 --> 00:02:47.968 line:-2 align:center
Just like on the Mac, tables on iPad
support multiple columns and sorting.


50
00:02:48.001 --> 00:02:50.337 line:-2 align:center
Along with the introduction
of tables on iPad,


51
00:02:50,370 --> 00:02:54,374 line:-2
SwiftUI now supports sections
in tables on iPad and the Mac.


52
00:02:55,976 --> 00:02:58,879 line:-4
The general guidance around tables
from the previous session


53
00:02:58.912 --> 00:03:03.016 line:-4 align:center
"SwiftUI on the Mac: Build
the fundamentals" still applies on iPad,


54
00:03:03.050 --> 00:03:06.320 line:-4 align:center
so I invite you to watch that session
if you haven't already.


55
00:03:07.354 --> 00:03:10.924 line:-2 align:center
Let's build up the table shown earlier,
starting from the iPhone list.


56
00:03:10,958 --> 00:03:13,794 line:-2
Here's the code
for the places list from earlier.


57
00:03:15,495 --> 00:03:18,665 line:-1
First, I'll switch from a list to a table.


58
00:03:18.699 --> 00:03:21.502 line:-2 align:center
Tables have
a different construction from lists.


59
00:03:21,535 --> 00:03:24,872 line:-2
Instead of a view builder,
tables accept a column builder.


60
00:03:26.406 --> 00:03:29.443 line:-2 align:center
The first column I'll add
is for the place's name.


61
00:03:29,476 --> 00:03:32,546 line:-2
The column requires a name
for its header and a view builder


62
00:03:32,579 --> 00:03:35,616 line:-2
to produce the view
for each element in the collection.


63
00:03:35,649 --> 00:03:39,119 line:-2
I've also specified a value key path,
which will be important later


64
00:03:39,152 --> 00:03:41,889 line:-1
when I add sorting to the table.


65
00:03:41,922 --> 00:03:45,559 line:-2
Notice how similar the view builder is
to the list-based construction.


66
00:03:45,592 --> 00:03:49,229 line:-2
In fact, I can even reuse
the PlaceCell type from before.


67
00:03:50.797 --> 00:03:55.068 line:-2 align:center
In compact size classes,
tables only show their first column,


68
00:03:55.102 --> 00:03:58.939 line:-2 align:center
which means my table still looks great
on iPhone and in slide over on iPad.


69
00:04:00.340 --> 00:04:03.610 line:-2 align:center
You might notice that this is similar
to a list in appearance.


70
00:04:03.644 --> 00:04:05.979 line:-2 align:center
But I didn't just replace
the table with a list,


71
00:04:06.013 --> 00:04:09.416 line:-2 align:center
because reusing the table allows
for scroll position and selection


72
00:04:09,449 --> 00:04:12,920 line:-2
to be preserved when transitioning
between size classes.


73
00:04:12.953 --> 00:04:15.322 line:-2 align:center
In general,
make sure to use the first column


74
00:04:15.355 --> 00:04:18.592 line:-2 align:center
for compact-specific appearance,
and always make sure you're testing


75
00:04:18.625 --> 00:04:21.862 line:-2 align:center
your iPad apps in a variety
of environments, like slide over.


76
00:04:23.163 --> 00:04:25.165 line:-1 align:center
Okay, moving on.


77
00:04:25,199 --> 00:04:28,135 line:-2
I'll add columns
for the comfort and noise levels.


78
00:04:28.168 --> 00:04:32.506 line:-2 align:center
For columns with just textual content,
TableColumn offers a convenience API


79
00:04:32,539 --> 00:04:36,376 line:-2
that lets me omit the view builder
when my value points to a string.


80
00:04:36.410 --> 00:04:38.645 line:-2 align:center
And in this case,
I know the comfort level isn't


81
00:04:38.679 --> 00:04:41.515 line:-2 align:center
going to need much room,
so I've applied a fixed width.


82
00:04:42,683 --> 00:04:45,686 line:-2
I can also add sorting to the table
by using comparators.


83
00:04:45.719 --> 00:04:48.689 line:-2 align:center
I'll create some state
to store the comparators in.


84
00:04:48,722 --> 00:04:51,225 line:-2
The state here is an array
because it represents


85
00:04:51.258 --> 00:04:53.460 line:-1 align:center
all of the comparators for the table.


86
00:04:53.493 --> 00:04:56.096 line:-2 align:center
And setting the initial value
to the name comparator


87
00:04:56,129 --> 00:04:59,333 line:-2
allows the table to appear sorted
when it's first displayed.


88
00:05:00.534 --> 00:05:04.872 line:-2 align:center
Next, I'll pass a binding to my state
into the table to wire everything up.


89
00:05:06,073 --> 00:05:09,176 line:-2
Because the columns each specify
their value as a key path


90
00:05:09.209 --> 00:05:12.613 line:-2 align:center
to a comparable field,
they are sortable by default.


91
00:05:12.646 --> 00:05:18.051 line:-2 align:center
And now the table is fully sortable
by name, comfort level, and noise.


92
00:05:18.085 --> 00:05:20.587 line:-2 align:center
Note that table doesn't handle
the sorting on its own.


93
00:05:20,621 --> 00:05:21,989 line:-1
That's up to me.


94
00:05:22.022 --> 00:05:26.059 line:-2 align:center
I can use the onChange modifier to sort
the data when the sort order changes.


95
00:05:27,361 --> 00:05:29,796 line:-1
All right, let's take it for a spin.


96
00:05:30.797 --> 00:05:33.600 line:-2 align:center
The table looks great,
showing all the places data


97
00:05:33.634 --> 00:05:37.137 line:-2 align:center
and really taking advantage
of the larger screen.


98
00:05:37.171 --> 00:05:40.607 line:-2 align:center
Unlike on the Mac,
tables on iPad don't scroll horizontally,


99
00:05:40.641 --> 00:05:43.310 line:-2 align:center
so it's important to limit
the number of columns.


100
00:05:43,343 --> 00:05:47,181 line:-2
This ensures that all of the columns
can be shown at once.


101
00:05:47.214 --> 00:05:49.816 line:-1 align:center
Each column shows its label in the header.


102
00:05:49.850 --> 00:05:52.286 line:-2 align:center
And tapping on the label
sorts that column.


103
00:05:52.319 --> 00:05:54.154 line:-1 align:center
I can even sort by noise level.


104
00:05:57.090 --> 00:06:00.127 line:-2 align:center
And in slide over,
the table collapses into a single column


105
00:06:00.160 --> 00:06:03.897 line:-2 align:center
that represents all of the information
in a more condensed format.


106
00:06:03.931 --> 00:06:07.868 line:-2 align:center
Now that I've updated the list
into a table, let's dive into selection.


107
00:06:07,901 --> 00:06:11,071 line:-2
In this section,
I'll review the SwiftUI selection model


108
00:06:11,104 --> 00:06:14,041 line:-2
and discuss
integrating selection with menus.


109
00:06:14.074 --> 00:06:18.612 line:-2 align:center
Along the way, I'm going to supercharge
the places table with rich functionality.


110
00:06:18.645 --> 00:06:22.149 line:-2 align:center
But first, I'll talk about
how selection works in SwiftUI.


111
00:06:22.182 --> 00:06:27.287 line:-2 align:center
SwiftUI includes a robust API
for managing list and table selection.


112
00:06:27.321 --> 00:06:30.624 line:-2 align:center
Here's a diagram with a list
containing a few rows.


113
00:06:30.657 --> 00:06:32.426 line:-1 align:center
Each row has a tag.


114
00:06:32.459 --> 00:06:37.331 line:-2 align:center
These tags are unique values for each row
that help the list manage selection.


115
00:06:37.364 --> 00:06:40.234 line:-2 align:center
In this diagram,
the tags are shown in green circles.


116
00:06:41.602 --> 00:06:45.706 line:-2 align:center
Along with the tag, there's also
some state that holds the selection.


117
00:06:45.739 --> 00:06:48.242 line:-2 align:center
This is the type
that holds the tag values.


118
00:06:48.275 --> 00:06:50.344 line:-1 align:center
For example, with multiple selection,


119
00:06:50.377 --> 00:06:54.448 line:-2 align:center
this is a set that holds the tags
for each selected row.


120
00:06:54.481 --> 00:06:57.518 line:-2 align:center
The job of the list is to coordinate
between the tag in each row


121
00:06:57,551 --> 00:06:58,886 line:-1
and the selection state.


122
00:06:58.919 --> 00:07:02.289 line:-2 align:center
And it does this
via its selection binding.


123
00:07:02,322 --> 00:07:05,926 line:-2
So when a row is selected,
such as row number two here,


124
00:07:05,959 --> 00:07:09,763 line:-2
the list adds it to the set
via the selection binding.


125
00:07:09.796 --> 00:07:12.032 line:-2 align:center
And similarly,
if some other part of the app


126
00:07:12.065 --> 00:07:17.437 line:-2 align:center
programmatically changes the set,
say to add three like shown here,


127
00:07:17,471 --> 00:07:20,941 line:-2
the list selects it
because the selection binding changes.


128
00:07:20.974 --> 00:07:24.611 line:-2 align:center
This general model is the same
across iOS and macOS.


129
00:07:24.645 --> 00:07:29.383 line:-2 align:center
So there are two parts to selection:
a tag and some state.


130
00:07:29,416 --> 00:07:32,719 line:-2
Next, I'd like to talk
about where tags come from.


131
00:07:32.753 --> 00:07:36.957 line:-2 align:center
A tag is just a value for a view
in a selectable container


132
00:07:36,990 --> 00:07:40,260 line:-2
that is used to track
whether that view is selected.


133
00:07:40.294 --> 00:07:44.998 line:-2 align:center
In many cases, SwiftUI can automatically
synthesize tags on your behalf.


134
00:07:45.032 --> 00:07:49.203 line:-2 align:center
Tags are similar to identifiers,
but not quite the same.


135
00:07:49.236 --> 00:07:52.673 line:-2 align:center
When using ForEach,
SwiftUI will automatically derive the tag


136
00:07:52,706 --> 00:07:55,242 line:-1
for a view from its explicit identity.


137
00:07:55,275 --> 00:08:00,013 line:-2
And tables will use their row value's
identifier as the selection tag.


138
00:08:00,047 --> 00:08:04,885 line:-2
In the places app, that means the place
struct's identifier type will be used.


139
00:08:04.918 --> 00:08:07.120 line:-4 align:center
For more information
about explicit identity,


140
00:08:07,154 --> 00:08:09,323 line:-3
check out "Demystify SwiftUI."


141
00:08:11,325 --> 00:08:14,595 line:-2
To manually tag views,
use the tag modifier.


142
00:08:14,628 --> 00:08:16,763 line:-1
This is what ForEach does under the hood.


143
00:08:16.797 --> 00:08:19.099 line:-1 align:center
The tag modifier takes a Hashable value.


144
00:08:19,132 --> 00:08:22,336 line:-2
However, when using the tag modifier,
be careful–


145
00:08:22,369 --> 00:08:25,405 line:-2
it's important that all of the views
in a selectable container


146
00:08:25.439 --> 00:08:27.708 line:-1 align:center
share the same tag type.


147
00:08:27.741 --> 00:08:31.612 line:-2 align:center
Otherwise, SwiftUI might not know
how to select the view.


148
00:08:31,645 --> 00:08:35,582 line:-2
Note that if you use the ID modifier,
it doesn't set the tag.


149
00:08:35,616 --> 00:08:39,219 line:-2
So that's an overview of tags.
Let's bring back the diagram from earlier.


150
00:08:40,487 --> 00:08:42,789 line:-2
Now that I've explained the tag part
of this diagram,


151
00:08:42,823 --> 00:08:45,893 line:-2
I'd like to focus on the other half
of the selection equation:


152
00:08:45,926 --> 00:08:47,561 line:-1
the selection state.


153
00:08:47,594 --> 00:08:51,498 line:-2
In the previous example, I used a set,
but there are other options too.


154
00:08:52,900 --> 00:08:56,370 line:0
You can use these data structures
to represent selection.


155
00:08:56,403 --> 00:08:59,806 line:0
SwiftUI supports single selection,
new in macOS Ventura,


156
00:08:59,840 --> 00:09:03,810 line:0
required selection for macOS sidebars,
and multiple selection.


157
00:09:06.680 --> 00:09:10.984 line:-2 align:center
iPadOS 16 also introduces
lightweight multiple selection.


158
00:09:11.018 --> 00:09:14.221 line:-2 align:center
Now, with a keyboard attached,
you don't need to enter edit mode


159
00:09:14.254 --> 00:09:18.025 line:-2 align:center
to select multiple rows,
which helps avoid modality.


160
00:09:18,058 --> 00:09:20,527 line:-2
When using a keyboard,
you can use common shortcuts


161
00:09:20.561 --> 00:09:24.164 line:-2 align:center
like shift and command
to extend and modify the selection.


162
00:09:24.198 --> 00:09:26.633 line:-1 align:center
And this works great with the pointer.


163
00:09:26.667 --> 00:09:29.803 line:-2 align:center
Here's what the places table looks like
after adopting selection.


164
00:09:29,837 --> 00:09:32,639 line:-2
In this example,
I have an attached keyboard and trackpad,


165
00:09:32,673 --> 00:09:35,976 line:-2
so the rows aren't indented,
but they're still selected.


166
00:09:36.009 --> 00:09:39.413 line:-2 align:center
However, when using touch,
I'll still need to enter edit mode,


167
00:09:39,446 --> 00:09:42,850 line:-2
which is accelerated
by using a two-finger pan.


168
00:09:42.883 --> 00:09:45.619 line:-2 align:center
SwiftUI supports
this gesture automatically.


169
00:09:45.652 --> 00:09:47.454 line:-2 align:center
Speaking of edit mode,
there are some updates


170
00:09:47,487 --> 00:09:50,257 line:-2
with single selection
and edit mode as well.


171
00:09:50,290 --> 00:09:53,327 line:-2
In iOS 16,
list selection on iPhone and iPad


172
00:09:53,360 --> 00:09:56,563 line:-2
no longer requires edit mode
when selecting a single row.


173
00:09:56,597 --> 00:10:00,334 line:-2
And this is super useful for coordinating
with the updated navigation APIs.


174
00:10:01,502 --> 00:10:04,238 align:center
With all of these updates,
that brings us to this table,


175
00:10:04,271 --> 00:10:08,242 line:0
which builds upon the previous table
by adding a new column for edit mode.


176
00:10:08,275 --> 00:10:12,446 align:center
Edit mode is only required when using
multiple selection without a keyboard.


177
00:10:12.479 --> 00:10:16.416 line:-2 align:center
So with that, I'll update the places table
to support selection.


178
00:10:16,450 --> 00:10:19,019 line:-2
I can easily add selection
to the places table


179
00:10:19.052 --> 00:10:22.589 line:-2 align:center
by adding some state
to store the selection.


180
00:10:22,623 --> 00:10:24,992 line:-2
After creating the state,
I'll pass a binding


181
00:10:25,025 --> 00:10:27,628 line:-1
to the table's initializer.


182
00:10:27,661 --> 00:10:31,365 line:-2
Table enforces that its selection type
matches its row identifier,


183
00:10:31,398 --> 00:10:34,668 line:-2
so I've used the place ID type
as the selection type.


184
00:10:34.701 --> 00:10:38.872 line:-2 align:center
Since I want multiple selection,
I've used a set for the selection state.


185
00:10:38,906 --> 00:10:42,943 line:-2
Table tags its rows automatically,
so I don't need to tag anything myself.


186
00:10:44,144 --> 00:10:46,346 line:-1
And now I can select rows in the table.


187
00:10:46.380 --> 00:10:49.216 line:-2 align:center
But I haven't really done
anything with the selection.


188
00:10:49,249 --> 00:10:53,120 line:-2
I think it'd be great to add a button
that allows me to add the selected places


189
00:10:53.153 --> 00:10:56.523 line:-2 align:center
to a guide that I can share
with others in my book club.


190
00:10:56,557 --> 00:10:58,992 line:-2
This is the code
to add the toolbar button.


191
00:10:59.026 --> 00:11:03.096 line:-2 align:center
If there is a non-empty selection,
the button will now show up.


192
00:11:03,130 --> 00:11:04,765 line:-1
I've also added an edit button,


193
00:11:04.798 --> 00:11:07.634 line:-2 align:center
which complements the existing
lightweight selection support,


194
00:11:07.668 --> 00:11:10.704 line:-2 align:center
but it provides an affordance
to enter and exit edit mode


195
00:11:10.737 --> 00:11:12.606 line:-1 align:center
when there is no keyboard.


196
00:11:12,639 --> 00:11:15,976 line:-2
A good iPad app shines both with
and without the keyboard,


197
00:11:16.009 --> 00:11:19.780 line:-2 align:center
so it's important to offer controls
to enter and exit edit mode.


198
00:11:21,348 --> 00:11:22,416 line:-1
We're getting there.


199
00:11:22.449 --> 00:11:24.852 line:-2 align:center
Now we have a button that shows up
when we select rows


200
00:11:24,885 --> 00:11:28,021 line:-2
as well as a button
to enter and exit edit mode.


201
00:11:28,055 --> 00:11:30,390 line:-2
Please make sure to watch
the second session in this series


202
00:11:30,424 --> 00:11:33,460 line:-1
for more information about toolbars.


203
00:11:33,493 --> 00:11:35,162 line:-2
I'm pretty happy
with the toolbar button here,


204
00:11:35,195 --> 00:11:36,663 line:-1
but we can do more.


205
00:11:36.697 --> 00:11:39.333 line:-2 align:center
For actions on selection,
it's a great practice to keep them


206
00:11:39.366 --> 00:11:41.702 line:-1 align:center
as easy to access as possible.


207
00:11:41.735 --> 00:11:46.240 line:-2 align:center
That's why in iOS 16,
iPadOS 16, and macOS Ventura,


208
00:11:46.273 --> 00:11:50.544 line:-2 align:center
SwiftUI adds support
for multi-select context menus.


209
00:11:50.577 --> 00:11:53.981 line:-2 align:center
Multi-select context menus allow
for a context menu to be presented


210
00:11:54.014 --> 00:11:57.417 line:-2 align:center
that operates on a set
of selected identifiers.


211
00:11:57,451 --> 00:12:00,621 line:-2
Let's examine the anatomy of this table
to understand more.


212
00:12:02.122 --> 00:12:05.325 line:-2 align:center
Item-based context menus
have three variations.


213
00:12:05,359 --> 00:12:07,728 line:-2
First, you can show a menu
on multiple items,


214
00:12:07,761 --> 00:12:09,596 line:-1
such as the selection at the top.


215
00:12:10,764 --> 00:12:13,667 line:-2
You can also show a context menu
on an individual item.


216
00:12:15.102 --> 00:12:18.372 line:-2 align:center
And lastly, you can show a context menu
on an empty area,


217
00:12:18.405 --> 00:12:19.840 line:-1 align:center
where there is no content.


218
00:12:21.108 --> 00:12:24.077 line:-2 align:center
Let's add support for this
into our places table.


219
00:12:25.712 --> 00:12:28.282 line:-2 align:center
I've omitted some details
from the previous code examples


220
00:12:28,315 --> 00:12:30,784 line:-1
so we can focus on the context menu.


221
00:12:30,817 --> 00:12:34,888 line:-2
I've added the new contextMenu modifier
that takes a selection type.


222
00:12:34.922 --> 00:12:38.292 line:-2 align:center
This needs to match the selection type
of the list or table,


223
00:12:38,325 --> 00:12:41,328 line:-2
so since I'm using a table,
I'll use the PlaceID type.


224
00:12:43.030 --> 00:12:45.699 line:-2 align:center
The closure is passed
a set of the items to act on,


225
00:12:45.732 --> 00:12:49.136 line:-2 align:center
so if it's empty,
I know the menu is for the empty area.


226
00:12:49,169 --> 00:12:52,806 line:-2
I think a button to add a new place
would work great for the empty area.


227
00:12:52,840 --> 00:12:56,109 line:-2
That way, when I'm on the go
and find a new quiet place to read,


228
00:12:56.143 --> 00:12:58.145 line:-1 align:center
I can add it quickly.


229
00:12:58,178 --> 00:13:00,848 line:-2
Note that if the view builder
for the empty set of items


230
00:13:00.881 --> 00:13:02.549 line:-1 align:center
doesn't resolve to a view,


231
00:13:02,583 --> 00:13:05,586 line:-2
SwiftUI won't show a menu
on the empty area.


232
00:13:05.619 --> 00:13:08.188 line:-1 align:center
Next, let's handle a single selection.


233
00:13:08.222 --> 00:13:09.923 line:-1 align:center
If the set has only a single item,


234
00:13:09.957 --> 00:13:13.694 line:-2 align:center
I know the menu is being shown
for a single place.


235
00:13:13,727 --> 00:13:16,063 line:-2
And for both single
and multiple selections,


236
00:13:16.096 --> 00:13:18.732 line:-2 align:center
I want to be able to add
these places to a guide,


237
00:13:18.765 --> 00:13:21.068 line:-1 align:center
so I'll add another view to the menu.


238
00:13:21.101 --> 00:13:23.203 line:-1 align:center
Let's check out our progress.


239
00:13:23,237 --> 00:13:25,873 line:-2
Here's the new
context menu support in action.


240
00:13:25.906 --> 00:13:29.476 line:-2 align:center
Clicking on the empty area shows
a menu item to add a new place.


241
00:13:29.510 --> 00:13:33.881 line:-2 align:center
Selecting a single row shows
a context menu for just that row.


242
00:13:33,914 --> 00:13:36,183 line:-2
And I can extend the selection
with the keyboard,


243
00:13:36,216 --> 00:13:38,085 line:-1
creating this blue highlight.


244
00:13:38,118 --> 00:13:41,388 line:-2
I can then activate a context menu
over multiple rows,


245
00:13:41.421 --> 00:13:44.091 line:-2 align:center
allowing me to easily add places
to a guide.


246
00:13:45.459 --> 00:13:47.494 line:-1 align:center
This table is looking pretty snazzy now,


247
00:13:47.528 --> 00:13:49.997 line:-2 align:center
so I think it's time to add
some structure around it.


248
00:13:50.030 --> 00:13:52.833 line:-1 align:center
To do that, I'll need a split view.


249
00:13:52,866 --> 00:13:55,702 line:-2
Navigation is a fundamental part
of the iPad experience.


250
00:13:55.736 --> 00:14:00.174 line:-2 align:center
And split views are a great way
to avoid modality on iPad's larger display


251
00:14:00,207 --> 00:14:04,111 line:-2
by showing more information at once
without the need to drill in.


252
00:14:04.144 --> 00:14:06.847 line:-2 align:center
In this section, I'm going to cover
some updates to SwiftUI


253
00:14:06.880 --> 00:14:08.982 line:-1 align:center
around navigation and split views.


254
00:14:09.016 --> 00:14:12.386 line:-2 align:center
In the previous sections,
I created the places table


255
00:14:12.419 --> 00:14:16.089 line:-2 align:center
and added rich features
like selection and edit mode.


256
00:14:16,123 --> 00:14:18,959 line:-2
But I think the places app
is lacking some structure.


257
00:14:18,992 --> 00:14:22,062 line:-2
So in this section, I'll build
the foundation of our app's structure


258
00:14:22,095 --> 00:14:25,098 line:-1
by leveraging a navigation split view.


259
00:14:25,132 --> 00:14:27,868 line:-1
New in iPadOS 16 and macOS Ventura,


260
00:14:27.901 --> 00:14:30.370 line:-2 align:center
SwiftUI has improved support
for split views


261
00:14:30.404 --> 00:14:32.906 line:-1 align:center
with the NavigationSplitView type.


262
00:14:32,940 --> 00:14:35,909 line:-2
SwiftUI supports two
or three column split views


263
00:14:35.943 --> 00:14:38.545 line:-2 align:center
and has multiple styles
for complex control


264
00:14:38.579 --> 00:14:41.215 line:-1 align:center
over how the columns are displayed.


265
00:14:41,248 --> 00:14:42,416 line:-3
I'm not going to fully cover


266
00:14:42.449 --> 00:14:44.985 line:-4 align:center
how to present navigation content
in this session,


267
00:14:45,018 --> 00:14:48,889 line:-4
so for that, I invite you to check out
the SwiftUI cookbook for navigation.


268
00:14:48,922 --> 00:14:50,657 line:-4
Curt has quite a few recipes


269
00:14:50.691 --> 00:14:53.827 line:-4 align:center
for cooking up some really tasty
navigation experiences.


270
00:14:53.861 --> 00:14:56.897 line:-2 align:center
Instead, I'm going to focus
more on split views.


271
00:14:56,930 --> 00:15:00,534 align:center
Here's a diagram showing
a two column split view on iPad.


272
00:15:00,567 --> 00:15:03,737 line:0
In SwiftUI, the leading column
is called the sidebar column


273
00:15:03,770 --> 00:15:07,207 align:center
and the trailing column is called
the detail column.


274
00:15:07,241 --> 00:15:10,177 align:center
Notice how the columns are balanced
next to each other here.


275
00:15:10,210 --> 00:15:13,413 line:0
In landscape,
SwiftUI offers this by default.


276
00:15:13,447 --> 00:15:16,650 align:center
In portrait, however,
the sidebar hides out of the way,


277
00:15:16,683 --> 00:15:19,186 align:center
showing only the detail column.


278
00:15:19,219 --> 00:15:20,654 align:center
Tapping on the sidebar button


279
00:15:20,687 --> 00:15:22,656 align:center
shows the sidebar,


280
00:15:22,689 --> 00:15:25,926 align:center
which appears over the detail column,
dimming it underneath.


281
00:15:27.294 --> 00:15:30.230 line:-2 align:center
Generally, a two column split view
will prefer to show


282
00:15:30.264 --> 00:15:32.833 line:-2 align:center
only the detail column
when space constrained,


283
00:15:32.866 --> 00:15:35.002 line:-1 align:center
because the detail column often shows


284
00:15:35.035 --> 00:15:37.871 line:-2 align:center
more important information
than the sidebar column.


285
00:15:37.905 --> 00:15:39.806 line:-1 align:center
If you'd like to customize this behavior,


286
00:15:39.840 --> 00:15:42.042 line:-2 align:center
you can either always prefer
the detail column


287
00:15:42.075 --> 00:15:44.578 line:-2 align:center
with the prominentDetail navigation
split view style


288
00:15:44.611 --> 00:15:46.113 line:-1 align:center
or balance the weighting


289
00:15:46.146 --> 00:15:48.649 line:-2 align:center
with the balanced
NavigationSplitView style.


290
00:15:48.682 --> 00:15:53.020 line:-2 align:center
NavigationSplitView also supports
three column layouts.


291
00:15:53,053 --> 00:15:55,422 align:center
With three columns,
there is an additional column


292
00:15:55,455 --> 00:15:59,059 align:center
between the sidebar and detail
called the content column.


293
00:15:59,092 --> 00:16:02,829 line:0
If you're coming from UIKit, you may
know this as the supplementary column.


294
00:16:02,863 --> 00:16:06,133 line:0
In landscape,
the content and detail column are shown,


295
00:16:06,166 --> 00:16:09,269 line:0
and the sidebar can be toggled.


296
00:16:09,303 --> 00:16:13,307 line:0
After tapping on the toolbar button,
the detail column slides out of the way,


297
00:16:13,340 --> 00:16:16,810 align:center
making room for the sidebar and content.


298
00:16:16,844 --> 00:16:19,813 align:center
In portrait,
only the detail column is shown,


299
00:16:19,847 --> 00:16:23,083 align:center
and tapping on the toolbar button
shows the content.


300
00:16:23,116 --> 00:16:26,520 line:0
From there,
tapping again shows the sidebar.


301
00:16:26,553 --> 00:16:29,556 line:0
The sidebar and content
both overlay the detail.


302
00:16:31.124 --> 00:16:33.861 line:-2 align:center
In general, I recommend
sticking with the automatic style


303
00:16:33.894 --> 00:16:36.663 line:-2 align:center
for three column split views
because it makes the best use


304
00:16:36,697 --> 00:16:40,467 line:-2
of the available space
and is specialized for larger displays.


305
00:16:40,501 --> 00:16:43,804 line:-2
Just like the two column split view,
the three column split view collapses


306
00:16:43,837 --> 00:16:46,540 line:-1
to a stack in compact size classes.


307
00:16:46.573 --> 00:16:48.575 line:-2 align:center
Now that I've covered
the basics of split views,


308
00:16:48.609 --> 00:16:51.411 line:-1 align:center
it's time to add one to the places app.


309
00:16:51.445 --> 00:16:52.980 line:-1 align:center
Here is the content view.


310
00:16:53.013 --> 00:16:56.116 line:-2 align:center
I've created a NavigationSplitView
with two columns here.


311
00:16:56,149 --> 00:16:57,951 line:-1
The first column is the sidebar column


312
00:16:57.985 --> 00:17:00.354 line:-2 align:center
and the second column
is the detail column.


313
00:17:00.387 --> 00:17:03.657 line:-2 align:center
The detail column is populated
by links from the sidebar column,


314
00:17:03.690 --> 00:17:04.958 line:-1 align:center
but if nothing is presented,


315
00:17:04,992 --> 00:17:08,629 line:-2
the placeholder with "select a place"
will be shown instead.


316
00:17:10.597 --> 00:17:13.700 line:-2 align:center
Here's a screenshot of the placeholder.
It's pretty great.


317
00:17:13.734 --> 00:17:17.204 line:-2 align:center
This is using the automatic style,
which shows the sidebar in landscape,


318
00:17:17.237 --> 00:17:20.174 line:-1 align:center
hiding it out of the way in portrait.


319
00:17:20.207 --> 00:17:24.678 line:-2 align:center
Tapping on a row in the sidebar
presents that row in the detail column.


320
00:17:24.711 --> 00:17:28.182 line:-2 align:center
And when using slide over,
the columns collapse automatically.


321
00:17:28.215 --> 00:17:30.217 line:-1 align:center
This is just the tip of the iceberg–


322
00:17:30.250 --> 00:17:32.753 line:-2 align:center
there are so many
exciting navigation additions,


323
00:17:32.786 --> 00:17:35.455 line:-2 align:center
including better support
for state restoration,


324
00:17:35.489 --> 00:17:38.859 line:-2 align:center
deep linking,
and even richer programmatic control.


325
00:17:38.892 --> 00:17:42.896 line:-2 align:center
Again, I encourage you to check out
the navigation cookbook session for more.


326
00:17:44,364 --> 00:17:47,034 line:-2
I've built some awesome iPad features
into the app,


327
00:17:47.067 --> 00:17:50.671 line:-2 align:center
and I'm excited to go find
some peaceful places to read.


328
00:17:50,704 --> 00:17:53,640 line:-2
Hopefully I'll be caught up
with my book club soon.


329
00:17:53.674 --> 00:17:56.410 line:-2 align:center
In this session,
I've covered how to leverage tables


330
00:17:56,443 --> 00:17:58,345 line:-1
for rich display of data,


331
00:17:58.378 --> 00:18:01.281 line:-2 align:center
how to manage
sophisticated selection interactions,


332
00:18:01.315 --> 00:18:03.984 line:-2 align:center
and how to avoid modality
with split views.


333
00:18:05.485 --> 00:18:07.221 line:-4 align:center
Make sure to check out
the related sessions


334
00:18:07,254 --> 00:18:10,724 line:-4
and refine your SwiftUI apps
to leverage the power of iPad.


335
00:18:11.992 --> 00:18:13.727 line:-1 align:center
Thank you.


336
00:18:13,760 --> 00:18:17,764 align:center
♪ ♪

