2
00:00:00.000 --> 00:00:03.003 line:-1 position:50%
♪ Mellow instrumental
hip-hip music ♪


3
00:00:03,003 --> 00:00:09,610 align:right size:2% line:1
♪


4
00:00:09,610 --> 00:00:13,080 line:-1
Hello and welcome to WWDC.


5
00:00:13,080 --> 00:00:16,850 line:-1
My name's Karim,
and I'm a HealthKit engineer.


6
00:00:16,850 --> 00:00:19,753 line:-1
The HealthKit framework
provides the foundation


7
00:00:19,753 --> 00:00:22,322 line:-1
for building great
health experiences,


8
00:00:22,322 --> 00:00:24,124 line:-1
and Apple Watch comes packed


9
00:00:24.124 --> 00:00:26.860 line:-1 position:50%
with many health
and safety features,


10
00:00:26.860 --> 00:00:29.429 line:-1 position:50%
that keep an eye on things
for you.


11
00:00:29.429 --> 00:00:33.567 line:-1 position:50%
One of the most popular
is sleep tracking,


12
00:00:33.567 --> 00:00:35.235 line:-1 position:50%
and we are making updates


13
00:00:35,235 --> 00:00:38,839 line:-1
to capture more detailed
sleep data.


14
00:00:38,839 --> 00:00:41,875 line:-1
We also have other
great new additions


15
00:00:41.875 --> 00:00:44.478 line:-1 position:50%
to HealthKit this year.


16
00:00:44.478 --> 00:00:47.281 line:-1 position:50%
We enhanced our APIs
to make it easier


17
00:00:47.281 --> 00:00:51.885 line:-1 position:50%
to query for data
with Swift async.


18
00:00:51,885 --> 00:00:57,557 line:-1
We're improving workouts with
a richer workout representation.


19
00:00:57.557 --> 00:01:02.029 line:-1 position:50%
And we're adding support
for saving vision prescriptions,


20
00:01:02,029 --> 00:01:07,668 line:-1
including a digital copy
of the physical prescription.


21
00:01:07.668 --> 00:01:10.971 line:-1 position:50%
I'm excited to tell you more
about all these updates


22
00:01:10.971 --> 00:01:14.041 line:-1 position:50%
and how your apps
can leverage them.


23
00:01:14,041 --> 00:01:17,244 line:-1
Let's get started!


24
00:01:17,244 --> 00:01:20,080 line:-1
Sleep is such
an essential function


25
00:01:20.080 --> 00:01:23.884 line:-1 position:50%
that allows our bodies
and minds to recharge,


26
00:01:23.884 --> 00:01:27.955 line:-1 position:50%
and I love using my Apple Watch
to manage my sleep schedule


27
00:01:27,955 --> 00:01:30,757 line:-1
and get insights
that help me understand


28
00:01:30,757 --> 00:01:33,393 line:-1
and improve my sleep.


29
00:01:33.393 --> 00:01:37.397 line:-1 position:50%
This year we are making
sleep tracking even better


30
00:01:37,397 --> 00:01:41,001 line:-1
by introducing sleep stages.


31
00:01:41,001 --> 00:01:43,704 line:-1
Apple Watch
will automatically track


32
00:01:43.704 --> 00:01:46.173 line:-1 position:50%
all the different sleep stages
you go through


33
00:01:46.173 --> 00:01:47.574 line:-1 position:50%
when you're asleep,


34
00:01:47.574 --> 00:01:51.478 line:-1 position:50%
and this data will be accessible
from the Health app


35
00:01:51,478 --> 00:01:53,947 line:-1
and saved in HealthKit.


36
00:01:53,947 --> 00:01:57,417 line:-1
Of course,
your app will be able to read


37
00:01:57,417 --> 00:02:01,455 line:-1
and save sleep stages data.


38
00:02:01.455 --> 00:02:04.691 line:-1 position:50%
Sleep data saved
by Apple Watch or your app


39
00:02:04.691 --> 00:02:08.261 line:-1 position:50%
is represented in HealthKit
by category samples


40
00:02:08.261 --> 00:02:12.833 line:-1 position:50%
with the identifier
sleepAnalysis.


41
00:02:12,833 --> 00:02:15,802 line:-1
We will support
three sleep stages:


42
00:02:15,802 --> 00:02:20,374 line:-1
REM, core, and deep.


43
00:02:20,374 --> 00:02:22,576 line:-1
When saving sleep data
to HealthKit,


44
00:02:22.576 --> 00:02:25.545 line:-1 position:50%
you should make sure
to create one sample


45
00:02:25.545 --> 00:02:31.752 line:-1 position:50%
for each continuous period
of time in a given sleep stage.


46
00:02:31.752 --> 00:02:35.522 line:-1 position:50%
This is what the sleep sample
value enum looks like.


47
00:02:35,522 --> 00:02:41,128 line:-1
We're adding three cases
to represent sleep stages,


48
00:02:41,128 --> 00:02:43,730 line:-1
starting with asleepCore,


49
00:02:43.730 --> 00:02:48.268 line:-1 position:50%
which corresponds to stages one
and two of the scoring model


50
00:02:48.268 --> 00:02:54.708 line:-1 position:50%
from the American Academy
of Sleep Medicine or AASM;


51
00:02:54.708 --> 00:02:58.712 line:-1 position:50%
asleepDeep, which corresponds
to stage three


52
00:02:58.712 --> 00:03:02.349 line:-1 position:50%
of the AASM scoring model;


53
00:03:02,349 --> 00:03:04,785 line:-1
and finally, asleepREM,


54
00:03:04.785 --> 00:03:09.556 line:-1 position:50%
which corresponds
to the rapid eye movement stage.


55
00:03:09,556 --> 00:03:11,825 line:-1
Now that we added sleep stages,


56
00:03:11,825 --> 00:03:14,761 line:-1
we are deprecating
the asleep case


57
00:03:14,761 --> 00:03:18,265 line:-1
in favor of asleepUnspecified,


58
00:03:18,265 --> 00:03:21,134 line:-1
which indicates
that the user is asleep


59
00:03:21,134 --> 00:03:24,071 line:-1
but no sleep stage
was specified.


60
00:03:24,071 --> 00:03:26,706 line:-1
With the updated sleep
samples enum,


61
00:03:26,706 --> 00:03:30,510 line:-1
it is now possible to save
and read sleep stages data


62
00:03:30,510 --> 00:03:32,045 line:-1
from HealthKit.


63
00:03:32.045 --> 00:03:36.416 line:-1 position:50%
We added a new predicate to make
it easy to read sleep samples


64
00:03:36.416 --> 00:03:38.685 line:-1 position:50%
for a given stage.


65
00:03:38,685 --> 00:03:42,022 line:-1
Let's say I want to read
sleep samples


66
00:03:42.022 --> 00:03:44.191 line:-1 position:50%
in the REM stage.


67
00:03:44,191 --> 00:03:46,259 line:-1
First, I create a predicate


68
00:03:46.259 --> 00:03:49.529 line:-1 position:50%
using the new
predicateForSamples method


69
00:03:49.529 --> 00:03:52.532 line:-1 position:50%
with asleepREM as value.


70
00:03:52,532 --> 00:03:55,769 line:-1
Now, I can start
building my query.


71
00:03:55,769 --> 00:03:57,871 line:-1
I create a predicate
for my query


72
00:03:57,871 --> 00:04:00,340 line:-1
with the sleepAnalysis
sample type


73
00:04:00,340 --> 00:04:02,642 line:-1
and the sleep stage predicate.


74
00:04:02.642 --> 00:04:07.380 line:-1 position:50%
And with this query predicate,
I can now create my query.


75
00:04:07.380 --> 00:04:09.616 line:-1 position:50%
Running the query
will give me back


76
00:04:09,616 --> 00:04:13,553 line:-1
an array of sleep samples
in the REM stage.


77
00:04:13,553 --> 00:04:16,857 line:-1
However, if you're interested
in reading samples


78
00:04:16,857 --> 00:04:20,827 line:-1
for all sleep stages,
including unspecified,


79
00:04:20.827 --> 00:04:23.163 line:-1 position:50%
it's important that
you update your app


80
00:04:23.163 --> 00:04:28.668 line:-1 position:50%
to use the new .allAsleepValues
when building your predicate.


81
00:04:28,668 --> 00:04:31,805 line:-1
If you haven't looked
at HealthKit since last year,


82
00:04:31.805 --> 00:04:36.877 line:-1 position:50%
this shorter syntax for querying
may look unfamiliar to you.


83
00:04:36.877 --> 00:04:39.179 line:-1 position:50%
Since iOS 15.4,


84
00:04:39,179 --> 00:04:44,518 line:-1
we have updated our query API
to support Swift async.


85
00:04:44,518 --> 00:04:47,888 line:-1
Queries are an essential piece
of HealthKit,


86
00:04:47.888 --> 00:04:51.124 line:-1 position:50%
and with Swift async support,
they're easier to use


87
00:04:51,124 --> 00:04:54,161 line:-1
with a more concise syntax.


88
00:04:54.161 --> 00:04:57.464 line:-1 position:50%
Queries allow you to read
various data from HealthKit,


89
00:04:57,464 --> 00:04:59,933 line:-1
using predicates
to filter the results,


90
00:04:59,933 --> 00:05:03,870 line:-1
and also watch for new data
as it comes in.


91
00:05:03,870 --> 00:05:08,441 line:-1
All queries are subclasses
of HKQuery.


92
00:05:08,441 --> 00:05:12,045 line:-1
If I'm interested in knowing
the total calories burned


93
00:05:12,045 --> 00:05:14,014 line:-1
over a certain period of time,


94
00:05:14,014 --> 00:05:17,217 line:-1
a great query to get
these computed statistics


95
00:05:17,217 --> 00:05:20,554 line:-1
is HKStatisticsCollectionQuery.


96
00:05:20,554 --> 00:05:23,223 line:-1
To get the initial results,
you would set


97
00:05:23.223 --> 00:05:27.894 line:-1 position:50%
the initialResultsHandler
closure of the query.


98
00:05:27,894 --> 00:05:31,398 line:-1
And if you're interested
in watching for any updates,


99
00:05:31,398 --> 00:05:33,099 line:-1
you would additionally set


100
00:05:33.099 --> 00:05:36.403 line:-1 position:50%
the statisticsUpdateHandler
closure.


101
00:05:36,403 --> 00:05:38,104 line:-1
Once the query is started,


102
00:05:38,104 --> 00:05:41,841 line:-1
these closures will be called
with the results.


103
00:05:41,841 --> 00:05:46,313 line:-1
Thanks to Swift async,
we are making this even simpler.


104
00:05:46.313 --> 00:05:49.883 line:-1 position:50%
Each query now has
a matching query descriptor,


105
00:05:49,883 --> 00:05:53,186 line:-1
so HKStatisticsCollectionQuery
becomes


106
00:05:53.186 --> 00:05:56.990 line:-1 position:50%
HKStatisticsCollectionQuery
Descriptor.


107
00:05:56.990 --> 00:05:58.425 line:-1 position:50%
You get the initial result


108
00:05:58.425 --> 00:06:02.696 line:-1 position:50%
by simply calling
the async result(for:) method.


109
00:06:02,696 --> 00:06:06,333 line:-1
If, on the other hand, you want
to get the initial result


110
00:06:06,333 --> 00:06:10,270 line:-1
and also watch for updates,
you call results(for:),


111
00:06:10,270 --> 00:06:14,341 line:-1
which returns an AsyncSequence
that you can loop through


112
00:06:14,341 --> 00:06:16,676 line:-1
to read the results.


113
00:06:16.676 --> 00:06:20.213 line:-1 position:50%
HealthKit is great
for tracking workouts


114
00:06:20.213 --> 00:06:24.317 line:-1 position:50%
and relevant metrics
such as burned calories.


115
00:06:24,317 --> 00:06:28,021 line:-1
To find out how many calories
I burned this week,


116
00:06:28,021 --> 00:06:32,125 line:-1
I can use the statistics
collection query descriptor.


117
00:06:32.125 --> 00:06:35.028 line:-1 position:50%
First, I create
the query descriptor


118
00:06:35,028 --> 00:06:38,732 line:-1
with a predicate
to match calorie samples.


119
00:06:38.732 --> 00:06:44.404 line:-1 position:50%
I use the cumulativeSum option
because I want the total sum.


120
00:06:44,404 --> 00:06:46,506 line:-1
I'm interested
in this week's data,


121
00:06:46.506 --> 00:06:50.844 line:-1 position:50%
so I use thisSunday
as my anchorDate.


122
00:06:50,844 --> 00:06:54,114 line:-1
And finally,
I want my calorie totals


123
00:06:54.114 --> 00:06:58.685 line:-1 position:50%
to be computed for
a time interval of one week.


124
00:06:58,685 --> 00:07:00,987 line:-1
Once I created
my query descriptor,


125
00:07:00.987 --> 00:07:04.224 line:-1 position:50%
all I need to do
is call result(for:)


126
00:07:04,224 --> 00:07:07,127 line:-1
with a healthStore object.


127
00:07:07.127 --> 00:07:09.562 line:-1 position:50%
The returned
statisticsCollection object


128
00:07:09,562 --> 00:07:13,400 line:-1
gives me a snapshot
of my current data.


129
00:07:13.400 --> 00:07:16.770 line:-1 position:50%
But if I want live updates
as my calories change,


130
00:07:16.770 --> 00:07:20.473 line:-1 position:50%
it's as simple
as calling results(for:)


131
00:07:20,473 --> 00:07:23,043 line:-1
and looping through
the returned async sequence


132
00:07:23,043 --> 00:07:25,879 line:-1
to read the results.


133
00:07:25.879 --> 00:07:28.048 line:-1 position:50%
When I'm done
watching for updates,


134
00:07:28,048 --> 00:07:32,986 line:-1
I just break out of the loop
and that will stop the query.


135
00:07:32,986 --> 00:07:36,589 line:-1
Now, let's talk about workouts.


136
00:07:36.589 --> 00:07:40.226 line:-1 position:50%
HealthKit is a great place
for saving workouts


137
00:07:40.226 --> 00:07:42.495 line:-1 position:50%
and all their related metrics


138
00:07:42,495 --> 00:07:45,332 line:-1
whether you're going
on a casual bike ride


139
00:07:45.332 --> 00:07:48.702 line:-1 position:50%
or pushing yourself
to the limit at a race.


140
00:07:48,702 --> 00:07:49,969 line:-1
And oftentimes,


141
00:07:49.969 --> 00:07:53.873 line:-1 position:50%
workouts may contain
more than one distinct activity.


142
00:07:53.873 --> 00:07:58.378 line:-1 position:50%
You may be repeating the same
exercise with interval training


143
00:07:58.378 --> 00:08:01.181 line:-1 position:50%
or participating
in a triathlon race


144
00:08:01,181 --> 00:08:05,685 line:-1
which comprises swimming,
cycling, and running.


145
00:08:05.685 --> 00:08:10.657 line:-1 position:50%
We are updating our workouts API
in iOS 16 and watchOS 9


146
00:08:10.657 --> 00:08:14.361 line:-1 position:50%
to make it possible to capture
these types of workouts


147
00:08:14.361 --> 00:08:19.265 line:-1 position:50%
and the relevant statistics
for each activity.


148
00:08:19,265 --> 00:08:22,836 line:-1
This is the timeline
of a swim-bike-run workout


149
00:08:22,836 --> 00:08:24,771 line:-1
I did recently.


150
00:08:24,771 --> 00:08:26,606 line:-1
I started with swimming,


151
00:08:26.606 --> 00:08:28.975 line:-1 position:50%
after which
I took a little bit of time


152
00:08:28,975 --> 00:08:32,245 line:-1
to get ready for the cycling
portion of the workout,


153
00:08:32,245 --> 00:08:34,147 line:-1
and finally running.


154
00:08:34,147 --> 00:08:41,154 line:-1
Each activity is represented by
an HKWorkoutActivity object.


155
00:08:41,154 --> 00:08:42,756 line:-1
Each workout activity


156
00:08:42.756 --> 00:08:45.959 line:-1 position:50%
is created with its own
workout configuration,


157
00:08:45.959 --> 00:08:49.729 line:-1 position:50%
which includes
the activity type.


158
00:08:49.729 --> 00:08:52.866 line:-1 position:50%
A workout activity holds
a list of events


159
00:08:52,866 --> 00:08:56,936 line:-1
that occurred
during the activity.


160
00:08:56,936 --> 00:09:01,274 line:-1
And you will be able to read
statistics for each activity,


161
00:09:01,274 --> 00:09:03,943 line:-1
which is great for when
you're only interested


162
00:09:03,943 --> 00:09:08,948 line:-1
in analyzing what happened
during a particular activity.


163
00:09:08,948 --> 00:09:10,750 line:-1
Going back to my timeline,


164
00:09:10.750 --> 00:09:12.852 line:-1 position:50%
my three activities
are configured


165
00:09:12,852 --> 00:09:16,589 line:-1
with their appropriate
activity type.


166
00:09:16,589 --> 00:09:19,692 line:-1
Activities cannot
overlap in time.


167
00:09:19,692 --> 00:09:22,295 line:-1
And because there may be
a transition period


168
00:09:22.295 --> 00:09:24.264 line:-1 position:50%
between each activity,


169
00:09:24,264 --> 00:09:27,834 line:-1
they are not required
to be contiguous.


170
00:09:27.834 --> 00:09:30.336 line:-1 position:50%
If I'm interested
in analyzing what happened


171
00:09:30,336 --> 00:09:32,539 line:-1
during transition periods,


172
00:09:32.539 --> 00:09:35.675 line:-1 position:50%
I can create an
HKWorkoutActivity


173
00:09:35,675 --> 00:09:39,612 line:-1
for each transition
with the type transition.


174
00:09:39,612 --> 00:09:44,451 line:-1
All of these activities will be
saved with the HKWorkout object


175
00:09:44.451 --> 00:09:47.720 line:-1 position:50%
under the workoutActivities
property.


176
00:09:47,720 --> 00:09:52,091 line:-1
If you're using HKWorkoutBuilder
to add workouts to HealthKit,


177
00:09:52,091 --> 00:09:55,695 line:-1
adding an activity
is as easy as creating


178
00:09:55.695 --> 00:10:00.633 line:-1 position:50%
an HKWorkoutActivity object
with a workoutConfiguration,


179
00:10:00,633 --> 00:10:04,170 line:-1
start and end date,
and an optional metadata.


180
00:10:04,170 --> 00:10:08,141 line:-1
And then, you simply call
addWorkoutActivity


181
00:10:08,141 --> 00:10:10,477 line:-1
on the workout builder.


182
00:10:10,477 --> 00:10:14,214 line:-1
On Apple Watch, you can use
a workout session


183
00:10:14.214 --> 00:10:16.616 line:-1 position:50%
to track
a swim-bike-run workout,


184
00:10:16.616 --> 00:10:18.651 line:-1 position:50%
and the associated
workout builder


185
00:10:18,651 --> 00:10:21,454 line:-1
to save the workout
in HealthKit.


186
00:10:21.454 --> 00:10:23.523 line:-1 position:50%
Let's go back
to my workout timeline.


187
00:10:23.523 --> 00:10:26.593 line:-1 position:50%
To track this workout
on Apple Watch,


188
00:10:26.593 --> 00:10:31.598 line:-1 position:50%
I need to set up
a workout session and builder.


189
00:10:31.598 --> 00:10:35.101 line:-1 position:50%
I start by creating
a workout configuration


190
00:10:35.101 --> 00:10:38.171 line:-1 position:50%
with the type swimBikeRun.


191
00:10:38,171 --> 00:10:41,474 line:1
Then I create
an HKWorkoutSession


192
00:10:41,474 --> 00:10:43,943 line:1
using my configuration.


193
00:10:43,943 --> 00:10:45,812 position:50%
At the beginning of the workout


194
00:10:45,812 --> 00:10:48,982 line:1
I simply call startActivity
on the session,


195
00:10:48,982 --> 00:10:53,286 line:1
and beginCollection on the
associated workout builder.


196
00:10:53.286 --> 00:10:55.922 line:-1 position:50%
Now that my session
and builder are ready,


197
00:10:55,922 --> 00:10:58,458 line:-1
I can add my first activity


198
00:10:58,458 --> 00:11:01,127 line:-1
using the
beginNewActivity method


199
00:11:01,127 --> 00:11:05,765 line:-1
with a swimming workout
configuration and a start date.


200
00:11:05.765 --> 00:11:08.368 line:-1 position:50%
At the beginning
of each activity,


201
00:11:08,368 --> 00:11:11,437 line:-1
you should make sure to update
the workout builder data source


202
00:11:11,437 --> 00:11:15,675 line:-1
to only collect the data types
you're interested in.


203
00:11:15.675 --> 00:11:17.977 line:-1 position:50%
Because this is
a swimming activity,


204
00:11:17,977 --> 00:11:21,180 line:-1
I want swimming distance
to be collected.


205
00:11:21,180 --> 00:11:22,982 position:50%
At the end of the activity,


206
00:11:22,982 --> 00:11:28,588 position:50%
I call endCurrentActivity
with the end date.


207
00:11:28,588 --> 00:11:32,091 line:-1
Because I'm interested in
analyzing the transition period


208
00:11:32,091 --> 00:11:34,394 line:-1
from swimming to cycling,


209
00:11:34,394 --> 00:11:37,063 line:-1
I will start
a new transition activity


210
00:11:37,063 --> 00:11:40,667 line:-1
immediately
after swimming has ended.


211
00:11:40,667 --> 00:11:44,704 line:-1
Again, because this is
the beginning of an activity,


212
00:11:44,704 --> 00:11:46,539 line:-1
I update the builder data source


213
00:11:46.539 --> 00:11:49.676 line:-1 position:50%
to disable the collection
of swimming distance,


214
00:11:49,676 --> 00:11:53,680 line:-1
since it's no longer relevant.


215
00:11:53,680 --> 00:11:58,384 position:50%
I end the transition activity
right before cycling begins.


216
00:11:58,384 --> 00:12:01,154 position:50%
I can track the remaining
activities of my workout


217
00:12:01,154 --> 00:12:03,856 position:50%
the same way.


218
00:12:03.856 --> 00:12:05.458 line:-1 position:50%
At the end of the workout,


219
00:12:05,458 --> 00:12:10,129 line:-1
ending the session will
also end any running activity.


220
00:12:10,129 --> 00:12:12,432 line:-1
Then I can finish
the workout builder,


221
00:12:12.432 --> 00:12:16.803 line:-1 position:50%
which will save and return
an HKWorkout object.


222
00:12:16.803 --> 00:12:19.038 line:-1 position:50%
I can use the returned workout


223
00:12:19,038 --> 00:12:21,674 line:-1
to read some
of the associated metrics


224
00:12:21.674 --> 00:12:25.311 line:-1 position:50%
such as totalEnergyBurned
and totalDistance,


225
00:12:25,311 --> 00:12:29,949 line:-1
and display a summary
of the workout in my app.


226
00:12:29.949 --> 00:12:32.919 line:-1 position:50%
However,
this small set of properties


227
00:12:32,919 --> 00:12:35,121 line:-1
is no longer sufficient.


228
00:12:35,121 --> 00:12:39,425 line:-1
totalSwimmingStrokeCount
is not relevant to all workouts,


229
00:12:39.425 --> 00:12:43.162 line:-1 position:50%
and some workouts
may collect more metrics.


230
00:12:43,162 --> 00:12:45,732 line:-1
In order to make it easier
to read metrics


231
00:12:45,732 --> 00:12:47,500 line:-1
for all kinds of workouts,


232
00:12:47.500 --> 00:12:49.802 line:-1 position:50%
we are deprecating
these properties


233
00:12:49.802 --> 00:12:53.873 line:-1 position:50%
in favor of a new method
which returns statistics


234
00:12:53.873 --> 00:12:56.643 line:-1 position:50%
for a given quantity type.


235
00:12:56.643 --> 00:12:59.846 line:-1 position:50%
As a reminder,
this method is also available


236
00:12:59.846 --> 00:13:03.750 line:-1 position:50%
on HKWorkoutActivity,
allowing you to focus


237
00:13:03,750 --> 00:13:08,187 line:-1
on just what happened
during an activity.


238
00:13:08,187 --> 00:13:11,758 line:-1
These statistics will be
automatically computed


239
00:13:11.758 --> 00:13:14.327 line:-1 position:50%
from any samples collected
with the workout,


240
00:13:14.327 --> 00:13:20.033 line:-1 position:50%
only when using HKWorkoutBuilder
or HKLiveWorkoutBuilder.


241
00:13:20.033 --> 00:13:23.102 line:-1 position:50%
Along with this richer
workout representation,


242
00:13:23.102 --> 00:13:26.272 line:-1 position:50%
we also have a new set
of predicates to help you query


243
00:13:26,272 --> 00:13:28,875 line:-1
for only the workouts
you're interested in


244
00:13:28.875 --> 00:13:32.979 line:-1 position:50%
when driving your analysis
or visualization.


245
00:13:32,979 --> 00:13:34,847 line:-1
To give you an example,


246
00:13:34,847 --> 00:13:38,451 line:-1
here's a list
of my recent workouts


247
00:13:38.451 --> 00:13:42.622 line:-1 position:50%
with the average heart rate
for each activity.


248
00:13:42,622 --> 00:13:47,060 line:-1
I would like to find my workouts
with high-intensity activities


249
00:13:47,060 --> 00:13:50,930 line:-1
where my average heart rate
was above 150.


250
00:13:50.930 --> 00:13:54.567 line:-1 position:50%
First, I start by creating
a predicate using the new


251
00:13:54.567 --> 00:13:57.170 line:-1 position:50%
predicateForWorkoutActivities
method,


252
00:13:57,170 --> 00:14:00,573 line:-1
which will act
on workout activities.


253
00:14:00,573 --> 00:14:02,108 line:-1
I want the average heart rate


254
00:14:02.108 --> 00:14:05.578 line:-1 position:50%
to be greater
than 150 beats per minute.


255
00:14:05.578 --> 00:14:08.581 line:-1 position:50%
Next, because
I want to query for workouts,


256
00:14:08,581 --> 00:14:13,286 line:-1
I wrap my heart rate predicate
inside a workout predicate.


257
00:14:13.286 --> 00:14:17.390 line:-1 position:50%
Then, I create a query
using that predicate.


258
00:14:17.390 --> 00:14:20.059 line:-1 position:50%
And I call the
result(for: healthStore) method


259
00:14:20.059 --> 00:14:23.396 line:-1 position:50%
of my query descriptor
to get the list of workouts


260
00:14:23,396 --> 00:14:26,099 line:-1
that match my predicate.


261
00:14:26.099 --> 00:14:27.934 line:-1 position:50%
And that's how I'm able to query


262
00:14:27,934 --> 00:14:31,270 line:-1
for just the workouts
I'm interested in.


263
00:14:31,270 --> 00:14:33,072 line:-1
One of my recent workouts


264
00:14:33,072 --> 00:14:36,476 line:-1
consisted of four
running intervals.


265
00:14:36.476 --> 00:14:40.246 line:-1 position:50%
Using HKWorkoutActivity
is a great way


266
00:14:40.246 --> 00:14:42.615 line:-1 position:50%
to capture these intervals.


267
00:14:42,615 --> 00:14:45,418 line:-1
You just need to make sure
that all activities


268
00:14:45,418 --> 00:14:49,021 line:-1
of an interval workout
have the same activity type


269
00:14:49,021 --> 00:14:50,857 line:-1
as the workout.


270
00:14:50.857 --> 00:14:54.460 line:-1 position:50%
So for a running workout,
all activities are configured


271
00:14:54.460 --> 00:14:57.063 line:-1 position:50%
with the .running type.


272
00:14:57.063 --> 00:15:01.033 line:-1 position:50%
One benefit of using workout
activities to track intervals


273
00:15:01.033 --> 00:15:04.971 line:-1 position:50%
is you can get statistics
for each interval.


274
00:15:04.971 --> 00:15:07.740 line:-1 position:50%
With these updates,
workouts now include


275
00:15:07,740 --> 00:15:11,544 line:-1
a more comprehensive
picture of their activities


276
00:15:11,544 --> 00:15:14,614 line:-1
and the context
surrounding them.


277
00:15:14,614 --> 00:15:18,050 line:-1
In order to provide
an even richer picture,


278
00:15:18.050 --> 00:15:21.187 line:-1 position:50%
we're introducing
new running metrics


279
00:15:21,187 --> 00:15:23,389 line:-1
that will be
automatically collected


280
00:15:23,389 --> 00:15:28,060 line:-1
on Apple Watch Series 6,
SE, and newer --


281
00:15:28,060 --> 00:15:33,699 line:-1
metrics such as running stride
length, or power in watts.


282
00:15:33,699 --> 00:15:37,603 line:-1
For swimming workouts,
we're adding the SWOLF score.


283
00:15:37.603 --> 00:15:40.373 line:-1 position:50%
It's defined as
the number of strokes


284
00:15:40,373 --> 00:15:42,508 line:-1
taken in a given length,


285
00:15:42,508 --> 00:15:45,812 line:-1
and the time it took
to swim that length.


286
00:15:45.812 --> 00:15:49.549 line:-1 position:50%
This score will be calculated
for each lap event


287
00:15:49.549 --> 00:15:52.218 line:-1 position:50%
and segment event
for swimming workouts


288
00:15:52,218 --> 00:15:55,588 line:-1
recorded on Apple Watch.


289
00:15:55,588 --> 00:15:58,758 line:-1
While these metrics enrich
your workouts and allow you


290
00:15:58.758 --> 00:16:02.695 line:-1 position:50%
to get a better understanding
of how you performed,


291
00:16:02,695 --> 00:16:05,298 line:-1
another important metric
that is recorded


292
00:16:05,298 --> 00:16:09,402 line:-1
after a workout has ended
is heart rate recovery.


293
00:16:09,402 --> 00:16:13,472 line:-1
It's an estimate of how quickly
your heart rate lowers


294
00:16:13.472 --> 00:16:17.877 line:-1 position:50%
after exercise,
and it can be used to understand


295
00:16:17,877 --> 00:16:20,213 line:-1
how the heart recovers
after stress,


296
00:16:20,213 --> 00:16:23,282 line:-1
and reveal potential
health problems.


297
00:16:23.282 --> 00:16:28.721 line:-1 position:50%
With iOS 16, we are introducing
a new Cardio Recovery data type.


298
00:16:28,721 --> 00:16:31,324 line:-1
It will be accessible
from the Health app,


299
00:16:31,324 --> 00:16:34,760 line:-1
and your apps will be able
to read and save this data


300
00:16:34.760 --> 00:16:37.363 line:-1 position:50%
in HealthKit.


301
00:16:37,363 --> 00:16:41,067 line:-1
Heart rate recovery
is a quantity type


302
00:16:41,067 --> 00:16:46,172 line:-1
with the identifier
.heartRateRecoveryOneMinute.


303
00:16:46,172 --> 00:16:48,274 line:-1
Additional context information


304
00:16:48.274 --> 00:16:50.710 line:-1 position:50%
about each heart rate
recovery sample


305
00:16:50.710 --> 00:16:54.113 line:-1 position:50%
can be added as metadata.


306
00:16:54,113 --> 00:16:56,649 line:-1
In my recent
swim-bike-run workout,


307
00:16:56.649 --> 00:16:59.151 line:-1 position:50%
I pushed myself to my limits,


308
00:16:59,151 --> 00:17:03,055 line:-1
and then observed
my heart rate's recovery rate.


309
00:17:03,055 --> 00:17:05,491 line:-1
It took me about
three and a half hours


310
00:17:05,491 --> 00:17:08,294 line:-1
to complete the workout.


311
00:17:08,294 --> 00:17:12,732 line:-1
I reached a maximum heart rate
of 184 beats per minute


312
00:17:12.732 --> 00:17:14.533 line:-1 position:50%
when I was running.


313
00:17:14.533 --> 00:17:16.802 line:-1 position:50%
And the minute following
the workout,


314
00:17:16.802 --> 00:17:20.506 line:-1 position:50%
my heart rate
dropped by 50 beats.


315
00:17:20,506 --> 00:17:24,176 position:50%
When using HKLiveWorkoutBuilder
on Apple Watch,


316
00:17:24,176 --> 00:17:26,279 line:1
a heart rate recovery sample,


317
00:17:26,279 --> 00:17:28,748 position:50%
along with
its surrounding context,


318
00:17:28,748 --> 00:17:33,319 position:50%
is automatically saved
in HealthKit after a workout.


319
00:17:33,319 --> 00:17:37,023 line:-1
Otherwise, to save
a heart rate recovery sample,


320
00:17:37.023 --> 00:17:39.425 line:-1 position:50%
I create a quantity sample
with the


321
00:17:39.425 --> 00:17:42.728 line:-1 position:50%
.heartRateRecoveryOneMinute
type.


322
00:17:42,728 --> 00:17:44,530 line:-1
My heart rate dropped
by 50 beats


323
00:17:44,530 --> 00:17:46,332 line:-1
the minute
following the workout,


324
00:17:46.332 --> 00:17:50.503 line:-1 position:50%
so I set that as the quantity
of my sample.


325
00:17:50.503 --> 00:17:54.073 line:-1 position:50%
I also set a start and end date
for the sample.


326
00:17:54.073 --> 00:17:57.944 line:-1 position:50%
Then, I put the additional
context information


327
00:17:57.944 --> 00:18:00.613 line:-1 position:50%
in the metadata dictionary,


328
00:18:00.613 --> 00:18:03.449 line:-1 position:50%
starting with
the recovery test type.


329
00:18:03.449 --> 00:18:06.185 line:-1 position:50%
Because my workout
was an all-out effort,


330
00:18:06,185 --> 00:18:09,722 line:-1
the test type is .maxExercise.


331
00:18:09.722 --> 00:18:12.258 line:-1 position:50%
My workout was a swimBikeRun,


332
00:18:12,258 --> 00:18:15,995 line:-1
so I set that
as the activity type.


333
00:18:15,995 --> 00:18:19,231 line:-1
I can also add the workout
duration using the


334
00:18:19,231 --> 00:18:23,169 line:-1
HeartRateRecoveryActivity
Duration key.


335
00:18:23,169 --> 00:18:27,306 line:-1
Finally, I add the maximum
heart rate observed


336
00:18:27.306 --> 00:18:32.845 line:-1 position:50%
during the workout,
which was 184 beats per minute.


337
00:18:32.845 --> 00:18:35.915 line:-1 position:50%
With these updates,
it is now easier than ever


338
00:18:35.915 --> 00:18:39.952 line:-1 position:50%
to track swim-bike-run,
and interval workouts.


339
00:18:39,952 --> 00:18:43,456 line:-1
In addition,
the introduction of new metrics


340
00:18:43.456 --> 00:18:47.426 line:-1 position:50%
provides a more comprehensive
picture for your workouts


341
00:18:47.426 --> 00:18:52.431 line:-1 position:50%
and newer ways
to evaluate progress over time.


342
00:18:52,431 --> 00:18:57,069 line:-1
While activity and fitness is
something that impacts everyone


343
00:18:57,069 --> 00:18:59,472 line:-1
there are other aspects
of health


344
00:18:59,472 --> 00:19:03,275 line:-1
that touch on many of us,
such as vision.


345
00:19:03,275 --> 00:19:07,046 line:-1
In fact, according to
the Vision Council of America,


346
00:19:07.046 --> 00:19:11.951 line:-1 position:50%
approximately 75 percent
of adults in the United States


347
00:19:11.951 --> 00:19:15.321 line:-1 position:50%
rely on vision correction
with prescription glasses


348
00:19:15.321 --> 00:19:17.723 line:-1 position:50%
or contact lenses.


349
00:19:17,723 --> 00:19:20,960 line:-1
These prescriptions,
however, are easy to lose,


350
00:19:20,960 --> 00:19:23,629 line:-1
and it's one more thing
you need to have with you


351
00:19:23,629 --> 00:19:27,967 line:-1
when ordering prescription
glasses or contact lenses.


352
00:19:27.967 --> 00:19:31.103 line:-1 position:50%
So let's put them
in our phones.


353
00:19:31.103 --> 00:19:34.140 line:-1 position:50%
Starting with iOS 16,
your apps can now save


354
00:19:34,140 --> 00:19:39,712 line:-1
glasses and contacts
prescriptions in HealthKit.


355
00:19:39,712 --> 00:19:42,348 line:-1
A vision prescription
is a sample


356
00:19:42,348 --> 00:19:45,684 line:-1
with the visionPrescriptionType.


357
00:19:45,684 --> 00:19:47,720 line:-1
The sample's start date
corresponds


358
00:19:47,720 --> 00:19:50,423 line:-1
to the prescription's
issue date,


359
00:19:50,423 --> 00:19:54,660 line:-1
while the end date corresponds
to the expiration date.


360
00:19:54.660 --> 00:19:59.065 line:-1 position:50%
Optionally, a digital copy
of the physical prescription


361
00:19:59.065 --> 00:20:02.835 line:-1 position:50%
can be attached
to the sample.


362
00:20:02.835 --> 00:20:06.005 line:-1 position:50%
A glasses or contacts
prescription sample


363
00:20:06.005 --> 00:20:10.709 line:-1 position:50%
is a subclass
of HKVisionPrescription.


364
00:20:10,709 --> 00:20:15,347 line:-1
For glasses, you use the
HKGlassesPrescription subclass,


365
00:20:15.347 --> 00:20:20.453 line:-1 position:50%
and for contacts, the
HKContactsPrescription subclass.


366
00:20:20,453 --> 00:20:22,755 line:1
Each glasses prescription
is created


367
00:20:22,755 --> 00:20:26,559 line:1
using two glasses lens
specification objects;


368
00:20:26,559 --> 00:20:29,395 position:50%
one for each eye.


369
00:20:29,395 --> 00:20:32,765 line:1
And similarly, contacts
prescriptions are created


370
00:20:32,765 --> 00:20:36,769 line:1
with two contacts lens
specification objects.


371
00:20:36,769 --> 00:20:40,239 line:-1
Now, let's save
my reading glasses prescription


372
00:20:40,239 --> 00:20:42,274 line:-1
to HealthKit.


373
00:20:42.274 --> 00:20:46.579 line:-1 position:50%
The first step is to create
an HKGlassesLensSpecification


374
00:20:46,579 --> 00:20:48,681 line:-1
for each eye.


375
00:20:48,681 --> 00:20:52,618 line:-1
Some parameters, such as
vertex distance and prism,


376
00:20:52.618 --> 00:20:54.820 line:-1 position:50%
are optional.


377
00:20:54,820 --> 00:21:00,926 line:-1
I can create the right eye
lens specification the same way.


378
00:21:00,926 --> 00:21:04,563 line:-1
Next, I create a glasses
prescription sample


379
00:21:04,563 --> 00:21:09,168 line:-1
with my right eye and left eye
lens specifications.


380
00:21:09.168 --> 00:21:12.204 line:-1 position:50%
This prescription
is for my reading glasses,


381
00:21:12,204 --> 00:21:16,308 line:-1
so I'm adding that
in the description.


382
00:21:16.308 --> 00:21:18.944 line:-1 position:50%
Then, I just call save
on the healthStore


383
00:21:18,944 --> 00:21:20,880 line:-1
with my prescription.


384
00:21:20.880 --> 00:21:25.818 line:-1 position:50%
And with that, my prescription
is now saved in HealthKit.


385
00:21:25,818 --> 00:21:27,686 line:-1
I also took a picture of it,


386
00:21:27.686 --> 00:21:31.891 line:-1 position:50%
which I'd like to attach
to the sample I just saved.


387
00:21:31,891 --> 00:21:37,897 line:-1
A file attachment is represented
by an HKAttachment object.


388
00:21:37,897 --> 00:21:43,903 line:-1
You use HKAttachmentStore to
save and read file attachments.


389
00:21:43.903 --> 00:21:47.072 line:-1 position:50%
Only static images or PDF files


390
00:21:47,072 --> 00:21:50,910 line:-1
can be attached
to prescriptions.


391
00:21:50,910 --> 00:21:55,414 line:-1
To attach the picture I took
to my prescription sample,


392
00:21:55,414 --> 00:21:59,451 line:-1
I start by creating
an HKAttachmentStore object


393
00:21:59,451 --> 00:22:01,720 line:-1
using a healthStore.


394
00:22:01.720 --> 00:22:07.126 line:-1 position:50%
Then I call addAttachment(to:)
with my prescription sample.


395
00:22:07.126 --> 00:22:09.962 line:-1 position:50%
I set a name for the attachment.


396
00:22:09,962 --> 00:22:13,332 line:-1
Here, I'm attaching a PNG file.


397
00:22:13,332 --> 00:22:17,870 line:-1
And finally,
pass the URL of the file.


398
00:22:17,870 --> 00:22:22,708 line:-1
The prescription I just attached
contains a lot more information


399
00:22:22.708 --> 00:22:25.511 line:-1 position:50%
than just
the lens specification --


400
00:22:25,511 --> 00:22:30,783 line:-1
sensitive information, like
my full name and date of birth.


401
00:22:30,783 --> 00:22:33,018 line:-1
One of HealthKit's
core principles


402
00:22:33,018 --> 00:22:36,355 line:-1
is to protect your privacy
and make sure


403
00:22:36,355 --> 00:22:40,492 line:-1
that you are always in control
of the data you share.


404
00:22:40,492 --> 00:22:44,496 line:-1
Because it can be easy to share
more data than intended


405
00:22:44,496 --> 00:22:47,099 line:-1
with prescriptions
that include an attachment,


406
00:22:47,099 --> 00:22:50,302 line:-1
we are introducing
a new authorization model


407
00:22:50,302 --> 00:22:52,404 line:-1
for prescriptions.


408
00:22:52,404 --> 00:22:54,640 line:-1
Read authorization is granted


409
00:22:54.640 --> 00:22:57.943 line:-1 position:50%
for each prescription
object separately.


410
00:22:57,943 --> 00:23:00,713 line:-1
Users can select exactly
which prescriptions


411
00:23:00,713 --> 00:23:03,549 line:-1
they grant your app access to,


412
00:23:03.549 --> 00:23:07.253 line:-1 position:50%
and update their selection
at any time.


413
00:23:07,253 --> 00:23:10,923 line:-1
We have a new API
for requesting authorization


414
00:23:10,923 --> 00:23:14,159 line:-1
for vision prescription objects.


415
00:23:14,159 --> 00:23:16,195 line:-1
Just like other data types,


416
00:23:16,195 --> 00:23:19,164 line:-1
you can use queries
to read prescriptions


417
00:23:19,164 --> 00:23:22,034 line:-1
that your app has access to.


418
00:23:22,034 --> 00:23:25,537 line:-1
If you're only interested
in certain prescriptions,


419
00:23:25,537 --> 00:23:27,873 line:-1
you can use a predicate.


420
00:23:27.873 --> 00:23:31.010 line:-1 position:50%
To request authorization,
simply call the


421
00:23:31.010 --> 00:23:34.246 line:-1 position:50%
requestPerObjectRead
Authorization method


422
00:23:34,246 --> 00:23:37,883 line:-1
of the healthStore
with the visionType.


423
00:23:37,883 --> 00:23:42,888 line:-1
Doing so will always display an
authorization prompt in your app


424
00:23:42,888 --> 00:23:45,557 line:-1
with a list of all
the prescriptions


425
00:23:45.557 --> 00:23:48.594 line:-1 position:50%
that match your predicate.


426
00:23:48,594 --> 00:23:51,363 line:-1
Make sure you're asking
for authorization


427
00:23:51.363 --> 00:23:56.368 line:-1 position:50%
in the appropriate context to
ensure the best user experience.


428
00:23:56.368 --> 00:24:00.572 line:-1 position:50%
These are just some of the new
things we added to HealthKit


429
00:24:00,572 --> 00:24:03,509 line:-1
to empower your apps
to provide better health


430
00:24:03,509 --> 00:24:05,978 line:-1
and fitness experiences.


431
00:24:05.978 --> 00:24:09.948 line:-1 position:50%
We can't wait to see
what you will build next.


432
00:24:09,948 --> 00:24:13,752 line:-1
Have a great WWDC,
and if you have any questions,


433
00:24:13.752 --> 00:24:17.356 line:-1 position:50%
we'll be happy to help you
in the Developer Forums.


434
00:24:17,356 --> 00:24:21,460 align:right line:1 size:2%
♪

