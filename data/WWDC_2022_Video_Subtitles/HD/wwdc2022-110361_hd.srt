2
00:00:00.334 --> 00:00:06.340 line:-1 align:center
[upbeat music]


3
00:00:10,110 --> 00:00:15,249 line:-2
Suzy: Hello and welcome to "Author fast
and reliable tests for Xcode Cloud."


4
00:00:15.282 --> 00:00:18.018 line:-1 align:center
I'm Suzy, and I work on XCTest.


5
00:00:18,051 --> 00:00:21,288 line:-2
In this session, I'm going to share
the most effective ways


6
00:00:21.321 --> 00:00:24.625 line:-1 align:center
to start testing for Xcode Cloud.


7
00:00:24,658 --> 00:00:30,030 line:-2
Our teams designed Xcode Cloud
to be a powerful tool for all developers.


8
00:00:30.063 --> 00:00:34.168 line:-2 align:center
In fact, we use it to test Xcode itself,
and I love it.


9
00:00:34,201 --> 00:00:36,637 line:-1
One of my favorite features of Xcode Cloud


10
00:00:36,670 --> 00:00:40,374 line:-2
is its ability to substantially broaden
a given test suite.


11
00:00:41,575 --> 00:00:44,411 line:-2
By configuring most tests
to run in the cloud,


12
00:00:44,444 --> 00:00:48,649 line:-2
you now have a practical way
to run tests on multiple destinations,


13
00:00:48.682 --> 00:00:52.686 line:-2 align:center
including those running differing
operating system versions


14
00:00:52.719 --> 00:00:56.924 line:-2 align:center
to leverage diverse platforms
such as an iPhone, iPad,


15
00:00:56,957 --> 00:01:00,627 line:-1
Apple Watch, Apple TV, and Mac,


16
00:01:00,661 --> 00:01:03,430 line:0
and to run various test plan
configurations,


17
00:01:03,463 --> 00:01:05,966 align:center
allowing for runtime analysis tools


18
00:01:05,999 --> 00:01:10,470 line:0
such as address and thread sanitizers.


19
00:01:10,504 --> 00:01:13,740 align:center
Once we have passed
such a thorough test suite,


20
00:01:13,774 --> 00:01:16,910 align:center
we can be confident
the code is ready to ship.


21
00:01:16,944 --> 00:01:21,181 line:-2
Offloading tests to Xcode Cloud
allows for running a broader set of tests


22
00:01:21.215 --> 00:01:27.754 line:-2 align:center
without impacting the developers’
desktop cycle of code, compile, and test.


23
00:01:27.788 --> 00:01:30.157 line:-1 align:center
With this now expanded test suite,


24
00:01:30.190 --> 00:01:34.228 line:-2 align:center
there is a potential for an increased
number of unreliable tests.


25
00:01:34.261 --> 00:01:37.898 line:-1 align:center
This situation can become unmanageable.


26
00:01:37.931 --> 00:01:42.736 line:-2 align:center
As such,
ensuring reliability is essential.


27
00:01:42.769 --> 00:01:46.206 line:-2 align:center
In addition to reliability,
such a large number of tests


28
00:01:46,240 --> 00:01:48,141 line:-1
also needs to run efficiently


29
00:01:48,175 --> 00:01:53,046 line:-2
so as to limit their impact
on the continuous integration process.


30
00:01:53,080 --> 00:01:55,749 line:-1
Let’s address reliability first.


31
00:01:55,782 --> 00:01:59,219 line:-2
I will demonstrate how to author
more reliable tests for Xcode Cloud


32
00:01:59,253 --> 00:02:00,888 line:-1
using Food Truck.


33
00:02:00,921 --> 00:02:06,393 line:-2
Food Truck is an app that converts
taps and swipes into delicious donuts.


34
00:02:06,426 --> 00:02:08,929 line:-1
By running the test suite in Xcode Cloud,


35
00:02:08,962 --> 00:02:11,999 line:-2
we are able to validate
that all Apple platforms


36
00:02:12.032 --> 00:02:15.936 line:-2 align:center
support ordering my favorite donut,
chocolate with sprinkles.


37
00:02:15.969 --> 00:02:18.405 line:-2 align:center
Each improvement
to the Xcode Cloud Workflow


38
00:02:18,438 --> 00:02:21,742 line:-1
will be identified and demonstrated.


39
00:02:21,775 --> 00:02:25,712 line:0
For more information about getting
started with Xcode Cloud Workflows,


40
00:02:25,746 --> 00:02:27,814 line:0
watch "Meet Xcode Cloud.”


41
00:02:29.116 --> 00:02:31.718 line:-2 align:center
The first step
to author more reliable tests


42
00:02:31,752 --> 00:02:36,323 line:-2
is to ensure each test’s setup
and tear down is thorough.


43
00:02:36,356 --> 00:02:39,593 line:-2
Tests run in Xcode Cloud make use
of a fresh simulator


44
00:02:39,626 --> 00:02:43,864 line:-2
which may not meet
developers’ original assumptions.


45
00:02:43.897 --> 00:02:47.668 line:-2 align:center
Let’s identify a number of
device configuration assumptions


46
00:02:47,701 --> 00:02:49,369 line:-1
sometimes seen in test code.


47
00:02:50,270 --> 00:02:54,508 line:-2
Certain tests may rely on
specific dates and times.


48
00:02:54.541 --> 00:02:58.745 line:-2 align:center
For example, a server may be running
in a different time zone.


49
00:02:58.779 --> 00:03:02.549 line:-2 align:center
Tests should avoid
being time zone specific.


50
00:03:02.583 --> 00:03:05.619 line:-2 align:center
Locale-based values,
such as number formatting


51
00:03:05,652 --> 00:03:09,823 line:-2
and language directionality,
can lead to unexpected results.


52
00:03:09.857 --> 00:03:14.895 line:-2 align:center
Avoid this problem by explicitly
setting your simulator’s locale.


53
00:03:14,928 --> 00:03:19,266 line:-2
Another problematic assumption is
reliance on certain device permissions


54
00:03:19,299 --> 00:03:21,268 line:-1
such as internet access.


55
00:03:21,301 --> 00:03:24,071 line:-2
It’s best to mock device permissions
in a unit test


56
00:03:24.104 --> 00:03:28.275 line:-1 align:center
and use an alert handler in a UI Test.


57
00:03:28,308 --> 00:03:32,012 line:-2
Finally, some tests depend
on preloaded data.


58
00:03:32,045 --> 00:03:37,484 line:-2
For example, a test may expect
to have an empty documents directory.


59
00:03:37,518 --> 00:03:41,822 line:-2
While explicitly configuring the simulator
is sometimes the easiest choice,


60
00:03:41,855 --> 00:03:46,660 line:-2
enhancing the test’s setup method
is generally more robust.


61
00:03:46,693 --> 00:03:50,330 line:-2
For example,
the Food Truck depends on a menu file.


62
00:03:50,364 --> 00:03:53,934 line:-2
As part of instantiating
the truck object in the setup function,


63
00:03:53,967 --> 00:03:58,105 line:-2
we generate a mock data file
containing the donut menu items.


64
00:03:58.138 --> 00:04:03.510 line:-2 align:center
Note that rather than relying on teardown
methods to prepare for subsequent tests,


65
00:04:03,544 --> 00:04:08,949 line:-2
we recommend establishing
all state preparation in the setup method.


66
00:04:08.982 --> 00:04:13.253 line:-2 align:center
In many cases, read-only files
can be checked into the repository


67
00:04:13,287 --> 00:04:15,355 line:-1
and later accessed by tests.


68
00:04:15.389 --> 00:04:18.692 line:-2 align:center
However, when these files
need to be constructed,


69
00:04:18.725 --> 00:04:21.628 line:-2 align:center
Xcode Cloud supports
running a custom build script


70
00:04:21,662 --> 00:04:26,600 line:-2
where you can generate the file once
for multiple tests to access.


71
00:04:26,633 --> 00:04:29,503 line:0
For more details
on how to configure your script,


72
00:04:29,536 --> 00:04:33,173 align:center
watch "Customize your advanced
Xcode Cloud workflow."


73
00:04:34,708 --> 00:04:38,245 line:-1
That wraps up proper simulator setup.


74
00:04:38.278 --> 00:04:43.817 line:-2 align:center
Now, let’s cover how to handle tests
that fail to meet preconditions.


75
00:04:43,851 --> 00:04:47,554 line:-2
XCTSkip is an error
that instructs the XCTest Runner


76
00:04:47.588 --> 00:04:51.992 line:-2 align:center
to cease executing the current test
and mark it as skipped.


77
00:04:52,025 --> 00:04:58,131 line:-2
This may be used to bypass a yet-to-be
supported OS version or device type.


78
00:04:58,165 --> 00:05:02,202 line:-2
You could also leverage XCTSkip
by setting an environment variable


79
00:05:02.236 --> 00:05:06.306 line:-2 align:center
to skip tests specific to staging
or production environments.


80
00:05:06,340 --> 00:05:11,111 line:-2
Let’s go over how we can control
test flow using an environment variable.


81
00:05:12,179 --> 00:05:15,115 line:-2
Environment variables
can provide parameters


82
00:05:15,148 --> 00:05:18,418 line:-2
to both the XCTest test runner app
on your device


83
00:05:18,452 --> 00:05:22,022 line:-1
and the test host running xcodebuild.


84
00:05:22.055 --> 00:05:26.560 line:-2 align:center
In Xcode Cloud, environment variables
prefixed with TEST_RUNNER_


85
00:05:26,593 --> 00:05:29,663 line:-1
get passed into the XCTest test runner.


86
00:05:29,696 --> 00:05:31,465 line:-1
This prefix will be stripped prior to


87
00:05:31.498 --> 00:05:35.869 line:-2 align:center
the variable being made available
to your code.


88
00:05:35,903 --> 00:05:39,606 line:-2
So, for example,
a variable in your test code


89
00:05:39.640 --> 00:05:43.877 line:-2 align:center
named BASE_URL would be passed in
as the environment variable


90
00:05:43.911 --> 00:05:48.115 line:-1 align:center
named TEST_RUNNER_BASE_URL.


91
00:05:48,148 --> 00:05:51,351 line:-2
Test plans require the same format
as test code.


92
00:05:51.385 --> 00:05:55.989 line:-2 align:center
Namely, we do not add
the TEST_RUNNER_ prefix.


93
00:05:56,023 --> 00:06:00,127 line:-2
Environment variables may be
referenced anywhere in test code.


94
00:06:00,160 --> 00:06:03,263 line:-2
For example,
they could be used with XCTSkip


95
00:06:03.297 --> 00:06:05.699 line:-2 align:center
to skip the test for actually
ordering donuts


96
00:06:05,732 --> 00:06:08,202 line:-1
when we are in a production environment.


97
00:06:08.235 --> 00:06:11.171 line:-1 align:center
Unless you are hungry, of course.


98
00:06:11,205 --> 00:06:12,773 line:-1
It’s important to keep in mind


99
00:06:12,806 --> 00:06:16,510 line:-2
that redefining an environment variable
in multiple places,


100
00:06:16,543 --> 00:06:20,080 line:-2
such as both a test plan and the Xcode
Cloud User Interface,


101
00:06:20,113 --> 00:06:22,649 line:-1
can lead to unexpected results.


102
00:06:22.683 --> 00:06:26.453 line:-2 align:center
In this particular case,
Xcode Cloud’s Environment variables


103
00:06:26.486 --> 00:06:31.592 line:-2 align:center
will take precedence over what’s
specified in your project’s test plans.


104
00:06:31,625 --> 00:06:35,295 line:-2
Now that we are referencing our
environment variable within our test code,


105
00:06:35,329 --> 00:06:38,999 line:-2
we can set its value
in the Xcode Cloud User Interface.


106
00:06:41,034 --> 00:06:43,637 line:-2
To do this,
navigate to your Cloud Reports,


107
00:06:43,670 --> 00:06:46,206 line:-1
and control-click on Food Truck.


108
00:06:48.876 --> 00:06:51.945 line:-2 align:center
To edit our environment variables
within our Workflows,


109
00:06:51,979 --> 00:06:57,050 line:-2
we will select
"Manage Workflows" in the context menu.


110
00:06:57,084 --> 00:07:00,287 line:-2
We are editing
the integration workflow specifically,


111
00:07:00,320 --> 00:07:03,390 line:-1
so we will double click on it.


112
00:07:03.423 --> 00:07:08.395 line:-2 align:center
Now, in the sidebar,
we can select "Environment,"


113
00:07:08,428 --> 00:07:11,865 line:-2
and in the middle of the sheet,
under “Environment Variables,"


114
00:07:11,899 --> 00:07:16,336 line:-1
we can add the variable’s name and value.


115
00:07:19,973 --> 00:07:22,142 line:-2
As an alternative to setting
the environment variable


116
00:07:22,176 --> 00:07:24,111 line:-1
in the Xcode Cloud Workflow,


117
00:07:24.144 --> 00:07:27.714 line:-2 align:center
we could instead set it
within the test plan.


118
00:07:28,482 --> 00:07:31,585 line:-2
In this example,
we don’t yet have a test plan.


119
00:07:31,618 --> 00:07:34,788 line:-2
To enable test plans,
open the scheme editor,


120
00:07:34,821 --> 00:07:36,857 line:-1
select "Test" in the sidebar,


121
00:07:36,890 --> 00:07:40,727 line:-2
and then click on
“Convert to Use Test Plans."


122
00:07:43,664 --> 00:07:47,568 line:-2
Okay, now we have a test plan
I called "Food Truck."


123
00:07:47.601 --> 00:07:49.336 line:-1 align:center
To add the environment variable,


124
00:07:49.369 --> 00:07:52.773 line:-2 align:center
we need to click on the test plan
to open its editor.


125
00:07:54.775 --> 00:07:58.745 line:-2 align:center
Near the top, we can select between
"Tests" and "Configurations."


126
00:07:58.779 --> 00:08:02.616 line:-1 align:center
Let’s select "Configurations."


127
00:08:02,649 --> 00:08:04,918 line:-1
Now, within the "Arguments" section,


128
00:08:04,952 --> 00:08:10,090 line:-2
we will add the variable
by clicking on "Environment Variables."


129
00:08:10.123 --> 00:08:15.796 line:-2 align:center
A popup will appear where we can enter
the variable’s name and value.


130
00:08:18,498 --> 00:08:21,802 line:-2
Now our test will be skipped
when in the production environment.


131
00:08:21,835 --> 00:08:24,137 line:-1
To learn more about skipping tests,


132
00:08:24.171 --> 00:08:27.407 line:-1 align:center
watch "XCTSkip your tests."


133
00:08:28,542 --> 00:08:33,480 line:-2
Now that we covered utilizing environment
variables to control XCTSkip,


134
00:08:33,514 --> 00:08:36,950 line:-1
let’s talk about expectation timeouts.


135
00:08:36,984 --> 00:08:41,154 line:-2
It is possible for a test to fail
due to an unexpected timeout.


136
00:08:41,188 --> 00:08:44,725 line:-2
For example, this could be the result
of a slow server


137
00:08:44.758 --> 00:08:48.729 line:-1 align:center
or an overly anxious user interface test.


138
00:08:48.762 --> 00:08:51.131 line:-1 align:center
One approach to resolve either issue


139
00:08:51.164 --> 00:08:54.635 line:-2 align:center
would be to increase
the XCTestExpectation timeout


140
00:08:54.668 --> 00:08:59.306 line:-2 align:center
so the interaction would
have enough time to finish.


141
00:08:59.339 --> 00:09:02.543 line:-2 align:center
In this example,
we increase the OrderDonut timeout


142
00:09:02,576 --> 00:09:07,514 line:-2
from 5 to 10 seconds to allow the server
more time to respond.


143
00:09:07,548 --> 00:09:10,551 line:-2
It is usually preferable to instead
replace both the app


144
00:09:10,584 --> 00:09:16,590 line:-2
and test code timeout handling
with async/await.


145
00:09:16,623 --> 00:09:18,725 line:-1
This approach allows the test to pause


146
00:09:18.759 --> 00:09:22.162 line:-2 align:center
until the await call finishes
without any timeout.


147
00:09:24.031 --> 00:09:26.066 line:-1 align:center
We have resolved time dependent tests,


148
00:09:26,099 --> 00:09:29,803 line:-2
so let’s handle any test failures
within the test suite.


149
00:09:29,837 --> 00:09:33,106 line:-2
For example, we have a test
that relies on a service


150
00:09:33.140 --> 00:09:37.377 line:-2 align:center
within the staging environment
that is down for maintenance.


151
00:09:37.411 --> 00:09:42.616 line:-2 align:center
We can use XCTExpectFailure instead
of disabling or skipping this test.


152
00:09:42.649 --> 00:09:46.386 line:-2 align:center
With XCTExpectFailure,
your test executes normally


153
00:09:46.420 --> 00:09:49.089 line:-2 align:center
and the results are transformed as
follows:


154
00:09:49.122 --> 00:09:52.759 line:-2 align:center
a failure in a test will now be reported
as an expected failure,


155
00:09:52.793 --> 00:09:56.964 line:-2 align:center
while that failed test within its suite
will be reported as a pass.


156
00:09:56.997 --> 00:10:01.301 line:-2 align:center
This approach eliminates the noise
generated by expected failures.


157
00:10:02.469 --> 00:10:06.473 line:-1 align:center
For example, testOrderDonut is failing.


158
00:10:06,507 --> 00:10:09,076 line:-2
I know that the service
that provides ordering donuts


159
00:10:09,109 --> 00:10:10,844 line:-1
is under maintenance right now,


160
00:10:10.878 --> 00:10:15.649 line:-2 align:center
so I added a call here
to XCTExpectFailure.


161
00:10:15,682 --> 00:10:18,886 align:center
To learn more about XCTExpectFailure


162
00:10:18,919 --> 00:10:22,656 line:0
watch "Embrace Expected Failures
in XCTest."


163
00:10:23.657 --> 00:10:25.826 line:-1 align:center
Now that we've declared expected failures,


164
00:10:25,859 --> 00:10:29,096 line:-2
let’s leverage test repetitions
to substantiate code


165
00:10:29,129 --> 00:10:31,498 line:-1
and diagnose unreliable code.


166
00:10:31,532 --> 00:10:35,736 line:-2
Test repetitions is a tool that
runs the same test multiple times


167
00:10:35,769 --> 00:10:37,237 line:-1
waiting for the following:


168
00:10:37,271 --> 00:10:42,743 line:-2
the first failure, the first success,
or a statistical result.


169
00:10:42,776 --> 00:10:44,511 line:-1
For example, at our desk,


170
00:10:44,545 --> 00:10:48,081 line:-2
we run our new code
and test cases multiple times


171
00:10:48.115 --> 00:10:52.386 line:-2 align:center
with repetitions to confirm initial app
and test code reliability


172
00:10:52.419 --> 00:10:54.988 line:-1 align:center
before checking in the code.


173
00:10:55.022 --> 00:11:00.260 line:-2 align:center
We were able to detect that testOrderDonut
had only an 80% success rate.


174
00:11:00.294 --> 00:11:01.695 line:-1 align:center
Uh-oh!


175
00:11:02.329 --> 00:11:06.233 line:-2 align:center
Knowing the failure exists, we now use
the repeat-until-failure mode


176
00:11:06.266 --> 00:11:08.502 line:-1 align:center
to locally diagnose the bug.


177
00:11:08,535 --> 00:11:13,540 line:-2
This is another way
of utilizing test repetitions.


178
00:11:13.574 --> 00:11:17.044 line:-2 align:center
For tests that rely
on an unreliable external service,


179
00:11:17,077 --> 00:11:20,581 line:-2
you may want to leverage
the retry-on-failure repetition policy


180
00:11:20,614 --> 00:11:23,984 line:-1
to confirm a test can succeed.


181
00:11:24,017 --> 00:11:26,520 line:-2
While retrying tests
is a powerful approach,


182
00:11:26,553 --> 00:11:30,824 line:-2
it’s preferable to instead mock
external services when possible.


183
00:11:30,858 --> 00:11:36,396 line:-2
Advantages of a mocked service include
deterministic reliability and speed.


184
00:11:36,430 --> 00:11:38,432 align:center
To learn how to mock your dependencies,


185
00:11:38,465 --> 00:11:41,168 align:center
watch “Testing Tips & Tricks.”


186
00:11:41.201 --> 00:11:45.138 line:-2 align:center
Let’s explore how test repetitions
can be enabled.


187
00:11:46.273 --> 00:11:48.842 line:-2 align:center
To enable test repetitions
in your test plan,


188
00:11:48,876 --> 00:11:53,113 line:-2
go back to the test plan editor
and select "Configurations."


189
00:11:56,250 --> 00:11:59,086 line:-1
Then, under the "Test Execution" section,


190
00:11:59.119 --> 00:12:02.623 line:-2 align:center
there is a popup to select
your test repetition mode.


191
00:12:04.258 --> 00:12:07.494 line:-2 align:center
In this case,
we will select "Retry on Failure,"


192
00:12:07.528 --> 00:12:13.166 line:-2 align:center
which is used primarily to work around
unreliable external services.


193
00:12:13,200 --> 00:12:16,069 line:-2
Now we have
our test repetition mode enabled.


194
00:12:16,103 --> 00:12:19,206 line:0
For more information on
leveraging test repetitions,


195
00:12:19,239 --> 00:12:24,511 line:0
watch "Diagnose unreliable code
with test repetition."


196
00:12:24,545 --> 00:12:26,980 line:-1
So we have gone over a variety of tools


197
00:12:27.014 --> 00:12:30.784 line:-2 align:center
that can be used
to improve test reliability.


198
00:12:30,817 --> 00:12:33,820 line:0
For more information
about writing quality tests,


199
00:12:33,854 --> 00:12:36,557 align:center
watch "Write tests to fail."


200
00:12:36,590 --> 00:12:40,761 line:-2
Now that our tests are reliable,
let’s make them run fast!


201
00:12:40.794 --> 00:12:44.898 line:-2 align:center
A number of configuration options exist
for achieving faster results.


202
00:12:44,932 --> 00:12:49,570 line:-2
Let’s do what we can to reduce
the time it takes to run the test suite.


203
00:12:51.572 --> 00:12:53.807 line:-2 align:center
One technique we use
to improve performance


204
00:12:53.841 --> 00:12:56.877 line:-2 align:center
is to split our tests
into multiple test plans.


205
00:12:56.910 --> 00:13:00.647 line:-1 align:center
Sometimes, two is enough.


206
00:13:00,681 --> 00:13:04,251 line:-2
You can identify a reduced set of tests
to verify


207
00:13:04,284 --> 00:13:07,554 line:-2
as part of each open or update
to a pull request.


208
00:13:10.557 --> 00:13:13.093 line:-1 align:center
For example, we could run the unit tests


209
00:13:13.126 --> 00:13:18.599 line:-2 align:center
along with just a key subset of user
interface tests for a single platform.


210
00:13:23.504 --> 00:13:27.674 line:-2 align:center
The full set of tests on all supported
platforms can still be run,


211
00:13:27,708 --> 00:13:31,778 line:-2
but now in the background,
and not blocking pull requests.


212
00:13:32.779 --> 00:13:35.849 line:-2 align:center
This approach allows us
to add tests and new platforms


213
00:13:35.883 --> 00:13:39.219 line:-2 align:center
while keeping our continuous
integration process timely.


214
00:13:40.320 --> 00:13:43.457 line:-2 align:center
Let’s set up a workflow to
run a select set of tests.


215
00:13:43,490 --> 00:13:47,094 line:-2
In this example, we have already
created a new test plan


216
00:13:47,127 --> 00:13:51,665 line:-2
called “Pull Requests,"
and have it open in the test plan editor.


217
00:13:51.698 --> 00:13:55.702 line:-2 align:center
Near the top we can selectw
between "Tests" and "Configurations."


218
00:13:55.736 --> 00:13:58.071 line:-1 align:center
Let’s select "Tests."


219
00:14:01,742 --> 00:14:07,581 line:-2
Here we have chosen a subset of tests
to be verified for a pull request.


220
00:14:07,614 --> 00:14:11,818 line:-2
Now to setup a Workflow
to run our “Pull Requests” test plan,


221
00:14:11,852 --> 00:14:14,855 line:-2
we will go back to
Xcode Cloud Manage Workflows


222
00:14:14,888 --> 00:14:21,261 line:-2
just like we did when we added an
environment variable for skipping tests.


223
00:14:21,295 --> 00:14:24,231 line:-2
To create a new workflow,
we will click the "Add" button


224
00:14:24,264 --> 00:14:28,435 line:-2
at the bottom left
of the “Manage Workflow” sheet.


225
00:14:28.468 --> 00:14:32.406 line:-2 align:center
For simplicity, let’s also name
our workflow “Pull Requests”


226
00:14:32,439 --> 00:14:34,875 line:-1
and choose a start condition.


227
00:14:34,908 --> 00:14:39,413 line:-2
We want this workflow to prevent
any check-ins with failing tests.


228
00:14:39.446 --> 00:14:42.416 line:-2 align:center
In the sidebar,
to the right of "Start Conditions,"


229
00:14:42.449 --> 00:14:44.284 line:-1 align:center
we will click the "Add" button.


230
00:14:48.055 --> 00:14:51.558 line:-2 align:center
A menu will appear
showing the start condition options.


231
00:14:51.592 --> 00:14:55.696 line:-2 align:center
In our case,
we will select “Pull Request Changes."


232
00:14:56.964 --> 00:15:00.434 line:-2 align:center
Now, we now have
a pull request start condition.


233
00:15:00,467 --> 00:15:05,239 line:-2
Running tests require that
the Food Truck app first be built.


234
00:15:05.272 --> 00:15:08.642 line:-1 align:center
To do this, we need to add a build action.


235
00:15:08,675 --> 00:15:12,145 line:-2
Again in the sidebar,
below the “Start Conditions,”


236
00:15:12,179 --> 00:15:14,348 line:-1
let’s add an action.


237
00:15:14.381 --> 00:15:17.117 line:-2 align:center
We will click the "Add" button
next to “Actions,"


238
00:15:17.150 --> 00:15:20.821 line:-2 align:center
and then select “Build”
from the context menu.


239
00:15:24,258 --> 00:15:26,627 line:-2
Now that we have an action
that builds our app,


240
00:15:26.660 --> 00:15:29.096 line:-1 align:center
we will add another to run our tests.


241
00:15:29.129 --> 00:15:33.700 line:-2 align:center
Again we will click add action,
but this time we will select "Test."


242
00:15:36.837 --> 00:15:39.072 line:-1 align:center
Great, we have a test action.


243
00:15:39,106 --> 00:15:42,743 line:-1
Let’s select the test plan to run.


244
00:15:42,776 --> 00:15:46,647 line:-2
In the middle of the sheet,
there is a drop down for test.


245
00:15:46,680 --> 00:15:50,083 line:-2
Here we can select
our “Pull Requests” test plan.


246
00:15:53,287 --> 00:15:54,388 line:-1
Awesome!


247
00:15:54.421 --> 00:15:58.525 line:-2 align:center
Now our Workflow is configured
to run our test plan on pull request.


248
00:15:58,559 --> 00:16:03,230 line:-2
To create a second workflow that will run
your complete test suite on a schedule,


249
00:16:03.263 --> 00:16:05.499 line:-1 align:center
you can follow a similar set of steps.


250
00:16:05,532 --> 00:16:08,602 line:-2
However, this time,
select the start condition


251
00:16:08.635 --> 00:16:11.171 line:-1 align:center
to be “On a Schedule for a Branch”


252
00:16:11,205 --> 00:16:15,042 line:-2
and then set the workflow
to run your full suite test plan.


253
00:16:15,742 --> 00:16:18,345 line:-2
We have both Workflows
configured in Xcode Cloud


254
00:16:18,378 --> 00:16:22,316 line:-1
and running their associated test plans.


255
00:16:22,349 --> 00:16:26,753 line:0
To learn more about test plans,
check out "Testing in Xcode."


256
00:16:28,555 --> 00:16:32,960 line:-2
Now we have created pull request
and scheduled workflow test sets.


257
00:16:32,993 --> 00:16:37,831 line:-2
Another improvement we can make for speed
is to run tests concurrently.


258
00:16:37,865 --> 00:16:43,103 line:0
By default, Xcode Cloud
tests your platforms in parallel.


259
00:16:43,136 --> 00:16:46,473 line:-2
In addition, you can enable Xcode
to run tests in parallel


260
00:16:46,507 --> 00:16:49,510 line:-1
on a target and test object class level.


261
00:16:52,513 --> 00:16:55,749 line:-2
To enable parallel test execution
in Xcode,


262
00:16:55.782 --> 00:16:59.853 line:-2 align:center
we will again go to our test plan editor
and select "Tests."


263
00:17:04,258 --> 00:17:07,561 line:-2
Then, to the right of our
“Food Truck Tests" test bundle,


264
00:17:07,594 --> 00:17:09,663 line:-1
we click the “Options” button.


265
00:17:11,665 --> 00:17:16,470 line:-2
One of the options allows us
to “Execute in parallel” when possible.


266
00:17:16.503 --> 00:17:18.906 line:-1 align:center
If the server has enough cores available,


267
00:17:18,939 --> 00:17:23,710 line:-2
multiple targets and test object classes
can be executed concurrently.


268
00:17:23,744 --> 00:17:28,482 line:-2
So let’s enable this option to improve
our test suite turnaround time.


269
00:17:29,516 --> 00:17:33,253 line:-2
Now our tests are configured
to run in parallel.


270
00:17:33.287 --> 00:17:36.557 line:-2 align:center
Note that tests must be designed
to run independently


271
00:17:36.590 --> 00:17:39.760 line:-1 align:center
to take advantage of parallel execution.


272
00:17:39,793 --> 00:17:44,965 line:-2
Proper setup and teardown are essential
to reliable test case behavior.


273
00:17:47.100 --> 00:17:48.802 line:-1 align:center
With our tests running in parallel,


274
00:17:48,836 --> 00:17:51,972 line:-2
it’s time to turn our attention
to runaway tests.


275
00:17:52,005 --> 00:17:56,310 line:-2
Runaway tests are those tests
that don’t end in a timely manner.


276
00:17:56.343 --> 00:17:58.745 line:-1 align:center
Some examples include an infinite loop


277
00:17:58.779 --> 00:18:01.715 line:-2 align:center
or waiting indefinitely
for a failed server.


278
00:18:03,050 --> 00:18:07,821 line:-2
We can halt these tests by setting an
execution time allowance in our test plan.


279
00:18:07,855 --> 00:18:12,359 line:-2
The execution time allowance specifies
the number of seconds for a test to run


280
00:18:12.392 --> 00:18:15.729 line:-1 align:center
before it fails with a timeout error.


281
00:18:15,762 --> 00:18:20,534 line:-2
This prevents a test suite from
getting stuck on an individual test.


282
00:18:23,370 --> 00:18:26,840 line:-2
In this case,
the fifth test got stuck for some reason.


283
00:18:26,874 --> 00:18:28,842 line:-1
By setting the execution time allowance,


284
00:18:28,876 --> 00:18:33,247 line:-2
this runaway test was eventually halted
and marked as a failure.


285
00:18:33,280 --> 00:18:38,318 line:-2
The XCTest Test Runner then continued
running the next test in the suite.


286
00:18:38.352 --> 00:18:42.022 line:-2 align:center
Let’s configure an execution
time allowance for our test plan.


287
00:18:44,024 --> 00:18:46,560 line:-1
To set an execution time allowance,


288
00:18:46,593 --> 00:18:51,265 line:-2
we will go to our test plan editor
and select “Configurations."


289
00:18:53.967 --> 00:18:58.071 line:-2 align:center
Under the “Test Execution” category,
we can enable “Test Timeouts”


290
00:18:58.105 --> 00:19:00.774 line:-1 align:center
and specify the number of seconds to wait.


291
00:19:00.807 --> 00:19:03.911 line:-1 align:center
Note that the default is 600 seconds.


292
00:19:05,245 --> 00:19:08,248 line:-2
Having configured the maximum
execution time allowance,


293
00:19:08.282 --> 00:19:12.653 line:-2 align:center
a single runaway test will no longer
disrupt our testing workflow.


294
00:19:12,686 --> 00:19:16,523 line:-2
For example, an overnight test suite can
now complete on time


295
00:19:16,557 --> 00:19:19,860 line:-1
and provide a full set of useful results.


296
00:19:19,893 --> 00:19:23,030 line:-2
Yay!
We finally stopped those runaway tests,


297
00:19:23.063 --> 00:19:26.166 line:-2 align:center
so we are able to move on
to the next improvement.


298
00:19:26.200 --> 00:19:30.003 line:-2 align:center
As you may recall, we were able
to leverage test repetitions


299
00:19:30,037 --> 00:19:34,875 line:-2
to increase reliability
of tests that rely on external services.


300
00:19:34.908 --> 00:19:37.678 line:-2 align:center
We configured our test plan
to retry on failure


301
00:19:37.711 --> 00:19:41.081 line:-2 align:center
and selected
a sufficient repetition value.


302
00:19:41.114 --> 00:19:45.919 line:-2 align:center
However, these repetitions can add to
the time it takes to run the test suite.


303
00:19:47,588 --> 00:19:49,756 line:-1
Unnecessary repetitions are wasteful


304
00:19:49,790 --> 00:19:54,628 line:-2
and you may want to optimize
test repetition value to a lower number.


305
00:19:54.661 --> 00:19:58.832 line:-2 align:center
Furthermore, you may consider
removing the problematic test altogether


306
00:19:58,866 --> 00:20:01,235 line:-1
from the pull request workflow.


307
00:20:01,268 --> 00:20:03,670 line:-1
Let’s go over how we might do this.


308
00:20:05,038 --> 00:20:09,610 line:-2
Let’s return to the test repetitions
configuration in the test plan editor.


309
00:20:11.812 --> 00:20:16.350 line:-2 align:center
Earlier we set the test repetition mode
to “Retry on Failure."


310
00:20:16.383 --> 00:20:20.320 line:-2 align:center
Now we can adjust
the "Maximum Test Repetitions” value.


311
00:20:20,354 --> 00:20:24,057 line:-2
For example, we may have chosen
to allow up to 10 attempts


312
00:20:24.091 --> 00:20:26.627 line:-2 align:center
for a test that relies
on an external server


313
00:20:26.660 --> 00:20:29.329 line:-1 align:center
that fails 5% of the time.


314
00:20:29.363 --> 00:20:32.599 line:-2 align:center
Most of the time,
we will succeed on the first attempt.


315
00:20:32,633 --> 00:20:36,036 line:-2
However, if that same test
has an unrelated bug,


316
00:20:36.069 --> 00:20:39.740 line:-2 align:center
it will fail every time
and use all 10 attempts.


317
00:20:39.773 --> 00:20:43.944 line:-2 align:center
Maybe 3 attempts would be sufficient
and a better choice.


318
00:20:45.612 --> 00:20:48.882 line:-2 align:center
While we want to reduce retries
to improve performance,


319
00:20:48,916 --> 00:20:52,119 line:-2
note that earlier we recommended
increasing retries


320
00:20:52,152 --> 00:20:55,422 line:-1
to improve reliability in some cases.


321
00:20:55.455 --> 00:20:59.726 line:-2 align:center
As such, this minimally chosen value
must continue be sufficient


322
00:20:59.760 --> 00:21:02.095 line:-1 align:center
to run those tests reliably.


323
00:21:02,129 --> 00:21:07,201 line:-2
That wraps up
configuring for faster results.


324
00:21:07,234 --> 00:21:10,504 line:0
To go into more detail
on getting faster test results,


325
00:21:10,537 --> 00:21:13,574 align:center
check out "Get your test results faster."


326
00:21:14.575 --> 00:21:16.877 line:-2 align:center
To recap,
we covered the most effective ways


327
00:21:16.910 --> 00:21:19.313 line:-1 align:center
to begin testing for Xcode Cloud.


328
00:21:19.346 --> 00:21:23.417 line:-2 align:center
We focused on configuring tests to be both
reliable and fast


329
00:21:23.450 --> 00:21:28.822 line:-2 align:center
so that you can avoid irrelevant failures
and verify your code changes quickly.


330
00:21:28.856 --> 00:21:32.826 line:-2 align:center
Thank you, and I hope you enjoy
the rest of your WWDC!


331
00:21:32,860 --> 00:21:35,863 line:-1
[upbeat music]

