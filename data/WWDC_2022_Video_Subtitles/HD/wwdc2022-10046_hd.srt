2
00:00:00,000 --> 00:00:03,837 line:-1
♪ instrumental hip hop music ♪


3
00:00:03,837 --> 00:00:09,977 size:2% position:90% line:0
♪


4
00:00:09,977 --> 00:00:12,613 line:-1
Welcome to the "Adopt
declarative device management"


5
00:00:12.613 --> 00:00:13.614 line:-1 position:50%
session.


6
00:00:13,614 --> 00:00:15,249 line:-1
My name is Cyrus Daboo,


7
00:00:15.249 --> 00:00:18.352 line:-1 position:50%
and I am an engineer
on the Device Management team.


8
00:00:18.352 --> 00:00:21.421 line:-1 position:50%
I am here to tell you about
the exciting new features


9
00:00:21.421 --> 00:00:24.458 line:-1 position:50%
in declarative
device management.


10
00:00:24.458 --> 00:00:26.760 line:-1 position:50%
At WWDC21,


11
00:00:26.760 --> 00:00:30.530 line:-1 position:50%
my colleague Melissa introduced
declarative device management,


12
00:00:30.530 --> 00:00:33.400 line:-1 position:50%
a new paradigm
for managing Apple devices,


13
00:00:33,400 --> 00:00:37,337 line:-1
reenvisioning
the MDM protocol itself.


14
00:00:37.337 --> 00:00:39.239 line:-1 position:50%
As we learned in that session,


15
00:00:39.239 --> 00:00:41.508 line:-1 position:50%
declarative device management
is powerful


16
00:00:41,508 --> 00:00:45,412 line:-1
because it enables devices
to be autonomous and proactive.


17
00:00:45.412 --> 00:00:47.147 line:-1 position:50%
The device is autonomous,


18
00:00:47,147 --> 00:00:49,716 line:-1
as it reacts to its own
state changes


19
00:00:49.716 --> 00:00:52.452 line:-1 position:50%
and then applies
management logic to itself,


20
00:00:52.452 --> 00:00:54.788 line:-1 position:50%
without prompting
from the server.


21
00:00:54,788 --> 00:00:56,290 line:-1
The device is proactive,


22
00:00:56,290 --> 00:00:58,859 line:-1
with the status channel
asynchronously reporting


23
00:00:58,859 --> 00:01:01,862 line:-1
to the server when important
state changes occur,


24
00:01:01,862 --> 00:01:06,166 line:-1
avoiding the need for servers
to poll devices.


25
00:01:06,166 --> 00:01:07,901 line:-1
There are two key elements


26
00:01:07.901 --> 00:01:10.704 line:-1 position:50%
to the declarative device
management data model:


27
00:01:10.704 --> 00:01:13.173 line:-1 position:50%
declarations and status.


28
00:01:13,173 --> 00:01:16,510 line:-1
Declarations encompass
activations and predicates,


29
00:01:16,510 --> 00:01:20,113 line:-1
configurations, assets,
and management types.


30
00:01:20.113 --> 00:01:24.518 line:-1 position:50%
And status covers status items
and status reporting.


31
00:01:24,518 --> 00:01:26,987 line:-1
Let's take a moment
to talk about why this matters,


32
00:01:26.987 --> 00:01:28.855 line:-1 position:50%
what it means for you,


33
00:01:28,855 --> 00:01:32,092 line:-1
and the organizations
that use your products.


34
00:01:32.092 --> 00:01:34.061 line:-1 position:50%
We have created this technology


35
00:01:34.061 --> 00:01:36.897 line:-1 position:50%
to support new complex
management strategies,


36
00:01:36,897 --> 00:01:40,567 line:-1
enhance the overall user
experience of managed devices,


37
00:01:40.567 --> 00:01:44.771 line:-1 position:50%
alleviate the repetitive and
tedious tasks of an IT admin,


38
00:01:44,771 --> 00:01:47,307 line:-1
and empower devices
to be the driver


39
00:01:47.307 --> 00:01:50.043 line:-1 position:50%
in their own
management state.


40
00:01:50.043 --> 00:01:53.647 line:-1 position:50%
For you, as a developer
of a device management solution,


41
00:01:53.647 --> 00:01:56.083 line:-1 position:50%
the declarative approach
allows your servers


42
00:01:56,083 --> 00:01:58,719 line:-1
to be lightweight and reactive.


43
00:01:58.719 --> 00:02:00.721 line:-1 position:50%
And with
the declarative data model


44
00:02:00.721 --> 00:02:03.957 line:-1 position:50%
more closely mapping to how
organizations are structured,


45
00:02:03.957 --> 00:02:08.495 line:-1 position:50%
that means changes to devices
becomes more intuitive.


46
00:02:08.495 --> 00:02:11.264 line:-1 position:50%
Status reports provide
a rich feedback channel,


47
00:02:11.264 --> 00:02:14.935 line:-1 position:50%
which enable your servers
to monitor devices more closely,


48
00:02:14,935 --> 00:02:17,204 line:-1
and present
pertinent information


49
00:02:17.204 --> 00:02:19.740 line:-1 position:50%
in a more timely
and reliable fashion,


50
00:02:19.740 --> 00:02:22.242 line:-1 position:50%
without the need
for complex strategies


51
00:02:22.242 --> 00:02:24.478 line:-1 position:50%
used to implement polling.


52
00:02:24.478 --> 00:02:27.080 line:-1 position:50%
All of this means a simpler
development effort,


53
00:02:27.080 --> 00:02:30.417 line:-1 position:50%
enabling you to focus on
the device management features


54
00:02:30.417 --> 00:02:33.053 line:-1 position:50%
that add value
where it matters most,


55
00:02:33.053 --> 00:02:37.391 line:-1 position:50%
and create a solution
your customers will love.


56
00:02:37,391 --> 00:02:39,292 line:-1
For IT admins,


57
00:02:39.292 --> 00:02:41.762 line:-1 position:50%
the declarative approach
inspires more confidence


58
00:02:41.762 --> 00:02:44.498 line:-1 position:50%
that the device
is in the expected state.


59
00:02:44,498 --> 00:02:47,234 line:-1
And in the situations
where it is not,


60
00:02:47,234 --> 00:02:48,935 line:-1
that it is in a safe state


61
00:02:48.935 --> 00:02:51.972 line:-1 position:50%
that protects
any sensitive organization data,


62
00:02:51,972 --> 00:02:55,942 line:-1
even when connectivity
to the server is lost.


63
00:02:55,942 --> 00:03:00,113 line:-1
It provides critical feedback
from devices via status reports,


64
00:03:00,113 --> 00:03:02,849 line:-1
that also improves
efficiency for admins


65
00:03:02,849 --> 00:03:04,918 line:-1
through less utilization
of resources


66
00:03:04,918 --> 00:03:07,187 line:-1
such as network bandwidth.


67
00:03:07.187 --> 00:03:09.222 line:-1 position:50%
For the organization's users,


68
00:03:09,222 --> 00:03:11,591 line:-1
device management
becomes a more responsive


69
00:03:11,591 --> 00:03:14,861 line:-1
and reliable experience
with faster onboarding,


70
00:03:14.861 --> 00:03:16.430 line:-1 position:50%
quicker recovery times


71
00:03:16.430 --> 00:03:20.167 line:-1 position:50%
and better support
from their organization.


72
00:03:20,167 --> 00:03:22,135 line:-1
With all these benefits in mind,


73
00:03:22,135 --> 00:03:25,205 line:-1
know that the focus
of future protocol features


74
00:03:25,205 --> 00:03:28,909 line:-1
will be declarative
device management,


75
00:03:28,909 --> 00:03:30,677 line:-1
making it even more important


76
00:03:30,677 --> 00:03:33,013 line:-1
for you to adopt
declarative device management


77
00:03:33.013 --> 00:03:36.383 line:-1 position:50%
in your products today.


78
00:03:36,383 --> 00:03:39,386 line:0
For an in-depth introduction
to declarative device management


79
00:03:39,386 --> 00:03:41,455 position:50%
and the steps needed
to adopt it,


80
00:03:41,455 --> 00:03:46,326 position:50%
make sure you watch
the WWDC21 session video.


81
00:03:46.326 --> 00:03:49.362 line:-1 position:50%
In this release,
we have three focus areas:


82
00:03:49.362 --> 00:03:52.632 line:-1 position:50%
expanding the scope of
declarative device management,


83
00:03:52.632 --> 00:03:57.304 line:-1 position:50%
enhancing status reports,
and enhancing predicates.


84
00:03:57.304 --> 00:03:59.439 line:-1 position:50%
Let's start
with expanding the scope


85
00:03:59,439 --> 00:04:02,542 line:-1
of declarative device
management.


86
00:04:02.542 --> 00:04:05.078 line:-1 position:50%
When declarative device
management was introduced,


87
00:04:05,078 --> 00:04:08,748 line:-1
it was supported on only
iOS with user enrollments.


88
00:04:08.748 --> 00:04:11.485 line:-1 position:50%
Now, declarative device
management is available


89
00:04:11.485 --> 00:04:15.355 line:-1 position:50%
for every enrollment type
MDM supports:


90
00:04:15.355 --> 00:04:17.023 line:-1 position:50%
automatic device enrollment,


91
00:04:17.023 --> 00:04:19.893 line:-1 position:50%
which includes
supervised devices;


92
00:04:19,893 --> 00:04:21,795 line:-1
profile-based enrollment;


93
00:04:21,795 --> 00:04:25,465 line:-1
and profile and account-based
user enrollments.


94
00:04:25.465 --> 00:04:28.401 line:-1 position:50%
Declarative device management
is now also available


95
00:04:28,401 --> 00:04:30,937 line:-1
on Shared iPad.


96
00:04:30,937 --> 00:04:34,474 line:-1
In iOS 16, users can now
find configurations


97
00:04:34.474 --> 00:04:38.545 line:-1 position:50%
in the MDM profile details view
in the Settings app.


98
00:04:38,545 --> 00:04:41,748 line:-1
Tapping the Configurations row
reveals details


99
00:04:41.748 --> 00:04:44.851 line:-1 position:50%
about the active configurations.


100
00:04:44.851 --> 00:04:47.354 line:-1 position:50%
And I am also pleased
to announce


101
00:04:47,354 --> 00:04:49,656 line:-1
that declarative device
management is available


102
00:04:49.656 --> 00:04:53.226 line:-1 position:50%
on every platform MDM supports.


103
00:04:53.226 --> 00:04:56.997 line:-1 position:50%
macOS Ventura now supports
declarative device management,


104
00:04:56.997 --> 00:05:01.434 line:-1 position:50%
for all MDM enrollment types
supported on macOS.


105
00:05:01,434 --> 00:05:04,938 line:0
tvOS 16 now supports declarative
device management


106
00:05:04,938 --> 00:05:08,508 line:0
for MDM device enrollment types.


107
00:05:08,508 --> 00:05:10,310 position:50%
Where supported by the OS,


108
00:05:10,310 --> 00:05:12,445 position:50%
the same set of declarations
and status


109
00:05:12,445 --> 00:05:14,247 position:50%
that are available on iOS


110
00:05:14,247 --> 00:05:18,852 position:50%
are also available
on macOS and tvOS.


111
00:05:18.852 --> 00:05:21.888 line:-1 position:50%
On macOS, a Configurations
section is present


112
00:05:21.888 --> 00:05:24.191 line:-1 position:50%
in the MDM profile details view,


113
00:05:24.191 --> 00:05:26.893 line:-1 position:50%
revealing the active
configurations.


114
00:05:26.893 --> 00:05:30.430 line:-1 position:50%
The same goes for tvOS,
where a Configurations section


115
00:05:30.430 --> 00:05:34.634 line:-1 position:50%
is present in the
MDM profile details view.


116
00:05:34,634 --> 00:05:36,336 line:-1
One last thing to note here:


117
00:05:36,336 --> 00:05:39,005 line:-1
both macOS
and Shared iPad devices


118
00:05:39.005 --> 00:05:41.374 line:-1 position:50%
each have two MDM channels.


119
00:05:41,374 --> 00:05:44,744 line:-1
These are the device
and user channel.


120
00:05:44,744 --> 00:05:46,446 line:-1
The device channel
allows management


121
00:05:46.446 --> 00:05:47.981 line:-1 position:50%
of device level state,


122
00:05:47,981 --> 00:05:50,217 line:-1
whereas the user channel
targets management state


123
00:05:50.217 --> 00:05:52.419 line:-1 position:50%
for specific users.


124
00:05:52.419 --> 00:05:55.322 line:-1 position:50%
To use declarative device
management on any channel,


125
00:05:55.322 --> 00:05:58.391 line:-1 position:50%
it must be enabled separately
for that channel.


126
00:05:58.391 --> 00:06:01.228 line:-1 position:50%
That means sending the
DeclarativeManagement command


127
00:06:01.228 --> 00:06:03.663 line:-1 position:50%
on the corresponding channel.


128
00:06:03,663 --> 00:06:07,100 line:-1
Also, declarative device
management status reports


129
00:06:07.100 --> 00:06:09.869 line:-1 position:50%
are separately generated
for each channel,


130
00:06:09.869 --> 00:06:14.374 line:-1 position:50%
so they need to be
separately monitored as well.


131
00:06:14.374 --> 00:06:19.846 line:-1 position:50%
Now on to our second focus area:
status reports.


132
00:06:19.846 --> 00:06:23.116 line:-1 position:50%
Let's do a quick review
of status reports.


133
00:06:23,116 --> 00:06:26,486 line:-1
Devices can incrementally report
status to the server,


134
00:06:26.486 --> 00:06:29.022 line:-1 position:50%
for subscribed status items.


135
00:06:29.022 --> 00:06:32.092 line:-1 position:50%
The device tracks successful
responses from the server


136
00:06:32.092 --> 00:06:34.461 line:-1 position:50%
to ensure status updates
are reliable


137
00:06:34.461 --> 00:06:36.730 line:-1 position:50%
and not missed in the case
of networking


138
00:06:36.730 --> 00:06:39.232 line:-1 position:50%
or other types of problem.


139
00:06:39.232 --> 00:06:42.502 line:-1 position:50%
Status reporting
makes the device proactive.


140
00:06:42.502 --> 00:06:45.605 line:-1 position:50%
There is no need for servers
to continuously poll the device


141
00:06:45,605 --> 00:06:47,741 line:-1
to watch for state changes.


142
00:06:47,741 --> 00:06:51,645 line:-1
In iOS 15, we introduced
a set of status items


143
00:06:51.645 --> 00:06:54.347 line:-1 position:50%
for device properties,
such as model type


144
00:06:54.347 --> 00:06:56.916 line:-1 position:50%
and operating system version.


145
00:06:56.916 --> 00:07:01.054 line:-1 position:50%
For this release we are
expanding status in three areas:


146
00:07:01,054 --> 00:07:02,922 line:-1
passcode state,


147
00:07:02,922 --> 00:07:05,358 line:-1
accounts installed
by configurations,


148
00:07:05,358 --> 00:07:08,895 line:-1
and MDM installed apps.


149
00:07:08,895 --> 00:07:12,232 line:-1
Let's start
with passcode status.


150
00:07:12.232 --> 00:07:16.803 line:-1 position:50%
In iOS 15, we introduced
a passcode policy configuration.


151
00:07:16.803 --> 00:07:20.473 line:-1 position:50%
There can be some lag between
the policy being applied,


152
00:07:20,473 --> 00:07:22,642 line:-1
and the passcode
becoming compliant


153
00:07:22.642 --> 00:07:24.477 line:-1 position:50%
when changed by the user,


154
00:07:24.477 --> 00:07:28.148 line:-1 position:50%
just as there is with
MDM passcode policy profiles.


155
00:07:28.148 --> 00:07:31.651 line:-1 position:50%
So, MDM servers have to poll
the device to determine


156
00:07:31.651 --> 00:07:34.020 line:-1 position:50%
when the passcode
becomes compliant.


157
00:07:34,020 --> 00:07:36,089 line:-1
But with the new declarative
device management


158
00:07:36,089 --> 00:07:40,794 line:-1
passcode status items,
there is no need to do that.


159
00:07:40.794 --> 00:07:43.897 line:-1 position:50%
We have added two status items:


160
00:07:43.897 --> 00:07:48.835 line:-1 position:50%
Passcode.is-compliant
and passcode.is-present.


161
00:07:48.835 --> 00:07:51.338 line:-1 position:50%
Compliance indicates
if the passcode is compliant


162
00:07:51.338 --> 00:07:54.741 line:-1 position:50%
with all passcode policies
applied via MDM profiles


163
00:07:54.741 --> 00:07:57.210 line:-1 position:50%
or configurations.


164
00:07:57.210 --> 00:07:59.546 line:-1 position:50%
These status items
have Boolean values


165
00:07:59,546 --> 00:08:01,481 line:-1
that mirror
the equivalent properties


166
00:08:01.481 --> 00:08:05.452 line:-1 position:50%
that can be retrieved
via MDM queries.


167
00:08:05.452 --> 00:08:08.855 line:-1 position:50%
Let's explore
a typical server behavior.


168
00:08:08.855 --> 00:08:12.359 line:-1 position:50%
Often, an organization
has security sensitive state


169
00:08:12.359 --> 00:08:14.060 line:-1 position:50%
to apply to a device.


170
00:08:14.060 --> 00:08:17.364 line:-1 position:50%
For example,
VPN or Wi-Fi profiles


171
00:08:17.364 --> 00:08:21.000 line:-1 position:50%
to allow access
to protected networks.


172
00:08:21.000 --> 00:08:23.837 line:-1 position:50%
That state should only
be active on a device,


173
00:08:23,837 --> 00:08:26,906 line:-1
when a strong passcode
policy is present,


174
00:08:26,906 --> 00:08:31,077 line:-1
and the passcode is compliant
with that policy.


175
00:08:31,077 --> 00:08:33,780 line:-1
With traditional MDM,
a server has to send


176
00:08:33,780 --> 00:08:37,183 line:-1
a passcode policy profile
then poll the device,


177
00:08:37.183 --> 00:08:39.586 line:-1 position:50%
to wait for the passcode
to become compliant


178
00:08:39.586 --> 00:08:41.454 line:-1 position:50%
when the user changes it.


179
00:08:41,454 --> 00:08:44,557 line:0
Initially the passcode
is likely not compliant,


180
00:08:44,557 --> 00:08:48,194 position:50%
so the Wi-Fi profile
cannot be sent.


181
00:08:48,194 --> 00:08:50,764 position:50%
Eventually, the user
changes the passcode


182
00:08:50,764 --> 00:08:52,599 position:50%
to bring it into compliance.


183
00:08:52,599 --> 00:08:54,134 position:50%
On the server's next poll,


184
00:08:54,134 --> 00:08:57,337 line:0
it detects the changed
compliant state


185
00:08:57,337 --> 00:09:01,107 line:0
and determines it is OK
to send the Wi-Fi profile,


186
00:09:01,107 --> 00:09:04,444 position:50%
which then gets installed
on the device.


187
00:09:04,444 --> 00:09:06,946 line:-1
Declarative device management
removes the need


188
00:09:06.946 --> 00:09:10.350 line:-1 position:50%
for the server to poll by using
an activation predicate


189
00:09:10.350 --> 00:09:13.520 line:-1 position:50%
that is triggered by
the passcode compliance state.


190
00:09:13.520 --> 00:09:15.622 line:-1 position:50%
The server sends both
the passcode policy


191
00:09:15,622 --> 00:09:18,858 line:-1
and the Wi-Fi profile
as configurations,


192
00:09:18,858 --> 00:09:21,961 line:-1
with the Wi-Fi configuration
tied to an activation


193
00:09:21.961 --> 00:09:25.198 line:-1 position:50%
predicated on
the passcode compliance.


194
00:09:25,198 --> 00:09:27,834 line:-1
The passcode configuration
is immediately activated


195
00:09:27,834 --> 00:09:31,204 line:-1
and applies a strong
passcode policy.


196
00:09:31.204 --> 00:09:34.007 line:-1 position:50%
Initially, the passcode
is likely not compliant,


197
00:09:34.007 --> 00:09:36.910 line:-1 position:50%
so the activation predicate
evaluates to false,


198
00:09:36,910 --> 00:09:40,346 line:-1
and the Wi-Fi configuration
is not activated.


199
00:09:40,346 --> 00:09:44,551 line:-1
At some point, the user updates
the passcode to be compliant.


200
00:09:44.551 --> 00:09:47.821 line:-1 position:50%
This triggers reevaluation
of the activations


201
00:09:47.821 --> 00:09:50.590 line:-1 position:50%
and the predicate
now evaluates to true,


202
00:09:50.590 --> 00:09:54.627 line:-1 position:50%
resulting in the Wi-Fi
configuration being activated.


203
00:09:54,627 --> 00:09:58,364 line:-1
All this happens without any
intervention from the server,


204
00:09:58,364 --> 00:10:01,034 line:-1
and in fact can happen
without any connection


205
00:10:01.034 --> 00:10:03.670 line:-1 position:50%
to the server being present.


206
00:10:03.670 --> 00:10:06.272 line:-1 position:50%
The server does automatically
get a status report


207
00:10:06,272 --> 00:10:09,175 line:-1
from the device when
the configuration activates,


208
00:10:09.175 --> 00:10:11.845 line:-1 position:50%
so it knows when
the change takes place.


209
00:10:11,845 --> 00:10:14,747 line:-1
This illustrates how
we have successfully moved


210
00:10:14.747 --> 00:10:17.750 line:-1 position:50%
business logic from
the server to the device,


211
00:10:17.750 --> 00:10:19.319 line:-1 position:50%
to avoid the need to poll


212
00:10:19.319 --> 00:10:24.290 line:-1 position:50%
and get a more responsive
and reliable device behavior.


213
00:10:24,290 --> 00:10:27,894 line:-1
Now, let's turn
to account status.


214
00:10:27.894 --> 00:10:31.397 line:-1 position:50%
In iOS 15, we introduced
account configurations


215
00:10:31,397 --> 00:10:34,968 line:-1
to install accounts
of various types on a device.


216
00:10:34,968 --> 00:10:37,537 line:-1
These are typically
organization accounts,


217
00:10:37.537 --> 00:10:41.007 line:-1 position:50%
giving the user access
to organization data.


218
00:10:41.007 --> 00:10:44.043 line:-1 position:50%
It is useful for the admin
to know when accounts


219
00:10:44.043 --> 00:10:45.812 line:-1 position:50%
have been
successfully installed,


220
00:10:45.812 --> 00:10:47.547 line:-1 position:50%
and what state they are in,


221
00:10:47,547 --> 00:10:51,451 line:-1
to help support users
who might be having problems.


222
00:10:51.451 --> 00:10:55.722 line:-1 position:50%
This release adds eight
account status items for mail,


223
00:10:55.722 --> 00:10:58.324 line:-1 position:50%
calendar,
and other account types.


224
00:10:58,324 --> 00:11:01,261 line:-1
Note, that status
is only reported for accounts


225
00:11:01,261 --> 00:11:03,062 line:-1
installed by configurations


226
00:11:03.062 --> 00:11:05.665 line:-1 position:50%
and won't include
accounts created manually


227
00:11:05,665 --> 00:11:08,968 line:-1
or installed via MDM profiles.


228
00:11:08.968 --> 00:11:11.104 line:-1 position:50%
Each new status item corresponds


229
00:11:11.104 --> 00:11:13.072 line:-1 position:50%
to an account
configuration type,


230
00:11:13,072 --> 00:11:16,042 line:-1
with status for incoming
and outgoing mail accounts


231
00:11:16,042 --> 00:11:18,344 line:-1
reported separately.


232
00:11:18,344 --> 00:11:22,248 line:-1
The new status items each use
a different type of JSON object,


233
00:11:22,248 --> 00:11:26,252 line:-1
to represent the status of
the corresponding account type.


234
00:11:26.252 --> 00:11:29.556 line:-1 position:50%
Here are examples
of an incoming mail status item,


235
00:11:29,556 --> 00:11:32,992 line:-1
and a subscribed
calendar status item.


236
00:11:32,992 --> 00:11:36,062 line:0
The value of the identifier key
is a unique identifier


237
00:11:36,062 --> 00:11:39,599 position:50%
for an object within the array
of status item objects --


238
00:11:39,599 --> 00:11:42,001 position:50%
more on this in a minute.


239
00:11:42,001 --> 00:11:44,871 line:0
The value of the
declaration identifier key,


240
00:11:44,871 --> 00:11:46,773 line:0
matches the identifier
property value


241
00:11:46,773 --> 00:11:49,342 position:50%
of the configuration
that installed the account,


242
00:11:49,342 --> 00:11:51,210 line:0
making it easy
to cross-reference


243
00:11:51,210 --> 00:11:55,415 line:0
the status item object and
its associated configuration.


244
00:11:55,415 --> 00:11:57,850 line:0
These two keys
are always present


245
00:11:57,850 --> 00:12:01,187 position:50%
in all types of account
status item object.


246
00:12:01,187 --> 00:12:03,790 line:0
The other keys are specific
to the type of account.


247
00:12:03,790 --> 00:12:06,960 position:50%
For example, hostname and port
for the mail server,


248
00:12:06,960 --> 00:12:11,164 line:0
or calendar-URL
for the subscribed calendar.


249
00:12:11,164 --> 00:12:15,468 line:-1
This release introduces status
items whose value is an array,


250
00:12:15.468 --> 00:12:17.704 line:-1 position:50%
to support reporting
on one or more accounts


251
00:12:17.704 --> 00:12:19.472 line:-1 position:50%
of the same type.


252
00:12:19.472 --> 00:12:22.809 line:-1 position:50%
Such array values
have special behavior.


253
00:12:22,809 --> 00:12:25,712 line:-1
Each item in the array
is a JSON object


254
00:12:25.712 --> 00:12:30.083 line:-1 position:50%
with the same schema used for
all objects in a single array.


255
00:12:30,083 --> 00:12:32,986 line:-1
Each object type always
has an identifier key,


256
00:12:32,986 --> 00:12:35,822 line:-1
acting as the primary key
for locating objects


257
00:12:35,822 --> 00:12:37,423 line:-1
within the array.


258
00:12:37.423 --> 00:12:38.858 line:-1 position:50%
Other keys are present


259
00:12:38.858 --> 00:12:42.195 line:-1 position:50%
and tied to the underlying type
of status being reported.


260
00:12:42,195 --> 00:12:44,497 line:-1
To ensure forwards compatibility


261
00:12:44,497 --> 00:12:47,467 line:-1
with any keys added
in future OS releases,


262
00:12:47,467 --> 00:12:52,505 line:-1
your server must accept
unknown keys in array objects.


263
00:12:52,505 --> 00:12:55,074 line:-1
Changes to an array value
are always reported


264
00:12:55.074 --> 00:12:57.210 line:-1 position:50%
incrementally to the server


265
00:12:57.210 --> 00:13:01.180 line:-1 position:50%
on a per-object basis,
for performance reasons.


266
00:13:01,180 --> 00:13:02,715 line:-1
Let's run through an example


267
00:13:02.715 --> 00:13:05.885 line:-1 position:50%
that shows how
this new feature works.


268
00:13:05,885 --> 00:13:07,186 line:-1
In this example,


269
00:13:07.186 --> 00:13:09.756 line:-1 position:50%
the server sends
two mail account configurations


270
00:13:09,756 --> 00:13:10,990 line:-1
to the device.


271
00:13:10.990 --> 00:13:14.227 line:-1 position:50%
These are both active
resulting in two mail accounts


272
00:13:14,227 --> 00:13:16,329 line:-1
present on the device.


273
00:13:16,329 --> 00:13:18,464 line:-1
The server now sends
a status subscription


274
00:13:18.464 --> 00:13:21.000 line:-1 position:50%
for the mail account
status item.


275
00:13:21.000 --> 00:13:23.202 line:-1 position:50%
When the subscription
is activated,


276
00:13:23.202 --> 00:13:25.238 line:-1 position:50%
status for the accounts
is collected,


277
00:13:25,238 --> 00:13:29,208 line:-1
and the device sends
a status report to the server.


278
00:13:29.208 --> 00:13:32.545 line:-1 position:50%
The status report will include
the two account status objects


279
00:13:32.545 --> 00:13:34.213 line:-1 position:50%
in the status array,


280
00:13:34,213 --> 00:13:35,848 line:-1
giving the server
a complete picture


281
00:13:35.848 --> 00:13:38.851 line:-1 position:50%
of what is currently
present on the device.


282
00:13:38.851 --> 00:13:42.088 line:-1 position:50%
Each array object
has a different identifier.


283
00:13:42.088 --> 00:13:44.123 line:-1 position:50%
After processing this report,


284
00:13:44,123 --> 00:13:46,659 line:-1
the server has status
for two mail accounts,


285
00:13:46,659 --> 00:13:49,529 line:-1
matching what is on the device.


286
00:13:49,529 --> 00:13:52,131 line:-1
When the server adds
a mail account on the device


287
00:13:52,131 --> 00:13:55,802 line:-1
by sending a new configuration,
the status item on the device


288
00:13:55,802 --> 00:13:58,905 line:-1
has a new object added
to its array value,


289
00:13:58,905 --> 00:14:03,142 line:-1
and another status report
is sent to the server.


290
00:14:03,142 --> 00:14:05,712 line:-1
Only the new item is reported.


291
00:14:05.712 --> 00:14:08.614 line:-1 position:50%
The value of the identifier
key does not match


292
00:14:08.614 --> 00:14:10.349 line:-1 position:50%
any the server already has,


293
00:14:10,349 --> 00:14:15,154 line:-1
so the server can infer this
corresponds to a new account.


294
00:14:15.154 --> 00:14:16.622 line:-1 position:50%
After processing this report,


295
00:14:16,622 --> 00:14:19,358 line:-1
the server has status
for three mail accounts,


296
00:14:19.358 --> 00:14:21.928 line:-1 position:50%
the two initial ones
and the new one,


297
00:14:21.928 --> 00:14:25.932 line:-1 position:50%
again matching exactly
what is on the device.


298
00:14:25,932 --> 00:14:27,900 line:-1
When account status changes,


299
00:14:27.900 --> 00:14:31.704 line:-1 position:50%
such as when a user toggles
the mail or notes enabled state,


300
00:14:31.704 --> 00:14:33.439 line:-1 position:50%
the status item on the device


301
00:14:33,439 --> 00:14:36,642 line:-1
will have an updated object
in its array value,


302
00:14:36,642 --> 00:14:41,013 line:-1
and again, a status report
is sent to the server.


303
00:14:41.013 --> 00:14:43.516 line:-1 position:50%
Only the changed item
is reported.


304
00:14:43.516 --> 00:14:46.319 line:-1 position:50%
In this case, the user
turned off the notes feature


305
00:14:46,319 --> 00:14:47,920 line:-1
for the account.


306
00:14:47,920 --> 00:14:49,922 line:-1
The value of the identifier key


307
00:14:49.922 --> 00:14:52.158 line:-1 position:50%
matches one
the server already has,


308
00:14:52.158 --> 00:14:54.961 line:-1 position:50%
so the server can infer
that this is an update


309
00:14:54,961 --> 00:14:56,329 line:-1
to an existing account.


310
00:14:56.329 --> 00:14:57.530 line:-1 position:50%
Consequently,


311
00:14:57.530 --> 00:15:00.433 line:-1 position:50%
it replaces the existing
status item array object


312
00:15:00,433 --> 00:15:02,769 line:-1
with the new one.


313
00:15:02.769 --> 00:15:04.437 line:-1 position:50%
After processing this report,


314
00:15:04.437 --> 00:15:07.073 line:-1 position:50%
the server has status
for three mail accounts,


315
00:15:07.073 --> 00:15:09.942 line:-1 position:50%
but one has changed.


316
00:15:09.942 --> 00:15:13.079 line:-1 position:50%
When an account configuration
is removed from the device,


317
00:15:13,079 --> 00:15:14,614 line:-1
the status item on the device


318
00:15:14.614 --> 00:15:17.683 line:-1 position:50%
has the corresponding object
marked for removal,


319
00:15:17.683 --> 00:15:21.788 line:-1 position:50%
and another status report
is sent to the server.


320
00:15:21.788 --> 00:15:24.257 line:-1 position:50%
Only the removed item
is reported.


321
00:15:24,257 --> 00:15:25,858 line:-1
To indicate removal,


322
00:15:25,858 --> 00:15:29,428 line:-1
the array item object
contains only two keys:


323
00:15:29.428 --> 00:15:30.997 line:-1 position:50%
the identifier key --


324
00:15:30.997 --> 00:15:33.766 line:-1 position:50%
whose value matches
one the server already has --


325
00:15:33.766 --> 00:15:37.470 line:-1 position:50%
and the removed key,
set to the value true.


326
00:15:37,470 --> 00:15:40,373 line:-1
This allows the server
to update its representation


327
00:15:40,373 --> 00:15:44,510 line:-1
of the device state
by removing the existing item.


328
00:15:44.510 --> 00:15:46.379 line:-1 position:50%
After processing this report,


329
00:15:46,379 --> 00:15:49,215 line:-1
the server has status
for only two mail accounts,


330
00:15:49,215 --> 00:15:52,952 line:-1
correctly matching
the state of the device.


331
00:15:52.952 --> 00:15:55.922 line:-1 position:50%
One last point about
status reports.


332
00:15:55,922 --> 00:15:59,225 line:-1
The device will limit the rate
at which status reports are sent


333
00:15:59,225 --> 00:16:01,527 line:-1
to avoid performance issues.


334
00:16:01,527 --> 00:16:04,564 line:-1
The device aggregates
changes to status items


335
00:16:04,564 --> 00:16:07,333 line:-1
over a variable interval
of up to one minute


336
00:16:07,333 --> 00:16:10,570 line:-1
before sending a status report
to the server.


337
00:16:10,570 --> 00:16:13,005 line:-1
This means status
is reported quickly,


338
00:16:13,005 --> 00:16:15,675 line:-1
but it is not immediate.


339
00:16:15,675 --> 00:16:17,543 line:-1
Next, let's turn our attention


340
00:16:17.543 --> 00:16:20.513 line:-1 position:50%
to solving a perennial
MDM-bottleneck problem:


341
00:16:20.513 --> 00:16:24.050 line:-1 position:50%
monitoring
application install status.


342
00:16:24,050 --> 00:16:28,821 line:-1
MDM servers often install apps
on devices to give users access


343
00:16:28.821 --> 00:16:32.658 line:-1 position:50%
to the tools needed
for their work or education.


344
00:16:32.658 --> 00:16:34.861 line:-1 position:50%
Server-side logic
is often dictated


345
00:16:34,861 --> 00:16:37,997 line:-1
by whether an app is installed
successfully or not.


346
00:16:37,997 --> 00:16:42,101 line:-1
So MDM servers need to monitor
app installation progress


347
00:16:42,101 --> 00:16:46,105 line:-1
and watch for the possibility
of users removing managed apps


348
00:16:46,105 --> 00:16:48,875 line:-1
on their device.


349
00:16:48,875 --> 00:16:53,145 line:-1
Currently, MDM servers can use
the InstalledApplicationList


350
00:16:53,145 --> 00:16:56,349 line:-1
or ManagedApplicationList
commands to poll the device


351
00:16:56,349 --> 00:16:59,585 line:-1
to observe
app installation progress.


352
00:16:59.585 --> 00:17:02.088 line:-1 position:50%
We can avoid polling
by having the device


353
00:17:02.088 --> 00:17:06.058 line:-1 position:50%
proactively send app install
progress to the server.


354
00:17:06,058 --> 00:17:07,326 line:-1
And the tool to do that


355
00:17:07,326 --> 00:17:12,198 line:-1
is declarative device management
status reports.


356
00:17:12.198 --> 00:17:15.468 line:-1 position:50%
This release adds
an mdm.app status item.


357
00:17:15,468 --> 00:17:19,138 line:-1
Its value is an array of objects
that each represent an app


358
00:17:19.138 --> 00:17:22.141 line:-1 position:50%
that has been installed
by the MDM server.


359
00:17:22.141 --> 00:17:25.611 line:-1 position:50%
Since this value is an array,
it is reported incrementally,


360
00:17:25.611 --> 00:17:28.114 line:-1 position:50%
using the procedure
described earlier.


361
00:17:28.114 --> 00:17:31.984 line:-1 position:50%
Note that only apps installed
by MDM are reported here,


362
00:17:31,984 --> 00:17:35,187 line:-1
even on supervised devices.


363
00:17:35,187 --> 00:17:38,357 line:-1
This status report includes
a status item for an app


364
00:17:38.357 --> 00:17:40.493 line:-1 position:50%
that has finished installing.


365
00:17:40,493 --> 00:17:43,162 line:-1
The identifier key
is the unique identifier


366
00:17:43.162 --> 00:17:45.598 line:-1 position:50%
for the array item object,
and in this case,


367
00:17:45,598 --> 00:17:48,167 line:-1
is the app's bundle identifier.


368
00:17:48,167 --> 00:17:51,170 line:-1
The name key indicates
the name of the app.


369
00:17:51,170 --> 00:17:54,006 line:-1
The three version keys
provide normal, short,


370
00:17:54.006 --> 00:17:57.043 line:-1 position:50%
and external
version identifiers.


371
00:17:57,043 --> 00:17:58,911 line:-1
And the state key
is an enumeration


372
00:17:58.911 --> 00:18:02.848 line:-1 position:50%
that indicates the current
install phase for the app.


373
00:18:02,848 --> 00:18:04,850 line:-1
The values of these keys
correspond


374
00:18:04,850 --> 00:18:07,053 line:-1
to the equivalent items
in the MDM


375
00:18:07,053 --> 00:18:10,189 line:-1
ManagedApplicationList
command response.


376
00:18:10,189 --> 00:18:13,926 line:-1
With all this information, the
server can immediately identify


377
00:18:13,926 --> 00:18:18,764 line:-1
which app is being reported
and what its state is.


378
00:18:18,764 --> 00:18:22,902 line:-1
Let's examine an example of the
flow of data as an app installs.


379
00:18:22.902 --> 00:18:25.738 line:-1 position:50%
On the right side,
we have an iOS 16 device


380
00:18:25,738 --> 00:18:28,574 line:-1
that is being managed
by an MDM server.


381
00:18:28.574 --> 00:18:31.978 line:-1 position:50%
The server has already enabled
declarative device management


382
00:18:31,978 --> 00:18:33,646 line:-1
and sent a status subscription


383
00:18:33,646 --> 00:18:37,049 line:-1
for the MDM-installed
app status item.


384
00:18:37.049 --> 00:18:39.719 line:-1 position:50%
The next step for the server
is to install an app


385
00:18:39.719 --> 00:18:43.222 line:-1 position:50%
using the MDM
InstallApplication command.


386
00:18:43,222 --> 00:18:46,625 line:-1
Since this is a user enrollment,
user approval is needed


387
00:18:46.625 --> 00:18:49.295 line:-1 position:50%
to install the app,
so a prompt appears


388
00:18:49.295 --> 00:18:52.698 line:-1 position:50%
when the device processes
the app install command.


389
00:18:52,698 --> 00:18:55,868 line:-1
At this point, the installation
progress is paused,


390
00:18:55,868 --> 00:18:58,604 line:-1
waiting for user input.


391
00:18:58,604 --> 00:19:01,540 line:-1
The device will send
a status report to the server,


392
00:19:01.540 --> 00:19:05.644 line:-1 position:50%
and that will contain a single
MDM-installed app status object,


393
00:19:05.644 --> 00:19:10.282 line:-1 position:50%
with the bundle ID of the app
and the state set to prompting.


394
00:19:10,282 --> 00:19:13,085 line:-1
At some point, the user taps
the Install button,


395
00:19:13.085 --> 00:19:16.856 line:-1 position:50%
and the app install
starts on the device.


396
00:19:16,856 --> 00:19:20,693 line:-1
As the install proceeds, another
status report will be sent,


397
00:19:20,693 --> 00:19:23,829 line:-1
this time with the app state
set to installing;


398
00:19:23,829 --> 00:19:28,300 line:-1
indicating the app is being
downloaded and installed.


399
00:19:28.300 --> 00:19:30.536 line:-1 position:50%
Eventually, the app
completes installation


400
00:19:30.536 --> 00:19:32.705 line:-1 position:50%
and is ready for use.


401
00:19:32.705 --> 00:19:35.241 line:-1 position:50%
At that point, another
status report will be sent


402
00:19:35,241 --> 00:19:37,443 line:-1
with the app state
set to managed,


403
00:19:37,443 --> 00:19:41,380 line:-1
indicating the app is properly
installed and managed.


404
00:19:41,380 --> 00:19:46,085 line:-1
Now, let's say the user manually
deletes the app on the device.


405
00:19:46,085 --> 00:19:48,554 line:-1
Again, a status report
will be sent,


406
00:19:48,554 --> 00:19:53,259 line:-1
this time with the app state set
to managed-but-uninstalled.


407
00:19:53.259 --> 00:19:55.895 line:-1 position:50%
This indicates the app
is no longer installed,


408
00:19:55.895 --> 00:19:58.497 line:-1 position:50%
but its management state
is still being tracked


409
00:19:58.497 --> 00:20:00.699 line:-1 position:50%
on the device.


410
00:20:00,699 --> 00:20:02,835 line:-1
Let's assume the server
wants to remove


411
00:20:02.835 --> 00:20:04.770 line:-1 position:50%
the app-management state.


412
00:20:04.770 --> 00:20:07.807 line:-1 position:50%
It does that by sending
a RemoveApplication command


413
00:20:07.807 --> 00:20:09.341 line:-1 position:50%
to the device.


414
00:20:09.341 --> 00:20:12.311 line:-1 position:50%
That removes the internally
maintained management state,


415
00:20:12.311 --> 00:20:14.647 line:-1 position:50%
and if the app were
still present,


416
00:20:14,647 --> 00:20:17,283 line:-1
it would be removed too.


417
00:20:17.283 --> 00:20:19.752 line:-1 position:50%
Another status report will be
sent with the app object


418
00:20:19.752 --> 00:20:22.822 line:-1 position:50%
marked as removed
from the app status array.


419
00:20:22.822 --> 00:20:26.725 line:-1 position:50%
This illustrates the power of
the new MDM status item


420
00:20:26,725 --> 00:20:28,594 line:-1
to help improve
the responsiveness


421
00:20:28.594 --> 00:20:30.963 line:-1 position:50%
and reliability of app installs,


422
00:20:30,963 --> 00:20:35,000 line:-1
and it only takes a few steps
to implement.


423
00:20:35,000 --> 00:20:40,372 line:-1
Now, let's examine our third
focus area: predicates.


424
00:20:40,372 --> 00:20:43,342 line:-1
Let's quickly review
activation predicates.


425
00:20:43.342 --> 00:20:45.911 line:-1 position:50%
Activations can include
an optional predicate


426
00:20:45,911 --> 00:20:47,980 line:-1
that determines
whether the configurations


427
00:20:47.980 --> 00:20:52.118 line:-1 position:50%
referenced in the activation
will be applied to the device.


428
00:20:52.118 --> 00:20:53.853 line:-1 position:50%
Predicates can reference
status items


429
00:20:53,853 --> 00:20:57,823 line:-1
to allow the values of those
status items to be tested.


430
00:20:57.823 --> 00:21:00.593 line:-1 position:50%
When a status item referenced
in a predicate changes,


431
00:21:00,593 --> 00:21:03,662 line:-1
the device will reprocess
all of the activations,


432
00:21:03.662 --> 00:21:06.565 line:-1 position:50%
reevaluating any predicates.


433
00:21:06,565 --> 00:21:08,400 line:-1
Predicates are specified
as a string


434
00:21:08,400 --> 00:21:10,402 line:-1
using the NSPredicate syntax


435
00:21:10.402 --> 00:21:13.572 line:-1 position:50%
documented on
the Apple Developer site.


436
00:21:13,572 --> 00:21:16,675 line:-1
To support more complex
predicate expressions,


437
00:21:16.675 --> 00:21:19.812 line:-1 position:50%
we have extended the predicate
syntax to make it easier


438
00:21:19.812 --> 00:21:23.682 line:-1 position:50%
to detect status items
in the expression.


439
00:21:23.682 --> 00:21:26.318 line:-1 position:50%
The new syntax places
the status item name


440
00:21:26,318 --> 00:21:30,456 line:-1
inside an @status term
in the predicate string.


441
00:21:30.456 --> 00:21:33.492 line:-1 position:50%
In the example,
the serial number status item


442
00:21:33.492 --> 00:21:35.327 line:-1 position:50%
appears in
the predicate expression,


443
00:21:35.327 --> 00:21:38.330 line:-1 position:50%
using the new syntax.


444
00:21:38.330 --> 00:21:40.266 line:-1 position:50%
The previous syntax
will continue to work


445
00:21:40.266 --> 00:21:44.537 line:-1 position:50%
for backwards compatibility,
however, it is now deprecated,


446
00:21:44,537 --> 00:21:47,640 line:-1
so please switch
to the new one.


447
00:21:47,640 --> 00:21:49,575 line:-1
Let's examine how
predicates can be used


448
00:21:49,575 --> 00:21:52,011 line:-1
with status item array values.


449
00:21:52,011 --> 00:21:55,047 line:-1
As we just described,
we now have status item values


450
00:21:55.047 --> 00:21:56.882 line:-1 position:50%
that are arrays
for the accounts


451
00:21:56,882 --> 00:21:59,785 line:-1
and MDM-installed
app status items.


452
00:21:59.785 --> 00:22:02.521 line:-1 position:50%
It is useful to be able
to predicate an activation


453
00:22:02.521 --> 00:22:05.157 line:-1 position:50%
on an item in the array.


454
00:22:05,157 --> 00:22:08,561 line:-1
For example, we might want
an activation to be triggered


455
00:22:08,561 --> 00:22:10,963 line:-1
when an app with a particular
bundle identifier


456
00:22:10,963 --> 00:22:14,567 line:-1
is installed and managed
on the device.


457
00:22:14.567 --> 00:22:16.869 line:-1 position:50%
NSPredicate has
a SUBQUERY term


458
00:22:16,869 --> 00:22:20,239 line:-1
that can be used
to operate on arrays.


459
00:22:20.239 --> 00:22:23.142 line:-1 position:50%
This NSPredicate expression
uses a SUBQUERY


460
00:22:23.142 --> 00:22:26.812 line:-1 position:50%
targeting the MDM-installed
app status item.


461
00:22:26.812 --> 00:22:30.983 line:-1 position:50%
The status item is used as the
first argument to the SUBQUERY.


462
00:22:30,983 --> 00:22:33,085 line:-1
The second argument
defines a variable


463
00:22:33,085 --> 00:22:35,754 line:-1
that will refer to each
element of the array.


464
00:22:35.754 --> 00:22:38.023 line:-1 position:50%
The third argument is
a predicate expression


465
00:22:38.023 --> 00:22:42.494 line:-1 position:50%
that tests each element
identified by that variable.


466
00:22:42,494 --> 00:22:45,397 line:-1
The SUBQUERY expression
returns an array of elements


467
00:22:45,397 --> 00:22:48,701 line:-1
that match the predicate
in the third argument.


468
00:22:48,701 --> 00:22:51,637 line:-1
The @count operator
then returns the length


469
00:22:51.637 --> 00:22:53.772 line:-1 position:50%
of that array,
and the length is checked


470
00:22:53,772 --> 00:22:57,476 line:-1
to determine if there is
one resulting match.


471
00:22:57.476 --> 00:23:00.446 line:-1 position:50%
When the specified app
is installed and managed,


472
00:23:00.446 --> 00:23:02.748 line:-1 position:50%
this SUBQUERY expression
will return an array


473
00:23:02,748 --> 00:23:04,450 line:-1
with a single element,


474
00:23:04.450 --> 00:23:07.453 line:-1 position:50%
and the predicate
will evaluate to true.


475
00:23:07,453 --> 00:23:10,356 line:-1
When the app is not installed,
the SUBQUERY expression


476
00:23:10.356 --> 00:23:12.091 line:-1 position:50%
will return an empty array,


477
00:23:12.091 --> 00:23:15.694 line:-1 position:50%
and the predicate
will evaluate to false.


478
00:23:15.694 --> 00:23:18.230 line:-1 position:50%
Note that in order
to reference the keys


479
00:23:18,230 --> 00:23:21,800 line:-1
in the status item array object,
the @key extension term


480
00:23:21,800 --> 00:23:25,838 line:-1
must be used to ensure the key
paths are properly processed.


481
00:23:25,838 --> 00:23:28,540 line:-1
The new predicate syntax
is extensible,


482
00:23:28,540 --> 00:23:30,976 line:-1
and we will now discuss
how it can be used


483
00:23:30.976 --> 00:23:35.781 line:-1 position:50%
to add predicate terms
for a new type of data.


484
00:23:35.781 --> 00:23:38.417 line:-1 position:50%
Servers need to be able
to more directly control


485
00:23:38.417 --> 00:23:42.221 line:-1 position:50%
the evaluation of predicates, so
that complex server-side logic


486
00:23:42.221 --> 00:23:45.591 line:-1 position:50%
can translate into simple
state changes on the device,


487
00:23:45,591 --> 00:23:48,894 line:-1
without the need to synchronize
large sets of configurations


488
00:23:48,894 --> 00:23:51,130 line:-1
to trigger those changes.


489
00:23:51,130 --> 00:23:54,400 line:-1
An example of this might be
an organization that has users


490
00:23:54,400 --> 00:23:57,236 line:-1
with multiple roles
and wants efficient,


491
00:23:57,236 --> 00:23:59,071 line:-1
just-in-time assignment
of devices


492
00:23:59.071 --> 00:24:03.008 line:-1 position:50%
as they are handed out to users,
or organizations that need


493
00:24:03,008 --> 00:24:05,644 line:-1
to quickly distribute
replacement devices,


494
00:24:05,644 --> 00:24:07,813 line:-1
or quickly put devices
into a safe mode


495
00:24:07,813 --> 00:24:10,516 line:-1
to protect organization data.


496
00:24:10.516 --> 00:24:13.185 line:-1 position:50%
To support this,
I am pleased to say


497
00:24:13.185 --> 00:24:16.355 line:-1 position:50%
we are adding a new declaration
to allow servers


498
00:24:16,355 --> 00:24:19,058 line:-1
to set arbitrary properties
on the device,


499
00:24:19.058 --> 00:24:22.328 line:-1 position:50%
that can be directly used
in activation predicates.


500
00:24:22.328 --> 00:24:26.865 line:-1 position:50%
This is the new management
properties declaration.


501
00:24:26.865 --> 00:24:29.501 line:-1 position:50%
The declaration consists
of a JSON object


502
00:24:29,501 --> 00:24:33,005 line:-1
whose key names
are defined by the server.


503
00:24:33,005 --> 00:24:36,642 line:-1
The JSON object values
can be any JSON value type,


504
00:24:36.642 --> 00:24:39.645 line:-1 position:50%
including arrays or objects.


505
00:24:39,645 --> 00:24:41,580 line:-1
The management properties
declaration here,


506
00:24:41.580 --> 00:24:44.950 line:-1 position:50%
includes three properties:
the name and age properties


507
00:24:44.950 --> 00:24:47.252 line:-1 position:50%
that have a string
and integer value,


508
00:24:47.252 --> 00:24:51.724 line:-1 position:50%
and the roles property
that is an array of strings.


509
00:24:51.724 --> 00:24:54.093 line:-1 position:50%
This is an activation
with a predicate


510
00:24:54.093 --> 00:24:56.929 line:-1 position:50%
that references some
management properties.


511
00:24:56,929 --> 00:24:59,965 line:-1
First, it tests the age property
to determine


512
00:24:59,965 --> 00:25:03,702 line:-1
if its integer value is
greater than or equal to 18,


513
00:25:03.702 --> 00:25:06.472 line:-1 position:50%
then it tests the roles property
to determine


514
00:25:06.472 --> 00:25:11.577 line:-1 position:50%
if the string Grade12 is
in the property array value.


515
00:25:11.577 --> 00:25:12.845 line:-1 position:50%
Each property is referenced


516
00:25:12.845 --> 00:25:15.447 line:-1 position:50%
using the @property
extension term,


517
00:25:15.447 --> 00:25:19.651 line:-1 position:50%
with the property key name
inside the term.


518
00:25:19.651 --> 00:25:21.687 line:-1 position:50%
Multiple management
properties declarations


519
00:25:21.687 --> 00:25:23.288 line:-1 position:50%
can be sent to the device,


520
00:25:23.288 --> 00:25:26.692 line:-1 position:50%
but the keys should be unique
across all of them.


521
00:25:26.692 --> 00:25:29.461 line:-1 position:50%
If there are duplicate keys,
one of the values


522
00:25:29.461 --> 00:25:32.464 line:-1 position:50%
will be arbitrarily chosen
when the property is referenced


523
00:25:32.464 --> 00:25:35.834 line:-1 position:50%
in a predicate, leading
to unpredictable results.


524
00:25:35.834 --> 00:25:39.471 line:-1 position:50%
So please avoid using
duplicate key names.


525
00:25:39.471 --> 00:25:43.075 line:-1 position:50%
Let's explore
an example use case.


526
00:25:43.075 --> 00:25:45.411 line:-1 position:50%
This example involves a school.


527
00:25:45,411 --> 00:25:48,647 line:-1
And of course, the school
has a set of teachers.


528
00:25:48,647 --> 00:25:52,885 line:-1
The school has two divisions:
Upper and Lower.


529
00:25:52,885 --> 00:25:57,322 line:-1
Each division has its own campus
with its own Wi-Fi network.


530
00:25:57.322 --> 00:25:59.858 line:-1 position:50%
Some teachers function
as an IT Admin


531
00:25:59,858 --> 00:26:02,895 line:-1
and require access
to a shared mail account.


532
00:26:02,895 --> 00:26:05,631 position:50%
Some teachers also function
as a sports coach


533
00:26:05,631 --> 00:26:07,499 line:0
and should have
a subscribed calendar


534
00:26:07,499 --> 00:26:10,369 line:0
for all the team
game schedules.


535
00:26:10,369 --> 00:26:13,839 position:50%
There are thus four different
roles that a teacher may have,


536
00:26:13,839 --> 00:26:16,842 position:50%
and sometimes
they have multiple roles.


537
00:26:16,842 --> 00:26:19,077 line:0
Each role has a set
of configurations


538
00:26:19,077 --> 00:26:22,014 line:0
that must be applied to devices
based on the roles


539
00:26:22,014 --> 00:26:25,417 position:50%
of the teacher
assigned to the device.


540
00:26:25,417 --> 00:26:28,887 line:0
Let's consider two teachers
in our example.


541
00:26:28,887 --> 00:26:30,889 position:50%
Teacher one teaches
in Lower school


542
00:26:30,889 --> 00:26:33,425 position:50%
and is also a sports coach.


543
00:26:33,425 --> 00:26:39,298 position:50%
Teacher two teaches in Upper
school and is also an IT admin.


544
00:26:39.298 --> 00:26:41.066 line:-1 position:50%
How might such a use case
be handled


545
00:26:41.066 --> 00:26:44.169 line:-1 position:50%
by a traditional MDM server?


546
00:26:44.169 --> 00:26:46.638 line:-1 position:50%
Typically, the server has
to wait for a device


547
00:26:46.638 --> 00:26:48.340 line:-1 position:50%
to be assigned to a teacher


548
00:26:48,340 --> 00:26:51,577 line:-1
before it can fully
configure that device.


549
00:26:51.577 --> 00:26:55.247 line:-1 position:50%
The server has to determine
what roles the teacher has.


550
00:26:55,247 --> 00:26:59,585 line:-1
It then determines what profiles
are linked to each role.


551
00:26:59.585 --> 00:27:02.488 line:-1 position:50%
It then has to install
each profile on the device


552
00:27:02.488 --> 00:27:05.157 line:-1 position:50%
one at a time.


553
00:27:05.157 --> 00:27:07.993 line:-1 position:50%
If a teacher changes roles,
the server has to add


554
00:27:07,993 --> 00:27:11,330 line:-1
or remove profiles
to match the new roles.


555
00:27:11.330 --> 00:27:14.099 line:-1 position:50%
This is time-consuming
and can introduce


556
00:27:14.099 --> 00:27:17.336 line:-1 position:50%
significant bottlenecks
to a device-management system


557
00:27:17,336 --> 00:27:19,471 line:-1
particularly at peak times,


558
00:27:19.471 --> 00:27:21.874 line:-1 position:50%
which in our case would be
the first day of school


559
00:27:21,874 --> 00:27:24,409 line:-1
when assignments are done.


560
00:27:24.409 --> 00:27:26.745 line:-1 position:50%
With the new management
properties declaration,


561
00:27:26.745 --> 00:27:30.015 line:-1 position:50%
we have a more efficient
alternative to this.


562
00:27:30.015 --> 00:27:32.951 line:-1 position:50%
This involves preloading
a full set of declarations


563
00:27:32.951 --> 00:27:35.954 line:-1 position:50%
on the device ahead of time.


564
00:27:35,954 --> 00:27:38,323 line:-1
Configurations
are assigned to activations,


565
00:27:38.323 --> 00:27:41.260 line:-1 position:50%
with predicates that are
triggered for different roles


566
00:27:41.260 --> 00:27:44.363 line:-1 position:50%
via management properties.


567
00:27:44.363 --> 00:27:47.799 line:-1 position:50%
When a device is assigned to
a teacher, the server sends only


568
00:27:47.799 --> 00:27:49.935 line:-1 position:50%
a management properties
declaration


569
00:27:49,935 --> 00:27:52,871 line:-1
with the teacher's roles,
which triggers activation


570
00:27:52,871 --> 00:27:56,375 line:-1
of the configurations
for those roles.


571
00:27:56.375 --> 00:27:58.844 line:-1 position:50%
This method minimizes
the overall server


572
00:27:58,844 --> 00:28:01,847 line:-1
and network traffic
and reduces the complexity


573
00:28:01.847 --> 00:28:05.617 line:-1 position:50%
of making rapid changes
to device state.


574
00:28:05,617 --> 00:28:07,953 line:-1
Let's go back
to our school example.


575
00:28:07.953 --> 00:28:11.590 line:-1 position:50%
The server will preload the
following sets of declarations:


576
00:28:11,590 --> 00:28:13,992 line:-1
two activation/configuration
pairs


577
00:28:13.992 --> 00:28:17.362 line:-1 position:50%
that set up the Wi-Fi network
for each division.


578
00:28:17.362 --> 00:28:19.865 line:-1 position:50%
Then, we have an
activation/configuration pair


579
00:28:19,865 --> 00:28:23,001 line:-1
for the IT admin role,
that installs a mail account.


580
00:28:23,001 --> 00:28:26,071 position:50%
Finally, we have an activation
and configuration


581
00:28:26,071 --> 00:28:29,341 position:50%
that installs
a subscribed calendar.


582
00:28:29,341 --> 00:28:32,444 position:50%
Each activation has a predicate
that tests the division


583
00:28:32,444 --> 00:28:36,515 line:0
or function's name using
the roles management property.


584
00:28:36,515 --> 00:28:39,384 position:50%
When initially loaded
on an unassigned device,


585
00:28:39,384 --> 00:28:44,189 line:0
all the predicates evaluate
to false, so nothing is applied.


586
00:28:44,189 --> 00:28:48,427 line:-1
Now, let's examine what happens
on the day of assignment.


587
00:28:48.427 --> 00:28:50.696 line:-1 position:50%
All the server needs to do
is create


588
00:28:50.696 --> 00:28:52.598 line:-1 position:50%
management properties
declarations


589
00:28:52.598 --> 00:28:55.467 line:-1 position:50%
customized to each teacher.


590
00:28:55,467 --> 00:28:59,938 line:-1
Teacher one has a roles property
that lists Lower and Sports.


591
00:28:59,938 --> 00:29:05,210 line:0
Teacher two has a roles property
that lists Upper and IT Admin.


592
00:29:05,210 --> 00:29:07,479 line:0
When these declarations
are separately sent


593
00:29:07,479 --> 00:29:09,281 position:50%
to each assigned device,


594
00:29:09,281 --> 00:29:13,418 position:50%
the preloaded activations
will all be reevaluated.


595
00:29:13,418 --> 00:29:16,555 line:0
So teacher one's device
has the configurations


596
00:29:16,555 --> 00:29:20,325 position:50%
for Lower and Sports
roles activated.


597
00:29:20,325 --> 00:29:23,195 line:0
And teacher two's device
has the configurations


598
00:29:23,195 --> 00:29:27,199 line:0
for the Upper and IT Admin
roles activated.


599
00:29:27,199 --> 00:29:29,868 line:0
Only a single declaration
is needed to trigger


600
00:29:29,868 --> 00:29:33,438 line:0
the application
of many configurations.


601
00:29:33,438 --> 00:29:34,773 line:0
Finally, let's examine


602
00:29:34,773 --> 00:29:37,643 line:0
what happens when
a teacher changes roles.


603
00:29:37,643 --> 00:29:40,512 line:0
In this case, teacher two
has become a sports coach


604
00:29:40,512 --> 00:29:43,448 line:0
in addition
to their existing roles.


605
00:29:43,448 --> 00:29:45,283 line:0
The management
properties declaration


606
00:29:45,283 --> 00:29:47,919 position:50%
for the teacher's assigned
device is now updated


607
00:29:47,919 --> 00:29:50,956 position:50%
to include
the additional role name.


608
00:29:50,956 --> 00:29:53,458 position:50%
When that declaration
is updated on the device,


609
00:29:53,458 --> 00:29:56,328 position:50%
all the activations
are reevaluated.


610
00:29:56,328 --> 00:29:58,997 line:0
In this case, the subscribed
calendar configuration


611
00:29:58,997 --> 00:30:01,733 line:0
for the new Sports role
will be applied.


612
00:30:01,733 --> 00:30:06,838 position:50%
Again, only a single declaration
change is needed as a trigger.


613
00:30:06,838 --> 00:30:07,973 line:-1
This illustrates


614
00:30:07.973 --> 00:30:10.108 line:-1 position:50%
how the management
properties declaration


615
00:30:10.108 --> 00:30:13.512 line:-1 position:50%
provides a powerful way
to quickly and easily switch


616
00:30:13,512 --> 00:30:16,682 line:-1
between sets of configurations
on a device,


617
00:30:16.682 --> 00:30:18.817 line:-1 position:50%
so that complex
server-side logic


618
00:30:18,817 --> 00:30:23,555 line:-1
can translate into simple
state changes on the device.


619
00:30:23,555 --> 00:30:25,824 line:-1
Now, let's wrap up.


620
00:30:25.824 --> 00:30:29.027 line:-1 position:50%
We have extended the scope of
declarative device management


621
00:30:29,027 --> 00:30:34,499 line:-1
on iOS 16, tvOS 16,
and macOS Ventura,


622
00:30:34.499 --> 00:30:37.402 line:-1 position:50%
as well as making it available
for all applicable types


623
00:30:37,402 --> 00:30:41,173 line:-1
of MDM enrollment,
including Shared iPad.


624
00:30:41.173 --> 00:30:45.077 line:-1 position:50%
This provides full support for
declarative device management


625
00:30:45.077 --> 00:30:49.948 line:-1 position:50%
across all Apple devices
that support MDM.


626
00:30:49.948 --> 00:30:53.919 line:-1 position:50%
We have added new status items
for passcode, accounts,


627
00:30:53.919 --> 00:30:56.321 line:-1 position:50%
and MDM-installed apps.


628
00:30:56.321 --> 00:31:00.358 line:-1 position:50%
The MDM-installed app status
provides a great solution


629
00:31:00.358 --> 00:31:03.895 line:-1 position:50%
for one of MDM's
key bottlenecks.


630
00:31:03.895 --> 00:31:06.798 line:-1 position:50%
Finally, we have enhanced
the predicate syntax


631
00:31:06.798 --> 00:31:10.102 line:-1 position:50%
to make it more extensible
and easy to use


632
00:31:10,102 --> 00:31:13,305 line:-1
and added the new management
properties declaration


633
00:31:13.305 --> 00:31:16.007 line:-1 position:50%
that gives servers
even more opportunity


634
00:31:16.007 --> 00:31:19.811 line:-1 position:50%
to move complex business logic
to the device.


635
00:31:19.811 --> 00:31:22.414 line:-1 position:50%
Now is the time to add
declarative device management


636
00:31:22.414 --> 00:31:24.049 line:-1 position:50%
to your products.


637
00:31:24,049 --> 00:31:26,284 line:-1
And we're excited to learn
what you'll do


638
00:31:26,284 --> 00:31:28,587 line:-1
to reimagine device
management solutions


639
00:31:28,587 --> 00:31:32,357 line:-1
using declarative
device management!


640
00:31:32.357 --> 00:31:35.627 line:-1 position:50%
As always, your feedback
is greatly appreciated.


641
00:31:35.627 --> 00:31:38.463 line:-1 position:50%
Thank you and enjoy
the rest of WWDC.


642
00:31:38,463 --> 00:31:43,568 size:2% position:90% line:0
♪ ♪

