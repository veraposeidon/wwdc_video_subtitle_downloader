2
00:00:00.334 --> 00:00:06.340 line:-1 align:center
[upbeat music]


3
00:00:09,309 --> 00:00:13,313 line:-2
Ron Santos: Hey, hope you're well.
I'm Ron Santos, an input engineer.


4
00:00:13.347 --> 00:00:16.550 line:-2 align:center
Today I’m here to talk to you
about capturing machine-readable codes


5
00:00:16.583 --> 00:00:18.285 line:-1 align:center
and text from a video feed,


6
00:00:18,318 --> 00:00:21,722 line:-1
or, as we like to call it, data scanning.


7
00:00:21.755 --> 00:00:24.124 line:-1 align:center
What exactly do we mean by data scanning?


8
00:00:24.157 --> 00:00:28.662 line:-2 align:center
It’s simply a way of using a sensor,
like a camera, to read data.


9
00:00:29.763 --> 00:00:32.199 line:-2 align:center
Typically that data comes
in the form of text.


10
00:00:32.232 --> 00:00:35.035 line:-2 align:center
For example,
a receipt with interesting information


11
00:00:35.068 --> 00:00:38.338 line:-1 align:center
like telephone numbers, dates, and prices.


12
00:00:39.706 --> 00:00:42.709 line:-2 align:center
Or maybe data comes
as a machine-readable code,


13
00:00:42.743 --> 00:00:45.612 line:-1 align:center
like the ubiquitous QR code.


14
00:00:45,646 --> 00:00:48,282 line:-2
You’ve probably
used a data scanner before,


15
00:00:48.315 --> 00:00:51.218 line:-2 align:center
maybe in the Camera app
or by using the Live Text features


16
00:00:51,251 --> 00:00:53,720 line:-1
introduced in iOS 15.


17
00:00:53.754 --> 00:00:56.323 line:-2 align:center
And I bet you’ve used apps
in your day-to-day life


18
00:00:56,356 --> 00:00:59,760 line:-1
with their own custom scanning experience.


19
00:00:59.793 --> 00:01:02.596 line:-2 align:center
But what if you had
to build your own data scanner?


20
00:01:02,629 --> 00:01:04,198 line:-1
How would you do it?


21
00:01:04.231 --> 00:01:07.034 line:-2 align:center
The iOS SDK has more
than one solution for you,


22
00:01:07.067 --> 00:01:08.602 line:-1 align:center
depending on your needs.


23
00:01:09,303 --> 00:01:12,472 line:0
One option is that you could
use the AVFoundation framework


24
00:01:12,506 --> 00:01:14,241 line:0
to set up the camera graph,


25
00:01:14,274 --> 00:01:17,945 line:0
connecting inputs and outputs
to a session and configuring it


26
00:01:17,978 --> 00:01:22,549 line:0
to yield AVMetadataObjects
like machine-readable codes.


27
00:01:22,583 --> 00:01:25,752 line:0
If you also wanted to capture text,
another option would be


28
00:01:25,786 --> 00:01:29,990 align:center
to combine both the AVFoundation
and the Vision frameworks together.


29
00:01:30.023 --> 00:01:32.693 line:-2 align:center
In this diagram,
instead of metadata output,


30
00:01:32,726 --> 00:01:35,662 line:-1
you create video data output.


31
00:01:35.696 --> 00:01:40.200 line:-2 align:center
The video data output results
in the delivery of sample buffers


32
00:01:40,234 --> 00:01:43,170 line:-2
that can be fed
to the Vision framework for use with text


33
00:01:43.203 --> 00:01:47.774 line:-2 align:center
and barcode recognition requests,
resulting in Vision observation objects.


34
00:01:47,808 --> 00:01:49,843 line:0
For more on using Vision
for data scanning,


35
00:01:49,877 --> 00:01:54,581 align:center
check out the “Extract document data
using Vision” from WWDC21.


36
00:01:54.615 --> 00:01:58.519 line:-2 align:center
Okay, so that’s using AVFoundation
and Vision for data scanning.


37
00:01:58,552 --> 00:02:03,724 align:center
In iOS 16, we have a new option
that encapsulates all of that for you.


38
00:02:03,757 --> 00:02:07,494 align:center
Introducing the DataScannerViewController
in the VisionKit framework.


39
00:02:07.528 --> 00:02:10.964 line:-2 align:center
It combines the features
of AVFoundation and Vision


40
00:02:10.998 --> 00:02:13.934 line:-2 align:center
specifically for the purpose
of data scanning.


41
00:02:13,967 --> 00:02:17,671 line:-2
The DataScannerViewController users
are treated to features like


42
00:02:17.704 --> 00:02:22.176 line:-2 align:center
a live camera preview,
helpful guidance labels,


43
00:02:22.209 --> 00:02:24.411 line:-1 align:center
item highlighting,


44
00:02:24.444 --> 00:02:29.049 line:-2 align:center
tap-to-focus
which is also used for selection,


45
00:02:29,082 --> 00:02:32,920 line:-2
and lastly,
pinch-to-zoom to get a closer look.


46
00:02:34.221 --> 00:02:37.090 line:-2 align:center
And let’s talk about features
for developers like you.


47
00:02:37,124 --> 00:02:40,561 line:-2
The DataScannerViewController
is a UIViewController subclass


48
00:02:40,594 --> 00:02:42,896 line:-1
that you can present however you choose.


49
00:02:42.930 --> 00:02:46.466 line:-2 align:center
Coordinates for recognized items
are always in view coordinates,


50
00:02:46.500 --> 00:02:48.702 line:-2 align:center
saving you from converting
from image space,


51
00:02:48.735 --> 00:02:51.572 line:-2 align:center
to Vision coordinates,
to view coordinates.


52
00:02:51,605 --> 00:02:54,241 line:-2
You’ll also be able to limit
the active portion of the view


53
00:02:54.274 --> 00:02:58.979 line:-2 align:center
by specifying a region-of-interest,
which is also in view coordinates.


54
00:02:59,012 --> 00:03:01,815 line:-2
For text recognition,
you can specify content types


55
00:03:01,849 --> 00:03:04,918 line:-1
to limit the type of text you find.


56
00:03:04.952 --> 00:03:06.486 line:-1 align:center
And for machine-readable codes,


57
00:03:06,520 --> 00:03:10,290 line:-2
you can specify exactly
which symbologies to look for.


58
00:03:10.324 --> 00:03:12.359 line:-2 align:center
I get it;
I use your apps, and I understand


59
00:03:12.392 --> 00:03:15.929 line:-2 align:center
that data scanning is only a small portion
of their functionality.


60
00:03:15,963 --> 00:03:18,365 line:-1
But it could require a lot of code.


61
00:03:18.398 --> 00:03:20.067 line:-1 align:center
With DataScannerViewController,


62
00:03:20.100 --> 00:03:22.369 line:-2 align:center
our goal is
to perform the common tasks for you,


63
00:03:22,402 --> 00:03:24,638 line:-1
so you can focus your time elsewhere.


64
00:03:24.671 --> 00:03:28.008 line:-2 align:center
Next, I’ll walk you
through adding it to your app.


65
00:03:28.041 --> 00:03:31.011 line:-2 align:center
Let’s start
with the privacy usage description.


66
00:03:31,044 --> 00:03:34,448 line:-2
When apps try to capture video,
iOS asks the user


67
00:03:34.481 --> 00:03:38.085 line:-2 align:center
to grant their explicit permission
to access the camera.


68
00:03:38,118 --> 00:03:42,256 line:-2
You’ll want to provide a descriptive
message justifying your need.


69
00:03:42.289 --> 00:03:45.759 line:-2 align:center
To do that,
add a “privacy - camera usage description”


70
00:03:45,792 --> 00:03:48,095 line:-1
to your app’s Info.plist file.


71
00:03:48.128 --> 00:03:52.966 line:-2 align:center
Remember, be as descriptive as possible,
so users know what they’re agreeing to.


72
00:03:53.000 --> 00:03:55.102 line:-1 align:center
Now onto the code.


73
00:03:55.135 --> 00:03:57.504 line:-2 align:center
Wherever you would like
to present a data scanner,


74
00:03:57.538 --> 00:03:59.773 line:-1 align:center
start by importing VisionKit.


75
00:04:01.008 --> 00:04:05.012 line:-2 align:center
Next, because data scanning
isn’t supported on all devices,


76
00:04:05.045 --> 00:04:08.549 line:-2 align:center
use the isSupported class property
to hide any buttons or menus


77
00:04:08.582 --> 00:04:10.217 line:-1 align:center
exposing the functionality,


78
00:04:10,250 --> 00:04:13,620 line:-2
so users aren’t presented
with something they can’t use.


79
00:04:14,888 --> 00:04:19,259 line:-2
If you’re curious,
any 2018 and newer iPhone and iPad devices


80
00:04:19,293 --> 00:04:22,396 line:-2
with the Apple Neural Engine
support data scanning.


81
00:04:22,429 --> 00:04:24,932 line:-2
You’ll also want
to check for availability.


82
00:04:24.965 --> 00:04:27.801 line:-1 align:center
Recall the privacy usage description?


83
00:04:27,835 --> 00:04:31,572 line:-2
Scanning is available if the user
approves the app for camera access


84
00:04:31,605 --> 00:04:34,374 line:-2
and if the device is free
of any restrictions,


85
00:04:34,408 --> 00:04:37,110 line:-2
like the Camera access restriction
set here,


86
00:04:37,144 --> 00:04:41,081 line:-2
in Screen Time’s Content
& Privacy Restrictions.


87
00:04:41,114 --> 00:04:43,584 line:-2
Now you’re ready
to configure an instance.


88
00:04:43.617 --> 00:04:47.254 line:-2 align:center
That’s done by first specifying the types
of data you’re interested in.


89
00:04:47.287 --> 00:04:51.458 line:-2 align:center
For example,
you can scan for both QR codes and text.


90
00:04:52,559 --> 00:04:55,829 line:-2
You can optionally pass a list
of languages for the text recognizer


91
00:04:55.863 --> 00:04:59.099 line:-2 align:center
to use as a hint
for various processing aspects,


92
00:04:59,132 --> 00:05:01,201 line:-1
like language correction.


93
00:05:01.235 --> 00:05:04.805 line:-2 align:center
If you have an idea what languages
to expect, list them out.


94
00:05:04.838 --> 00:05:08.308 line:-2 align:center
It’s especially useful when two languages
have similar looking scripts.


95
00:05:08.342 --> 00:05:10.244 line:-1 align:center
If you do not provide any languages,


96
00:05:10.277 --> 00:05:13.947 line:-2 align:center
the user’s preferred languages
are used by default.


97
00:05:13.981 --> 00:05:17.050 line:-2 align:center
You can also request
a specific text content type.


98
00:05:17.084 --> 00:05:20.554 line:-2 align:center
In this example,
I want my scanner to look for URLs.


99
00:05:20.587 --> 00:05:23.056 line:-2 align:center
Now that you stated the types
of data to recognize,


100
00:05:23,090 --> 00:05:26,193 line:-1
you can create your DataScanner instance.


101
00:05:26,226 --> 00:05:29,630 line:-2
In the previous example,
I specified a barcode symbology,


102
00:05:29.663 --> 00:05:33.267 line:-2 align:center
a recognition language,
and a text content type.


103
00:05:33.300 --> 00:05:37.471 line:-2 align:center
Let me take a moment to explain
the other options for each of those.


104
00:05:37,504 --> 00:05:41,108 line:-2
For barcode symbologies,
we support all the same symbologies


105
00:05:41,141 --> 00:05:43,877 line:-1
as Vision’s barcode detector.


106
00:05:43.911 --> 00:05:46.980 line:-2 align:center
In terms of languages,
as part of the LiveText feature,


107
00:05:47,014 --> 00:05:50,150 line:-2
DataScannerViewController
supports the same exact languages.


108
00:05:50.184 --> 00:05:55.455 line:-2 align:center
And in iOS 16, I’m happy to say we’re
adding support for Japanese and Korean.


109
00:05:55,489 --> 00:05:58,325 line:-2
Of course,
this can change again in future.


110
00:05:58,358 --> 00:06:00,694 line:-2
So use the
supportedTextRecognitionLanguages


111
00:06:00.727 --> 00:06:04.498 line:-2 align:center
class property to retrieve
the most up to date list.


112
00:06:04.531 --> 00:06:07.868 line:-2 align:center
Finally, when scanning for text
with specific semantic meaning,


113
00:06:07.901 --> 00:06:10.971 line:-2 align:center
the DataScannerViewController
can find these seven types.


114
00:06:11.905 --> 00:06:14.908 line:-2 align:center
We’re now ready to present
the Data Scanner to the user.


115
00:06:14,942 --> 00:06:18,846 line:-2
Present it like any other view controller,
going fullscreen,


116
00:06:18,879 --> 00:06:22,883 line:-2
using a sheet, or adding it
to another view hierarchy altogether.


117
00:06:22,916 --> 00:06:24,184 line:-1
It’s all up to you.


118
00:06:24.218 --> 00:06:26.520 line:-2 align:center
Afterwards,
when presentation completes,


119
00:06:26,553 --> 00:06:29,890 line:-2
call startScanning()
to begin looking for data.


120
00:06:29.923 --> 00:06:32.626 line:-2 align:center
So now I want to take a step back
and spend some time going


121
00:06:32.659 --> 00:06:35.729 line:-2 align:center
over Data Scanner’s
initialization parameters.


122
00:06:35.762 --> 00:06:38.365 line:-1 align:center
I used one here, recognizedDataTypes.


123
00:06:38,398 --> 00:06:42,169 line:-2
But there are others that can
help you customize your experience.


124
00:06:43,136 --> 00:06:44,805 line:-1
Let’s go through each one.


125
00:06:44,838 --> 00:06:49,243 line:-2
recognizedDataTypes allows you
to specify what kind of data to recognize.


126
00:06:49.276 --> 00:06:52.946 line:-2 align:center
Text, machine-readable codes,
and what types of each.


127
00:06:52.980 --> 00:06:56.183 line:-2 align:center
qualityLevel can be balanced,
fast, or accurate.


128
00:06:56,216 --> 00:06:59,353 line:-2
Fast will sacrifice resolution
in favor of speed in scenarios


129
00:06:59,386 --> 00:07:02,222 line:-2
where you expect large
and easily-legible items,


130
00:07:02,256 --> 00:07:04,024 line:-1
like text on signs.


131
00:07:04,057 --> 00:07:05,959 line:-1
Accurate will give you the best accuracy,


132
00:07:05.993 --> 00:07:10.998 line:-2 align:center
even with small items like
micro QR codes or tiny serial numbers.


133
00:07:11.031 --> 00:07:15.636 line:-2 align:center
I recommend starting with balanced,
which should work great for most cases.


134
00:07:15.669 --> 00:07:18.572 line:-2 align:center
recognizesMultipleItems
gives you the option to look


135
00:07:18,605 --> 00:07:20,774 line:-1
for one or more items in the frame,


136
00:07:20,807 --> 00:07:23,877 line:-2
like if you want
to scan multiple barcodes at a time.


137
00:07:23,911 --> 00:07:26,580 line:-2
When it’s false,
the center-most item is recognized


138
00:07:26.613 --> 00:07:29.950 line:-1 align:center
by default until the user taps elsewhere.


139
00:07:29.983 --> 00:07:33.153 line:-2 align:center
Enable high frame rate tracking
when you draw highlights.


140
00:07:33,187 --> 00:07:36,190 line:-2
It allows the highlights
to follow items as closely as possible


141
00:07:36,223 --> 00:07:39,927 line:-2
when the camera moves
or the scene changes.


142
00:07:39.960 --> 00:07:43.130 line:-1 align:center
Enable pinch-to-zoom or disable it.


143
00:07:43.163 --> 00:07:47.434 line:-2 align:center
We also have methods you can use
to modify the zoom level yourself.


144
00:07:47,467 --> 00:07:49,870 align:center
When you enable guidance,
labels show at the top


145
00:07:49,903 --> 00:07:52,806 align:center
of the screen to help direct the user.


146
00:07:52,840 --> 00:07:56,877 align:center
And, finally, you can enable
system highlighting if you need it,


147
00:07:56,910 --> 00:07:59,546 align:center
or you can disable it to draw
your own custom highlighting.


148
00:08:00.447 --> 00:08:02.349 line:-2 align:center
Now that you know how
to present the data scanner,


149
00:08:02.382 --> 00:08:04.985 line:-2 align:center
let’s talk about how you’d
ingest the recognized items,


150
00:08:05,018 --> 00:08:07,888 line:-2
and also how you’d
draw your own custom highlights.


151
00:08:08,922 --> 00:08:12,326 line:-2
First, provide a delegate
to the data scanner.


152
00:08:12.359 --> 00:08:13.994 line:-1 align:center
Now that you have a delegate,


153
00:08:14,027 --> 00:08:17,097 line:-2
you can implement
the dataScanner didTapOn method,


154
00:08:17,130 --> 00:08:20,133 line:-2
which is called
when the user taps on an item.


155
00:08:20,167 --> 00:08:24,538 line:-2
With it, you’ll receive an instance
of this new type RecognizeItem.


156
00:08:24.571 --> 00:08:29.776 line:-2 align:center
RecognizedItem is an enum that holds text
or a barcode as an associated value.


157
00:08:29.810 --> 00:08:33.647 line:-2 align:center
For text, the transcription
property holds the recognized string.


158
00:08:33,680 --> 00:08:36,383 line:-2
For barcodes,
if its payload contains a string,


159
00:08:36.416 --> 00:08:39.720 line:-2 align:center
you can retrieve it
with the payloadStringValue.


160
00:08:39.753 --> 00:08:42.556 line:-2 align:center
Two other things you should know
about RecognizedItem:


161
00:08:42.589 --> 00:08:46.560 line:-2 align:center
First, each recognized item
has a unique identifier you can use


162
00:08:46.593 --> 00:08:48.896 line:-1 align:center
to track an item throughout its lifetime.


163
00:08:48.929 --> 00:08:51.498 line:-2 align:center
That lifetime starts
when the item is first seen


164
00:08:51,532 --> 00:08:54,001 line:-1
and ends when it’s no longer in view.


165
00:08:54.034 --> 00:08:57.204 line:-2 align:center
And second,
each RecognizedItem has a bounds property.


166
00:08:57.237 --> 00:08:59.907 line:-2 align:center
The bounds isn’t a rect,
but it consists of four points,


167
00:08:59.940 --> 00:09:01.441 line:-1 align:center
one for each corner.


168
00:09:01.475 --> 00:09:04.645 line:-2 align:center
Next, let’s talk
about three related delegate methods


169
00:09:04.678 --> 00:09:07.548 line:-2 align:center
that are called when recognized items
in the scene change.


170
00:09:07.581 --> 00:09:09.516 line:-1 align:center
The first is didAdd,


171
00:09:09,550 --> 00:09:12,753 line:-2
called when items
in the scene are newly recognized.


172
00:09:12,786 --> 00:09:15,255 line:-2
If you wanted to create
your own custom highlight,


173
00:09:15.289 --> 00:09:18.292 line:-1 align:center
you’d create one here for each new item.


174
00:09:18.325 --> 00:09:23.030 line:-2 align:center
You can keep track of the highlights
using the ID from its associated item.


175
00:09:23.063 --> 00:09:25.866 line:-2 align:center
And when adding your new view
to the view hierarchy,


176
00:09:25,899 --> 00:09:28,836 line:-2
add them
to DataScanner’s overlayContainerView,


177
00:09:28.869 --> 00:09:33.941 line:-2 align:center
so they appear above the camera preview,
but below any other supplemental chrome.


178
00:09:35.142 --> 00:09:37.477 line:-1 align:center
The next delegate method is didUpdate,


179
00:09:37.511 --> 00:09:40.614 line:-2 align:center
which is called when the items move
or the camera moves.


180
00:09:40.647 --> 00:09:44.551 line:-2 align:center
It can also be called when transcription
for recognized text change.


181
00:09:44,585 --> 00:09:47,554 line:-2
They change because
the longer the scanner sees the text,


182
00:09:47.588 --> 00:09:50.791 line:-2 align:center
the more accurate it’ll be
with its transcription.


183
00:09:50.824 --> 00:09:54.027 line:-2 align:center
Use the IDs from the updated items
to retrieve your highlights


184
00:09:54.061 --> 00:09:56.530 line:-1 align:center
from the dictionary you just created,


185
00:09:56.563 --> 00:10:00.767 line:-2 align:center
and then animate the views
to their newly updated bounds.


186
00:10:00.801 --> 00:10:03.437 line:-2 align:center
And finally,
the didRemove delegate method,


187
00:10:03,470 --> 00:10:07,040 line:-2
which is called when items
are no longer visible in the scene.


188
00:10:07,074 --> 00:10:09,977 line:-2
In this method,
you can forget about any highlight views


189
00:10:10,010 --> 00:10:12,479 line:-2
you associated
with the removed items,


190
00:10:12.513 --> 00:10:15.282 line:-2 align:center
and you can remove them
from the view hierarchy.


191
00:10:15.315 --> 00:10:18.218 line:-2 align:center
In summary, if you draw
your own highlights over items,


192
00:10:18.252 --> 00:10:20.320 line:-2 align:center
those three delegate methods
will be crucial


193
00:10:20,354 --> 00:10:23,323 line:-2
for you to control animating highlights
into the scene,


194
00:10:23.357 --> 00:10:26.927 line:-2 align:center
animating their movement,
and animating them out.


195
00:10:26.960 --> 00:10:29.096 line:-2 align:center
And for each of those three
previous delegate methods,


196
00:10:29,129 --> 00:10:33,333 line:-2
you’ll also be given an array
of all the items currently recognized.


197
00:10:33.367 --> 00:10:35.702 line:-2 align:center
That may come in handy
for text recognition


198
00:10:35,736 --> 00:10:38,705 line:-2
because the items are placed
in their natural reading order,


199
00:10:38.739 --> 00:10:41.775 line:-2 align:center
meaning the user would
read the item at index 0


200
00:10:41.808 --> 00:10:45.846 line:-1 align:center
before the item at index 1 and so on.


201
00:10:45,879 --> 00:10:48,515 line:-2
That’s an overview of how
to use the DataScannerViewController.


202
00:10:48,549 --> 00:10:53,287 line:-2
Before wrapping up, I wanted
to quickly mention a few other features,


203
00:10:53.320 --> 00:10:55.189 line:-1 align:center
like capturing photos.


204
00:10:55,222 --> 00:10:57,024 line:-1
You can call the capturePhoto method,


205
00:10:57.057 --> 00:11:01.428 line:-2 align:center
which will asynchronously return
a high quality UIImage.


206
00:11:02.462 --> 00:11:04.431 line:-2 align:center
And if you aren’t
creating custom highlights,


207
00:11:04.464 --> 00:11:07.234 line:-2 align:center
you might not need
these three delegate methods.


208
00:11:07,267 --> 00:11:10,704 line:-2
Instead, you can
use the recognizedItem property.


209
00:11:10,737 --> 00:11:15,742 line:-2
It’s an AsyncStream that will be
continuously updated as the scene changes.


210
00:11:17.845 --> 00:11:19.379 line:-1 align:center
Thanks for hanging out.


211
00:11:19.413 --> 00:11:21.882 line:-2 align:center
Remember,
the iOS SDK gives you options


212
00:11:21.915 --> 00:11:23.684 line:-1 align:center
for creating computer vision workflows


213
00:11:23.717 --> 00:11:26.854 line:-2 align:center
with the AVFoundation
and Vision frameworks.


214
00:11:26,887 --> 00:11:29,122 line:-2
But maybe you’re
creating an app that scans text


215
00:11:29,156 --> 00:11:32,025 line:-2
or machine-readable codes
with a live video feed,


216
00:11:32.059 --> 00:11:33.527 line:-1 align:center
like a Pick-and-pack app,


217
00:11:33,560 --> 00:11:36,697 line:-2
a back-of-the-warehouse app,
or a point-of-sale app.


218
00:11:36,730 --> 00:11:38,932 line:-2
If so, then give
the DataScannerViewController


219
00:11:38.966 --> 00:11:40.434 line:-1 align:center
in VisionKit a look.


220
00:11:40,467 --> 00:11:42,302 line:-1
As I went over today, it has a number


221
00:11:42.336 --> 00:11:45.706 line:-2 align:center
of initialization parameters
and delegate methods that you can use


222
00:11:45,739 --> 00:11:49,943 line:-2
to provide a custom experience
that matches your app’s style and needs.


223
00:11:50,944 --> 00:11:53,113 align:center
And finally,
I wanted to give a shout out


224
00:11:53,146 --> 00:11:55,849 align:center
to the “Add Live Text interaction
to your app” session,


225
00:11:55,883 --> 00:12:00,487 align:center
where you can learn about VisionKit’s
Live Text abilities for static images.


226
00:12:01,555 --> 00:12:03,357 line:-1
Until next time, peace.


227
00:12:03,390 --> 00:12:08,662 align:center
[upbeat music]

