2
00:00:00,501 --> 00:00:08,509 line:-1
♪ ♪


3
00:00:10.043 --> 00:00:13.447 line:-2 align:center
Jeff Nadeau: Hello, and welcome
to What's new in AppKit.


4
00:00:13,480 --> 00:00:16,717 line:-2
I'm Jeff Nadeau,
an engineer on the AppKit team,


5
00:00:16.750 --> 00:00:19.686 line:-2 align:center
and I'm here to share the latest
and greatest in building apps


6
00:00:19.720 --> 00:00:21.622 line:-1 align:center
for macOS Ventura.


7
00:00:21,655 --> 00:00:24,591 line:-2
It's never been a more exciting time
for the Mac,


8
00:00:24.625 --> 00:00:28.195 line:-2 align:center
between the performance
and efficiency of Apple Silicon,


9
00:00:28,228 --> 00:00:29,897 line:-1
the power of macOS,


10
00:00:29,930 --> 00:00:33,567 line:-2
and an app ecosystem
that's richer than ever.


11
00:00:33.600 --> 00:00:36.236 line:-2 align:center
Your apps are an important part of
that story,


12
00:00:36.270 --> 00:00:38.305 line:-2 align:center
and we're continuing
to push AppKit forward


13
00:00:38.338 --> 00:00:41.742 line:-2 align:center
so that you can keep building
the very best apps.


14
00:00:42,342 --> 00:00:45,179 line:-1
I'll be covering a wide variety of topics,


15
00:00:45.212 --> 00:00:47.915 line:-1 align:center
starting with Stage Manager,


16
00:00:47.948 --> 00:00:50.417 line:-1 align:center
moving on to Preferences,


17
00:00:50.450 --> 00:00:52.753 line:-1 align:center
followed by controls,


18
00:00:52,786 --> 00:00:54,688 line:-1
SF Symbols,


19
00:00:54,721 --> 00:00:57,257 line:-1
and sharing.


20
00:00:57,291 --> 00:00:59,259 line:-1
I'll start off with Stage Manager.


21
00:01:00,460 --> 00:01:04,398 line:-2
Stage Manager cleans up inactive windows
in your workspace


22
00:01:04,431 --> 00:01:07,701 line:-2
while your active window
takes center stage.


23
00:01:07,734 --> 00:01:11,071 line:-2
For a more advanced workflow,
you can also pull windows together


24
00:01:11.104 --> 00:01:14.541 line:-2 align:center
into sets
which swap in and out as a group.


25
00:01:15.709 --> 00:01:19.847 line:-2 align:center
This has an impact on how
your app windows present themselves.


26
00:01:19.880 --> 00:01:23.016 line:-2 align:center
Stage Manager is trying to keep
the working space tidy,


27
00:01:23,050 --> 00:01:24,885 line:-1
so when a new window is presented,


28
00:01:24.918 --> 00:01:29.156 line:-2 align:center
existing windows will exit the stage
to make room.


29
00:01:29.189 --> 00:01:33.293 line:-2 align:center
That's what you want for
"primary" windows, like your documents.


30
00:01:33.327 --> 00:01:38.599 line:-2 align:center
Auxiliary windows like panels,
popovers, settings, and others


31
00:01:38,632 --> 00:01:42,970 line:-2
should continue to appear
above the existing windows.


32
00:01:43,003 --> 00:01:45,472 line:-1
NSWindow already has a lot of APIs


33
00:01:45.506 --> 00:01:49.343 line:-2 align:center
that can help you define the behavior
you'd like for a particular window.


34
00:01:51,545 --> 00:01:54,915 line:-2
By default,
Stage Manager won't swap out other windows


35
00:01:54.948 --> 00:01:58.318 line:-2 align:center
if you present a floating panel,
a modal window,


36
00:01:58,352 --> 00:02:01,388 line:-2
or a window with
a preference-style toolbar.


37
00:02:03,824 --> 00:02:07,628 line:-2
Stage Manager also respects
your window's collectionBehavior.


38
00:02:07,661 --> 00:02:10,264 line:-2
This OptionSet defines how
your window behaves


39
00:02:10.297 --> 00:02:12.599 line:-1 align:center
in spaces and full screen,


40
00:02:12,633 --> 00:02:15,102 line:-2
and it now also helps Stage Manager
understand


41
00:02:15.135 --> 00:02:18.639 line:-2 align:center
that a window is considered
to be auxiliary or floating.


42
00:02:19.540 --> 00:02:23.977 line:-2 align:center
If a window's collectionBehavior
includes the auxiliary, moveToActiveSpace,


43
00:02:24,011 --> 00:02:26,947 line:-1
stationary, or transient options,


44
00:02:26.980 --> 00:02:30.784 line:-2 align:center
then it won't displace
the active window in center stage.


45
00:02:31,718 --> 00:02:34,454 line:-2
By setting up your windows
with the right collection behaviors,


46
00:02:34,488 --> 00:02:37,257 line:-2
you can make sure
that they work great in every context,


47
00:02:37,291 --> 00:02:42,829 line:-2
whether it's a desktop space,
full screen, or now in Stage Manager.


48
00:02:42,863 --> 00:02:46,934 line:-2
Next, I'd like to cover some
important changes to Preferences.


49
00:02:46.967 --> 00:02:49.937 line:-2 align:center
In macOS Ventura,
the System Preferences app


50
00:02:49,970 --> 00:02:52,239 line:-1
has taken on a whole new look,


51
00:02:52,272 --> 00:02:57,277 line:-2
with a refreshed navigation scheme
and all-new visual design.


52
00:02:57,311 --> 00:03:00,948 line:-2
To align with the settings experience
on our other operating systems,


53
00:03:00,981 --> 00:03:04,451 line:-2
we've also renamed the app
to System Settings.


54
00:03:05,219 --> 00:03:08,222 line:-2
These changes extend
to your application too.


55
00:03:08.255 --> 00:03:11.091 line:-2 align:center
For example,
you might have a preference pane bundle


56
00:03:11.124 --> 00:03:14.695 line:-2 align:center
that appears in
the System Preferences app today.


57
00:03:14,728 --> 00:03:18,532 line:-2
You might also have
a settings area inside of your app.


58
00:03:18,565 --> 00:03:21,935 line:-2
There's also a new design system
for control-rich forms


59
00:03:21,969 --> 00:03:26,640 line:-2
that may be the perfect fit
for settings interfaces or inspectors.


60
00:03:26,673 --> 00:03:29,209 line:-1
If you ship a custom prefpane bundle,


61
00:03:29.243 --> 00:03:32.145 line:-2 align:center
it'll continue to work
with the new Settings app.


62
00:03:32.179 --> 00:03:34.748 line:-2 align:center
Your custom pane will appear
in the sidebar,


63
00:03:34,781 --> 00:03:36,617 line:-1
and the app will load up your bundle


64
00:03:36,650 --> 00:03:40,988 line:-2
and present your settings UI
just like it did in Monterey and earlier.


65
00:03:41,855 --> 00:03:44,691 line:-2
To match the newly-renamed
System Settings app,


66
00:03:44,725 --> 00:03:48,529 line:-2
we've renamed in-app preferences
to "settings" as well.


67
00:03:48.562 --> 00:03:52.399 line:-2 align:center
To help get you started,
once you build against the newest SDK,


68
00:03:52.432 --> 00:03:55.702 line:-2 align:center
AppKit will automatically update
the name of the "Preferences," menu item


69
00:03:55,736 --> 00:03:57,804 line:-1
in your app menu.


70
00:03:57,838 --> 00:04:02,042 line:-2
However, you might be using the word
"Preferences" in a number of other places,


71
00:04:02,075 --> 00:04:04,645 line:-1
like window titles, descriptive labels,


72
00:04:04.678 --> 00:04:07.414 line:-1 align:center
or other controls around your app.


73
00:04:07,447 --> 00:04:11,552 line:-2
Search through your localized text
to find places that also need updating.


74
00:04:12,986 --> 00:04:18,058 line:-2
For example, TextEdit's settings window
used to be called "preferences"


75
00:04:18,091 --> 00:04:23,030 line:-2
and we chose to rename that window to
Settings to match the rest of the system.


76
00:04:23,063 --> 00:04:26,333 line:-2
The System Settings app also uses
a new interface style


77
00:04:26.366 --> 00:04:29.269 line:-2 align:center
for presenting
all of its configuration options.


78
00:04:29.303 --> 00:04:32.239 line:-2 align:center
Settings interfaces
are often control-heavy,


79
00:04:32,272 --> 00:04:36,176 line:-2
so this style is designed to present forms
containing many controls


80
00:04:36.210 --> 00:04:39.079 line:-1 align:center
in a clear and well-organized fashion.


81
00:04:40.948 --> 00:04:44.184 line:-2 align:center
Since the form itself provides a lot
of visual structure,


82
00:04:44,218 --> 00:04:46,854 line:-1
many system controls adapt to this context


83
00:04:46,887 --> 00:04:49,389 line:-1
by drawing with a lower visual weight,


84
00:04:49,423 --> 00:04:53,293 line:-2
while revealing more prominent
control backings on rollover.


85
00:04:54,828 --> 00:04:57,764 line:-2
If you want to write interfaces
that use this new design,


86
00:04:57.798 --> 00:05:00.901 line:-1 align:center
SwiftUI makes it super easy.


87
00:05:00.934 --> 00:05:03.537 line:-1 align:center
Place your controls into a Form view,


88
00:05:03,570 --> 00:05:06,640 line:-2
and then apply
the "insetGrouped" form style.


89
00:05:06,673 --> 00:05:08,842 line:-1
SwiftUI takes care of the rest:


90
00:05:08,876 --> 00:05:11,211 line:-1
the visual style, scrolling behavior,


91
00:05:11,245 --> 00:05:15,015 line:-2
and layout of the form
are all applied automatically.


92
00:05:16,650 --> 00:05:18,952 line:-2
If you haven't gotten started
with SwiftUI yet,


93
00:05:18,986 --> 00:05:22,089 line:-2
this is a great opportunity
to give it a try.


94
00:05:22,122 --> 00:05:26,360 line:-2
A Settings window is often
a standalone area of your app's interface,


95
00:05:26,393 --> 00:05:29,363 line:-2
so it's the perfect place
to do some incremental adoption.


96
00:05:30,264 --> 00:05:34,434 line:0
We've even created a video
about using SwiftUI and AppKit together,


97
00:05:34,468 --> 00:05:37,538 align:center
which is a great place to learn more.


98
00:05:37,571 --> 00:05:42,176 line:-2
Next, I'd like to share some updates
to our controls.


99
00:05:42.209 --> 00:05:45.345 line:-2 align:center
We've got a lot of exciting
control enhancements to share,


100
00:05:45.379 --> 00:05:49.449 line:-2 align:center
starting with a new control
called NSComboButton.


101
00:05:49,483 --> 00:05:52,085 line:-1
We've also updated NSColorWell,


102
00:05:52,119 --> 00:05:55,689 line:-2
made some enhancements
to the NSToolbar API,


103
00:05:55.722 --> 00:05:58.525 line:-1 align:center
adjusted the design of NSAlert,


104
00:05:58,559 --> 00:06:02,629 line:-2
and improved the performance
of NSTableView.


105
00:06:02.663 --> 00:06:05.566 line:-1 align:center
First, NSComboButton.


106
00:06:05,599 --> 00:06:09,469 line:-2
NSComboButton is all about
combining an immediate button action,


107
00:06:09.503 --> 00:06:11.738 line:-1 align:center
and a menu for additional options.


108
00:06:13.240 --> 00:06:15.142 line:-1 align:center
In today's control landscape,


109
00:06:15,175 --> 00:06:18,545 line:-2
you'd traditionally use
a button to perform some immediate action,


110
00:06:18,579 --> 00:06:23,684 line:-2
or you would use a pull-down button
to show a menu with many options.


111
00:06:23.717 --> 00:06:28.589 line:-2 align:center
NSComboButton combines both elements
into a single control,


112
00:06:28,622 --> 00:06:33,694 line:-2
which joins a primary action
and a pull-down menu together.


113
00:06:33,727 --> 00:06:37,664 line:-2
This design is commonly used
for use cases like this one in Mail,


114
00:06:37,698 --> 00:06:40,667 line:-2
where the predicted folder
is a single click away,


115
00:06:40.701 --> 00:06:44.738 line:-2 align:center
but you can still access a menu
to file your messages anywhere.


116
00:06:44.771 --> 00:06:47.641 line:-2 align:center
Previously,
you might've assembled something like this


117
00:06:47.674 --> 00:06:50.244 line:-1 align:center
using the segmented control API,


118
00:06:50.277 --> 00:06:52.913 line:-2 align:center
but now there's
a dedicated control for it.


119
00:06:53.881 --> 00:06:56.416 line:-1 align:center
NSComboButton comes in two styles,


120
00:06:56,450 --> 00:07:00,287 line:-2
which dictate both the appearance
and the behavior of the button.


121
00:07:00.320 --> 00:07:02.623 line:-1 align:center
The default style is called "split,"


122
00:07:02.656 --> 00:07:06.426 line:-2 align:center
and it includes a separate arrow portion
just for the menu.


123
00:07:08,262 --> 00:07:13,600 line:-2
The second style, "unified,"
looks much more like an ordinary button.


124
00:07:13,634 --> 00:07:16,436 line:-2
This style performs
its primary action on click,


125
00:07:16,470 --> 00:07:20,174 line:-2
and it presents its menu
if you click-and-hold.


126
00:07:20,207 --> 00:07:21,942 line:-1
And that's NSComboButton.


127
00:07:21.975 --> 00:07:25.379 line:-2 align:center
We've also got some great new updates
to NSColorWell,


128
00:07:25,412 --> 00:07:27,781 line:-1
starting with a brand-new look.


129
00:07:27,814 --> 00:07:31,151 line:-2
In place of the classic square
gradient appearance,


130
00:07:31.185 --> 00:07:33.720 line:-1 align:center
the color well has adopted a new style


131
00:07:33.754 --> 00:07:37.591 line:-2 align:center
reminiscent of other button bezels
across the system.


132
00:07:37,624 --> 00:07:40,060 line:-1
This change is completely automatic,


133
00:07:40.093 --> 00:07:43.597 line:-2 align:center
so you don't need to do any adoption
to get this modern appearance.


134
00:07:44.231 --> 00:07:47.334 line:-2 align:center
However, we know that color picking
is an important part


135
00:07:47.367 --> 00:07:49.937 line:-1 align:center
of creative and professional applications,


136
00:07:49,970 --> 00:07:51,505 line:-1
so we've gone a step further


137
00:07:51,538 --> 00:07:54,508 line:-2
and introduced two new styles
for NSColorWell.


138
00:07:55,843 --> 00:07:58,278 line:-1
The first is a minimal style,


139
00:07:58,312 --> 00:08:00,747 line:-2
which shows a disclosure
arrow on rollover,


140
00:08:00.781 --> 00:08:03.116 line:-2 align:center
and provides a quick
color picking experience


141
00:08:03,150 --> 00:08:07,254 line:-2
by showing a popover to immediately
select from a palette of colors,


142
00:08:07.287 --> 00:08:11.525 line:-2 align:center
with the option to break out
into the full NSColorPanel.


143
00:08:11,558 --> 00:08:14,995 line:-2
By default,
it uses a system standard grid of colors,


144
00:08:15.028 --> 00:08:16.797 line:-1 align:center
but you can customize what appears here


145
00:08:16,830 --> 00:08:19,933 line:-2
if you've got a different UI
or palette in mind.


146
00:08:22,269 --> 00:08:24,705 line:-1
The second is an expanded style,


147
00:08:24.738 --> 00:08:27.941 line:-2 align:center
which you might recognize
from the iWork apps.


148
00:08:27,975 --> 00:08:30,944 line:-2
This style combines both
interaction models:


149
00:08:30.978 --> 00:08:33.480 line:-2 align:center
the well on the left has
the same disclosure arrow


150
00:08:33.514 --> 00:08:35.682 line:-1 align:center
and popover for quick picking,


151
00:08:35,716 --> 00:08:38,385 line:-2
while the button on the right
pulls up the full panel


152
00:08:38.418 --> 00:08:40.654 line:-1 align:center
for more detailed color picking.


153
00:08:43,123 --> 00:08:48,095 line:-2
And with that, NSColorWell now offers
three different ways to pick colors.


154
00:08:49,997 --> 00:08:55,035 line:-2
You can access these styles using the new
colorWellStyle property on NSColorWell,


155
00:08:55.068 --> 00:08:57.504 line:-1 align:center
which has cases for each style:


156
00:08:57,538 --> 00:09:00,941 line:-1
default, expanded, and minimal.


157
00:09:02.342 --> 00:09:05.879 line:-2 align:center
NSColorWell has also gained
a new target-and-action pair


158
00:09:05,913 --> 00:09:08,248 line:-1
for its "pulldown action."


159
00:09:08.282 --> 00:09:11.652 line:-2 align:center
This action determines what happens
when you click the pulldown portion


160
00:09:11,685 --> 00:09:15,088 line:-1
of a minimal or expanded color well.


161
00:09:15.122 --> 00:09:17.457 line:-2 align:center
By default,
these properties are nil,


162
00:09:17.491 --> 00:09:21.995 line:-2 align:center
which signifies that NSColorWell
should use the system-standard popover.


163
00:09:22,029 --> 00:09:24,398 line:-1
However, you can customize this action


164
00:09:24.431 --> 00:09:27.768 line:-2 align:center
and use it to present
your own custom popover,


165
00:09:27,801 --> 00:09:32,840 line:-2
Or you could even present a different
picking interface, like a menu.


166
00:09:32,873 --> 00:09:35,008 line:-1
And that's the new NSColorWell.


167
00:09:35.042 --> 00:09:39.580 line:-2 align:center
It's got a brand new look
and two new ways to quickly pick colors.


168
00:09:40.314 --> 00:09:42.850 line:-1 align:center
Next up, some news on NSToolbar,


169
00:09:42,883 --> 00:09:44,985 line:-2
where we've made a variety
of API enhancements


170
00:09:45,018 --> 00:09:47,821 line:-2
to give you better control
over customization


171
00:09:47,855 --> 00:09:50,824 line:-1
and increased flexibility for your layout.


172
00:09:51,725 --> 00:09:53,293 line:-1
On the customization front,


173
00:09:53,327 --> 00:09:55,095 line:-1
we've added two new delegate methods


174
00:09:55.128 --> 00:09:58.999 line:-2 align:center
to give you better control over
the customizability of your toolbar.


175
00:09:59.032 --> 00:10:03.604 line:-2 align:center
The first is
"toolbarImmovableItemIdentifiers".


176
00:10:03.637 --> 00:10:07.140 line:-2 align:center
If you implement this method
to return a set of item identifiers,


177
00:10:07,174 --> 00:10:11,378 line:-2
those items won't be movable
or removable by the user,


178
00:10:11.411 --> 00:10:14.781 line:-2 align:center
and they won't animate
when you enter customization mode.


179
00:10:16,183 --> 00:10:19,353 line:-2
For example,
the Mail app wants the Filter button


180
00:10:19.386 --> 00:10:22.990 line:-2 align:center
to always appear here,
above the message list.


181
00:10:23.023 --> 00:10:27.561 line:-2 align:center
Using this API, they can prevent it
from being moved away from this spot.


182
00:10:29,963 --> 00:10:35,636 line:-2
The second method is called "toolbar
itemIdentifier canBeInsertedAt."


183
00:10:35,669 --> 00:10:39,773 line:-2
This delegate method gives you veto power
over any particular reordering,


184
00:10:39.806 --> 00:10:43.343 line:-1 align:center
insertion, or removal from the toolbar.


185
00:10:43.377 --> 00:10:47.047 line:-2 align:center
You can use it to implement
your own set of customization rules –


186
00:10:47.080 --> 00:10:48.382 line:-1 align:center
for example,


187
00:10:48,415 --> 00:10:52,219 line:-2
you could create a toolbar item that's
allowed within one section of the toolbar,


188
00:10:52,252 --> 00:10:54,521 line:-2
but it's disallowed
within another section.


189
00:10:56,957 --> 00:11:00,093 line:0
You can now specify multiple
centered items for your toolbar


190
00:11:00,127 --> 00:11:03,664 line:0
using the new
centeredItemIdentifiers property.


191
00:11:03,697 --> 00:11:06,633 line:0
If your toolbar is customizable,
items in this set


192
00:11:06,667 --> 00:11:09,369 align:center
can still be added or removed
from the toolbar,


193
00:11:09,403 --> 00:11:12,806 align:center
but they can only be reordered
within the centered group.


194
00:11:12,840 --> 00:11:15,409 align:center
In this example,
the photo editing tools


195
00:11:15,442 --> 00:11:18,278 line:0
all stick together in the center
of the toolbar


196
00:11:18,312 --> 00:11:22,850 line:0
regardless of how many items are placed
in the leading and trailing sections.


197
00:11:23.584 --> 00:11:26.019 line:-2 align:center
Once your toolbar is customized
the way you like it,


198
00:11:26,053 --> 00:11:28,589 line:-1
you don't want the items to shift around,


199
00:11:28.622 --> 00:11:31.325 line:-2 align:center
and that can be difficult
for toolbar items that change meaning


200
00:11:31,358 --> 00:11:33,260 line:-1
based on some other state,


201
00:11:33,293 --> 00:11:35,929 line:-1
like the Mute and Unmute button in Mail,


202
00:11:35.963 --> 00:11:37.831 line:-1 align:center
which toggles when you click it.


203
00:11:39,433 --> 00:11:41,502 line:-1
Since the labels have different sizes,


204
00:11:41.535 --> 00:11:46.039 line:-2 align:center
the other items in the toolbar have to
shift around to accommodate the change.


205
00:11:48,542 --> 00:11:52,679 line:-2
In a scenario like this, you can
use the new possibleLabels property


206
00:11:52,713 --> 00:11:56,116 line:-2
on NSToolbarItem to provide a set
of the localized strings


207
00:11:56,149 --> 00:11:58,252 line:-1
that you'll use for the item.


208
00:11:59,887 --> 00:12:04,157 line:-2
NSToolbar will automatically size the item
to fit the longest label,


209
00:12:04.191 --> 00:12:08.829 line:-2 align:center
so your layout stays the same
even when the item is reconfigured.


210
00:12:08,862 --> 00:12:12,232 line:-1
Next, a design update for alerts.


211
00:12:12,266 --> 00:12:15,269 line:-1
Alerts on macOS use a compact layout,


212
00:12:15,302 --> 00:12:17,738 line:-2
which is optimized
for a small amount of text


213
00:12:17,771 --> 00:12:20,807 line:-1
accompanied by a few clear choices.


214
00:12:20.841 --> 00:12:24.144 line:-2 align:center
And in general, that's a great way
to put together an alert.


215
00:12:24,178 --> 00:12:26,947 line:-1
Alerts work best with shorter text:


216
00:12:26,980 --> 00:12:29,483 line:-2
you can communicate your message
more directly,


217
00:12:29,516 --> 00:12:31,718 line:-2
and people are more likely to read
what you've written


218
00:12:31,752 --> 00:12:34,321 line:-2
before pushing their way
through the alert.


219
00:12:35,989 --> 00:12:39,593 line:-2
However, sometimes you really can't
shorten your description,


220
00:12:39.626 --> 00:12:43.830 line:-2 align:center
especially if you need to communicate
something complex and subtle,


221
00:12:43,864 --> 00:12:45,866 line:-1
like this Disk Utility alert,


222
00:12:45,899 --> 00:12:50,204 line:-2
which conveys a really important choice
about your filesystem data.


223
00:12:50,237 --> 00:12:54,575 line:-2
The compact layout just isn't optimal
for this situation.


224
00:12:54.608 --> 00:12:58.812 line:-2 align:center
For these cases, we've adapted NSAlert
to provide a wider layout


225
00:12:58,846 --> 00:13:01,582 line:-1
that's suitable for longer text.


226
00:13:01,615 --> 00:13:05,686 line:-2
This adaptation happens automatically
for alerts where the informative text


227
00:13:05,719 --> 00:13:09,923 line:-2
is too long to fit comfortably
in the compact size.


228
00:13:09.957 --> 00:13:12.659 line:-2 align:center
We'll also use this style
if you have an accessory view


229
00:13:12.693 --> 00:13:16.797 line:-2 align:center
that's too large to fit
in a compact alert window.


230
00:13:16,830 --> 00:13:19,800 line:-2
There's no need for your app
to opt in to this behavior –


231
00:13:19,833 --> 00:13:22,903 line:-1
it's applied automatically system-wide.


232
00:13:22,936 --> 00:13:25,005 line:-2
It's important to note
that the layout is determined


233
00:13:25,038 --> 00:13:26,974 line:-1
at the time you present the alert,


234
00:13:27,007 --> 00:13:29,743 line:-2
so an alert won't swap styles
if you modify it


235
00:13:29,776 --> 00:13:31,845 line:-1
while it's already on screen.


236
00:13:33.881 --> 00:13:37.684 line:-2 align:center
You should still aim to reduce the length
of your alert text wherever possible,


237
00:13:37.718 --> 00:13:40.220 line:-2 align:center
but this design update
will improve the user experience


238
00:13:40,254 --> 00:13:42,456 line:-1
for those cases where you can't.


239
00:13:43,657 --> 00:13:47,261 line:-2
Next, an important new feature
of NSTableView.


240
00:13:47,294 --> 00:13:51,999 line:-2
NSTableView is designed to efficiently
handle a very large number of rows,


241
00:13:52,032 --> 00:13:55,636 line:-2
by lazily populating
and reusing the views as you scroll.


242
00:13:56,370 --> 00:13:59,573 line:-2
However, for tables where each row
can have a different height,


243
00:13:59,606 --> 00:14:01,308 line:-1
that can be a challenge,


244
00:14:01,341 --> 00:14:04,178 line:-2
because in order to provide
a good scrolling experience


245
00:14:04,211 --> 00:14:06,280 line:-1
the table needs to know its total height


246
00:14:06,313 --> 00:14:10,083 line:-2
and the location of each row
in the scrolling region.


247
00:14:11,185 --> 00:14:15,889 line:-2
Historically, NSTableView does this by
sizing all of the rows in the table,


248
00:14:15,923 --> 00:14:19,526 line:-2
which can have an impact
on initial load times.


249
00:14:19,560 --> 00:14:22,963 line:-2
In macOS Ventura,
NSTableView achieves those goals


250
00:14:22.996 --> 00:14:25.866 line:-1 align:center
while providing much better performance.


251
00:14:27,968 --> 00:14:31,138 line:-2
Instead of eagerly calculating
the height for each row,


252
00:14:31.171 --> 00:14:33.974 line:-2 align:center
NSTableView now lazily calculates
row heights


253
00:14:34.007 --> 00:14:38.278 line:-2 align:center
based on which rows are within
or near the scrolling viewport.


254
00:14:39,646 --> 00:14:41,748 line:-2
For the rows that haven't
been measured yet,


255
00:14:41,782 --> 00:14:44,818 line:-2
NSTableView uses
a running estimated height


256
00:14:44,852 --> 00:14:48,255 line:-2
based on the row heights
that it's already measured.


257
00:14:48,288 --> 00:14:49,890 line:0
As you scroll through the table,


258
00:14:49,923 --> 00:14:52,793 line:0
NSTableView requests row heights
as needed,


259
00:14:52,826 --> 00:14:56,296 line:-2
replacing the estimated heights
with real measurements,


260
00:14:56.330 --> 00:14:59.867 line:-2 align:center
while taking care to maintain
the correct scrolling position.


261
00:15:02,269 --> 00:15:07,174 line:-2
This optimization significantly improves
the load times for very large tables.


262
00:15:07,207 --> 00:15:09,576 line:-2
The change does alter the timing
of delegate calls


263
00:15:09,610 --> 00:15:11,678 line:-1
like "table view: height of row",


264
00:15:11,712 --> 00:15:13,113 line:-1
so you shouldn't make assumptions


265
00:15:13,146 --> 00:15:16,850 line:-2
about when NSTableView
will request row heights from you.


266
00:15:18.185 --> 00:15:23.023 line:-2 align:center
This optimization applies to both
NSTableView and SwiftUI's List view,


267
00:15:23,056 --> 00:15:26,326 line:-2
and it's automatically used for all apps
on macOS Ventura


268
00:15:26,360 --> 00:15:28,695 line:-1
with no adoption required.


269
00:15:28,729 --> 00:15:31,298 line:-1
And that's NSTableView performance.


270
00:15:32,232 --> 00:15:35,736 line:-1
Next, some updates on SF Symbols.


271
00:15:35,769 --> 00:15:39,106 line:-1
macOS Ventura includes SF Symbols 4,


272
00:15:39.139 --> 00:15:42.109 line:-1 align:center
which adds more than 450 new symbol images


273
00:15:42.142 --> 00:15:44.678 line:-1 align:center
covering all kinds of subjects.


274
00:15:45.979 --> 00:15:48.949 line:-1 align:center
These new symbols include laurels,


275
00:15:48,982 --> 00:15:51,919 line:-1
all kinds of household objects,


276
00:15:51.952 --> 00:15:54.922 line:-1 align:center
currency symbols from around the world,


277
00:15:54.955 --> 00:15:58.258 line:-2 align:center
and even a variety
of sports-related symbols.


278
00:15:58,292 --> 00:16:00,694 line:-1
With a catalog of thousands of symbols,


279
00:16:00.727 --> 00:16:04.031 line:-2 align:center
it's likely that SF Symbols includes
a professionally-designed icon


280
00:16:04,064 --> 00:16:07,134 line:-1
for any idea that you want to represent.


281
00:16:07,167 --> 00:16:08,936 line:-1
But we haven't stopped there.


282
00:16:08.969 --> 00:16:11.471 line:-2 align:center
SF Symbols 4 also includes
some new features


283
00:16:11.505 --> 00:16:13.907 line:-1 align:center
to further enhance your iconography.


284
00:16:14,808 --> 00:16:18,278 line:-2
To recap, symbol images support
a number of rendering modes


285
00:16:18.312 --> 00:16:21.448 line:-2 align:center
that you can choose from
depending on your design.


286
00:16:21.481 --> 00:16:24.384 line:-2 align:center
There's monochrome,
which uses a single color;


287
00:16:24.418 --> 00:16:27.521 line:-2 align:center
hierarchical,
which uses different opacities of a color


288
00:16:27.554 --> 00:16:30.724 line:-2 align:center
to emphasize certain portions
of a symbol;


289
00:16:30.757 --> 00:16:32.926 line:-2 align:center
palette,
which allows you to specify


290
00:16:32,960 --> 00:16:35,629 line:-2
distinct colors
for each part of a symbol;


291
00:16:35.662 --> 00:16:40.400 line:-2 align:center
and multicolor, which uses colors
designed directly into the symbol artwork.


292
00:16:41.568 --> 00:16:45.973 line:-2 align:center
These choices give you the flexibility
to realize a wide variety of designs,


293
00:16:46.006 --> 00:16:49.910 line:-2 align:center
but we also want symbol images
to look their best right out of the box,


294
00:16:49.943 --> 00:16:52.746 line:-2 align:center
without the need
to apply any configuration.


295
00:16:53,747 --> 00:16:56,216 line:-2
That's why we've introduced
a new feature to symbols


296
00:16:56.250 --> 00:16:59.953 line:-2 align:center
in macOS Ventura:
preferred rendering mode.


297
00:16:59,987 --> 00:17:01,555 line:-1
With preferred rendering mode,


298
00:17:01.588 --> 00:17:04.925 line:-2 align:center
symbols can specify the style of rendering
that they prefer,


299
00:17:04.958 --> 00:17:09.429 line:-2 align:center
and at runtime
AppKit will use that style automatically.


300
00:17:09,463 --> 00:17:12,366 line:-2
This is great for symbols
like AirPods Pro,


301
00:17:12,399 --> 00:17:14,601 line:-1
which prefers a hierarchical style


302
00:17:14.635 --> 00:17:18.172 line:-2 align:center
to increase the clarity
of those fine details.


303
00:17:18.205 --> 00:17:20.841 line:-2 align:center
Of course, if you have
a different design in mind,


304
00:17:20.874 --> 00:17:24.444 line:-2 align:center
you can always use an
NSImageSymbolConfiguration object


305
00:17:24.478 --> 00:17:26.880 line:-1 align:center
to choose your preferred style.


306
00:17:28,615 --> 00:17:31,118 line:-2
Some symbols
don't just represent a concept,


307
00:17:31,151 --> 00:17:34,821 line:-2
they're also meant to communicate
some value or quantity,


308
00:17:34,855 --> 00:17:38,725 line:-2
like your Wi-Fi signal strength,
or audio volume.


309
00:17:38,759 --> 00:17:41,995 line:-2
For cases like these,
we've introduced a new type of symbol


310
00:17:42,029 --> 00:17:44,898 line:-1
that we call a "variable symbol."


311
00:17:44,932 --> 00:17:48,335 line:-2
With a variable symbol,
you supply a floating point value


312
00:17:48.368 --> 00:17:50.304 line:-1 align:center
directly to NSImage,


313
00:17:50,337 --> 00:17:52,539 line:-1
and the symbol embeds numeric thresholds


314
00:17:52.573 --> 00:17:56.743 line:-2 align:center
to decide how each path should vary
based on that value.


315
00:17:56.777 --> 00:17:58.445 line:-1 align:center
Here's the API.


316
00:17:58.478 --> 00:18:02.015 line:-2 align:center
Variable symbols are created
using a new initializer.


317
00:18:02.049 --> 00:18:05.252 line:-2 align:center
It's similar to the existing
symbol image initializer,


318
00:18:05.285 --> 00:18:07.988 line:-1 align:center
with the addition of a value parameter,


319
00:18:08,021 --> 00:18:11,758 line:-2
which is a floating point number
between zero and one.


320
00:18:11.792 --> 00:18:15.229 line:-2 align:center
If the symbol image doesn't define
any variable thresholds,


321
00:18:15.262 --> 00:18:19.566 line:-2 align:center
this value is ignored
and the symbol draws as it normally would.


322
00:18:19.600 --> 00:18:23.003 line:-2 align:center
If it does, you'll see
the symbol paths drawing differently


323
00:18:23,036 --> 00:18:25,472 line:-1
based on the value you supplied.


324
00:18:26.807 --> 00:18:31.111 line:-2 align:center
Each variable symbol can represent
a value in its own unique way,


325
00:18:31,144 --> 00:18:33,447 line:-2
and by providing that value
at the API level,


326
00:18:33,480 --> 00:18:36,149 line:-1
you get access to all of those variations


327
00:18:36,183 --> 00:18:40,120 line:-2
without having to know the fine details
of how the symbol is composed.


328
00:18:41,188 --> 00:18:44,491 line:-2
Variable symbols work great
in combination with rendering styles


329
00:18:44,525 --> 00:18:47,361 line:-1
like palette color and multicolor,


330
00:18:47,394 --> 00:18:50,297 line:-2
so you can adapt them
to almost any design.


331
00:18:50.330 --> 00:18:54.701 line:-2 align:center
Finally, I'd like to cover
some big updates to Sharing


332
00:18:54,735 --> 00:18:58,305 line:-2
macOS Ventura elevates
the sharing experience on the Mac,


333
00:18:58.338 --> 00:19:00.841 line:-1 align:center
introducing features like suggested people


334
00:19:00.874 --> 00:19:05.812 line:-2 align:center
and new ways to invite and manage
the people that you're collaborating with.


335
00:19:05,846 --> 00:19:09,249 line:-2
There are some new APIs that you can adopt
so that your app gets the most


336
00:19:09,283 --> 00:19:11,151 line:-1
out of these enhancements.


337
00:19:13.754 --> 00:19:18.692 line:-2 align:center
The most prominent update to the sharing
experience is the new sharing popover.


338
00:19:18,725 --> 00:19:22,095 line:-2
This replaces the existing share menu
with a rich interface


339
00:19:22,129 --> 00:19:25,132 line:-2
that includes more information
about the document you're sharing


340
00:19:25,165 --> 00:19:28,602 line:-2
and familiar features
like suggested people.


341
00:19:28,635 --> 00:19:33,173 line:-2
It supports all of the same APIs and
delegate methods as the previous picker,


342
00:19:33.207 --> 00:19:36.610 line:-2 align:center
so you can still do things like
filter the list of sharing services,


343
00:19:36.643 --> 00:19:40.380 line:-2 align:center
or insert your own custom
services into the picker.


344
00:19:42,382 --> 00:19:44,418 line:-1
If you're sharing a file URL,


345
00:19:44.451 --> 00:19:48.822 line:-2 align:center
NSSharingServicePicker can automatically
populate the header with an icon,


346
00:19:48,856 --> 00:19:52,426 line:-1
name, and other metadata about the file.


347
00:19:52,459 --> 00:19:55,395 line:-2
But if you're sharing
a custom type instead,


348
00:19:55.429 --> 00:19:57.831 line:-2 align:center
you can conform your items
to a new protocol


349
00:19:57,865 --> 00:20:02,236 line:-2
that NSSharingServicePicker will use
to request that information.


350
00:20:03.437 --> 00:20:08.041 line:-2 align:center
The protocol is called
NSPreviewRepresentableActivityItem.


351
00:20:08.075 --> 00:20:12.145 line:-2 align:center
Conforming types must be able to return
the underlying item to share,


352
00:20:12,179 --> 00:20:14,414 line:-1
like an NSItemProvider,


353
00:20:14,448 --> 00:20:16,884 line:-1
and they can optionally return a title,


354
00:20:16,917 --> 00:20:19,853 line:-1
an image provider, and an icon provider.


355
00:20:21,555 --> 00:20:24,491 line:-2
For convenience,
there's a conforming class in AppKit


356
00:20:24.525 --> 00:20:27.694 line:-1 align:center
called NSPreviewRepresentingActivityItem


357
00:20:27.728 --> 00:20:32.866 line:-2 align:center
which you can use to bundle up an existing
sharing item with its metadata.


358
00:20:32,900 --> 00:20:36,637 line:-2
You can provide each image parameter
directly as an NSImage,


359
00:20:36,670 --> 00:20:40,474 line:-2
or you can use NSItemProvider
if it's too performance-intensive


360
00:20:40,507 --> 00:20:42,910 line:-1
to generate those images up front.


361
00:20:44,378 --> 00:20:47,381 line:-2
The new sharing picker is great for
kicking off sharing from somewhere


362
00:20:47,414 --> 00:20:48,949 line:-1
like a toolbar button,


363
00:20:48,982 --> 00:20:51,385 line:-2
but sometimes you want to start sharing
from a menu,


364
00:20:51.418 --> 00:20:57.491 line:-2 align:center
like the main menu bar or the context menu
for a selected view inside your app.


365
00:20:57,524 --> 00:21:01,228 line:-2
Previously, you might've constructed
your own menu to handle this,


366
00:21:01,261 --> 00:21:06,433 line:-2
by enumerating sharing services
and then building menu items for each one.


367
00:21:06.466 --> 00:21:10.103 line:-2 align:center
Although that does work,
it bypasses the standard picker,


368
00:21:10.137 --> 00:21:13.674 line:-2 align:center
so now you're missing out
on all of those new features.


369
00:21:13.707 --> 00:21:16.543 line:-2 align:center
In macOS Ventura,
NSSharingServicePicker


370
00:21:16,577 --> 00:21:20,247 line:-2
can create
a "standardShareMenuItem" for you.


371
00:21:20.280 --> 00:21:24.852 line:-2 align:center
You can add the standard item
to any menu to easily kick off sharing.


372
00:21:24,885 --> 00:21:28,589 line:-2
Once selected,
the menu item summons the sharing popover,


373
00:21:28,622 --> 00:21:31,792 line:-2
and for context menus,
it'll even anchor the popover


374
00:21:31,825 --> 00:21:34,328 line:-1
to the same view that produced the menu.


375
00:21:34,995 --> 00:21:39,333 line:-2
There's a lot of new support for
managing collaboration in macOS Ventura.


376
00:21:40,000 --> 00:21:43,470 align:center
With some extra adoption,
your shareable items can also become


377
00:21:43,504 --> 00:21:45,506 line:0
invitations to collaborate,


378
00:21:45,539 --> 00:21:48,108 align:center
which users can initiate
via the sharing picker,


379
00:21:48,141 --> 00:21:52,346 line:0
drag-and-drop into Messages,
or even via FaceTime.


380
00:21:52,379 --> 00:21:55,983 line:0
You can share content
using CloudKit or iCloud Drive,


381
00:21:56,016 --> 00:22:00,787 align:center
or you can connect the invitation flow
with your own collaboration server.


382
00:22:00,821 --> 00:22:02,689 align:center
Now this is a really big topic,


383
00:22:02,723 --> 00:22:06,560 align:center
so we've made a few videos
to explain it in much greater depth.


384
00:22:06,593 --> 00:22:09,363 align:center
They're a must-see
if your app supports collaboration,


385
00:22:09,396 --> 00:22:12,499 align:center
or if you'd like
to get started with adding it.


386
00:22:12,533 --> 00:22:15,502 line:-1
As you get started with macOS Ventura,


387
00:22:15.536 --> 00:22:19.873 line:-2 align:center
make sure you're setting up your windows
to work best with Stage Manager.


388
00:22:19,907 --> 00:22:24,077 line:-2
Then, consider how your design
might benefit from control enhancements


389
00:22:24.111 --> 00:22:27.881 line:-2 align:center
like NSComboButton
and NSColorWell.


390
00:22:27.915 --> 00:22:33.921 line:-2 align:center
Improve your iconography using the newest
symbols and features of SF Symbols.


391
00:22:33.954 --> 00:22:36.290 line:-1 align:center
And finally, for collaboration,


392
00:22:36,323 --> 00:22:39,126 line:-2
adopt the latest APIs
so that you get the most


393
00:22:39.159 --> 00:22:42.796 line:-2 align:center
out of macOS Ventura's
new sharing experience.


394
00:22:43.797 --> 00:22:45.199 line:-1 align:center
Thanks so much for watching,


395
00:22:45,232 --> 00:22:48,869 line:-2
and thanks for continuing
to build great Mac applications.

