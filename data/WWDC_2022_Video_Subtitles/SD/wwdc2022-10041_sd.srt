2
00:00:00,267 --> 00:00:03,337 line:-1
♪ Mellow instrumental
hip-hop music ♪


3
00:00:03,337 --> 00:00:09,910 position:90% line:0 size:2%
♪


4
00:00:09,910 --> 00:00:11,812 line:-1
Lais Minchillo:
Hi, my name is Lais.


5
00:00:11.812 --> 00:00:13.847 line:-1 position:50%
David Silver: And I'm David.
And we will be presenting


6
00:00:13,847 --> 00:00:17,885 line:-1
this year's new features
in Wallet and Apple Pay.


7
00:00:17,885 --> 00:00:20,520 line:-1
We launched Apple Pay in 2014,


8
00:00:20.520 --> 00:00:23.657 line:-1 position:50%
setting a new benchmark
for making fast, secure,


9
00:00:23.657 --> 00:00:27.928 line:-1 position:50%
and private payments
in store, online and in-app.


10
00:00:27,928 --> 00:00:31,231 line:-1
Since then, we've expanded
Apple Pay across the globe.


11
00:00:31,231 --> 00:00:35,202 line:-1
Apple Pay is now available
in 72 countries and territories


12
00:00:35,202 --> 00:00:38,739 line:-1
and handles more than a million
transactions every day.


13
00:00:38,739 --> 00:00:42,042 line:-1
Today we're introducing exciting
new features and APIs


14
00:00:42,042 --> 00:00:43,710 line:-1
into Wallet and Apple Pay.


15
00:00:43,710 --> 00:00:45,812 line:-1
Lais will tell you more.


16
00:00:45.812 --> 00:00:47.180 line:-1 position:50%
Lais: Thank you, David!


17
00:00:47,180 --> 00:00:50,284 line:-1
Let's take a look
at the main agenda for today.


18
00:00:50,284 --> 00:00:53,921 line:-1
First, we'll talk about
some quick updates.


19
00:00:53.921 --> 00:00:56.823 line:-1 position:50%
We are adding support for
payments to multiple merchants


20
00:00:56.823 --> 00:00:59.293 line:-1 position:50%
in a single transaction.


21
00:00:59,293 --> 00:01:02,663 line:-1
We are also greatly improving
support for automatic payments,


22
00:01:02,663 --> 00:01:05,299 line:-1
including subscriptions,


23
00:01:05.299 --> 00:01:07.467 line:-1 position:50%
With order tracking,
you can enhance


24
00:01:07.467 --> 00:01:10.737 line:-1 position:50%
the postpurchase experience
for your customers.


25
00:01:10.737 --> 00:01:14.107 line:-1 position:50%
And finally, David will
talk about identity verification


26
00:01:14,107 --> 00:01:17,311 line:-1
with IDs in Wallet.


27
00:01:17.311 --> 00:01:20.147 line:-1 position:50%
We have a few
exciting updates to share.


28
00:01:20.147 --> 00:01:23.250 line:-1 position:50%
Tap to Pay on iPhone
was announced earlier this year


29
00:01:23,250 --> 00:01:27,120 line:-1
and launched
in iOS 15.4 in the US.


30
00:01:27,120 --> 00:01:29,990 line:-1
Tap to Pay on iPhone
provides a secure, private,


31
00:01:29.990 --> 00:01:33.126 line:-1 position:50%
and easy way to accept
contactless payments.


32
00:01:33,126 --> 00:01:35,696 line:-1
You can easily integrate
this into your app


33
00:01:35,696 --> 00:01:39,366 line:-1
to seamlessly and securely
accept contactless payments.


34
00:01:39.366 --> 00:01:41.168 line:-1 position:50%
This includes Apple Pay,


35
00:01:41,168 --> 00:01:43,503 line:-1
contactless credit
and debit cards,


36
00:01:43.503 --> 00:01:45.639 line:-1 position:50%
and other digital wallets.


37
00:01:45,639 --> 00:01:46,907 line:-1
The transaction is completed


38
00:01:46,907 --> 00:01:49,009 line:-1
through a simple tap
to the iPhone,


39
00:01:49,009 --> 00:01:51,044 line:-1
removing the need
for additional hardware


40
00:01:51,044 --> 00:01:53,146 line:-1
or payment terminals.


41
00:01:53,146 --> 00:01:55,582 line:-1
Meanwhile, in macOS 13,


42
00:01:55,582 --> 00:01:58,885 line:-1
we redesigned
the Apple Pay experience.


43
00:01:58,885 --> 00:02:01,321 line:-1
The iOS payment sheet
redesign last year


44
00:02:01,321 --> 00:02:02,756 line:-1
was a great success


45
00:02:02,756 --> 00:02:06,626 line:-1
and this year we're bringing
a similar experience to macOS.


46
00:02:06,626 --> 00:02:09,029 line:-1
We used SwiftUI
to implement this,


47
00:02:09,029 --> 00:02:11,365 line:-1
which helped us
bring new features to macOS


48
00:02:11.365 --> 00:02:13.700 line:-1 position:50%
at the same time as iOS.


49
00:02:13,700 --> 00:02:16,370 line:-1
All of the Apple Pay features
we are introducing today


50
00:02:16.370 --> 00:02:19.639 line:-1 position:50%
are also supported on Mac.


51
00:02:19.639 --> 00:02:23.110 line:-1 position:50%
We're introducing
new SwiftUI APIs.


52
00:02:23,110 --> 00:02:26,446 line:-1
Integrating Add to Apple Wallet
or Apple Pay buttons


53
00:02:26.446 --> 00:02:29.282 line:-1 position:50%
in your SwiftUI app
will be much easier.


54
00:02:29,282 --> 00:02:31,651 line:-1
These new APIs will
significantly reduce


55
00:02:31.651 --> 00:02:33.920 line:-1 position:50%
the amount of code
you need to write.


56
00:02:33.920 --> 00:02:36.056 line:-1 position:50%
Let's take a look at
how you can add a button


57
00:02:36,056 --> 00:02:39,192 line:-1
to prompt the user
to add an airline pass.


58
00:02:39,192 --> 00:02:41,962 line:-1
First, create the pass.


59
00:02:41.962 --> 00:02:45.365 line:-1 position:50%
You should handle the case where
it wasn't successfully loaded.


60
00:02:45,365 --> 00:02:47,901 line:-1
This could happen
if the pass data is malformed


61
00:02:47.901 --> 00:02:51.338 line:-1 position:50%
or if it was not properly
signed, for example.


62
00:02:51.338 --> 00:02:56.109 line:-1 position:50%
Next, call AddPassToWalletButton
with an array of passes.


63
00:02:56.109 --> 00:02:59.479 line:-1 position:50%
In this example, we have
an array with only one element,


64
00:02:59,479 --> 00:03:02,983 line:-1
but you can have multiple passes
on the same button.


65
00:03:02,983 --> 00:03:05,919 line:-1
The result is passed
in as a Bool, and you can save,


66
00:03:05.919 --> 00:03:08.488 line:-1 position:50%
log, or trigger other actions
in your app


67
00:03:08,488 --> 00:03:12,025 line:-1
based on whether the user
has added a pass or not.


68
00:03:12,025 --> 00:03:15,162 line:-1
In this example,
I'm saving that to a state var.


69
00:03:15.162 --> 00:03:16.630 line:-1 position:50%
And that's it!


70
00:03:16,630 --> 00:03:19,599 line:-1
You can also customize
the button's size and style


71
00:03:19.599 --> 00:03:21.935 line:-1 position:50%
within a set of minimum values.


72
00:03:21.935 --> 00:03:28.642 line:-1 position:50%
This is the default size:
width 250 and height 50.


73
00:03:28,642 --> 00:03:30,911 line:-1
You could also make it
wider...


74
00:03:32.512 --> 00:03:33.880 line:-1 position:50%
...or taller.


75
00:03:35,882 --> 00:03:37,284 line:-1
This wraps up how you can add


76
00:03:37.284 --> 00:03:40.854 line:-1 position:50%
an Add to Apple Wallet button
in SwiftUI.


77
00:03:40,854 --> 00:03:45,192 line:-1
Now, let's see how you can add
a Pay with Apple Pay button.


78
00:03:45,192 --> 00:03:47,394 line:-1
First, create a payment request


79
00:03:47,394 --> 00:03:49,863 line:-1
using the PKPaymentRequest
class,


80
00:03:49,863 --> 00:03:52,899 line:-1
setting your usual
configuration on it.


81
00:03:52.899 --> 00:03:57.037 line:-1 position:50%
Then, create an
authorizationChange method.


82
00:03:57,037 --> 00:03:59,005 line:-1
Now that we have
these two pieces ready,


83
00:03:59,005 --> 00:04:01,741 line:-1
let's add code
to show the button.


84
00:04:01.741 --> 00:04:04.344 line:-1 position:50%
Add a call to
PayWithApplePayButton,


85
00:04:04,344 --> 00:04:07,914 line:-1
passing in the label,
the paymentRequest object,


86
00:04:07,914 --> 00:04:10,784 line:-1
and the authorizationChange
method.


87
00:04:10,784 --> 00:04:13,086 line:-1
To handle cases where
Apple Pay isn't supported


88
00:04:13.086 --> 00:04:16.656 line:-1 position:50%
by the current device,
you can pass in a fallback view.


89
00:04:16,656 --> 00:04:18,525 line:0
Just like the Add Pass button,


90
00:04:18,525 --> 00:04:23,463 position:50%
you can also customize
its size and style.


91
00:04:23,463 --> 00:04:26,700 line:-1
In total,
there are 17 different labels,


92
00:04:26,700 --> 00:04:28,635 line:-1
so you are able to customize
the pay button


93
00:04:28,635 --> 00:04:31,371 line:-1
to align with your use case.


94
00:04:31,371 --> 00:04:38,645 line:-1
These are available on iOS,
iPadOS, macOS, and watchOS.


95
00:04:38.645 --> 00:04:42.949 line:-1 position:50%
Now, let's take a look
at multimerchant payments.


96
00:04:42,949 --> 00:04:46,286 line:-1
In iOS 16, we're introducing
the ability to request


97
00:04:46,286 --> 00:04:48,922 line:-1
multiple payment tokens
for different merchants


98
00:04:48.922 --> 00:04:50.724 line:-1 position:50%
in the same transaction.


99
00:04:50.724 --> 00:04:53.894 line:-1 position:50%
This is useful for things
like online marketplaces,


100
00:04:53,894 --> 00:04:56,596 line:-1
travel bookings,
and ticketing services.


101
00:04:56,596 --> 00:04:59,199 line:-1
Let's take a closer look
at an example.


102
00:04:59,199 --> 00:05:01,935 line:-1
Imagine Allison
is planning a trip.


103
00:05:01.935 --> 00:05:04.504 line:-1 position:50%
She goes to a travel
agency's website


104
00:05:04.504 --> 00:05:06.072 line:-1 position:50%
and they conveniently offer her


105
00:05:06.072 --> 00:05:08.141 line:-1 position:50%
all of the things
she needs to book --


106
00:05:08,141 --> 00:05:12,412 line:-1
flight tickets, a hotel stay,
and a car rental.


107
00:05:12.412 --> 00:05:16.049 line:-1 position:50%
Allison just needs to pay
a total of $500 dollars.


108
00:05:16.049 --> 00:05:18.084 line:-1 position:50%
Allison provides
the travel agency


109
00:05:18,084 --> 00:05:20,453 line:-1
her full credit card
information.


110
00:05:20.453 --> 00:05:23.256 line:-1 position:50%
Now, you might imagine
that the travel agency


111
00:05:23.256 --> 00:05:26.293 line:-1 position:50%
will charge Allison's
credit card $500 dollars,


112
00:05:26.293 --> 00:05:29.196 line:-1 position:50%
and then pay
the other companies involved.


113
00:05:29,196 --> 00:05:31,865 line:-1
But what typically happens
is the travel agency


114
00:05:31,865 --> 00:05:34,434 line:-1
simply passes along
the credit card information


115
00:05:34,434 --> 00:05:38,605 line:-1
to each company to make
their individual charges.


116
00:05:38,605 --> 00:05:40,740 line:0
This works,
but it's not great


117
00:05:40,740 --> 00:05:42,676 line:0
for Allison's
privacy and security


118
00:05:42,676 --> 00:05:46,413 line:0
to have her credit card
information shared around.


119
00:05:46,413 --> 00:05:49,749 line:-1
Now, with the new
multimerchant payment API,


120
00:05:49.749 --> 00:05:52.018 line:-1 position:50%
it's possible to request
a payment token


121
00:05:52,018 --> 00:05:55,355 line:-1
for each merchant involved
in a transaction.


122
00:05:55,355 --> 00:05:57,157 line:-1
Using these payment tokens,


123
00:05:57,157 --> 00:06:00,327 line:-1
the multiple companies involved
can each charge Allison


124
00:06:00,327 --> 00:06:03,263 line:-1
for the relevant amount
she authorized.


125
00:06:03.263 --> 00:06:05.932 line:-1 position:50%
Allison can now book
and pay for her trip


126
00:06:05,932 --> 00:06:09,269 line:-1
while taking advantage of the
privacy and security benefits


127
00:06:09.269 --> 00:06:12.005 line:-1 position:50%
that Apple Pay offers.


128
00:06:12,005 --> 00:06:14,541 position:50%
The payment sheet has been
updated to show customers


129
00:06:14,541 --> 00:06:18,345 position:50%
a breakdown of the submerchants
involved in a transaction.


130
00:06:18,345 --> 00:06:20,313 line:0
Customers can tap
on the total field


131
00:06:20,313 --> 00:06:22,549 line:0
to navigate
to the payment summary.


132
00:06:22.549 --> 00:06:25.051 line:-1 position:50%
Here, the customer
can see a breakdown


133
00:06:25,051 --> 00:06:27,520 line:-1
of all the merchants involved
in the transaction,


134
00:06:27,520 --> 00:06:30,590 line:-1
along with the amount authorized
for each one.


135
00:06:30.590 --> 00:06:32.392 line:-1 position:50%
Now, let's look
at how you can add


136
00:06:32,392 --> 00:06:35,528 line:-1
multimerchant payments
to your app.


137
00:06:35.528 --> 00:06:37.764 line:-1 position:50%
First, create a payment request


138
00:06:37,764 --> 00:06:40,233 line:-1
using the PKPaymentRequest
class,


139
00:06:40,233 --> 00:06:43,203 line:-1
setting your usual
configuration on it.


140
00:06:43,203 --> 00:06:48,341 line:-1
Then add summary items for your
payment, including the total.


141
00:06:48.341 --> 00:06:50.977 line:-1 position:50%
Next, create
a payment token context


142
00:06:50.977 --> 00:06:54.414 line:-1 position:50%
for each additional merchant
involved in the transaction,


143
00:06:54,414 --> 00:06:58,385 line:-1
using the new
PKPaymentTokenContext class.


144
00:06:58.385 --> 00:07:01.121 line:-1 position:50%
Provide details
for each merchant,


145
00:07:01.121 --> 00:07:04.424 line:-1 position:50%
as well as the amount
to authorize for each.


146
00:07:04,424 --> 00:07:09,462 line:-1
Finally, set the payment token
contexts on the payment request.


147
00:07:09,462 --> 00:07:11,631 line:-1
Keep in mind that the sum
of the amounts


148
00:07:11,631 --> 00:07:14,167 line:-1
for all of your
payment token contexts


149
00:07:14.167 --> 00:07:17.070 line:-1 position:50%
must be less than or equal
to the total amount


150
00:07:17.070 --> 00:07:19.506 line:-1 position:50%
of the payment request itself.


151
00:07:19.506 --> 00:07:23.043 line:-1 position:50%
Also, you should always use
the same external identifier


152
00:07:23.043 --> 00:07:26.012 line:-1 position:50%
for the same merchant any time
you request a payment token


153
00:07:26,012 --> 00:07:28,882 line:-1
for that merchant in your app.


154
00:07:28,882 --> 00:07:30,917 line:-1
For adopting
multi-merchant payments


155
00:07:30,917 --> 00:07:32,552 line:-1
with Apple Pay on the web,


156
00:07:32.552 --> 00:07:36.656 line:-1 position:50%
check out the Apple Pay JS API
documentation.


157
00:07:36.656 --> 00:07:39.159 line:-1 position:50%
Now, let's take a look
at our improvements


158
00:07:39.159 --> 00:07:41.961 line:-1 position:50%
to automatic payments.


159
00:07:41,961 --> 00:07:45,732 line:-1
In iOS 16, we're introducing
the ability for people to view


160
00:07:45.732 --> 00:07:48.702 line:-1 position:50%
and manage automatic payments
they've set up with merchants,


161
00:07:48.702 --> 00:07:50.670 line:-1 position:50%
right from the Wallet app.


162
00:07:50,670 --> 00:07:51,738 line:-1
In this release,


163
00:07:51,738 --> 00:07:54,641 line:-1
we're supporting two types
of automatic payments:


164
00:07:54.641 --> 00:07:57.043 line:-1 position:50%
recurring payments,
which includes things like


165
00:07:57.043 --> 00:08:00.547 line:-1 position:50%
subscriptions, installments,
or recurring billing;


166
00:08:00.547 --> 00:08:02.582 line:-1 position:50%
and automatic reload payments,


167
00:08:02.582 --> 00:08:05.418 line:-1 position:50%
such as store card
balance top-ups.


168
00:08:05.418 --> 00:08:08.221 line:-1 position:50%
We're introducing new APIs
to allow you to request


169
00:08:08,221 --> 00:08:12,125 line:-1
to set up an automatic payment
when you make a payment request.


170
00:08:12,125 --> 00:08:15,562 line:-1
We're also introducing
Apple Pay merchant tokens,


171
00:08:15.562 --> 00:08:19.532 line:-1 position:50%
a new kind of payment token
tied to a customer's Apple ID,


172
00:08:19,532 --> 00:08:22,168 line:-1
which can help you more reliably
charge your customers


173
00:08:22,168 --> 00:08:24,437 line:-1
on an ongoing basis.


174
00:08:24,437 --> 00:08:27,040 line:-1
Let's take a closer look
at Apple Pay merchant tokens


175
00:08:27,040 --> 00:08:29,542 line:-1
to see how
they can be useful.


176
00:08:29.542 --> 00:08:32.445 line:-1 position:50%
Imagine Julie is paying
for a book club membership


177
00:08:32,445 --> 00:08:34,981 line:-1
using Apple Pay on her iPhone.


178
00:08:34,981 --> 00:08:37,350 line:-1
The book club makes
a payment request,


179
00:08:37.350 --> 00:08:39.552 line:-1 position:50%
and when Julie authorizes
the payment,


180
00:08:39.552 --> 00:08:41.921 line:-1 position:50%
the book club receives
a payment token,


181
00:08:41.921 --> 00:08:44.524 line:-1 position:50%
and every month they can
use that to charge Julie


182
00:08:44.524 --> 00:08:46.526 line:-1 position:50%
her membership fee.


183
00:08:46,526 --> 00:08:49,796 line:-1
This payment token is linked
to the device Julie used


184
00:08:49,796 --> 00:08:51,865 line:-1
to authorize the payment.


185
00:08:51.865 --> 00:08:55.235 line:-1 position:50%
But what happens if Julie
gets a new iPhone?


186
00:08:55,235 --> 00:08:57,737 line:-1
With the new
automatic payments feature,


187
00:08:57.737 --> 00:08:59.639 line:-1 position:50%
the book club
will instead receive


188
00:08:59,639 --> 00:09:01,641 line:-1
an Apple Pay merchant token,


189
00:09:01,641 --> 00:09:04,544 line:-1
if Julie's payment network
supports it.


190
00:09:04.544 --> 00:09:07.847 line:-1 position:50%
This payment token is tied
to Julie's Apple ID,


191
00:09:07,847 --> 00:09:09,649 line:-1
rather than to her iPhone,


192
00:09:09,649 --> 00:09:14,220 line:-1
which provides better assurances
for ongoing authorizations.


193
00:09:14.220 --> 00:09:16.823 line:-1 position:50%
This means that if Julie
upgrades her iPhone,


194
00:09:16.823 --> 00:09:18.758 line:-1 position:50%
or resets her current phone,


195
00:09:18.758 --> 00:09:21.594 line:-1 position:50%
the book club can continue
to reliably charge Julie


196
00:09:21,594 --> 00:09:23,997 line:-1
her monthly membership fee.


197
00:09:23,997 --> 00:09:26,666 line:-1
If you accept Apple Pay
for these types of payments,


198
00:09:26.666 --> 00:09:30.003 line:-1 position:50%
it's a great idea to adopt
automatic payments to ensure


199
00:09:30,003 --> 00:09:32,972 line:-1
you can continue reliably
charging your customers,


200
00:09:32,972 --> 00:09:36,509 line:-1
as well as avoid any
interruption to their services.


201
00:09:36,509 --> 00:09:38,978 line:-1
The first type of automatic
payment we're supporting


202
00:09:38,978 --> 00:09:41,981 line:-1
in this release
is recurring payments.


203
00:09:41,981 --> 00:09:45,218 line:-1
Recurring payments have
a fixed or variable amount


204
00:09:45.218 --> 00:09:47.353 line:-1 position:50%
that is charged on
a regular schedule,


205
00:09:47.353 --> 00:09:51.157 line:-1 position:50%
such as weekly,
monthly, or annually.


206
00:09:51,157 --> 00:09:53,560 line:-1
These payments can end
on a certain date


207
00:09:53,560 --> 00:09:57,063 line:-1
or they can be ongoing
until canceled.


208
00:09:57,063 --> 00:10:01,568 line:-1
A trial or introductory period
is also supported.


209
00:10:01,568 --> 00:10:03,970 line:-1
Subscriptions,
installment plans,


210
00:10:03.970 --> 00:10:06.272 line:-1 position:50%
and regular billing
are perfect uses


211
00:10:06.272 --> 00:10:08.508 line:-1 position:50%
for this type of payment.


212
00:10:08,508 --> 00:10:11,010 line:-1
Let's take a look at how you can
set up a recurring payment


213
00:10:11.010 --> 00:10:14.547 line:-1 position:50%
in your app using
automatic payments.


214
00:10:14.547 --> 00:10:17.183 line:-1 position:50%
Start by specifying
the amount and duration


215
00:10:17,183 --> 00:10:19,219 line:-1
of the recurring payment,
using the


216
00:10:19,219 --> 00:10:22,655 line:-1
PKRecurringPaymentSummaryItem
class.


217
00:10:22,655 --> 00:10:24,157 line:-1
For recurring payments,


218
00:10:24.157 --> 00:10:27.126 line:-1 position:50%
you can specify
both a regular billing period


219
00:10:27,126 --> 00:10:30,997 line:-1
as well as an introductory
or trial period.


220
00:10:30,997 --> 00:10:34,400 line:-1
You can use the startDate
and endDate properties


221
00:10:34,400 --> 00:10:36,970 line:-1
to indicate when
the trial period ends


222
00:10:36,970 --> 00:10:40,473 line:-1
and the regular billing period
starts.


223
00:10:40,473 --> 00:10:43,710 line:-1
Next, create a
recurringPaymentRequest


224
00:10:43,710 --> 00:10:47,514 line:-1
using the new
PKRecurringPaymentRequest class.


225
00:10:47,514 --> 00:10:49,816 line:-1
Provide a description
of the payment,


226
00:10:49,816 --> 00:10:51,784 line:-1
the regular billing period,


227
00:10:51.784 --> 00:10:54.787 line:-1 position:50%
as well as a managementURL
to a web page


228
00:10:54,787 --> 00:10:57,891 line:-1
where the customer can update
or delete the payment method


229
00:10:57,891 --> 00:10:59,926 line:-1
for the recurring payment.


230
00:10:59,926 --> 00:11:03,429 line:-1
You can also optionally
provide a trial billing period


231
00:11:03,429 --> 00:11:05,765 line:-1
as well as
billingAgreement text


232
00:11:05,765 --> 00:11:09,302 line:-1
to help explain the terms
of the payment to the customer.


233
00:11:09,302 --> 00:11:13,873 position:50%
Finally, you can optionally
provide a tokenNotificationURL


234
00:11:13,873 --> 00:11:16,910 line:0
where your server can receive
life cycle notifications


235
00:11:16,910 --> 00:11:19,779 position:50%
about the Apple Pay
merchant token for the payment,


236
00:11:19,779 --> 00:11:21,414 position:50%
if one was issued.


237
00:11:21,414 --> 00:11:23,950 position:50%
For example,
you can receive notifications


238
00:11:23,950 --> 00:11:27,687 position:50%
if the card issuer or the user
deletes the token.


239
00:11:27.687 --> 00:11:30.056 line:-1 position:50%
For more information
about merchant token


240
00:11:30.056 --> 00:11:32.025 line:-1 position:50%
life cycle notifications,


241
00:11:32,025 --> 00:11:36,930 line:-1
see the Apple Pay Merchant Token
Management API documentation.


242
00:11:36,930 --> 00:11:40,300 line:-1
Finally, set the
recurringPaymentRequest


243
00:11:40.300 --> 00:11:42.335 line:-1 position:50%
on the paymentRequest object.


244
00:11:42.335 --> 00:11:45.605 line:-1 position:50%
A quick note on summary items,
your recurring payment


245
00:11:45.605 --> 00:11:48.575 line:-1 position:50%
will not be added to the payment
request's summary items


246
00:11:48.575 --> 00:11:49.776 line:-1 position:50%
automatically.


247
00:11:49.776 --> 00:11:54.080 line:-1 position:50%
So be sure to add items for it
to the summary items array.


248
00:11:54,080 --> 00:11:56,015 line:-1
The total for
the payment request


249
00:11:56,015 --> 00:11:57,450 line:-1
should be the first amount


250
00:11:57.450 --> 00:11:59.352 line:-1 position:50%
that the customer
will be charged.


251
00:11:59.352 --> 00:12:02.088 line:-1 position:50%
So in this example,
the total is set to display


252
00:12:02,088 --> 00:12:03,957 line:-1
the trial period amount,


253
00:12:03,957 --> 00:12:07,794 line:-1
as that's the first amount
the customer will be charged.


254
00:12:07,794 --> 00:12:09,529 line:0
The payment sheet
will show details


255
00:12:09,529 --> 00:12:11,965 line:0
of your recurring payment
to customers,


256
00:12:11,965 --> 00:12:14,300 position:50%
and they can tap
on the Billing Details section


257
00:12:14,300 --> 00:12:17,136 position:50%
to read further.


258
00:12:17,136 --> 00:12:20,306 line:-1
Now, let's take a look at the
second type of automatic payment


259
00:12:20,306 --> 00:12:22,075 line:-1
we're supporting
in this release:


260
00:12:22.075 --> 00:12:24.277 line:-1 position:50%
automatic reload payments.


261
00:12:24.277 --> 00:12:25.645 line:-1 position:50%
With this type of payment,


262
00:12:25,645 --> 00:12:27,580 line:-1
a balance is
automatically topped up


263
00:12:27.580 --> 00:12:30.583 line:-1 position:50%
with a fixed amount whenever
the balance drops below


264
00:12:30.583 --> 00:12:32.852 line:-1 position:50%
a certain threshold amount.


265
00:12:32,852 --> 00:12:35,622 line:-1
Automatic reload payments
are perfect for things like


266
00:12:35.622 --> 00:12:39.459 line:-1 position:50%
store card top-ups
and prepaid balances.


267
00:12:39,459 --> 00:12:42,595 line:-1
To request to set up
an automatic reload payment,


268
00:12:42.595 --> 00:12:46.032 line:-1 position:50%
start by specifying the reload
and threshold amounts,


269
00:12:46.032 --> 00:12:51.237 line:-1 position:50%
using the new PKAutomatic
ReloadPaymentSummaryItem class.


270
00:12:51.237 --> 00:12:55.208 line:-1 position:50%
Next, create an
automaticReloadPaymentRequest


271
00:12:55,208 --> 00:12:59,579 line:-1
using the new PKAutomatic
ReloadPaymentRequest class,


272
00:12:59.579 --> 00:13:02.915 line:-1 position:50%
passing in a description
of the payment, the billing,


273
00:13:02.915 --> 00:13:04.517 line:-1 position:50%
and a management URL,


274
00:13:04.517 --> 00:13:06.819 line:-1 position:50%
just like for
recurring payments.


275
00:13:06,819 --> 00:13:10,156 line:-1
You can also optionally
provide billing agreement text


276
00:13:10.156 --> 00:13:13.660 line:-1 position:50%
and a token notification URL.


277
00:13:13.660 --> 00:13:16.829 line:-1 position:50%
Finally, set the automatic
reload payment request


278
00:13:16,829 --> 00:13:19,065 line:-1
on the payment request object.


279
00:13:19,065 --> 00:13:22,435 line:-1
Again, be sure to include
your automatic reload payment


280
00:13:22,435 --> 00:13:24,137 line:-1
in the summary items


281
00:13:24,137 --> 00:13:27,940 line:-1
and set the total of the
paymentRequest appropriately.


282
00:13:27,940 --> 00:13:31,044 line:-1
For adopting automatic payments
with Apple Pay on the web,


283
00:13:31,044 --> 00:13:35,248 line:-1
check out the Apple Pay JS API
documentation.


284
00:13:35,248 --> 00:13:37,550 line:0
Here's how the automatic reload
payment appears


285
00:13:37,550 --> 00:13:41,854 line:0
in the payment sheet
for your customers.


286
00:13:41,854 --> 00:13:44,223 line:-1
Finally, here's
a few things to remember


287
00:13:44.223 --> 00:13:47.193 line:-1 position:50%
to help give your customers
the best possible experience


288
00:13:47,193 --> 00:13:50,229 line:-1
when you adopt
automatic payments in your app.


289
00:13:50,229 --> 00:13:52,165 line:-1
Remember to include
summary items


290
00:13:52,165 --> 00:13:56,469 line:-1
for your automatic payment
as these are not added for you.


291
00:13:56.469 --> 00:13:59.038 line:-1 position:50%
The total amount of your
payment request should be


292
00:13:59.038 --> 00:14:02.341 line:-1 position:50%
the first amount
the customer will be charged.


293
00:14:02,341 --> 00:14:05,178 line:-1
You should keep the billing
agreement text short.


294
00:14:05.178 --> 00:14:09.515 line:-1 position:50%
The payment sheet will only show
the first 500 characters.


295
00:14:09.515 --> 00:14:12.452 line:-1 position:50%
The billing agreement text
is not intended to replace


296
00:14:12,452 --> 00:14:14,987 line:-1
your normal billing
and legal agreements.


297
00:14:14,987 --> 00:14:16,556 line:-1
It's up to you to be compliant


298
00:14:16,556 --> 00:14:19,225 line:-1
with your local
recurring billing laws.


299
00:14:19,225 --> 00:14:22,128 line:-1
If you have a legal agreement
to show the customer,


300
00:14:22.128 --> 00:14:24.230 line:-1 position:50%
that might mean
displaying it to the customer


301
00:14:24,230 --> 00:14:27,166 line:-1
before you present
the payment sheet.


302
00:14:27,166 --> 00:14:30,069 line:-1
You can only request
one type of automatic payment


303
00:14:30.069 --> 00:14:32.438 line:-1 position:50%
in a single transaction.


304
00:14:32.438 --> 00:14:34.974 line:-1 position:50%
Also, automatic payments
cannot be used


305
00:14:34,974 --> 00:14:37,810 line:-1
with multi-merchant payments.


306
00:14:37,810 --> 00:14:40,880 line:0
Finally, if you want to receive
life cycle notifications


307
00:14:40,880 --> 00:14:44,250 line:0
for the Apple Pay merchant token
issued for the payment,


308
00:14:44,250 --> 00:14:47,386 line:0
be sure to provide
a token notification URL


309
00:14:47,386 --> 00:14:50,923 line:0
and adopt the Apple Pay Merchant
Token Management API


310
00:14:50,923 --> 00:14:52,391 position:50%
on your server.


311
00:14:52,391 --> 00:14:54,327 line:-1
We think you'll love
these new APIs


312
00:14:54,327 --> 00:14:57,196 line:-1
and the benefits
of Apple Pay merchant tokens.


313
00:14:57.196 --> 00:14:58.998 line:-1 position:50%
Here are just a few
of our partners


314
00:14:58,998 --> 00:15:03,536 line:-1
that will also be adopting
support for automatic payments.


315
00:15:03,536 --> 00:15:06,105 line:-1
Apple Pay merchant tokens
will be supported by


316
00:15:06.105 --> 00:15:10.009 line:-1 position:50%
American Express, Discover,
Mastercard, and Visa,


317
00:15:10.009 --> 00:15:14.313 line:-1 position:50%
with support for other payment
networks in the future.


318
00:15:14,313 --> 00:15:16,783 line:-1
We are excited to introduce
Order Tracking


319
00:15:16,783 --> 00:15:20,253 line:-1
to enhance the postpurchase
experience.


320
00:15:20.253 --> 00:15:24.457 line:-1 position:50%
New in iOS 16, order tracking
allows users to track orders


321
00:15:24,457 --> 00:15:26,893 line:-1
placed with participating
merchants.


322
00:15:26,893 --> 00:15:29,295 line:-1
Wallet now provides
an intuitive overview


323
00:15:29,295 --> 00:15:32,598 line:-1
of active orders,
recently completed orders,


324
00:15:32,598 --> 00:15:34,300 line:-1
and past orders.


325
00:15:34,300 --> 00:15:38,104 line:-1
I currently have a single active
order for some bakery goods.


326
00:15:38,104 --> 00:15:42,241 line:-1
My order is still in processing;
I'll get back to that later.


327
00:15:42.241 --> 00:15:46.012 line:-1 position:50%
For now, I want to buy some toys
and accessories for my cat


328
00:15:46.012 --> 00:15:47.580 line:-1 position:50%
from Pet Avenue.


329
00:15:47,580 --> 00:15:50,283 position:50%
I choose to check out
with Apple Pay.


330
00:15:50,283 --> 00:15:52,485 line:0
Shortly after
I authorize the payment,


331
00:15:52,485 --> 00:15:55,922 position:50%
I receive a notification
to track my order in Wallet.


332
00:15:55,922 --> 00:15:58,124 line:0
Interacting with
that notification


333
00:15:58,124 --> 00:16:00,393 position:50%
takes me to the details
of my order


334
00:16:00,393 --> 00:16:02,628 line:0
where I can check
the current status.


335
00:16:02,628 --> 00:16:04,263 position:50%
I can see the order status,


336
00:16:04,263 --> 00:16:06,899 line:0
including shipping
and tracking information,


337
00:16:06,899 --> 00:16:09,802 line:0
and the list of line items
I have ordered.


338
00:16:09,802 --> 00:16:13,973 position:50%
Further below, I have multiple
options to contact Pet Avenue,


339
00:16:13,973 --> 00:16:18,678 position:50%
check the payment information,
and go back to Pet Avenue's app.


340
00:16:18,678 --> 00:16:21,113 line:0
Now, imagine
Pet Avenue is really fast


341
00:16:21,113 --> 00:16:25,384 line:0
in processing incoming orders
and they just shipped my items.


342
00:16:25,384 --> 00:16:27,753 line:0
As soon as Pet Avenue
shipped my order,


343
00:16:27,753 --> 00:16:30,389 line:0
they have updated
the available information.


344
00:16:30,389 --> 00:16:33,192 position:50%
I can see the status changed
to "On the Way,"


345
00:16:33,192 --> 00:16:36,362 position:50%
with an estimated delivery date
of June 10th.


346
00:16:36,362 --> 00:16:38,397 position:50%
They also included
a custom message


347
00:16:38,397 --> 00:16:41,667 line:0
and tracking information
for the shipment.


348
00:16:41,667 --> 00:16:43,569 position:50%
Oh, remember my baking goods?


349
00:16:43,569 --> 00:16:46,272 position:50%
I just got a notification
that they are ready for pickup.


350
00:16:46,272 --> 00:16:48,007 line:0
Let's check it out.


351
00:16:48,007 --> 00:16:50,610 position:50%
I have ordered
my bakery goods for pick up.


352
00:16:50,610 --> 00:16:52,912 position:50%
They are ready for pick up,
that's great!


353
00:16:52,912 --> 00:16:55,681 line:0
Bake My Breath Away
has provided my pickup window,


354
00:16:55,681 --> 00:16:57,183 position:50%
pickup instructions,


355
00:16:57,183 --> 00:16:59,852 position:50%
and a barcode
to present upon arrival.


356
00:16:59,852 --> 00:17:03,522 line:-1
We've seen that order tracking
works seamlessly with Apple Pay.


357
00:17:03,522 --> 00:17:06,292 line:-1
Let's have a look at how
you can integrate order tracking


358
00:17:06.292 --> 00:17:08.961 line:-1 position:50%
into your customer experience.


359
00:17:08,961 --> 00:17:10,997 line:-1
To get started
with order tracking,


360
00:17:10,997 --> 00:17:13,733 line:-1
first, you must create
an Order Type ID


361
00:17:13.733 --> 00:17:15.768 line:-1 position:50%
in your developer account.


362
00:17:15,768 --> 00:17:19,672 line:-1
An Order Type ID identifies
your organization as an entity


363
00:17:19,672 --> 00:17:22,141 line:-1
that provides order information.


364
00:17:22.141 --> 00:17:24.911 line:-1 position:50%
You can register
multiple Order Type IDs --


365
00:17:24.911 --> 00:17:26.979 line:-1 position:50%
for example,
to provide order information


366
00:17:26,979 --> 00:17:29,882 line:-1
on behalf of multiple merchants.


367
00:17:29,882 --> 00:17:32,985 line:-1
Also create an Order Type ID
Certificate.


368
00:17:32.985 --> 00:17:35.688 line:-1 position:50%
You will use the certificate
to build order packages


369
00:17:35.688 --> 00:17:38.157 line:-1 position:50%
and update orders.


370
00:17:38.157 --> 00:17:41.227 line:-1 position:50%
Orders are distributed
as order packages.


371
00:17:41.227 --> 00:17:44.664 line:-1 position:50%
An order package includes
all the metadata and information


372
00:17:44,664 --> 00:17:46,032 line:-1
for an order.


373
00:17:46.032 --> 00:17:48.701 line:-1 position:50%
It can represent
a wide range of scenarios,


374
00:17:48,701 --> 00:17:53,105 line:-1
including shipping, pickup,
and multifulfillment orders.


375
00:17:53,105 --> 00:17:55,775 line:-1
An order package
also includes images,


376
00:17:55,775 --> 00:17:58,678 line:-1
like your logo
and line item images.


377
00:17:58.678 --> 00:18:00.446 line:-1 position:50%
You can also add localizations


378
00:18:00.446 --> 00:18:03.950 line:-1 position:50%
to support your diverse
range of customers.


379
00:18:03.950 --> 00:18:06.786 line:-1 position:50%
Every order package must be
cryptographically signed


380
00:18:06.786 --> 00:18:08.955 line:-1 position:50%
to verify its origin.


381
00:18:08,955 --> 00:18:10,690 line:-1
Once everything is in place,


382
00:18:10.690 --> 00:18:14.093 line:-1 position:50%
order packages are compressed
for distribution.


383
00:18:14.093 --> 00:18:15.695 line:-1 position:50%
Check out
the sample order packages


384
00:18:15,695 --> 00:18:17,296 line:-1
attached to this session.


385
00:18:17,296 --> 00:18:19,398 line:-1
And for more information
on order packages,


386
00:18:19,398 --> 00:18:22,234 line:-1
see the developer
documentation.


387
00:18:22,234 --> 00:18:25,838 line:-1
Adding an order to Wallet
works seamlessly with Apple Pay.


388
00:18:25,838 --> 00:18:28,040 line:-1
When your customer
authorized a payment,


389
00:18:28.040 --> 00:18:31.444 line:-1 position:50%
your app or web page
receives payment information,


390
00:18:31.444 --> 00:18:34.847 line:-1 position:50%
then sends it to your server
for processing.


391
00:18:34,847 --> 00:18:37,550 line:-1
If processing the payment
information succeeds,


392
00:18:37,550 --> 00:18:41,220 line:-1
your server creates an order
and some metadata.


393
00:18:41.220 --> 00:18:43.789 line:-1 position:50%
Your server then returns details
about that order


394
00:18:43.789 --> 00:18:47.526 line:-1 position:50%
to your app or web page
to include in the result.


395
00:18:47,526 --> 00:18:50,997 line:-1
The order details enable the
device to asynchronously request


396
00:18:50.997 --> 00:18:53.332 line:-1 position:50%
the order from your server.


397
00:18:53,332 --> 00:18:57,370 line:0
Your server then returns
the order package to the device.


398
00:18:57,370 --> 00:18:59,372 line:-1
When your server
creates an order,


399
00:18:59,372 --> 00:19:01,407 line:-1
assign an Order ID
that is unique


400
00:19:01,407 --> 00:19:04,477 line:-1
within the namespace
of your Order Type ID.


401
00:19:04,477 --> 00:19:08,581 line:-1
Your server must also generate
a secure authentication token.


402
00:19:08,581 --> 00:19:12,651 line:-1
This is a shared secret that is
part of the order details.


403
00:19:12,651 --> 00:19:15,454 line:-1
The device will use the token
to authenticate itself


404
00:19:15,454 --> 00:19:17,857 line:-1
when it requests the order.


405
00:19:17.857 --> 00:19:19.291 line:-1 position:50%
Let's take a look at an example


406
00:19:19,291 --> 00:19:22,128 line:-1
for returning a payment
authorization result.


407
00:19:22,128 --> 00:19:24,330 line:-1
When your customer
authorized a payment,


408
00:19:24,330 --> 00:19:27,566 line:-1
your app sends the payment
information to your server


409
00:19:27.566 --> 00:19:29.935 line:-1 position:50%
and asks it to create an order.


410
00:19:29.935 --> 00:19:32.938 line:-1 position:50%
Check whether the server
result indicates success


411
00:19:32,938 --> 00:19:36,042 line:-1
and handle any error
returned by your server.


412
00:19:36,042 --> 00:19:39,278 line:-1
If the server result
does indicate success,


413
00:19:39.278 --> 00:19:41.180 line:-1 position:50%
complete the payment
with an appropriate


414
00:19:41,180 --> 00:19:44,050 line:-1
authorization result.


415
00:19:44.050 --> 00:19:46.252 line:-1 position:50%
To return a payment
authorization result


416
00:19:46.252 --> 00:19:47.987 line:-1 position:50%
with order details,


417
00:19:47,987 --> 00:19:51,624 line:-1
first, extract them
from the server result.


418
00:19:51,624 --> 00:19:55,828 line:-1
Then create a
PKPaymentOrderDetails object


419
00:19:55,828 --> 00:19:59,265 line:-1
with the Order Ttype ID,
Order ID,


420
00:19:59,265 --> 00:20:03,502 line:-1
the URL to your server,
and the authenticationToken.


421
00:20:03,502 --> 00:20:06,739 line:-1
Assign the PKPaymentOrderDetails
object


422
00:20:06,739 --> 00:20:12,211 line:-1
to the new orderDetails property
on PKPaymentAuthorizationResult.


423
00:20:12,211 --> 00:20:13,612 line:-1
That's it!


424
00:20:13,612 --> 00:20:17,216 line:-1
You can complete a payment with
order details on the web too.


425
00:20:17,216 --> 00:20:22,188 line:-1
As before, extract the order
details from the server result.


426
00:20:22.188 --> 00:20:24.457 line:-1 position:50%
Then include the order details


427
00:20:24,457 --> 00:20:27,793 line:-1
in the data you complete
the payment with.


428
00:20:27.793 --> 00:20:29.528 line:-1 position:50%
To be able to update an order,


429
00:20:29.528 --> 00:20:31.964 line:-1 position:50%
create an order package
that indicates support


430
00:20:31.964 --> 00:20:34.200 line:-1 position:50%
for automatic updates.


431
00:20:34,200 --> 00:20:36,068 line:-1
When the order is added,


432
00:20:36.068 --> 00:20:38.871 line:-1 position:50%
the device will register
for updates to it.


433
00:20:38,871 --> 00:20:42,975 line:-1
Your server must store
information about registrations.


434
00:20:42,975 --> 00:20:45,978 line:-1
Later on, when your server
updates the order,


435
00:20:45,978 --> 00:20:49,215 line:-1
use the registration information
to notify devices


436
00:20:49.215 --> 00:20:52.518 line:-1 position:50%
that registered for updates
to it.


437
00:20:52,518 --> 00:20:55,154 line:-1
When the device receives
the push notification,


438
00:20:55,154 --> 00:20:58,757 line:-1
it will again request the order
from your server.


439
00:20:58,757 --> 00:21:01,427 line:0
Your server then returns
the updated order package


440
00:21:01,427 --> 00:21:03,629 position:50%
to the device.


441
00:21:03,629 --> 00:21:05,231 line:-1
Only your customers and you


442
00:21:05.231 --> 00:21:07.266 line:-1 position:50%
should know
what they have ordered.


443
00:21:07,266 --> 00:21:10,269 line:-1
We designed order tracking
with privacy in mind.


444
00:21:10,269 --> 00:21:12,972 line:-1
Order information
is exchanged directly


445
00:21:12,972 --> 00:21:15,508 line:-1
between devices and your server.


446
00:21:15.508 --> 00:21:18.077 line:-1 position:50%
When orders are synchronized
via iCloud,


447
00:21:18,077 --> 00:21:20,246 line:-1
they are end-to-end encrypted.


448
00:21:20.246 --> 00:21:21.914 line:-1 position:50%
Follow these practices
to provide


449
00:21:21.914 --> 00:21:24.717 line:-1 position:50%
the best customer
experience possible.


450
00:21:24.717 --> 00:21:27.720 line:-1 position:50%
Associate your app
with orders that you provide.


451
00:21:27.720 --> 00:21:30.990 line:-1 position:50%
If your app delivers
notifications and is installed,


452
00:21:30,990 --> 00:21:34,026 line:-1
you can disable order tracking
notifications.


453
00:21:34.026 --> 00:21:37.696 line:-1 position:50%
This helps to prevent
duplicate notifications.


454
00:21:37,696 --> 00:21:40,900 line:-1
Use the knowledge you have
about your customer preferences


455
00:21:40,900 --> 00:21:44,203 line:-1
to provide relevant
localizations only.


456
00:21:44.203 --> 00:21:46.872 line:-1 position:50%
Be mindful of
the order package size.


457
00:21:46,872 --> 00:21:48,374 line:-1
Try to keep the size small


458
00:21:48,374 --> 00:21:51,043 line:-1
to reduce expensive
networking cost.


459
00:21:51.043 --> 00:21:52.378 line:-1 position:50%
When you update an order,


460
00:21:52.378 --> 00:21:56.215 line:-1 position:50%
promptly notify devices that
registered for updates to it.


461
00:21:56.215 --> 00:22:00.186 line:-1 position:50%
Orders in Wallet should match
the actual state of the order.


462
00:22:00.186 --> 00:22:05.024 line:-1 position:50%
Make sure to also check out
the HIG for order tracking.


463
00:22:05,024 --> 00:22:07,793 line:-1
Platforms can make your
integration of order tracking


464
00:22:07.793 --> 00:22:09.161 line:-1 position:50%
much simpler.


465
00:22:09.161 --> 00:22:12.998 line:-1 position:50%
We are happy to announce
Shopify, Narvar, and Route


466
00:22:12.998 --> 00:22:15.467 line:-1 position:50%
will support order tracking
by fall.


467
00:22:15,467 --> 00:22:18,170 line:-1
Look out for more platforms
supporting order tracking


468
00:22:18,170 --> 00:22:19,838 line:-1
in the coming months.


469
00:22:19,838 --> 00:22:21,840 line:-1
Order tracking is
a great way to enhance


470
00:22:21,840 --> 00:22:24,944 line:-1
the postpurchase experience
for your customers.


471
00:22:24,944 --> 00:22:26,579 line:-1
With automatic updates,


472
00:22:26,579 --> 00:22:28,647 line:-1
your customers
will always be up to date


473
00:22:28.647 --> 00:22:31.016 line:-1 position:50%
about the status
of their orders.


474
00:22:31,016 --> 00:22:33,953 line:-1
We believe your customers
will love this experience


475
00:22:33,953 --> 00:22:36,722 line:-1
and we look forward
to ordering with you soon!


476
00:22:36,722 --> 00:22:39,258 line:-1
Now, I'll pass over to David.


477
00:22:39.258 --> 00:22:41.060 line:-1 position:50%
David: Thanks, Lais!


478
00:22:41.060 --> 00:22:44.363 line:-1 position:50%
I'm super excited to talk about
the new functionality


479
00:22:44.363 --> 00:22:48.300 line:-1 position:50%
we've added to IDs in Wallet
in iOS 16.


480
00:22:48,300 --> 00:22:52,938 line:-1
We launched IDs in Wallet
earlier this year in iOS 15.4.


481
00:22:52.938 --> 00:22:55.307 line:-1 position:50%
It allows users
in supported US states


482
00:22:55.307 --> 00:22:58.677 line:-1 position:50%
to add their driver's license
or State ID to Wallet.


483
00:22:58,677 --> 00:23:01,981 line:-1
IDs in Wallet are issued
by the same issuing authorities


484
00:23:01,981 --> 00:23:04,149 line:-1
as users' physical IDs.


485
00:23:04,149 --> 00:23:07,419 line:-1
in the US, that's their State's
Department of Motor Vehicles


486
00:23:07.419 --> 00:23:10.322 line:-1 position:50%
or equivalent organization.


487
00:23:10.322 --> 00:23:14.660 line:-1 position:50%
In iOS 16, we've added
a new API that allows apps


488
00:23:14.660 --> 00:23:17.930 line:-1 position:50%
and App Clips to request
information from IDs in Wallet


489
00:23:17.930 --> 00:23:21.634 line:-1 position:50%
in order to verify
a user's age or identity.


490
00:23:21.634 --> 00:23:24.103 line:-1 position:50%
Your app will request
the information,


491
00:23:24.103 --> 00:23:26.805 line:-1 position:50%
the user will review
and approve the request,


492
00:23:26.805 --> 00:23:29.341 line:-1 position:50%
Then your app will send
the response to your server


493
00:23:29.341 --> 00:23:32.244 line:-1 position:50%
for decryption and verification.


494
00:23:32.244 --> 00:23:34.179 line:-1 position:50%
You can request
a number of data elements


495
00:23:34.179 --> 00:23:35.781 line:-1 position:50%
from the user's ID.


496
00:23:35,781 --> 00:23:39,752 line:-1
These include their name,
their address,


497
00:23:39.752 --> 00:23:42.154 line:-1 position:50%
their date of birth,
their photo --


498
00:23:42.154 --> 00:23:43.756 line:-1 position:50%
known as the portrait --


499
00:23:43,756 --> 00:23:46,625 line:-1
the issuing authority
that issued their ID,


500
00:23:46,625 --> 00:23:49,995 line:-1
the number and expiration
date of their physical ID,


501
00:23:49.995 --> 00:23:52.598 line:-1 position:50%
and the driving privileges
granted by their ID,


502
00:23:52,598 --> 00:23:54,667 line:-1
if there are any.


503
00:23:54,667 --> 00:23:58,704 line:-1
A very common use case for IDs
is to verify someone's age.


504
00:23:58.704 --> 00:24:02.641 line:-1 position:50%
With a physical ID, that means
looking at their date of birth.


505
00:24:02,641 --> 00:24:04,977 line:-1
But the date of birth reveals
far more information


506
00:24:04,977 --> 00:24:08,113 line:-1
than is necessary
just to verify age.


507
00:24:08,113 --> 00:24:10,616 line:-1
If you're checking my age,
you don't actually need to know


508
00:24:10,616 --> 00:24:12,985 line:-1
the exact day or year
I was born,


509
00:24:12,985 --> 00:24:14,753 line:-1
or even how old I am.


510
00:24:14.753 --> 00:24:17.723 line:-1 position:50%
You just need to know
if I'm old enough.


511
00:24:17,723 --> 00:24:21,493 line:-1
With IDs in Wallet, you can ask
that question directly.


512
00:24:21.493 --> 00:24:23.962 line:-1 position:50%
Your app can request
a Boolean data element


513
00:24:23,962 --> 00:24:27,099 line:-1
indicating whether the user
is above a certain age,


514
00:24:27.099 --> 00:24:29.268 line:-1 position:50%
providing a more
privacy-preserving way


515
00:24:29,268 --> 00:24:33,505 line:-1
to do age verification than
checking the full date of birth.


516
00:24:33,505 --> 00:24:36,775 line:0
When your app invokes the API,
a sheet will show the user


517
00:24:36,775 --> 00:24:39,378 position:50%
what information
you're requesting.


518
00:24:39,378 --> 00:24:41,080 line:0
It will also show
whether you intend


519
00:24:41,080 --> 00:24:42,548 position:50%
to store that information,


520
00:24:42,548 --> 00:24:44,817 line:0
and for how long
you intend to store it.


521
00:24:44,817 --> 00:24:47,119 line:-1
This lets the user make
an informed decision


522
00:24:47.119 --> 00:24:49.822 line:-1 position:50%
about whether to share
the information with your app.


523
00:24:49,822 --> 00:24:52,091 line:-1
No information is shared
until they give


524
00:24:52.091 --> 00:24:56.328 line:-1 position:50%
their explicit approval
using Face ID or Touch ID.


525
00:24:56.328 --> 00:24:58.831 line:-1 position:50%
The response you receive
contains just the elements


526
00:24:58.831 --> 00:25:00.199 line:-1 position:50%
you requested.


527
00:25:00,199 --> 00:25:02,501 line:-1
Other identity verification
mechanisms,


528
00:25:02,501 --> 00:25:04,937 line:-1
such as scanning
a physical ID card,


529
00:25:04,937 --> 00:25:07,272 line:-1
share everything
that's on the ID.


530
00:25:07.272 --> 00:25:09.708 line:-1 position:50%
By limiting the sharing
to just what you need,


531
00:25:09,708 --> 00:25:12,945 line:-1
IDs in Wallet is more
privacy-preserving for the user


532
00:25:12,945 --> 00:25:15,147 line:-1
and reduces the amount
of sensitive information


533
00:25:15.147 --> 00:25:18.751 line:-1 position:50%
you need to keep secure
on your server.


534
00:25:18.751 --> 00:25:21.653 line:-1 position:50%
The response is signed
by the ID's issuing authority,


535
00:25:21,653 --> 00:25:23,555 line:-1
making it straightforward
to verify


536
00:25:23.555 --> 00:25:26.725 line:-1 position:50%
that the information
in the response is authentic.


537
00:25:26.725 --> 00:25:29.228 line:-1 position:50%
Note that the issuing authority
creates the ID


538
00:25:29.228 --> 00:25:32.398 line:-1 position:50%
but is not involved
at the time you invoke the API.


539
00:25:32,398 --> 00:25:34,933 line:-1
They do not learn when users
share their information


540
00:25:34,933 --> 00:25:39,204 line:-1
or to whom they share it with.


541
00:25:39.204 --> 00:25:42.007 line:-1 position:50%
To use the API, you need
to request an entitlement


542
00:25:42,007 --> 00:25:44,910 line:-1
through your developer account.


543
00:25:44,910 --> 00:25:46,745 line:-1
You'll then need to set up
a merchant ID


544
00:25:46.745 --> 00:25:48.814 line:-1 position:50%
and encryption certificate.


545
00:25:48,814 --> 00:25:51,850 line:-1
This process is very similar
to setting up in-app payment


546
00:25:51.850 --> 00:25:53.252 line:-1 position:50%
with Apple Pay.


547
00:25:53.252 --> 00:25:58.123 line:-1 position:50%
We'll talk more about how to use
the ID and certificate in a little bit.


548
00:25:58,123 --> 00:26:01,427 line:-1
For now, let's talk about
the verification flow.


549
00:26:01.427 --> 00:26:04.296 line:-1 position:50%
At a high level,
it consists of four steps.


550
00:26:04,296 --> 00:26:07,966 line:-1
First, your app will invoke the
API in the PassKit framework


551
00:26:07,966 --> 00:26:11,770 line:-1
and specify the information
you're requesting.


552
00:26:11,770 --> 00:26:13,439 line:-1
The system will then display
a sheet


553
00:26:13,439 --> 00:26:16,408 line:-1
prompting the user
to approve the request.


554
00:26:16.408 --> 00:26:18.610 line:-1 position:50%
Once they do,
your app will receive


555
00:26:18,610 --> 00:26:21,113 line:-1
an encrypted response.


556
00:26:21.113 --> 00:26:23.816 line:-1 position:50%
Your app will then pass
that response to your server


557
00:26:23,816 --> 00:26:27,186 line:-1
for decryption and verification.


558
00:26:27,186 --> 00:26:32,124 line:-1
First, let's talk about
how to use the API in PassKit.


559
00:26:32,124 --> 00:26:34,660 line:-1
If your app uses SwiftUI,
you should use the


560
00:26:34,660 --> 00:26:37,963 line:-1
VerifyIdentityWithWalletButton
SwiftUI view.


561
00:26:37.963 --> 00:26:39.665 line:-1 position:50%
This displays a button
that triggers


562
00:26:39.665 --> 00:26:43.101 line:-1 position:50%
the identity verification
flow when pressed.


563
00:26:43.101 --> 00:26:46.839 line:-1 position:50%
Just like the Pay with Apple Pay
and Add Pass to Wallet buttons,


564
00:26:46,839 --> 00:26:50,342 line:-1
the Verify Identity with Wallet
button provides a familiar,


565
00:26:50.342 --> 00:26:54.179 line:-1 position:50%
consistent experience
across apps using the API.


566
00:26:54,179 --> 00:26:56,248 line:-1
You can choose between
four different labels


567
00:26:56,248 --> 00:26:58,650 line:-1
to display a button
that fits your use case.


568
00:26:58.650 --> 00:27:00.853 line:-1 position:50%
It automatically switches
between single


569
00:27:00,853 --> 00:27:05,924 line:-1
and multiline versions depending
on the space available to it.


570
00:27:05.924 --> 00:27:07.426 line:-1 position:50%
When creating the button,


571
00:27:07,426 --> 00:27:10,896 line:-1
you need to specify
a PKIdentityRequest object,


572
00:27:10.896 --> 00:27:13.665 line:-1 position:50%
which describes the information
you want to request


573
00:27:13.665 --> 00:27:15.534 line:-1 position:50%
and how it should be returned.


574
00:27:15,534 --> 00:27:18,770 line:-1
Let's take a look
at how to create it.


575
00:27:18,770 --> 00:27:19,905 line:-1
You begin by creating a


576
00:27:19.905 --> 00:27:22.841 line:-1 position:50%
PKIdentityDrivers
LicenseDescriptor,


577
00:27:22,841 --> 00:27:24,476 line:-1
which describes
the data elements


578
00:27:24.476 --> 00:27:26.044 line:-1 position:50%
that you're looking for.


579
00:27:26,044 --> 00:27:28,480 line:-1
Use the addElements method
to specify elements


580
00:27:28,480 --> 00:27:29,715 line:-1
you want to request,


581
00:27:29,715 --> 00:27:32,417 line:-1
along with whether you intend
to store them.


582
00:27:32.417 --> 00:27:35.387 line:-1 position:50%
You can invoke the addElements
method multiple times


583
00:27:35,387 --> 00:27:37,189 line:-1
to specify different
sets of elements


584
00:27:37,189 --> 00:27:39,224 line:-1
with different intents to store.


585
00:27:39,224 --> 00:27:42,427 line:-1
In this example,
I'm calling it twice.


586
00:27:42.427 --> 00:27:45.364 line:-1 position:50%
First, I add an
age(atLeast: element,


587
00:27:45.364 --> 00:27:48.367 line:-1 position:50%
which is not going to be stored.


588
00:27:48.367 --> 00:27:51.303 line:-1 position:50%
Then, I call the addElements
method again to request


589
00:27:51.303 --> 00:27:54.640 line:-1 position:50%
the user's givenName,
familyName, and portrait,


590
00:27:54.640 --> 00:27:58.343 line:-1 position:50%
all of which may be stored
for up to 30 days.


591
00:27:58.343 --> 00:28:03.315 line:-1 position:50%
The descriptor then goes
into a PKIdentityRequest.


592
00:28:03,315 --> 00:28:07,185 position:50%
The next step is to specify
a merchantIdentifier to use.


593
00:28:07,185 --> 00:28:08,754 line:0
The merchantIdentifier
indicates


594
00:28:08,754 --> 00:28:11,557 line:0
the encryption certificate
to which the API response


595
00:28:11,557 --> 00:28:13,425 position:50%
will be encrypted.


596
00:28:13,425 --> 00:28:15,627 line:0
You'll configure both
the merchantIdentifier


597
00:28:15,627 --> 00:28:19,765 line:0
and its encryption certificate
through your developer account.


598
00:28:19,765 --> 00:28:22,200 position:50%
Finally, you'll need
to specify a nonce,


599
00:28:22,200 --> 00:28:23,936 position:50%
which will be tied
to the response you receive


600
00:28:23,936 --> 00:28:25,437 line:0
from the API.


601
00:28:25,437 --> 00:28:27,172 position:50%
Its an important
security feature


602
00:28:27,172 --> 00:28:29,374 line:0
used to prevent replays
of a response


603
00:28:29,374 --> 00:28:32,611 line:0
and to bind it
to a specific user session.


604
00:28:32,611 --> 00:28:35,347 line:0
Exactly how you manage the nonce
is up to you,


605
00:28:35,347 --> 00:28:37,649 line:0
based on your own
security requirements.


606
00:28:37,649 --> 00:28:40,652 position:50%
Often, it comes from
your server, because later on,


607
00:28:40,652 --> 00:28:42,854 line:0
your server will be
responsible for enforcing


608
00:28:42,854 --> 00:28:45,457 line:0
that the nonce is valid.


609
00:28:45,457 --> 00:28:47,059 position:50%
With all of those
properties set,


610
00:28:47,059 --> 00:28:50,362 line:0
you have your
PKIdentityRequest.


611
00:28:50.362 --> 00:28:52.731 line:-1 position:50%
Now, let's get back
to the button.


612
00:28:52,731 --> 00:28:54,999 line:-1
If identity verification
is available,


613
00:28:54.999 --> 00:28:57.002 line:-1 position:50%
the button will be displayed
in your app,


614
00:28:57,002 --> 00:28:59,671 line:-1
and tapping it will start
the identity verification flow


615
00:28:59.671 --> 00:29:02.074 line:-1 position:50%
with your request.


616
00:29:02,074 --> 00:29:04,743 line:-1
If identity verification
is not available,


617
00:29:04.743 --> 00:29:08.347 line:-1 position:50%
a fallback view you specify
will be displayed instead.


618
00:29:08.347 --> 00:29:11.416 line:-1 position:50%
For example, this will happen
if there isn't an ID in Wallet


619
00:29:11.416 --> 00:29:12.951 line:-1 position:50%
on this iPhone.


620
00:29:12.951 --> 00:29:14.252 line:-1 position:50%
You can use
the fallback view


621
00:29:14,252 --> 00:29:18,190 line:-1
to offer other ways
to verify identity.


622
00:29:18,190 --> 00:29:20,993 line:-1
Let's assume identity
verification is available,


623
00:29:20,993 --> 00:29:22,928 line:-1
and the user taps the button.


624
00:29:22,928 --> 00:29:25,831 position:50%
The system will then show
a sheet with your request,


625
00:29:25,831 --> 00:29:27,766 line:0
including the elements
you requested


626
00:29:27,766 --> 00:29:30,135 position:50%
and your intent to store them.


627
00:29:30,135 --> 00:29:33,772 line:0
The user can approve the request
with Face ID or Touch ID,


628
00:29:33,772 --> 00:29:37,109 line:0
or close the sheet
without approving.


629
00:29:37,109 --> 00:29:39,378 line:-1
Your code will then receive
a result object


630
00:29:39,378 --> 00:29:42,948 line:-1
containing the outcome
of the request.


631
00:29:42,948 --> 00:29:46,818 line:-1
If the request was approved,
you'll receive a success result.


632
00:29:46,818 --> 00:29:49,554 line:-1
This comes with
a PKIdentityDocument object


633
00:29:49,554 --> 00:29:51,556 line:-1
containing the
encrypted response,


634
00:29:51,556 --> 00:29:53,191 line:-1
which your app
will send to your server


635
00:29:53,191 --> 00:29:56,895 line:-1
for decryption and verification.


636
00:29:56.895 --> 00:29:58.897 line:-1 position:50%
If the request
was not successful,


637
00:29:58,897 --> 00:30:00,932 line:-1
you'll receive a failure result.


638
00:30:00.932 --> 00:30:02.300 line:-1 position:50%
The most common cause
of failure


639
00:30:02,300 --> 00:30:04,269 line:-1
is that the request
was not approved,


640
00:30:04,269 --> 00:30:07,606 line:-1
in which case you'll receive
a cancelled error.


641
00:30:07.606 --> 00:30:10.275 line:-1 position:50%
That was
VerifyIdentityWithWalletButton,


642
00:30:10,275 --> 00:30:12,644 line:-1
the SwiftUI version of the API.


643
00:30:12.644 --> 00:30:14.246 line:-1 position:50%
Use it to display a button


644
00:30:14.246 --> 00:30:16.648 line:-1 position:50%
that launches
the identity verification flow


645
00:30:16.648 --> 00:30:19.851 line:-1 position:50%
and requests information
from IDs in Wallet.


646
00:30:19,851 --> 00:30:22,287 line:-1
If you're not using
SwiftUI in your app,


647
00:30:22.287 --> 00:30:24.790 line:-1 position:50%
you can also use
the PKIdentityButton


648
00:30:24,790 --> 00:30:27,793 line:-1
and PKIdentityAuthorization
Controller classes


649
00:30:27.793 --> 00:30:31.096 line:-1 position:50%
to accomplish the same thing.


650
00:30:31.096 --> 00:30:34.533 line:-1 position:50%
OK, so, now you've
requested the information,


651
00:30:34,533 --> 00:30:36,802 line:-1
the user's approved the request,


652
00:30:36.802 --> 00:30:38.704 line:-1 position:50%
and your app has sent
the encrypted response


653
00:30:38.704 --> 00:30:40.238 line:-1 position:50%
to your server.


654
00:30:40.238 --> 00:30:42.641 line:-1 position:50%
Now, let's talk about
what your server needs to do


655
00:30:42,641 --> 00:30:46,511 line:-1
to decrypt and verify
that response.


656
00:30:46.511 --> 00:30:49.181 line:-1 position:50%
I'm only going to skim
the surface on this topic,


657
00:30:49.181 --> 00:30:53.218 line:-1 position:50%
so please check the developer
documentation for more details.


658
00:30:53,218 --> 00:30:56,188 line:-1
The response format uses
several international standards,


659
00:30:56,188 --> 00:30:58,590 line:-1
so I strongly recommend
familiarizing yourself


660
00:30:58,590 --> 00:31:01,493 line:-1
with those as well.


661
00:31:01,493 --> 00:31:03,095 line:0
The response data you'll receive


662
00:31:03,095 --> 00:31:06,098 line:0
is in a CBOR-encoded
encryption envelope.


663
00:31:06,098 --> 00:31:10,235 line:0
CBOR is a data format
defined in RFC 8949.


664
00:31:10,235 --> 00:31:11,636 line:0
It's similar to JSON


665
00:31:11,636 --> 00:31:14,473 line:0
but uses binary data
to encode objects.


666
00:31:14,473 --> 00:31:16,675 line:0
The encryption envelope
contains metadata


667
00:31:16,675 --> 00:31:18,610 position:50%
needed for
the decryption process,


668
00:31:18,610 --> 00:31:21,713 line:0
along with the encrypted data
itself.


669
00:31:21,713 --> 00:31:24,316 line:0
The data is encrypted
using HPKE,


670
00:31:24,316 --> 00:31:28,019 line:0
an encryption scheme
defined in RFC 9180.


671
00:31:28,019 --> 00:31:32,023 line:0
Your server will decrypt
this data using its private key.


672
00:31:32,023 --> 00:31:35,327 position:50%
Once decrypted, you'll get
an mdoc response object.


673
00:31:35,327 --> 00:31:39,364 line:0
The mdoc response is defined
in ISO 18013 part five,


674
00:31:39,364 --> 00:31:44,002 position:50%
the ISO standard for mobile
Driver's Licenses and State IDs.


675
00:31:44,002 --> 00:31:46,638 position:50%
The mdoc response object
contains the data elements


676
00:31:46,638 --> 00:31:48,573 line:0
that you requested.


677
00:31:48,573 --> 00:31:51,076 line:0
It also includes a number
of security features


678
00:31:51,076 --> 00:31:52,711 position:50%
that your server
needs to validate


679
00:31:52,711 --> 00:31:55,413 position:50%
to ensure that the response
is authentic.


680
00:31:55,413 --> 00:31:57,682 line:0
Note that your server
will perform the decryption


681
00:31:57,682 --> 00:31:59,584 line:0
and validation itself.


682
00:31:59,584 --> 00:32:02,587 position:50%
Neither Apple servers nor
the issuing authority's servers


683
00:32:02,587 --> 00:32:04,322 line:0
are involved.


684
00:32:04.322 --> 00:32:06.057 line:-1 position:50%
Before we can talk
about decryption


685
00:32:06.057 --> 00:32:07.526 line:-1 position:50%
and response validation,


686
00:32:07,526 --> 00:32:09,995 line:-1
we need to talk about
the session transcript.


687
00:32:09,995 --> 00:32:13,131 line:-1
This is a CBOR structure
that binds a response payload


688
00:32:13.131 --> 00:32:16.168 line:-1 position:50%
to a specific request
from a specific app.


689
00:32:16,168 --> 00:32:18,770 line:-1
Your server will need to build
this structure and use it


690
00:32:18,770 --> 00:32:23,041 line:-1
during both
decryption and validation.


691
00:32:23.041 --> 00:32:26.478 line:-1 position:50%
The session transcript contains
the same nonce and merchant ID


692
00:32:26.478 --> 00:32:29.681 line:-1 position:50%
you used earlier in your
PKIdentityRequest,


693
00:32:29.681 --> 00:32:32.184 line:-1 position:50%
as well as the team ID
of your developer team


694
00:32:32,184 --> 00:32:35,253 line:-1
and the SHA256 hash
of your encryption certificate's


695
00:32:35,253 --> 00:32:37,756 line:-1
public key.


696
00:32:37,756 --> 00:32:39,491 line:-1
When building
the session transcript,


697
00:32:39.491 --> 00:32:41.793 line:-1 position:50%
your server should check
that the inputs you're using


698
00:32:41,793 --> 00:32:43,061 line:-1
are all valid.


699
00:32:43.061 --> 00:32:45.630 line:-1 position:50%
That means the nonce shouldn't
have been used already,


700
00:32:45,630 --> 00:32:47,966 line:-1
and should be tied
to the current user.


701
00:32:47,966 --> 00:32:50,068 line:-1
The other values should
match what's expected


702
00:32:50,068 --> 00:32:52,270 line:-1
on your developer account.


703
00:32:52,270 --> 00:32:55,574 line:-1
Now let's talk about decrypting
the encrypted data.


704
00:32:55,574 --> 00:32:57,909 line:0
You'll need the session
transcript you just created,


705
00:32:57,909 --> 00:33:01,279 line:0
along with the metadata
from the encryption envelope.


706
00:33:01,279 --> 00:33:03,849 line:0
You'll also need
your private key.


707
00:33:03,849 --> 00:33:04,950 line:0
This is the private key


708
00:33:04,950 --> 00:33:07,786 position:50%
corresponding to the certificate
you setup earlier


709
00:33:07,786 --> 00:33:09,454 position:50%
in your developer account.


710
00:33:09,454 --> 00:33:12,290 line:0
To protect the confidentiality
of user information,


711
00:33:12,290 --> 00:33:15,260 line:0
you need to make sure
your private key stays private.


712
00:33:15,260 --> 00:33:17,162 line:-1
Store it securely
on your server


713
00:33:17,162 --> 00:33:19,331 line:-1
and never include it
in your app.


714
00:33:19.331 --> 00:33:21.600 line:-1 position:50%
If your private key
is ever compromised,


715
00:33:21.600 --> 00:33:25.871 line:-1 position:50%
revoke the certificate in your
developer account immediately.


716
00:33:25,871 --> 00:33:27,939 line:-1
After decrypting
the encrypted data,


717
00:33:27.939 --> 00:33:30.108 line:-1 position:50%
you'll receive
an mdoc response object


718
00:33:30.108 --> 00:33:32.277 line:-1 position:50%
containing two
cryptographic signatures,


719
00:33:32.277 --> 00:33:34.479 line:-1 position:50%
plus the data elements
you requested.


720
00:33:34.479 --> 00:33:37.349 line:-1 position:50%
You need to check both
signatures in the mdoc response


721
00:33:37.349 --> 00:33:39.851 line:-1 position:50%
before you can use
its data elements.


722
00:33:39,851 --> 00:33:42,921 line:-1
First, you need to check
the issuer signature.


723
00:33:42,921 --> 00:33:45,090 line:-1
This is a signature
from the issuing authority


724
00:33:45,090 --> 00:33:46,958 line:-1
of the user's ID.


725
00:33:46.958 --> 00:33:48.460 line:-1 position:50%
By checking this signature,


726
00:33:48,460 --> 00:33:50,662 line:-1
you're verifying that the data
in the response


727
00:33:50,662 --> 00:33:52,697 line:-1
came from the real
issuing authority


728
00:33:52.697 --> 00:33:54.599 line:-1 position:50%
and wasn't tampered with.


729
00:33:54,599 --> 00:33:57,535 line:-1
You should check that not only
is the signature valid,


730
00:33:57.535 --> 00:34:01.273 line:-1 position:50%
but also that it is signed by
an issuer certificate you trust.


731
00:34:01.273 --> 00:34:03.842 line:-1 position:50%
Take a look at the documentation
for more details


732
00:34:03,842 --> 00:34:07,779 line:-1
about the issuer certificates
used by IDs in Wallet.


733
00:34:07,779 --> 00:34:11,016 line:-1
Next, you need to verify
the device signature.


734
00:34:11,016 --> 00:34:13,051 line:-1
This is a signature
created by a key


735
00:34:13,051 --> 00:34:15,954 line:-1
in the Secure Element
of the user's iPhone.


736
00:34:15,954 --> 00:34:18,156 line:-1
It proves that the response
you received


737
00:34:18.156 --> 00:34:20.625 line:-1 position:50%
came from the same iPhone
that the issuing authority


738
00:34:20.625 --> 00:34:22.994 line:-1 position:50%
originally issued the ID to.


739
00:34:22.994 --> 00:34:25.730 line:-1 position:50%
Here, you'll need to use
your session transcript again,


740
00:34:25,730 --> 00:34:29,968 line:-1
along with some information
covered by the issuer signature.


741
00:34:29,968 --> 00:34:32,404 line:-1
Finally, you're ready
to use the data elements


742
00:34:32.404 --> 00:34:33.905 line:-1 position:50%
that you requested.


743
00:34:33.905 --> 00:34:35.407 line:-1 position:50%
You should never
use these elements


744
00:34:35,407 --> 00:34:38,710 line:-1
without first verifying the
issuer and device signatures,


745
00:34:38.710 --> 00:34:41.713 line:-1 position:50%
because otherwise you don't know
whether the data you received


746
00:34:41.713 --> 00:34:44.115 line:-1 position:50%
is authentic.


747
00:34:44,115 --> 00:34:46,618 line:-1
And with all those steps
completed, you're done!


748
00:34:46,618 --> 00:34:48,753 line:-1
Your app has requested
the information,


749
00:34:48,753 --> 00:34:52,691 line:-1
and your server has decrypted
and verified the response.


750
00:34:52.691 --> 00:34:55.260 line:-1 position:50%
You might be wondering
how to test your implementation


751
00:34:55.260 --> 00:34:57.262 line:-1 position:50%
if you don't have
an ID in Wallet.


752
00:34:57,262 --> 00:35:01,433 line:-1
We've provided a few mechanisms
to help you do that.


753
00:35:01,433 --> 00:35:04,269 line:-1
First, you can test
in the iOS Simulator,


754
00:35:04,269 --> 00:35:07,238 line:-1
where the API will return
a mock response.


755
00:35:07.238 --> 00:35:09.641 line:-1 position:50%
This response is similar
to a real one,


756
00:35:09,641 --> 00:35:12,978 line:-1
but lacks real signatures.


757
00:35:12,978 --> 00:35:15,480 line:-1
Similarly, you can use
a test profile


758
00:35:15,480 --> 00:35:18,016 line:-1
to receive a mock response
on a real iPhone,


759
00:35:18,016 --> 00:35:21,319 line:-1
even If you don't have an ID
in Wallet on that iPhone.


760
00:35:21.319 --> 00:35:24.956 line:-1 position:50%
See the documentation for more
details about how to do this.


761
00:35:24,956 --> 00:35:26,691 line:-1
Note that your server
should never treat


762
00:35:26.691 --> 00:35:30.495 line:-1 position:50%
either of these mock responses
like a real one.


763
00:35:30.495 --> 00:35:32.964 line:-1 position:50%
To help you with
your server implementation,


764
00:35:32.964 --> 00:35:36.167 line:-1 position:50%
the documentation also
includes an example response,


765
00:35:36,167 --> 00:35:41,439 line:-1
along with everything you need
to decrypt and validate it.


766
00:35:41.439 --> 00:35:44.376 line:-1 position:50%
And that's how you can perform
identity verification


767
00:35:44.376 --> 00:35:47.178 line:-1 position:50%
with IDs in Wallet in iOS 16.


768
00:35:47,178 --> 00:35:49,948 line:-1
We discussed how to use
the API in your app,


769
00:35:49,948 --> 00:35:52,083 line:-1
how to process the response
on your server,


770
00:35:52.083 --> 00:35:54.886 line:-1 position:50%
and how to test
your implementation.


771
00:35:54,886 --> 00:35:57,622 line:-1
Lais: This year, we introduced
many great new features


772
00:35:57,622 --> 00:35:59,391 line:-1
to Wallet and Apple Pay.


773
00:35:59.391 --> 00:36:01.760 line:-1 position:50%
These include
multi-merchant payments,


774
00:36:01,760 --> 00:36:04,362 line:-1
improved support
for automatic payments,


775
00:36:04,362 --> 00:36:07,565 line:-1
order tracking,
and identity verification.


776
00:36:07,565 --> 00:36:09,434 line:-1
Please check out
the developer documentation


777
00:36:09,434 --> 00:36:10,802 line:-1
for more information.


778
00:36:10.802 --> 00:36:14.973 line:-1 position:50%
David: Thank you for watching,
and have a great WWDC!


779
00:36:14,973 --> 00:36:19,077 size:2% position:90% align:right
♪

