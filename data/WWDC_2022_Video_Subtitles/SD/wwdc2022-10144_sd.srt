2
00:00:00,501 --> 00:00:08,509 line:-1
♪ ♪


3
00:00:09,977 --> 00:00:12,846 line:-2
Zheng Naiwei:
Hello and welcome to WWDC.


4
00:00:12,880 --> 00:00:16,750 line:-2
My name is Zheng Naiwei
from Apple's AVFoundation Team.


5
00:00:16.783 --> 00:00:20.120 line:-2 align:center
In this session we are going to talk about
how to improve


6
00:00:20,153 --> 00:00:25,492 line:-2
streaming delivery reliability with new
features we added to HLS Content Steering.


7
00:00:26,660 --> 00:00:29,029 line:-1
We will cover three topics today.


8
00:00:29.062 --> 00:00:31.798 line:-2 align:center
If you haven't heard of Content Steering,
don't worry.


9
00:00:31,832 --> 00:00:33,967 line:-1
It's a piece of HLS technology


10
00:00:34,001 --> 00:00:37,104 line:-2
that can dynamically steer
streaming traffic,


11
00:00:37.137 --> 00:00:39.907 line:-1 align:center
to improve streaming service quality.


12
00:00:39.940 --> 00:00:42.976 line:-2 align:center
I will give you a short review
to help you get on track.


13
00:00:44,878 --> 00:00:48,182 line:-2
Then I will present
the new Pathway cloning feature,


14
00:00:48.215 --> 00:00:52.219 line:-2 align:center
which can bring
dynamic steering ability beyond limits,


15
00:00:52,252 --> 00:00:55,689 line:-2
to further improve the reliability
of your streaming service.


16
00:00:56,990 --> 00:01:04,031 line:-2
Finally, I will use concrete examples
to guide you through how to influence


17
00:01:04,063 --> 00:01:06,533 line:-2
server-side logic for steering traffic.
Let's wait no more and get started.


18
00:01:07.768 --> 00:01:10.571 line:-2 align:center
Back in the time we don't have
Content Steering,


19
00:01:10.604 --> 00:01:14.074 line:-2 align:center
variant selection in case of error
fallback wasn't standardized


20
00:01:14,107 --> 00:01:16,310 line:-1
in the HLS specification.


21
00:01:16.343 --> 00:01:19.580 line:-2 align:center
And different client implementations
can behave differently


22
00:01:19,613 --> 00:01:22,349 line:-1
in choosing the next fallback variant.


23
00:01:22,382 --> 00:01:25,586 line:-2
But a typical way to do this
is to follow the variant ordering


24
00:01:25.619 --> 00:01:27.354 line:-1 align:center
in the multivariant playlist.


25
00:01:28.255 --> 00:01:32.826 line:-2 align:center
If a streaming provider wants to specify
a set of fallback CDNs,


26
00:01:32,860 --> 00:01:35,863 line:-2
they need to list every variant
from every CDN


27
00:01:35.896 --> 00:01:38.866 line:-2 align:center
and properly order them
in the multivariant playlist.


28
00:01:38.899 --> 00:01:42.302 line:-2 align:center
This way, in case the client player
encountered a failure


29
00:01:42.336 --> 00:01:46.106 line:-2 align:center
in the first variant,
it can move on to the next variant


30
00:01:46,139 --> 00:01:50,511 line:-2
in the playlist with the failed variant
penalized from selection.


31
00:01:50.544 --> 00:01:55.249 line:-2 align:center
In this case, we see that the client
player had trouble with the 6 Mbps variant


32
00:01:55,282 --> 00:02:01,088 line:-2
from CDN1 and thus moved on
to the next 3 Mbps variant from CDN1,


33
00:02:01,121 --> 00:02:04,758 line:-2
following the order
in the multivariant playlist.


34
00:02:04,791 --> 00:02:10,097 line:-2
If unfortunately the 3 Mbps variant
from CDN1 also failed,


35
00:02:10,130 --> 00:02:14,201 line:-2
the client player would be left
with no variants from CDN1,


36
00:02:14.234 --> 00:02:18.672 line:-2 align:center
and move on to
the 6 Mbps variant from CDN2.


37
00:02:18,705 --> 00:02:22,776 line:-2
It can do this on and on
until no variant to fallback to.


38
00:02:22.809 --> 00:02:26.780 line:-2 align:center
However, even though the playlist
authoring server can control the ordering


39
00:02:26,813 --> 00:02:28,248 line:-1
of the fallback variants,


40
00:02:28.282 --> 00:02:30.117 line:-1 align:center
such control only happens


41
00:02:30,150 --> 00:02:34,354 line:-2
at the point of client
requesting the multivariant playlist,


42
00:02:34,388 --> 00:02:36,390 line:-1
and once the playlist was handed out,


43
00:02:36,423 --> 00:02:39,459 line:-2
there's no way
to change the fallback ordering.


44
00:02:39.493 --> 00:02:42.863 line:-2 align:center
This is where Content Steering
comes into the picture.


45
00:02:42.896 --> 00:02:45.165 line:-2 align:center
With Content Steering,
the streaming provider


46
00:02:45,199 --> 00:02:49,203 line:-2
can now group variants into Pathways
with different CDN hosts.


47
00:02:50,904 --> 00:02:55,542 line:-2
The error fallback behavior is
now standardized for Content Steering.


48
00:02:55.576 --> 00:02:57.377 line:-1 align:center
Pathways are ordered by preference.


49
00:02:57,411 --> 00:03:00,514 line:-2
In this example,
the CDN1 Pathway at the top


50
00:03:00.547 --> 00:03:05.452 line:-2 align:center
is most preferred,
following CDN2 and CDN3.


51
00:03:05.485 --> 00:03:08.922 line:-2 align:center
The streaming provider also hosts
a Steering Server,


52
00:03:08,956 --> 00:03:13,160 line:-2
generating Steering Manifests
for each client player.


53
00:03:13,193 --> 00:03:16,964 line:-2
A Steering Manifest defines rules
of Pathway priorities,


54
00:03:16,997 --> 00:03:18,565 line:-1
so the player can follow the rules


55
00:03:18,599 --> 00:03:22,169 line:-2
in selecting and fallback between
variant streams.


56
00:03:23,036 --> 00:03:27,241 line:-2
Let's say for example the streaming
provider is trying to offload


57
00:03:27,274 --> 00:03:31,378 line:-1
some of the traffic from CDN1 to CND2.


58
00:03:31,411 --> 00:03:33,547 line:-1
It would generate a Steering Manifest


59
00:03:33,580 --> 00:03:36,283 line:-1
with the new Pathway priority rules,


60
00:03:36.316 --> 00:03:39.086 line:-1 align:center
and when a client player playing from CDN1


61
00:03:39.119 --> 00:03:42.122 line:-1 align:center
requests for a Steering Manifest update,


62
00:03:42,155 --> 00:03:45,526 line:-2
the Steering Server can send
the prepared Steering Manifest


63
00:03:45,559 --> 00:03:48,395 line:-1
with the rule changes to the client.


64
00:03:48,428 --> 00:03:52,065 line:-2
The client will parse and see
the new Pathway Priority rules,


65
00:03:52.099 --> 00:03:55.936 line:-1 align:center
and apply it to its playback session.


66
00:03:55,969 --> 00:03:59,106 line:-2
In this case the rule change
switched preference order


67
00:03:59,139 --> 00:04:02,209 line:-1
between Pathway CDN1 and CDN2


68
00:04:02,242 --> 00:04:07,514 line:-2
so that the client player will switch
and play from CDN2 immediately.


69
00:04:07,548 --> 00:04:09,850 line:-1
Then, in case of failures,


70
00:04:09,883 --> 00:04:14,988 line:-2
the client will first exhaust fallback
variants within the current Pathway,


71
00:04:15,022 --> 00:04:17,424 line:-1
and fallback to the most preferred Pathway


72
00:04:17,457 --> 00:04:20,627 line:-1
according to its current Pathway Priority.


73
00:04:20,661 --> 00:04:24,498 line:-2
In this case, if all variants
from CDN2 were errored out,


74
00:04:24,531 --> 00:04:28,168 line:-2
the client player can start to choose
from variants from CDN1,


75
00:04:28,202 --> 00:04:30,737 line:-1
which is the next preferred Pathway.


76
00:04:30.771 --> 00:04:34.041 line:-2 align:center
When we apply Content Steering
to the global scale,


77
00:04:34,074 --> 00:04:37,644 line:-2
it can solve bigger regional
load balancing problems.


78
00:04:37,678 --> 00:04:41,782 line:-2
Let's say our streaming service provider
operates all around the world,


79
00:04:41.815 --> 00:04:44.284 line:-1 align:center
with two main CDN providers.


80
00:04:44,318 --> 00:04:47,788 line:-2
To assign these CDNs
to client players globally,


81
00:04:47,821 --> 00:04:51,158 line:-2
the Steering Server prepared two
different Steering Manifests,


82
00:04:51,191 --> 00:04:56,230 line:-2
one prefers CDN1,
and the other prefers CDN2.


83
00:04:56.263 --> 00:04:58.699 line:-2 align:center
Then it distributes
these Steering Manifests


84
00:04:58.732 --> 00:05:02.002 line:-1 align:center
based on the client player's region


85
00:05:02,035 --> 00:05:06,306 line:-2
so that the North and South America
utilizes CDN1


86
00:05:06.340 --> 00:05:10.143 line:-1 align:center
and the rest of the world utilizes CDN2.


87
00:05:10.177 --> 00:05:13.981 line:-2 align:center
At the top of the world map
we show a horizontal stacked bar


88
00:05:14.014 --> 00:05:18.719 line:-2 align:center
representing the distribution of traffic
between CDN1 and CDN2.


89
00:05:18,752 --> 00:05:23,123 line:-2
As of right now, both CDNs are serving
half of the worldwide traffic.


90
00:05:24,024 --> 00:05:27,995 line:-2
However, over time the streaming
service provider observed


91
00:05:28,028 --> 00:05:31,798 line:-2
a significant increase of traffic
towards CDN2


92
00:05:31.832 --> 00:05:34.635 line:-1 align:center
because of global daylight shift.


93
00:05:34.668 --> 00:05:38.372 line:-2 align:center
At the same time,
the traffics toward CDN1 is decreasing.


94
00:05:39,640 --> 00:05:44,711 line:-2
So the streaming provider decided
to steer the Europe region to use CDN1.


95
00:05:44,745 --> 00:05:48,749 line:-2
It does so by preparing
a Steering Manifest that prefers CDN1,


96
00:05:48.782 --> 00:05:52.653 line:-2 align:center
and sends it to clients
from the Europe region.


97
00:05:52,686 --> 00:05:56,757 line:-2
Now those client players in that region
will steer traffic to CDN1,


98
00:05:56,790 --> 00:05:58,792 line:-1
offloading from CDN2.


99
00:05:58.825 --> 00:06:01.461 line:-2 align:center
And the global traffic
became more balanced.


100
00:06:01,495 --> 00:06:05,632 line:-2
Now let's take a look at
an HLS multivariant playlist


101
00:06:05.666 --> 00:06:07.801 line:-1 align:center
with Content Steering support.


102
00:06:07.835 --> 00:06:11.805 line:-2 align:center
First we see
the EXT-X-CONTENT-STEERING tag


103
00:06:11.839 --> 00:06:16.610 line:-2 align:center
that indicates this multivariant playlist
uses Content Steering.


104
00:06:16.643 --> 00:06:19.713 line:-1 align:center
Then we have a SERVER-URI attribute


105
00:06:19.746 --> 00:06:24.017 line:-2 align:center
specifying where the client should request
Steering Manifest updates from.


106
00:06:25.252 --> 00:06:29.957 line:-2 align:center
Then the next PATHWAY-ID attribute
specifies the initial pathway to choose


107
00:06:29.990 --> 00:06:32.993 line:-1 align:center
for playback at startup.


108
00:06:33,026 --> 00:06:38,198 line:-2
Then we can see that each variant stream
were given an PATHWAY-ID attribute


109
00:06:38.232 --> 00:06:40.267 line:-1 align:center
to group them into Pathways.


110
00:06:40,300 --> 00:06:43,470 line:-2
Each Pathway should have
the same set of variant streams,


111
00:06:43.504 --> 00:06:47.975 line:-2 align:center
with only difference being their URIs
and media group names.


112
00:06:48,008 --> 00:06:51,011 line:-1
In this example, we have two Pathways,


113
00:06:51.044 --> 00:06:53.847 line:-1 align:center
namely CDN1 and CDN2.


114
00:06:53,881 --> 00:06:58,585 line:-2
Both contains two variant streams,
one 6 Mbps high resolution video


115
00:06:58,619 --> 00:07:02,956 line:-1
and one 3 Mbps lower resolution video.


116
00:07:02,990 --> 00:07:06,260 line:-2
With the only difference
being their URI hostname.


117
00:07:06.293 --> 00:07:09.663 line:-2 align:center
There are also two distinct audio groups
for each Pathway


118
00:07:09.696 --> 00:07:13.100 line:-1 align:center
where they have different URI hostnames.


119
00:07:13.133 --> 00:07:17.404 line:-2 align:center
Here is an example Steering Manifest,
which is a JSON document.


120
00:07:17.437 --> 00:07:22.176 line:-2 align:center
The PATHWAY-PRIORITY field is a list
of Pathway IDs in the preference order.


121
00:07:22,209 --> 00:07:27,347 line:-2
So in this case, the receiving
client player would prefer CDN1 over CDN2.


122
00:07:27,381 --> 00:07:30,784 line:-2
This is the Steering Manifest
the Steering Server would provide


123
00:07:30.817 --> 00:07:34.922 line:-2 align:center
to the European clients,
to let them prefer CDN1.


124
00:07:34,955 --> 00:07:38,258 line:-2
By altering the PATHWAY-PRIORITY field
in a Steering Manifest,


125
00:07:38,292 --> 00:07:42,095 line:-2
a Steering Server can control
the steering policy for every client.


126
00:07:42,129 --> 00:07:45,699 line:-2
That's it for a quick overview
of Content Steering.


127
00:07:45.732 --> 00:07:48.402 line:-1 align:center
If you want a more in-depth explanation,


128
00:07:48,435 --> 00:07:51,772 line:-1
feel free to check out my WWDC21 talk,


129
00:07:51,805 --> 00:07:56,710 line:-2
Improve global streaming availability
with HLS Content Steering.


130
00:07:56.743 --> 00:07:59.713 line:-2 align:center
However, our journey for
supporting a more scalable


131
00:07:59,746 --> 00:08:03,417 line:-2
and more reliable streaming service
doesn't stop here.


132
00:08:03,450 --> 00:08:08,188 line:-2
Nowadays companies can access
more versatile cloud infrastructures


133
00:08:08.222 --> 00:08:12.659 line:-2 align:center
and tools to achieve things
unimaginable in the past,


134
00:08:12.693 --> 00:08:16.463 line:-2 align:center
and we have to catch up
in the leap in technology.


135
00:08:16.496 --> 00:08:20.267 line:-2 align:center
Let's say our streaming service provider
has grown larger this year,


136
00:08:20,300 --> 00:08:24,872 line:-2
and they are experimenting with a new way
to satisfy the dynamic traffic demands


137
00:08:24,905 --> 00:08:27,040 line:-1
of its growing user base.


138
00:08:27,074 --> 00:08:31,845 line:-2
They are doing it by dynamically spawning
fleets of CDN servers in real-time


139
00:08:31.879 --> 00:08:35.215 line:-1 align:center
to alleviate temporal traffics stresses.


140
00:08:35,249 --> 00:08:38,819 line:0
For example,
it can spawn a new fleet of CDN3


141
00:08:38,852 --> 00:08:41,788 line:0
and want to advertise it
to existing clients.


142
00:08:41,822 --> 00:08:45,926 align:center
However the challenge here
is that the dynamically spawned CDN info


143
00:08:45,959 --> 00:08:48,428 line:0
is not included
in the multivariant playlists


144
00:08:48,462 --> 00:08:50,964 line:0
when existing client requested it,


145
00:08:50,998 --> 00:08:53,133 align:center
because it just didn't exist.


146
00:08:53,166 --> 00:08:58,438 line:-2
So what can we do to tell our client
players of the emergence of a new CDN?


147
00:08:59.273 --> 00:09:03.043 line:-2 align:center
This is where our new Pathway Cloning
feature comes in handy.


148
00:09:03,076 --> 00:09:06,113 line:-2
It's a new feature
with backward compatibility


149
00:09:06.146 --> 00:09:11.118 line:-2 align:center
with Content Steering 1.2
introduced in WWDC21.


150
00:09:11,151 --> 00:09:15,022 line:-2
With Pathway Cloning,
the Steering Server can announce new CDNs


151
00:09:15.055 --> 00:09:16.790 line:-1 align:center
to existing clients


152
00:09:16,823 --> 00:09:20,160 line:-1
using a compact manifest definition.


153
00:09:20.194 --> 00:09:22.896 line:-2 align:center
By assuming Pathways
are structure-identical,


154
00:09:22,930 --> 00:09:27,901 line:-2
new Pathways can be created by copying
and modifying existing Pathways.


155
00:09:27.935 --> 00:09:31.672 line:-2 align:center
Let's take a look
at the structure of a Pathway.


156
00:09:31,705 --> 00:09:35,108 line:-2
A Pathway consists of one
or many variant streams.


157
00:09:35.142 --> 00:09:39.046 line:-2 align:center
Each variant stream can only be
in one and only one Pathway.


158
00:09:39.079 --> 00:09:41.748 line:-2 align:center
If not specified
the PATHWAY-ID attribute,


159
00:09:41,782 --> 00:09:45,619 line:-2
it implicitly belongs
to the default “dot” Pathway.


160
00:09:45,652 --> 00:09:50,858 line:-2
Each variant stream may refer to zero
or one media group for each media type,


161
00:09:50,891 --> 00:09:54,027 line:-2
out of audio, subtitle,
and closed-caption.


162
00:09:54.061 --> 00:09:57.497 line:-2 align:center
Each media group may be referenced
by multiple variant streams,


163
00:09:57,531 --> 00:09:59,600 line:-1
even from different Pathways.


164
00:09:59.633 --> 00:10:02.636 line:-2 align:center
When we clone a new Pathway
out of an existing one,


165
00:10:02,669 --> 00:10:05,005 line:-2
we should not only clone
its variant streams,


166
00:10:05.038 --> 00:10:08.108 line:-2 align:center
but also the referenced media groups,
if any.


167
00:10:10,844 --> 00:10:13,180 line:-1
Then, to make it a new Pathway,


168
00:10:13.213 --> 00:10:16.783 line:-2 align:center
we need to modify the URIs
of the variant and rendition streams


169
00:10:16.817 --> 00:10:19.720 line:-1 align:center
of the newly cloned Pathway.


170
00:10:19,753 --> 00:10:24,491 line:-2
Let's take the 6 Mbps variant stream
from the cloned Pathway for example.


171
00:10:25.993 --> 00:10:30.330 line:-2 align:center
Let's say this particular variant stream
has the URI as shown.


172
00:10:30,364 --> 00:10:33,867 line:-2
To modify it to become the URI
for the new Pathway,


173
00:10:33,901 --> 00:10:38,839 line:-2
the most flexible way
is to replace the full URI line in whole.


174
00:10:38,872 --> 00:10:42,709 line:-2
This means we need to store a full set
of URIs in the Steering Manifest


175
00:10:42.743 --> 00:10:44.478 line:-1 align:center
for each cloned Pathway.


176
00:10:44.511 --> 00:10:48.415 line:-2 align:center
However, in practice
we can usually do better than that.


177
00:10:48,448 --> 00:10:51,285 line:-2
It is common in the industry
to deploy streaming assets


178
00:10:51.318 --> 00:10:56.056 line:-2 align:center
across multiple CDNs
retaining the same URI path structure.


179
00:10:56.089 --> 00:11:00.661 line:-2 align:center
And assets served from the same
URI share the same URI hostname


180
00:11:00.694 --> 00:11:02.829 line:-1 align:center
and query parameters.


181
00:11:03.664 --> 00:11:06.767 line:-2 align:center
If it's the case,
we only need to store the replacement


182
00:11:06,800 --> 00:11:09,970 line:-2
of host and query parameters
in the manifest,


183
00:11:10.003 --> 00:11:14.308 line:-2 align:center
and replace the components of all cloned
URIs and we got the new Pathway.


184
00:11:15,976 --> 00:11:21,381 line:-2
Let's take a look at how we can define
the Pathway Clone in a Manifest object.


185
00:11:21,415 --> 00:11:25,953 line:-2
We added the PATHWAY-CLONES field
with an array of Pathway Clone objects.


186
00:11:25.986 --> 00:11:31.558 line:-2 align:center
Each Pathway Clone object defines a new
Pathway cloned from an existing Pathway.


187
00:11:31,592 --> 00:11:35,062 line:-2
In this example,
we have one Pathway Clone object.


188
00:11:35.095 --> 00:11:41.335 line:-2 align:center
The BASE-ID field specifies CDN1
to be the original Pathway to clone from.


189
00:11:41,368 --> 00:11:46,673 line:-2
The ID field specifies
the new Pathway ID to be CDN3.


190
00:11:46,707 --> 00:11:52,479 line:-2
Next, we have the URI-REPLACEMENT field
with an object of URI replacement rules.


191
00:11:54,081 --> 00:11:58,785 line:-2
In this example, we are using the HOST
and query parameters replacement rules,


192
00:11:58,819 --> 00:12:00,587 line:-1
which should replace the host part,


193
00:12:00,621 --> 00:12:06,527 line:-2
and insert or replace query parameters
of the stream URIs respectively.


194
00:12:06.560 --> 00:12:09.029 line:-2 align:center
In this case,
we are replacing the host part


195
00:12:09,062 --> 00:12:11,465 line:-1
to be cdn3.example.com,


196
00:12:11,498 --> 00:12:15,936 line:-2
and adding or setting query parameter
“foo” with value xyz,


197
00:12:15,969 --> 00:12:19,973 line:-1
and query parameter “bar” with value 123.


198
00:12:21.241 --> 00:12:24.645 line:-2 align:center
Let's try to apply the host
and parameter URI replacement


199
00:12:24.678 --> 00:12:27.714 line:-1 align:center
on our previous example URI.


200
00:12:27.748 --> 00:12:30.317 line:-2 align:center
First we have the resolved
variant stream URI


201
00:12:30.350 --> 00:12:33.220 line:-1 align:center
based on the multivariant playlist's URI.


202
00:12:34,288 --> 00:12:38,225 line:-2
In the Steering Manifest
we used HOST URI replacement rule.


203
00:12:38.258 --> 00:12:40.727 line:-1 align:center
So for the host part of the URI,


204
00:12:40,761 --> 00:12:44,498 line:-1
we replace it with cdn3.example.com,


205
00:12:44,531 --> 00:12:48,035 line:-1
and got the new host part for the new URI.


206
00:12:51,505 --> 00:12:55,943 line:-2
Then we retain the URI path component
from the cloned URI.


207
00:12:59,179 --> 00:13:03,784 line:-2
Finally, we apply the URI query
parameter replacement rule.


208
00:13:03.817 --> 00:13:08.956 line:-2 align:center
Here we replace the “foo” parameter
because it exists on the original URI.


209
00:13:08,989 --> 00:13:13,927 line:-2
Then we append the “bar” parameter
because it's a new parameter.


210
00:13:13.961 --> 00:13:19.132 line:-2 align:center
Then we have the replaced
query parameter part of the new URI.


211
00:13:19,166 --> 00:13:23,737 align:center
The final result URI would be the URI
for the 6 Mbps variant stream


212
00:13:23,770 --> 00:13:26,440 line:0
from the new Pathway CDN3.


213
00:13:27.608 --> 00:13:31.512 line:-2 align:center
We apply the same URI replacement rule
to the rest of the variants


214
00:13:31,545 --> 00:13:34,381 line:-1
and renditions in the cloned Pathway.


215
00:13:34.414 --> 00:13:39.253 line:-2 align:center
For the 3 Mbps variant stream,
we have the original URI,


216
00:13:39,286 --> 00:13:44,758 line:-2
and apply the host and parameter
replacement rule to get the new URI.


217
00:13:44,791 --> 00:13:48,362 line:-2
We do the same for the audio
and subtitle renditions.


218
00:13:48,395 --> 00:13:53,400 line:-2
After we apply the URI replacement rule
to all cloned variants and renditions,


219
00:13:53.433 --> 00:13:57.538 line:-2 align:center
we have a new Pathway
that serves from the new CDN host.


220
00:13:58,505 --> 00:14:02,376 line:-2
Let's take another example
and let's say the streaming provider


221
00:14:02,409 --> 00:14:06,413 line:-2
wants to serve their highest bandwidth
video and audio streams


222
00:14:06.446 --> 00:14:09.917 line:-1 align:center
from a specially tuned, fastest CDN host,


223
00:14:09,950 --> 00:14:13,287 line:-2
different from the rest of
the lower bitrate streams.


224
00:14:13.320 --> 00:14:18.625 line:-2 align:center
This is where per-stable-ID
URI replacement rule comes in handy.


225
00:14:18,659 --> 00:14:23,497 line:-2
In HLS, STABLE-VARIANT-ID
and STABLE-RENDITION-ID attributes


226
00:14:23.530 --> 00:14:27.501 line:-2 align:center
were introduced to identify
variant and rendition streams.


227
00:14:27,534 --> 00:14:30,237 line:-2
By setting them
in the multivariant playlist,


228
00:14:30,270 --> 00:14:33,674 line:-2
we can later reference each variant
or rendition stream,


229
00:14:33,707 --> 00:14:36,310 line:-2
by their stable ID
in the Pathway Clone object,


230
00:14:36,343 --> 00:14:38,045 line:-1
in the Steering Manifest,


231
00:14:38,078 --> 00:14:41,081 line:-2
and assign per-stream
URI replacement rules.


232
00:14:41,915 --> 00:14:45,519 line:-2
To define these particular special URI
replacement rules,


233
00:14:45.552 --> 00:14:49.156 line:-2 align:center
we need to assign stable IDs
to all the variant and rendition streams


234
00:14:49.189 --> 00:14:51.358 line:-1 align:center
in the multivariant playlist.


235
00:14:51,391 --> 00:14:56,430 line:-2
For example we assign STABLE-RENDITION-ID
"audio-en-ac3"


236
00:14:56.463 --> 00:14:58.599 line:-1 align:center
to the AC3 English audio,


237
00:14:58,632 --> 00:15:01,902 line:-1
and STABLE-VARIANT-ID "video-4k-dv"


238
00:15:01,935 --> 00:15:05,572 line:-1
to the 25 Mbps 4K variant stream.


239
00:15:05,606 --> 00:15:07,508 line:-1
Then, in the Steering Manifest,


240
00:15:07,541 --> 00:15:10,444 line:-2
we can add the two
flexible replacement rules


241
00:15:10.477 --> 00:15:13.213 line:-1 align:center
by referencing their stable IDs.


242
00:15:13,247 --> 00:15:17,217 line:-2
For variant streams,
we added "PER-VARIANT-URIS" field


243
00:15:17,251 --> 00:15:19,453 line:-1
to the "URI-REPLACEMENT" object,


244
00:15:19,486 --> 00:15:24,324 line:-2
with a dictionary
of STABLE-VARIANT-ID to URI records.


245
00:15:24.358 --> 00:15:27.895 line:-2 align:center
Here we specify to replace the URI
of the variant stream


246
00:15:27,928 --> 00:15:33,934 line:-2
with STABLE-VARIANT-ID
"video-4k-dv" with the following URI.


247
00:15:33,967 --> 00:15:37,905 line:-2
For the rendition stream,
we added "PER-RENDITION-URIS" field


248
00:15:37,938 --> 00:15:40,007 line:-1
to the "URI-REPLACEMENT" object,


249
00:15:40,040 --> 00:15:44,912 line:-2
with a dictionary of
STABLE-RENDITION-ID to URI records.


250
00:15:44.945 --> 00:15:48.148 line:-2 align:center
Here we specify to replace
the URI of rendition stream


251
00:15:48.182 --> 00:15:53.887 line:-2 align:center
with STABLE-RENDITION-ID
"audio-en-ac3" with the following URI.


252
00:15:55.622 --> 00:15:58.725 line:-2 align:center
Here we see that
after applying the URI replacement,


253
00:15:58.759 --> 00:16:03.897 line:-2 align:center
all streams are serving from the new
cdn3.exmaple.com host


254
00:16:03.931 --> 00:16:08.869 line:-2 align:center
except the 4K video variant
and AC3 English audio rendition,


255
00:16:08,902 --> 00:16:11,605 line:-2
where they have
special URI replacement rules


256
00:16:11,638 --> 00:16:15,175 line:-2
pointing them
to the faster.example.com host,


257
00:16:15,209 --> 00:16:18,745 line:-2
and with different URI path
and query components.


258
00:16:20.414 --> 00:16:24.284 line:-2 align:center
With Pathway Cloning, when the
streaming provider dynamically spawn


259
00:16:24.318 --> 00:16:28.021 line:-1 align:center
new CDN fleet, in this example, CDN3,


260
00:16:28.055 --> 00:16:30.424 line:-1 align:center
the steering server can add CDN3


261
00:16:30.457 --> 00:16:35.762 line:-2 align:center
as a Pathway Clone for existing clients
in their Steering Manifest.


262
00:16:35,796 --> 00:16:39,800 line:-2
It can also choose a region,
for example Europe,


263
00:16:39,833 --> 00:16:44,271 line:-1
to prioritize CDN3 as the primary Pathway.


264
00:16:44.304 --> 00:16:47.975 line:-2 align:center
When clients in Europe got
the Steering Manifest update,


265
00:16:48.008 --> 00:16:51.745 line:-2 align:center
they will steer their traffics
toward CDN3.


266
00:16:51,778 --> 00:16:54,114 line:-1
For the final part of this talk,


267
00:16:54,147 --> 00:16:57,818 line:-2
let's switch our focus
to the details of Steering Server,


268
00:16:57.851 --> 00:17:00.754 line:-2 align:center
to explain how to implement
the server logic,


269
00:17:00,787 --> 00:17:05,959 line:-2
with concrete examples, to steer client
player traffics for load balancing.


270
00:17:06,660 --> 00:17:09,796 line:-2
One way to manage and orchestrate
a swamp of client players


271
00:17:09.830 --> 00:17:14.268 line:-2 align:center
and apply partitioned rules
is to put every client into a bucket,


272
00:17:14,301 --> 00:17:16,904 line:-1
and apply the rules at the buckets level.


273
00:17:16,937 --> 00:17:20,240 line:-2
It's simple to implement
the bucketing at the Steering Server


274
00:17:20,274 --> 00:17:23,343 line:-2
without maintaining
any client session states.


275
00:17:23.377 --> 00:17:27.014 line:-2 align:center
When a client player requests
for the initial Steering Manifest,


276
00:17:27,047 --> 00:17:31,585 line:-2
it makes an HTTP GET request
at the Steering Server URI.


277
00:17:31,618 --> 00:17:37,791 line:-2
The server then generates a uniform random
number out of 12 possible buckets.


278
00:17:37,824 --> 00:17:41,528 line:-2
When returning the Steering Manifest,
the server adds the bucket number,


279
00:17:41,562 --> 00:17:45,199 line:-2
in this case, 7,
to the RELOAD-URI attribute,


280
00:17:45,232 --> 00:17:47,568 line:-1
which will be the Steering Manifest URI


281
00:17:47,601 --> 00:17:50,270 line:-2
for the next request
from the client player.


282
00:17:50,304 --> 00:17:54,007 line:-2
So that the next time the client player
request for Steering Manifest,


283
00:17:54,041 --> 00:17:57,578 line:-2
it will carry the bucket number
in its request parameter,


284
00:17:57,611 --> 00:18:02,382 line:-2
and the server can extract it and apply
steering rules based on the bucket number.


285
00:18:03.183 --> 00:18:06.753 line:-2 align:center
Now let's take a look
at a simple bipartition steering rule.


286
00:18:06.787 --> 00:18:09.923 line:-2 align:center
In this case,
we want to steer 50% traffic


287
00:18:09,957 --> 00:18:15,462 line:-2
to prefer CDN1
and the other 50% of the traffic to prefer CDN2.


288
00:18:15,495 --> 00:18:18,599 line:-2
We can write such rule
in terms of the bucket number.


289
00:18:18,632 --> 00:18:22,603 line:-2
If the client player's bucket number
falls in the first 6 buckets,


290
00:18:22.636 --> 00:18:27.641 line:-2 align:center
we return Steering Manifest
with PATHWAY-PRIORITY prefers CDN1,


291
00:18:27.674 --> 00:18:32.946 line:-2 align:center
and otherwise return that
with PATHWAY-PRIORITY prefers CDN2.


292
00:18:32,980 --> 00:18:36,650 line:-2
Since clients are assigned
to buckets uniformly,


293
00:18:36.683 --> 00:18:42.256 line:-2 align:center
dividing the 12 buckets into 6 buckets
can bipartition the traffics evenly.


294
00:18:43.590 --> 00:18:49.596 line:-2 align:center
Now let's say a new Pathway
called CDN3 is dynamically spawned.


295
00:18:49,630 --> 00:18:53,300 line:-2
The Steering Server can advertise it
using Pathway cloning


296
00:18:53,333 --> 00:18:57,204 line:-2
to clients that don’t know it from
their multivariant playlists.


297
00:18:57.237 --> 00:19:00.541 line:-2 align:center
One common question when
constructing a Steering Manifest


298
00:19:00.574 --> 00:19:04.311 line:-2 align:center
with Pathway Cloning,
is to determine the set of Pathways


299
00:19:04,344 --> 00:19:07,981 line:-2
that need to be included
in the PATHWAY-CLONES array.


300
00:19:08.015 --> 00:19:12.986 line:-2 align:center
The rule is to clone Pathways that are
not in the client's multivariant playlist.


301
00:19:13.020 --> 00:19:15.622 line:-2 align:center
However, without maintaining
any server side states


302
00:19:15,656 --> 00:19:18,926 line:-2
about the client session,
how can the Steering Server


303
00:19:18,959 --> 00:19:22,863 line:-2
know the set of Pathways
in the client's multivariant playlist?


304
00:19:24,164 --> 00:19:27,534 line:-2
One way to do it
is to include the set of Pathways


305
00:19:27,568 --> 00:19:32,172 line:-2
in the initial steering server URI
as a query parameter,


306
00:19:32.206 --> 00:19:35.509 line:-2 align:center
during the generation of
the multivariant playlist.


307
00:19:35,542 --> 00:19:39,546 line:-2
In this case, the multivariant playlist
contains two pathways,


308
00:19:39.580 --> 00:19:42.115 line:-1 align:center
CDN1 and CDN2.


309
00:19:42,149 --> 00:19:45,853 line:-2
Therefore, it includes them
in the SERVER-URI attribute


310
00:19:45.886 --> 00:19:48.121 line:-1 align:center
as a query parameter.


311
00:19:48,155 --> 00:19:52,492 line:-2
Then the client player
would send request to the URI,


312
00:19:52,526 --> 00:19:56,063 line:-2
carrying the parameters
to the steering server.


313
00:19:56,096 --> 00:19:58,832 line:-2
Then the steering server
can extract the parameter


314
00:19:58.866 --> 00:20:03.270 line:-2 align:center
as the set of Pathways
in the client's multivariant playlist.


315
00:20:03.303 --> 00:20:06.573 line:-2 align:center
Then it can calculate the set
of Pathways to be cloned,


316
00:20:06.607 --> 00:20:09.476 line:-2 align:center
by subtracting the set
of available Pathways


317
00:20:09.510 --> 00:20:13.313 line:-2 align:center
with the set of Pathways
in the client's multivariant playlist.


318
00:20:13.347 --> 00:20:17.851 line:-2 align:center
In this case,
the available Pathways are CDN1, 2, and 3,


319
00:20:17.885 --> 00:20:22.856 line:-2 align:center
and the Pathways in the client's
multivariant playlist are CDN1 and CDN2,


320
00:20:22,890 --> 00:20:25,526 line:-2
therefore,
the Pathway that needs to be included


321
00:20:25.559 --> 00:20:29.096 line:-1 align:center
in the PATHWAY-CLONES array is CDN3.


322
00:20:31.231 --> 00:20:33.700 line:-2 align:center
Let's also take a look
how the Steering Server


323
00:20:33,734 --> 00:20:38,472 line:-2
can change its steering rules
when there are three available Pathways.


324
00:20:38.505 --> 00:20:41.241 line:-2 align:center
In this case,
the server wants to partition


325
00:20:41.275 --> 00:20:45.379 line:-2 align:center
the client traffics evenly
across CDN1, 2, and 3.


326
00:20:45,412 --> 00:20:50,817 line:-2
We write this rule by returning
PATHWAY-PRIORITY that prefers CDN1


327
00:20:50.851 --> 00:20:57.157 line:-2 align:center
if the client's bucket number falls in
the first third of the 12 buckets,


328
00:20:57.191 --> 00:21:00.794 line:-2 align:center
returning PATHWAY-PRIORITY
that prefers CDN2


329
00:21:00,827 --> 00:21:05,365 line:-2
if the client's bucket number falls
in the second third range,


330
00:21:05,399 --> 00:21:10,237 line:-2
and otherwise returning
PATHWAY-PRIORITY that prefers CDN3.


331
00:21:10,270 --> 00:21:15,142 line:-2
This way each Pathway would serve
a third of the client traffics.


332
00:21:15.175 --> 00:21:18.745 line:-2 align:center
With everything we covered,
you are now fully equipped


333
00:21:18,779 --> 00:21:23,350 line:-2
to build your Steering Server
with your own dynamic steering rules.


334
00:21:23,383 --> 00:21:27,020 line:-2
Doing so can further improve
the reliability of your streaming service.


335
00:21:28,555 --> 00:21:32,259 align:center
That's it for our updates
in Content Steering this year.


336
00:21:32,292 --> 00:21:33,627 align:center
If you haven't done it yet,


337
00:21:33,660 --> 00:21:38,432 align:center
try adopting Content Steering
as your HLS CDN fallback mechanism


338
00:21:38,465 --> 00:21:43,303 line:0
as it's more versatile
and provides dynamic traffic steering.


339
00:21:43,337 --> 00:21:47,541 line:0
Please also take advantage of
the new Pathway Cloning feature


340
00:21:47,574 --> 00:21:50,410 line:0
to improve your service's reliability.


341
00:21:50,444 --> 00:21:57,417 align:center
As usual, check out the latest IETF HLS
specification for more technical details.


342
00:21:57,451 --> 00:22:01,421 line:0
And remember to utilize
our HTTP Live Streaming Tools


343
00:22:01,455 --> 00:22:04,858 line:0
to validate your playlists
as you make changes.


344
00:22:04,892 --> 00:22:07,928 align:center
Finally, if you have more questions
or suggestion,


345
00:22:07,961 --> 00:22:13,033 align:center
feel free to reach out
at hls-interest@ietf.org.


346
00:22:13,066 --> 00:22:16,436 line:-2
Thank you for joining,
and have a great day.

