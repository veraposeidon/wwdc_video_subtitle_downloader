2
00:00:00,334 --> 00:00:07,341 line:-1
♪ ♪


3
00:00:09.309 --> 00:00:11.011 line:-2 align:center
Gabriel Ting:
Hello, and welcome to our session,


4
00:00:11.044 --> 00:00:14.214 line:-2 align:center
"Explore in-app purchase
integration and migration."


5
00:00:14,248 --> 00:00:17,584 line:-2
This session is divided into two parts:
one dedicated to migrating


6
00:00:17,618 --> 00:00:20,287 line:-2
to the App Store Server API,
and one dedicated to migrating


7
00:00:20,320 --> 00:00:22,956 line:-2
to App Store Server Notifications
Version 2.


8
00:00:22.990 --> 00:00:24.458 line:-1 align:center
My name is Gabriel, and I am discussing


9
00:00:24,491 --> 00:00:27,628 line:-2
how to migrate
to the App Store Server API.


10
00:00:27,661 --> 00:00:29,830 line:-2
Alex Baker: My name is Alex,
and I will walk you through


11
00:00:29.863 --> 00:00:33.200 line:-2 align:center
migrating to App Store
Server Notifications Version 2.


12
00:00:33.233 --> 00:00:36.670 line:-2 align:center
Gabriel: Let's first begin with a brief
introduction of the App Store Server API


13
00:00:36,703 --> 00:00:38,639 line:-1
and App Store Server Notifications.


14
00:00:38.672 --> 00:00:42.342 line:-2 align:center
We introduced the App Store Server API
last year as a powerful, secure,


15
00:00:42,376 --> 00:00:45,946 line:-2
and efficient way to obtain data
and perform operations from your server.


16
00:00:45,979 --> 00:00:48,482 line:-2
We aim to give you
just the data that you need,


17
00:00:48,515 --> 00:00:51,885 line:-2
signed in the JSON Web Signature
or JWS format,


18
00:00:51,919 --> 00:00:55,022 line:-2
so that you can verify that the data
you receive is untampered with,


19
00:00:55,055 --> 00:00:58,125 line:-2
intended for you,
and signed by the App Store.


20
00:00:58,158 --> 00:01:00,894 line:-2
For example,
one of our App Store Server API endpoints,


21
00:01:00,928 --> 00:01:03,864 line:-2
the Get Transaction History endpoint,
in combination with the new


22
00:01:03,897 --> 00:01:07,134 line:-2
filter and sort features,
allow you to fetch any set of transactions


23
00:01:07.167 --> 00:01:10.337 line:-2 align:center
that you specify,
with just an originalTransactionId.


24
00:01:10,370 --> 00:01:13,473 line:-2
On the pane of
App Store Server Notifications Version 2,


25
00:01:13,507 --> 00:01:16,944 line:-2
with the increased number of states
of a subscription that can be represented,


26
00:01:16,977 --> 00:01:19,012 line:-1
Notifications Version 2 will update you


27
00:01:19,046 --> 00:01:22,416 line:-2
of all possible states of a subscription,
in real time.


28
00:01:22,449 --> 00:01:25,152 line:-2
We aim to proactively provide
all the information that you need


29
00:01:25.185 --> 00:01:27.454 line:-2 align:center
to know about what's going on
with your subscribers,


30
00:01:27.487 --> 00:01:29.990 line:-2 align:center
without having to ask us
for the information.


31
00:01:30,023 --> 00:01:33,427 line:-2
Alex will walk you through this
more in his portion of this session.


32
00:01:33,460 --> 00:01:36,363 line:-2
If using these features with ease
and efficacy interests you,


33
00:01:36,396 --> 00:01:37,731 line:-1
this session is for you.


34
00:01:37.764 --> 00:01:41.068 line:-2 align:center
We will walk you through how to get
started using the App Store Server API


35
00:01:41.101 --> 00:01:43.570 line:-2 align:center
and App Store Server Notifications
Version 2,


36
00:01:43,604 --> 00:01:46,840 line:-2
as well as some migration tips
and best practices.


37
00:01:46,874 --> 00:01:48,642 align:center
For additional information
on each of these,


38
00:01:48,675 --> 00:01:51,612 align:center
please refer to these
additional sessions listed below.


39
00:01:53.080 --> 00:01:57.551 line:-2 align:center
So let's get started discussing
migrating to the App Store Server API.


40
00:01:57.584 --> 00:02:02.422 line:-2 align:center
First off, we will be discussing how
to start using the App Store Server API.


41
00:02:02,456 --> 00:02:06,960 line:-2
Second, we will dive into some
of the details of signing JSON Web Tokens.


42
00:02:06,994 --> 00:02:09,696 line:-2
Third, we will demonstrate
how to verify signed transactions


43
00:02:09.730 --> 00:02:13.166 line:-2 align:center
you receive from the App Store
are genuine.


44
00:02:13.200 --> 00:02:16.103 line:-2 align:center
Finally, we will discuss how to migrate
from verifyReceipt


45
00:02:16,136 --> 00:02:19,106 line:-1
to the App Store Server API.


46
00:02:19,139 --> 00:02:20,474 line:-1
Let's get started.


47
00:02:20.507 --> 00:02:23.143 line:-2 align:center
First, let's get into talking about
how to use the App Store Server API


48
00:02:23,177 --> 00:02:27,247 line:-2
with different versions of StoreKit,
first with just original StoreKit,


49
00:02:27.281 --> 00:02:30.651 line:-2 align:center
then with just StoreKit 2,
then discussing methods to support both


50
00:02:30.684 --> 00:02:34.821 line:-2 align:center
simultaneously for both clients using
iOS versions that support StoreKit 2,


51
00:02:34.855 --> 00:02:38.358 line:-2 align:center
namely those on iOS 15 or greater,
and those that do not.


52
00:02:39.092 --> 00:02:41.128 line:-2 align:center
First off,
let's take a look at what requests


53
00:02:41.161 --> 00:02:43.630 line:-1 align:center
to the App Store Server API look like.


54
00:02:43,664 --> 00:02:47,701 line:-2
We see that the five APIs listed here
utilize originalTransactionId


55
00:02:47,734 --> 00:02:49,102 line:-1
as a path parameter.


56
00:02:49.136 --> 00:02:51.471 line:-1 align:center
This allows you to easily call these APIs


57
00:02:51.505 --> 00:02:54.474 line:-2 align:center
using the originalTransactionIds
that you receive from receipts,


58
00:02:54.508 --> 00:02:58.345 line:-2 align:center
signed transactions,
signed renewals, and notifications.


59
00:02:58,378 --> 00:03:00,881 line:-1
Next is the Look Up Order ID endpoint.


60
00:03:00.914 --> 00:03:04.017 line:-2 align:center
This endpoint instead uses
the orderId provided by a customer


61
00:03:04,051 --> 00:03:05,819 line:-1
for support queries.


62
00:03:05.853 --> 00:03:09.089 line:-2 align:center
This is so that you can better assist
with questions directly from the customer,


63
00:03:09,122 --> 00:03:13,026 line:-2
as the customer is provided an orderId
in customer receipts for each transaction,


64
00:03:13,060 --> 00:03:16,029 line:-2
but is not provided
an originalTransactionId.


65
00:03:16,063 --> 00:03:18,765 line:-2
This ensures that you can
directly respond to customer inquiries


66
00:03:18,799 --> 00:03:21,635 line:-1
with data customers have on hand.


67
00:03:21.668 --> 00:03:24.271 line:-2 align:center
The last endpoints listed here
are notification related,


68
00:03:24,304 --> 00:03:27,307 line:-2
which Alex will touch on
in his portion of this session.


69
00:03:28,442 --> 00:03:31,778 line:-2
Next, let's look at where you can get
the originalTransactionIds from


70
00:03:31.812 --> 00:03:33.413 line:-1 align:center
in Original StoreKit.


71
00:03:33,447 --> 00:03:36,116 line:-2
When you call verifyReceipt
with the unified app receipt,


72
00:03:36,149 --> 00:03:39,853 line:-2
the originalTransactionId you'll use
when calling the App Store Server API


73
00:03:39,887 --> 00:03:41,455 line:-1
comes back in the in_app field


74
00:03:41.488 --> 00:03:44.358 line:-2 align:center
in the receipts for each of
the transactions this user purchased,


75
00:03:44,391 --> 00:03:48,262 line:-2
as well as in the latest_receipt_info
and pending_renewal_info.


76
00:03:48.295 --> 00:03:51.498 line:-2 align:center
Now that we know how to get
the originalTransactionId


77
00:03:51,532 --> 00:03:54,668 line:-2
from Original StoreKit transactions,
let's look at the whole flow


78
00:03:54,701 --> 00:03:57,638 line:-2
between a customer,
the App Store Server, and your server.


79
00:03:59.173 --> 00:04:02.609 line:-2 align:center
First, obtain the app receipt
on your server.


80
00:04:02,643 --> 00:04:06,580 line:-2
Next, take the app receipt and call
verifyReceipt with it from your server.


81
00:04:08,549 --> 00:04:11,018 line:-1
This will return the decoded receipt.


82
00:04:11.051 --> 00:04:14.555 line:-2 align:center
From the decoded receipt,
gather all of the originalTransactionIds


83
00:04:14,588 --> 00:04:17,624 line:-2
in precisely the same ways
I previously showed.


84
00:04:17,658 --> 00:04:20,661 align:center
Next, you can call
the Get Transaction History endpoint


85
00:04:20,694 --> 00:04:24,331 line:1
with any one of the gathered
originalTransactionIds, which will return


86
00:04:24,364 --> 00:04:27,835 line:1
the history of transactions
for this user as signed transactions.


87
00:04:27,868 --> 00:04:31,171 line:-2
These transactions include
non-consumables, refunded consumables,


88
00:04:31,205 --> 00:04:34,575 line:-2
non-renewing subscriptions,
and auto-renewing subscriptions.


89
00:04:34,608 --> 00:04:38,712 line:1
Then, if you want to get the latest signed
transaction and signed renewal information


90
00:04:38,745 --> 00:04:43,083 align:center
for a specific subscription, call
the Get All Subscription Statuses endpoint


91
00:04:43,116 --> 00:04:45,953 line:1
with the corresponding
originalTransactionId.


92
00:04:45,986 --> 00:04:48,388 line:1
This will return all of the signed
transactions and renewals


93
00:04:48,422 --> 00:04:52,526 align:center
for the subscription that corresponds
to the given originalTransactionId.


94
00:04:52,559 --> 00:04:55,796 line:-2
Next, let's look at where
the originalTransactionId is


95
00:04:55,829 --> 00:04:58,031 line:-1
in the case of StoreKit 2 transactions.


96
00:04:58,065 --> 00:05:01,435 line:-2
This is the code on the client
to obtain an originalTransactionId


97
00:05:01,468 --> 00:05:03,003 line:-1
from a transaction.


98
00:05:03,036 --> 00:05:05,038 line:-1
On devices that support StoreKit 2–


99
00:05:05,072 --> 00:05:08,242 line:-2
namely devices that are on
iOS 15 or later–


100
00:05:08,275 --> 00:05:11,278 line:-2
you can get
the originalID property on a verified,


101
00:05:11.311 --> 00:05:15.082 line:-2 align:center
decoded transaction
to get the originalTransactionId.


102
00:05:15,115 --> 00:05:19,920 line:-2
Now, looking at the server side, here is
an example of a signed JWS transaction,


103
00:05:19,953 --> 00:05:24,057 line:-2
which is the data type that you receive
in signed transactions and signed renewals


104
00:05:24.091 --> 00:05:28.195 line:-2 align:center
from the App Store Server API
and App Store Server Notifications.


105
00:05:28,228 --> 00:05:32,132 line:-2
Here, we see that originalTransactionId
is a top level field.


106
00:05:34,434 --> 00:05:37,204 line:-2
Next, let's look at the whole flow
between a customer,


107
00:05:37.237 --> 00:05:41.275 line:-2 align:center
the App Store Server, and your server
for StoreKit 2 transactions.


108
00:05:41,308 --> 00:05:44,478 line:-2
First, take the signed transaction
on the device.


109
00:05:44.511 --> 00:05:48.081 line:-2 align:center
With StoreKit 2,
you can verify this transaction on-device.


110
00:05:48.115 --> 00:05:51.185 line:-2 align:center
Using the on-device status listener,
transaction listener,


111
00:05:51,218 --> 00:05:54,488 line:-2
or last transaction will keep you
updated on latest transactions,


112
00:05:54,521 --> 00:05:58,492 line:-2
cancellations, and refunds, which can then
be sent to your server for record-keeping.


113
00:05:58,525 --> 00:06:01,061 line:-2
For example, these are updated
on subscription renewals,


114
00:06:01,094 --> 00:06:04,231 line:-2
subscription offer redemptions,
expirations, and more.


115
00:06:05,532 --> 00:06:07,367 line:-1
Send the transaction to your server.


116
00:06:07,401 --> 00:06:09,970 line:-2
In combination
with App Store Server Notifications,


117
00:06:10,003 --> 00:06:12,439 line:-2
which Alex will dive more into
in the following section,


118
00:06:12.472 --> 00:06:15.108 line:-2 align:center
you can keep up-to-date
with the latest status and state


119
00:06:15,142 --> 00:06:19,479 line:-2
of a subscription without having
to call the App Store Server API.


120
00:06:19.513 --> 00:06:22.516 line:-2 align:center
When you do need to perform
an operation on a subscription,


121
00:06:22.549 --> 00:06:25.452 line:-2 align:center
such as extending
the renewal date of a subscription,


122
00:06:25,485 --> 00:06:29,423 line:-2
you can use the originalTransactionId
from the signed transaction to call


123
00:06:29.456 --> 00:06:33.293 line:-2 align:center
corresponding endpoints
and get back the data that you need.


124
00:06:33,327 --> 00:06:36,196 line:-2
Now that we've seen how to use
the App Store Server API


125
00:06:36.230 --> 00:06:39.433 line:-2 align:center
with original StoreKit and StoreKit 2,
let's talk about how to support


126
00:06:39.466 --> 00:06:42.336 line:-1 align:center
both StoreKit and StoreKit 2.


127
00:06:42,369 --> 00:06:44,605 line:-2
You can take advantage
of the App Store Server API


128
00:06:44,638 --> 00:06:47,241 line:-1
without fully adopting StoreKit 2.


129
00:06:47.274 --> 00:06:50.077 line:-2 align:center
As shown previously,
you can get the originalTransactionId


130
00:06:50.110 --> 00:06:52.779 line:-1 align:center
from a receipt in Original StoreKit.


131
00:06:52,813 --> 00:06:57,651 line:-2
You can also get the originalTransactionID
in StoreKit 2 from a JWS transaction.


132
00:06:59,386 --> 00:07:04,258 line:-2
You can also use the App Store Server API
independently of any other APIs.


133
00:07:04,291 --> 00:07:07,928 line:-2
It is not tied to using a specific version
of other APIs.


134
00:07:07,961 --> 00:07:09,963 line:-2
In terms of App Store
Server Notifications,


135
00:07:09,997 --> 00:07:13,567 line:-2
it can be used with either version 1
or version 2 notifications.


136
00:07:13.600 --> 00:07:16.670 line:-2 align:center
We do recommend using version 2
because it notifies you of changes


137
00:07:16,703 --> 00:07:21,241 line:-2
to subscriptions as they occur,
uses the secure JWS format, and more,


138
00:07:21.275 --> 00:07:24.945 line:-2 align:center
which Alex will dive into more
in his part of this session.


139
00:07:24.978 --> 00:07:27.648 line:-2 align:center
However, you can use
the App Store Server API separately,


140
00:07:27.681 --> 00:07:31.218 line:-2 align:center
with version 1 notifications
or without notifications at all.


141
00:07:31,251 --> 00:07:34,688 line:-2
Next, let's discuss how you can
process new purchases


142
00:07:34,721 --> 00:07:38,292 line:-2
after you completed the migration steps
I previously walked through.


143
00:07:38,325 --> 00:07:41,728 line:-2
To support new purchases
on devices using original StoreKit,


144
00:07:41.762 --> 00:07:45.299 line:-2 align:center
you can take new receipts as they come,
sending them to your server,


145
00:07:45.332 --> 00:07:48.202 line:-2 align:center
and do precisely the same steps
as I previously showed,


146
00:07:48,235 --> 00:07:50,637 line:-1
while collecting new data along the way–


147
00:07:50.671 --> 00:07:52.806 line:-1 align:center
call verifyReceipt with the new receipts,


148
00:07:52,840 --> 00:07:57,277 line:-2
and get the decoded receipt with the new
originalTransactionId in latest_receipt,


149
00:07:57.311 --> 00:08:01.148 line:-2 align:center
correlate those originalTransactionIds
with other originalTransactionIds


150
00:08:01,181 --> 00:08:03,050 line:-1
in the in_app section of the receipt


151
00:08:03.083 --> 00:08:06.019 line:-2 align:center
to group together
your transaction information.


152
00:08:06.053 --> 00:08:08.722 line:-2 align:center
Then, you can take
the new originalTransactionId,


153
00:08:08.755 --> 00:08:11.325 line:-2 align:center
and call the App Store Server API
as needed,


154
00:08:11,358 --> 00:08:14,561 line:1
such as if you need to call
the Get All Subscription Statuses endpoint


155
00:08:14,595 --> 00:08:17,998 align:center
to get you the latest status
of the corresponding subscription.


156
00:08:18.031 --> 00:08:20.968 line:-2 align:center
Now that we've covered
how to use the App Store Server API


157
00:08:21.001 --> 00:08:23.437 line:-2 align:center
with both Original StoreKit
and StoreKit 2,


158
00:08:23,470 --> 00:08:26,673 line:-2
let's dive into some of the details
of signing JSON Web Tokens,


159
00:08:26,707 --> 00:08:29,776 line:-2
a requirement
to call the App Store Server API.


160
00:08:29.810 --> 00:08:33.514 line:-2 align:center
In order to authenticate
that your developer account is the caller


161
00:08:33.547 --> 00:08:36.583 line:-2 align:center
of the App Store Server API,
we use JSON Web Tokens,


162
00:08:36.617 --> 00:08:39.887 line:-2 align:center
also known as JWTs,
to authenticate requests.


163
00:08:39,920 --> 00:08:42,256 line:-2
This token must be included
in every request


164
00:08:42.289 --> 00:08:45.559 line:-2 align:center
as an authorization header
in calls from your server.


165
00:08:45.592 --> 00:08:49.429 line:-2 align:center
A JWT consists of a header,
a payload, and signature.


166
00:08:49.463 --> 00:08:54.001 line:-2 align:center
Next, we'll go into how to construct
a JWT specific to your application.


167
00:08:55,068 --> 00:08:57,871 line:-2
Here, we can see
how a JSON Web Token is composed,


168
00:08:57,905 --> 00:09:00,541 line:-2
as well as the structure
of the header and payload.


169
00:09:00.574 --> 00:09:04.778 line:-2 align:center
The token itself can be broken
into three parts, separated by periods:


170
00:09:04,811 --> 00:09:09,016 line:-2
the base 64 encoded header,
the base 64 encoded payload,


171
00:09:09.049 --> 00:09:11.952 line:-2 align:center
and then the signature,
which is composed of the base 64


172
00:09:11.985 --> 00:09:16.690 line:-2 align:center
encoded header and payload,
signed using your signing secret.


173
00:09:16,723 --> 00:09:19,593 line:-2
The header is composed of these fields
that contain metadata


174
00:09:19.626 --> 00:09:21.929 line:-1 align:center
about how to sign your data.


175
00:09:21,962 --> 00:09:24,598 line:-2
One of the important fields here
is the key ID,


176
00:09:24,631 --> 00:09:27,501 line:-2
which is your private key ID
in App Store Connect.


177
00:09:27.534 --> 00:09:31.038 line:-2 align:center
This needs to match the key
you use to sign the JWT.


178
00:09:32.706 --> 00:09:34.741 line:-2 align:center
The payload contains
additional information


179
00:09:34,775 --> 00:09:37,411 line:-1
about your specific application.


180
00:09:37,444 --> 00:09:40,314 line:-2
Please refer to the article
"Creating API Keys to Use


181
00:09:40,347 --> 00:09:43,684 line:-2
With the App Store Server API"
for additional information and guidance


182
00:09:43,717 --> 00:09:46,553 line:-1
on how to obtain your API Key.


183
00:09:46.587 --> 00:09:48.388 line:-1 align:center
For details on each of these fields,


184
00:09:48.422 --> 00:09:52.025 line:-2 align:center
please refer to the article
"Generating Tokens for API Requests."


185
00:09:53,260 --> 00:09:57,030 line:-2
Once you have the header and payload
with all the appropriate information,


186
00:09:57,064 --> 00:09:58,699 line:-1
next you will sign the JWT


187
00:09:58,732 --> 00:10:01,969 line:-2
using the certificate
that corresponds to the keyId.


188
00:10:02,002 --> 00:10:06,340 line:-2
Here is the core pseudocode
that you can use, regardless of language.


189
00:10:06.373 --> 00:10:09.209 line:-2 align:center
First, make sure that you have
the private key that corresponds


190
00:10:09,243 --> 00:10:12,679 line:-2
to the key id provided
in the header that we just looked at.


191
00:10:12,713 --> 00:10:16,383 line:-2
Then, call the signing function
that your JWT library exposes


192
00:10:16,416 --> 00:10:19,119 line:-2
with your private key, header,
and payload.


193
00:10:19.152 --> 00:10:21.522 line:-2 align:center
Since the header contains
the signing algorithm,


194
00:10:21,555 --> 00:10:25,158 line:-2
the JWT library signs it
according to the provided algorithm.


195
00:10:27,127 --> 00:10:31,298 line:-2
Finally, here is an example usage of this
token when authenticating a cURL call


196
00:10:31.331 --> 00:10:34.434 line:-2 align:center
to the Get All Subscription Statuses
endpoint.


197
00:10:34,468 --> 00:10:36,870 line:-2
Replace ${token}
and ${originalTransactionId}


198
00:10:36,904 --> 00:10:38,906 line:-1
with the values of the token you generated


199
00:10:38,939 --> 00:10:41,909 line:-2
and your desired originalTransactionId,
respectively.


200
00:10:41,942 --> 00:10:45,479 line:-2
Next, let's talk about how to verify
that the signed transactions


201
00:10:45,512 --> 00:10:49,316 line:-2
you receive are for you
and signed by the App Store.


202
00:10:49,349 --> 00:10:51,552 line:-1
Signed transactions are, in essence,


203
00:10:51,585 --> 00:10:54,454 line:-2
JavaScript Object Notation,
or JSON objects


204
00:10:54,488 --> 00:10:57,157 line:-2
that are cryptographically signed
such that if they are tampered with


205
00:10:57.191 --> 00:11:00.494 line:-2 align:center
between the App Store and your server,
you can detect it.


206
00:11:00,527 --> 00:11:04,831 line:-2
Signed transactions are signed in
the JSON Web Signature, or JWS format.


207
00:11:04,865 --> 00:11:09,303 line:-2
The signed transactions that the App Store
sends you will arrive in the JWS format.


208
00:11:09,336 --> 00:11:12,906 line:-2
By verifying the JWSs you receive,
you will verify that the data


209
00:11:12,940 --> 00:11:16,810 line:-2
came from the App Store,
and the contents are untampered with.


210
00:11:16,844 --> 00:11:20,514 line:-2
Now, let's look at how to verify
a signed transaction.


211
00:11:20.547 --> 00:11:23.183 line:-1 align:center
First, base 64 decode the header.


212
00:11:23,217 --> 00:11:27,721 line:-2
Then, one can determine what signing
algorithm to use via the alg claim.


213
00:11:27,754 --> 00:11:31,425 line:-2
This will be used
as part of verifying the JWS.


214
00:11:31,458 --> 00:11:34,928 line:-2
The certificate chain in the x5c claim
is issued by Apple,


215
00:11:34,962 --> 00:11:37,464 line:-2
and validation of the claim
indicates that the data is


216
00:11:37.497 --> 00:11:39.900 line:-1 align:center
properly signed and untampered with.


217
00:11:39.933 --> 00:11:42.302 line:-2 align:center
Please refer to the App Store
developer documentation


218
00:11:42.336 --> 00:11:46.773 line:-2 align:center
for further information
on how to verify JWSs.


219
00:11:46.807 --> 00:11:50.344 line:-2 align:center
In essence,
the x5c chain is a chain of certificates.


220
00:11:50,377 --> 00:11:53,413 line:-2
Successful verification
of the certificate chain tells you


221
00:11:53,447 --> 00:11:57,351 line:-2
that the data can be trusted
and that the data is signed by Apple.


222
00:11:57,384 --> 00:12:01,421 line:-2
Order matters for the certificate chain.
First comes the root certificate.


223
00:12:01,455 --> 00:12:04,391 line:-2
This root certificate may be followed
by additional certificates,


224
00:12:04.424 --> 00:12:08.028 line:-2 align:center
where each of these certificates
are signed by the previous certificate.


225
00:12:08,061 --> 00:12:12,065 line:-2
I will refer to the last certificate
in the chain as the leaf certificate.


226
00:12:13,467 --> 00:12:16,503 line:-2
The first certificate is referred to
as the root certificate


227
00:12:16,537 --> 00:12:18,105 line:-1
and is self-signed.


228
00:12:18.138 --> 00:12:20.908 line:-2 align:center
This certificate should match
the root certificate you obtain


229
00:12:20.941 --> 00:12:22.743 line:-1 align:center
from Apple's Certificate Authority.


230
00:12:22.776 --> 00:12:27.014 line:-2 align:center
If the certificates do not match,
the chain should not be trusted.


231
00:12:27.047 --> 00:12:29.683 line:-2 align:center
The leaf certificate,
the last certificate in the chain,


232
00:12:29,716 --> 00:12:33,020 line:-2
is the certificate
that is used to sign the JWS.


233
00:12:33,053 --> 00:12:35,489 line:-1
Here is an example of what the header


234
00:12:35,522 --> 00:12:38,692 line:-2
of a JWS the App Store sends
may look like.


235
00:12:38.725 --> 00:12:42.296 line:-2 align:center
First is the algorithm
used to sign the JWS.


236
00:12:42.329 --> 00:12:47.334 line:-2 align:center
Next is the x5c certificate chain,
with the certificates listed in order.


237
00:12:48,168 --> 00:12:51,972 line:-2
Now, let's look at what generating
an x5c certificate chain looks like


238
00:12:52.005 --> 00:12:53.941 line:-1 align:center
from a high-level overview.


239
00:12:53,974 --> 00:12:57,711 line:-2
We start off with the root certificate
from Apple's Certificate Authority.


240
00:12:57.744 --> 00:13:02.216 line:-2 align:center
Then, the root certificate is used to sign
the intermediate signing certificate.


241
00:13:02,249 --> 00:13:07,020 line:-2
The intermediate signing certificate
is then used to sign the leaf certificate.


242
00:13:08.455 --> 00:13:12.426 line:-2 align:center
Now that we've covered what generating
an x5c certificate chain looks like,


243
00:13:12.459 --> 00:13:14.828 line:-2 align:center
let's look at what verifying
a chain looks like.


244
00:13:14,862 --> 00:13:17,631 line:-2
Starting at the leaf certificate,
we ensure that it was signed


245
00:13:17.664 --> 00:13:20.467 line:-1 align:center
by the intermediate signing certificate.


246
00:13:20,501 --> 00:13:23,170 line:-2
Then we ensure
that the intermediate signing certificate


247
00:13:23.203 --> 00:13:25.439 line:-1 align:center
was signed by the root certificate.


248
00:13:25,472 --> 00:13:27,140 line:-2
Additionally,
the root certificate should match


249
00:13:27,174 --> 00:13:29,810 line:-2
the one from
the Apple Certificate Authority.


250
00:13:29.843 --> 00:13:31.845 line:-1 align:center
If all of these steps are successful,


251
00:13:31,879 --> 00:13:35,516 line:-2
then the entire chain
is verified as legitimate.


252
00:13:35.549 --> 00:13:38.919 line:-2 align:center
Let's talk about a method
to verify the certificate chain.


253
00:13:38.952 --> 00:13:43.657 line:-2 align:center
Here is a command to verify
the x5c certificate chain using OpenSSL.


254
00:13:43,690 --> 00:13:46,727 line:-2
Breaking this into pieces,
the command verify, broadly speaking,


255
00:13:46,760 --> 00:13:49,830 line:-2
allows you to pass in
certificates for verification.


256
00:13:49.863 --> 00:13:53.267 line:-2 align:center
The flag trusted allows you to provide
a certificate to trust–


257
00:13:53.300 --> 00:13:57.738 line:-2 align:center
in other words, a certificate that will be
used to verify the following certificates.


258
00:13:57.771 --> 00:14:00.574 line:-2 align:center
in this case, we are passing in
the root certificate you obtained


259
00:14:00,607 --> 00:14:04,344 line:-2
from the Apple Certificate Authority,
and thus can be trusted.


260
00:14:04.378 --> 00:14:07.381 line:-2 align:center
We'll use this
to verify the WWDR certificate,


261
00:14:07,414 --> 00:14:09,416 line:-1
the next certificate in the chain.


262
00:14:10.951 --> 00:14:14.955 line:-2 align:center
The untrusted flag allows you
to provide the certificate or certificates


263
00:14:14,988 --> 00:14:18,892 line:-2
that you wish to verify
using the certificate that you trust.


264
00:14:18,926 --> 00:14:21,728 line:-2
Here, we first pass in
the WWDR certificate


265
00:14:21,762 --> 00:14:25,666 line:-2
from the Apple Certificate Authority,
which is signed by the root certificate.


266
00:14:25,699 --> 00:14:29,937 line:-2
This should match the second certificate
in the x5c chain.


267
00:14:29,970 --> 00:14:33,240 line:-2
And finally, the leaf certificate here
is the last certificate,


268
00:14:33,273 --> 00:14:36,743 line:-2
which is signed
by the previous certificate.


269
00:14:36,777 --> 00:14:41,215 line:-2
In the case of a successful verification,
a success code is returned.


270
00:14:41,248 --> 00:14:44,551 line:-2
You may then proceed
to use the decoded information.


271
00:14:44.585 --> 00:14:46.787 line:-2 align:center
In the case
of an unsuccessful verification,


272
00:14:46,820 --> 00:14:49,389 line:-2
determine the issue
based on the returned error code.


273
00:14:49,423 --> 00:14:53,927 line:-2
If not possible to verify, this data may
be tampered with and should not be used.


274
00:14:53,961 --> 00:14:56,496 line:-2
Please refer to the App Store
developer documentation


275
00:14:56.530 --> 00:15:01.602 line:-2 align:center
for complete instructions on verifying
an x5c certificate chain using OpenSSL.


276
00:15:02.402 --> 00:15:06.840 line:-2 align:center
Here is some pseudocode for how one might
go about verifying a signed transaction.


277
00:15:06,874 --> 00:15:10,210 line:-1
First, obtain the JWS you wish to verify.


278
00:15:10,244 --> 00:15:14,448 line:-2
Then, take the certificate your JWS
library requires for verification.


279
00:15:14.481 --> 00:15:17.417 line:-2 align:center
Call the verify function
of your JWS library,


280
00:15:17.451 --> 00:15:19.520 line:-1 align:center
using the appropriate certificate.


281
00:15:19.553 --> 00:15:22.756 line:-2 align:center
The certificate that signs
the JWS is the leaf certificate,


282
00:15:22,789 --> 00:15:25,826 line:-2
though some libraries require
passing in the entire chain.


283
00:15:27,828 --> 00:15:31,865 line:-2
In the case that the call succeeded,
then you can proceed on with your tasks.


284
00:15:31,899 --> 00:15:35,502 line:-2
In the case that this was the result
of a call to the App Store Server API,


285
00:15:35.536 --> 00:15:38.238 line:-2 align:center
then you can proceed
to store the validated data.


286
00:15:38,272 --> 00:15:41,408 line:-2
As for the case of notifications,
Alex will go more into this


287
00:15:41,441 --> 00:15:44,211 line:-1
in his portion of this session.


288
00:15:44.244 --> 00:15:48.115 line:-2 align:center
In the case that the JWS cannot
be validated, do not use the JWS.


289
00:15:48.148 --> 00:15:52.319 line:-2 align:center
This may mean that it has been tampered
with or was not sent by the App Store.


290
00:15:52,352 --> 00:15:57,024 line:-2
Alex will dive more into how to better
ensure security when using notifications.


291
00:15:57.057 --> 00:15:59.326 line:-2 align:center
Please refer to the App Store
developer documentation


292
00:15:59,359 --> 00:16:03,764 line:-2
for complete instructions
on verifying and handling a JWS.


293
00:16:04.498 --> 00:16:08.068 line:-2 align:center
Now, let's review some use cases
for migration from verifyReceipt


294
00:16:08.101 --> 00:16:10.437 line:-1 align:center
to the App Store Server API.


295
00:16:10.470 --> 00:16:13.207 line:-2 align:center
First, let's look at the case
where you want to check


296
00:16:13,240 --> 00:16:16,009 line:-2
what the latest status is
for any given subscriber.


297
00:16:16.043 --> 00:16:20.347 line:-2 align:center
This keeps you up to date with
any changes to an individual subscription.


298
00:16:20.380 --> 00:16:22.716 line:-2 align:center
Previously,
to obtain the most up-to-date status


299
00:16:22.749 --> 00:16:25.519 line:-2 align:center
of a subscriber,
one had to call verifyReceipt


300
00:16:25.552 --> 00:16:28.188 line:-2 align:center
and determine the status
of the subscription based on fields


301
00:16:28.222 --> 00:16:32.192 line:-2 align:center
such as expiration intent,
grace_period_expires_date, et cetera.


302
00:16:32.226 --> 00:16:36.330 line:-2 align:center
Now, with the App Store Server API,
the Get All Subscription Statuses endpoint


303
00:16:36,363 --> 00:16:38,966 line:-2
can be called to obtain
the latest status of a subscription,


304
00:16:38.999 --> 00:16:41.335 line:-2 align:center
with a status field containing
the current status,


305
00:16:41.368 --> 00:16:43.103 line:-1 align:center
as well as the latest, most up-to-date


306
00:16:43.136 --> 00:16:45.873 line:-2 align:center
signed transaction
and renewal information.


307
00:16:45,906 --> 00:16:48,575 line:-2
Let's look at a flow
of how you could execute on this.


308
00:16:48,609 --> 00:16:51,545 line:-2
First, for any decoded receipt
that you have, you can obtain


309
00:16:51,578 --> 00:16:55,716 line:-2
the originalTransactionIds from it
just in the way that I showed previously.


310
00:16:55,749 --> 00:16:58,752 line:0
Then, you can call
the Get All Subscription Statuses endpoint


311
00:16:58,785 --> 00:17:01,989 line:0
for that originalTransactionId,
which will return the latest


312
00:17:02,022 --> 00:17:04,825 line:0
signed transactions
and renewals for that transaction.


313
00:17:04.858 --> 00:17:08.562 line:-2 align:center
Next, let's look at the case
of obtaining the latest transactions.


314
00:17:08.595 --> 00:17:12.466 line:-2 align:center
Obtaining the latest transactions
informs you of what a user has purchased,


315
00:17:12.499 --> 00:17:16.904 line:-2 align:center
what has renewed, if there are any changes
to a user's subscription, and more.


316
00:17:16,937 --> 00:17:19,940 line:-2
Previously, to obtain
the latest transactions for a user,


317
00:17:19,973 --> 00:17:21,742 line:-1
one had to call verifyReceipt


318
00:17:21.775 --> 00:17:24.778 line:-2 align:center
and use the in_app array
and examine latest_receipt_info,


319
00:17:24.811 --> 00:17:27.915 line:-2 align:center
which contained all of
the transactions for a user.


320
00:17:27.948 --> 00:17:31.118 line:-2 align:center
With the App Store Server API,
to obtain the latest transactions,


321
00:17:31.151 --> 00:17:33.887 line:-2 align:center
the Get Transaction History endpoint
allows you to fetch


322
00:17:33.921 --> 00:17:36.423 line:-1 align:center
the full purchase history for a user.


323
00:17:36,456 --> 00:17:40,160 line:-3
Furthermore, pagination combined
with the new filter and sort features


324
00:17:40,194 --> 00:17:43,897 line:-3
that is covered in the WWDC22 talk,
"What's new with in-app purchase,"


325
00:17:43,931 --> 00:17:47,601 line:-3
ensures that you can efficiently fetch
precisely the data that you need.


326
00:17:48,902 --> 00:17:51,004 line:-2
Let's look at a flow
of what this may entail.


327
00:17:51.038 --> 00:17:53.874 line:-2 align:center
With any originalTransactionId
belonging to that user,


328
00:17:53,907 --> 00:17:56,710 line:0
you can call
the Get Transaction History endpoint,


329
00:17:56,743 --> 00:17:59,479 align:center
which will return the history
of transactions for this user


330
00:17:59,513 --> 00:18:04,518 line:0
as signed transactions, filtered, sorted,
and paginated to your specifications.


331
00:18:06.153 --> 00:18:09.189 line:-2 align:center
Finally, let’s look at the case
of adopting appAccountToken.


332
00:18:09,223 --> 00:18:12,226 line:-2
The appAccountToken field
allows you to provide a UUID


333
00:18:12.259 --> 00:18:15.762 line:-2 align:center
that associates a StoreKit 2 transaction
with a user.


334
00:18:15.796 --> 00:18:18.098 line:-2 align:center
Then, on signed transactions,
signed renewals,


335
00:18:18.131 --> 00:18:22.336 line:-2 align:center
and notifications for that transaction,
the appAccountToken will appear.


336
00:18:22,369 --> 00:18:25,806 line:-2
Previously, there was not support for
appAccountToken with original StoreKit, ,


337
00:18:25,839 --> 00:18:28,976 line:-2
as it was a feature
that was new to StoreKit2.


338
00:18:29.009 --> 00:18:33.380 line:-2 align:center
Now, we added support for supplying
a UUID in the field applicationUsername


339
00:18:33,413 --> 00:18:36,016 line:-2
in Original StoreKit
to support compatibility


340
00:18:36.049 --> 00:18:38.118 line:-1 align:center
with Original StoreKit clients.


341
00:18:38.151 --> 00:18:40.888 line:-2 align:center
Under this condition,
that UUID will support


342
00:18:40,921 --> 00:18:43,457 line:-2
all the functionality
that appAccountToken does.


343
00:18:43,490 --> 00:18:47,728 line:-2
The appAccountToken then comes back in
verifyReceipt for Original StoreKit users,


344
00:18:47.761 --> 00:18:51.231 line:-2 align:center
and also appears for both
Original StoreKit and StoreKit 2 users


345
00:18:51.265 --> 00:18:53.267 line:-1 align:center
in calls to the App Store Server API


346
00:18:53.300 --> 00:18:55.903 line:-2 align:center
and notifications
from App Store Server Notifications.


347
00:18:56,670 --> 00:18:59,706 line:-2
That's it for the App Store Server API
portion of this session.


348
00:18:59,740 --> 00:19:04,511 line:-2
Next, here's Alex to cover migrating to
App Store Server Notifications Version 2.


349
00:19:04,545 --> 00:19:05,479 line:-1
Alex: Thanks, Gabriel.


350
00:19:05,512 --> 00:19:07,848 line:-2
My name is Alex,
and I'm excited to be here today


351
00:19:07,881 --> 00:19:11,518 line:-2
to discuss
App Store Server Notifications Version 2.


352
00:19:11.552 --> 00:19:15.789 line:-2 align:center
First, we'll be covering how to get
started with version 2 notifications.


353
00:19:15.822 --> 00:19:21.395 line:-2 align:center
Next, how version 2 notifications differ
and build upon other models available.


354
00:19:21.428 --> 00:19:24.898 line:-2 align:center
Third, we'll talk about recovering
in the case of missed notifications


355
00:19:24,932 --> 00:19:29,102 line:-2
and some of the new resources
available to help accomplish this task.


356
00:19:29.136 --> 00:19:32.606 line:-2 align:center
Last, how notifications can provide
insight into customer behavior


357
00:19:32,639 --> 00:19:34,842 line:-2
and create additional opportunities
for being informed


358
00:19:34.875 --> 00:19:37.377 line:-1 align:center
about the subscription lifecycle.


359
00:19:37,411 --> 00:19:40,681 line:-2
Let's go over a brief introduction
into what notifications are


360
00:19:40,714 --> 00:19:42,616 line:-1
and who can use them.


361
00:19:42,649 --> 00:19:45,419 line:-2
App Store Server Notifications
are messages we send you


362
00:19:45.452 --> 00:19:48.989 line:-2 align:center
whenever certain actions
are taken by users of your app.


363
00:19:49,022 --> 00:19:52,025 line:-2
These notifications broadly fall
into two categories,


364
00:19:52.059 --> 00:19:54.428 line:-1 align:center
subscription updates and refund updates,


365
00:19:54,461 --> 00:19:57,564 line:-2
although we're always working
to cover additional scenarios.


366
00:19:57.598 --> 00:20:00.868 line:-2 align:center
We provide these notifications
to help fill in gaps into user actions


367
00:20:00,901 --> 00:20:03,504 line:-2
that may not be available
to you in the app.


368
00:20:03.537 --> 00:20:06.640 line:-2 align:center
As an example,
one of our most common use cases


369
00:20:06,673 --> 00:20:08,408 line:-1
is the renewal of a subscription.


370
00:20:08,442 --> 00:20:12,012 line:-2
A user may not be in the app
when this transaction becomes available.


371
00:20:12,045 --> 00:20:15,015 line:-2
App Store Server Notifications
help account for this issue


372
00:20:15.048 --> 00:20:17.618 line:-2 align:center
by proactively sending
the latest transaction information


373
00:20:17.651 --> 00:20:20.654 line:-2 align:center
directly to your servers
when the subscription renews.


374
00:20:20,687 --> 00:20:24,558 line:-2
Version 2 notifications share many
similarities with the StoreKit 2 model


375
00:20:24,591 --> 00:20:27,828 line:-2
and the App Store Server API
you just heard about from Gabriel.


376
00:20:27,861 --> 00:20:31,465 line:-2
However, while they work well together,
they are all independent tools


377
00:20:31.498 --> 00:20:33.567 line:-1 align:center
that can be adopted at different times.


378
00:20:33.600 --> 00:20:36.403 line:-2 align:center
Most importantly,
you can continue to support clients


379
00:20:36.436 --> 00:20:40.107 line:-2 align:center
where StoreKit 2 is not available,
pre iOS-15 clients,


380
00:20:40.140 --> 00:20:43.377 line:-2 align:center
while utilizing
Version 2 Server Notifications.


381
00:20:43.410 --> 00:20:46.213 line:-2 align:center
We've worked to make
Version 2 notifications one of our most


382
00:20:46,246 --> 00:20:49,316 line:-2
in-depth and flexible tools
for providing information


383
00:20:49.349 --> 00:20:52.553 line:-2 align:center
about a user throughout
the entire subscription lifecycle.


384
00:20:52,586 --> 00:20:54,855 line:-2
We'll go more in-depth in this
later in the presentation,


385
00:20:54.888 --> 00:20:58.559 line:-2 align:center
but notifications provide information
that is almost impossible to capture


386
00:20:58,592 --> 00:21:01,295 line:-1
for actions taken outside of the app.


387
00:21:01.328 --> 00:21:03.664 line:-2 align:center
I hope I've interested you
in the concept of notifications


388
00:21:03.697 --> 00:21:06.867 line:-1 align:center
and Version 2 notifications in particular.


389
00:21:06.900 --> 00:21:09.069 line:-2 align:center
Before we go further,
while this presentation


390
00:21:09.102 --> 00:21:11.471 line:-2 align:center
walks you through getting started
and best practices


391
00:21:11,505 --> 00:21:14,508 line:-2
for receiving notifications,
it doesn't tell the whole story.


392
00:21:14,541 --> 00:21:16,443 line:0
Please refer to these recent videos
for more information


393
00:21:16,476 --> 00:21:20,447 line:0
about notifications and how they can
meet various use cases.


394
00:21:20.480 --> 00:21:23.116 line:-2 align:center
Let's look at getting
Version 2 notifications set up.


395
00:21:23,150 --> 00:21:25,152 line:-2
We're going to walk through
how to set up your notifications


396
00:21:25.185 --> 00:21:27.621 line:-1 align:center
all the way to receiving your first one.


397
00:21:27,654 --> 00:21:32,092 line:-2
First, go to your app's page
in App Store Connect.


398
00:21:32,125 --> 00:21:37,064 line:-2
Scrolling down, you will see a section
for App Store Server Notifications.


399
00:21:37,097 --> 00:21:41,101 line:-2
Here you'll see options
for both production and sandbox.


400
00:21:41,134 --> 00:21:43,704 line:-2
Each environment can contain
a separate URL


401
00:21:43,737 --> 00:21:47,107 line:-1
and a separate notification version.


402
00:21:47,140 --> 00:21:50,711 line:-2
Here is an example of the options page
for production settings.


403
00:21:50,744 --> 00:21:53,480 line:-1
Sandbox settings are exactly the same.


404
00:21:53.514 --> 00:21:57.184 line:-2 align:center
We recommend, especially if you are
a Version 1 notification user,


405
00:21:57,217 --> 00:22:01,555 line:-2
that you first try Version 2 notifications
in the sandbox environment.


406
00:22:01.588 --> 00:22:04.591 line:-2 align:center
This is a great place
to become comfortable with notifications


407
00:22:04,625 --> 00:22:07,528 line:-1
without impacting your production setup.


408
00:22:07.561 --> 00:22:11.198 line:-2 align:center
Select the Set Up Sandbox button,
provide your server's URL,


409
00:22:11.231 --> 00:22:13.834 line:-1 align:center
and select Version 2 Notifications.


410
00:22:15,169 --> 00:22:18,005 line:-2
Before triggering notifications,
confirm you have a valid


411
00:22:18.038 --> 00:22:21.108 line:-2 align:center
HTTPS certificate
for your server endpoint.


412
00:22:21.141 --> 00:22:25.245 line:-2 align:center
Also confirm you have allowed
Apple's public IPs access to your server.


413
00:22:25.279 --> 00:22:27.848 line:-2 align:center
Some of the most common failures
when setting up notifications


414
00:22:27,881 --> 00:22:30,050 line:-1
relate to firewalls and certificates.


415
00:22:30,083 --> 00:22:33,420 line:-2
These are also great to check if you
suddenly stop receiving notifications


416
00:22:33,453 --> 00:22:36,423 line:-1
as an initial troubleshooting step.


417
00:22:36.456 --> 00:22:39.393 line:-2 align:center
Now you are ready to receive
your first notification.


418
00:22:39.426 --> 00:22:41.628 line:-1 align:center
In Sandbox, notifications can be triggered


419
00:22:41,662 --> 00:22:44,898 line:-2
by a variety of actions,
like buying an in-app subscription.


420
00:22:44,932 --> 00:22:47,134 line:-1
However, for ease of use while testing,


421
00:22:47.167 --> 00:22:49.403 line:-2 align:center
we recommend triggering
a notification using the new


422
00:22:49.436 --> 00:22:54.007 line:-2 align:center
Request a Test Notification endpoint,
part of the App Store Server API.


423
00:22:54.041 --> 00:22:57.110 line:-2 align:center
This endpoint helps to automate
the notification testing process.


424
00:22:57.144 --> 00:22:59.613 line:-2 align:center
After triggering the Request
a Test Notification endpoint,


425
00:22:59.646 --> 00:23:02.583 line:-2 align:center
you should expect to see
a notification arrive soon.


426
00:23:02,616 --> 00:23:04,685 line:-2
If you are having issues
receiving notifications,


427
00:23:04,718 --> 00:23:07,554 line:-2
please refer the to new
Get Test Notification Status endpoint,


428
00:23:07.588 --> 00:23:10.991 line:-2 align:center
which can provide a brief status about why
the notification failed to be delivered.


429
00:23:11.024 --> 00:23:14.194 line:-2 align:center
For example,
a status like SSL_ISSUE would be


430
00:23:14,228 --> 00:23:17,831 line:-2
a clue to double-check
your HTTPS certificates.


431
00:23:17,865 --> 00:23:20,267 line:-2
We recommend
triggering a test notification


432
00:23:20,300 --> 00:23:22,536 line:-2
whenever you are performing
a configuration change.


433
00:23:22,569 --> 00:23:25,272 line:-2
This is a great way to confirm
you can still receive notifications


434
00:23:25.305 --> 00:23:26.907 line:-1 align:center
after the change.


435
00:23:26,940 --> 00:23:30,811 line:-2
Now, let's move on to understanding
the notification you've just received.


436
00:23:32.179 --> 00:23:34.515 line:-2 align:center
Just like transactions
we saw earlier from Gabriel,


437
00:23:34.548 --> 00:23:37.885 line:-1 align:center
notifications are also in the JWS format.


438
00:23:37,918 --> 00:23:42,322 line:-2
Let's go over how to decode
and verify a notification payload.


439
00:23:42,356 --> 00:23:44,625 line:-1
First, when receiving a notification,


440
00:23:44.658 --> 00:23:49.263 line:-2 align:center
you'll want to extract
the signedPayload field of the JSON body.


441
00:23:49.296 --> 00:23:52.866 line:-2 align:center
Next, you'll perform the exact same steps
Gabriel walked you through earlier


442
00:23:52.900 --> 00:23:55.135 line:-1 align:center
for verifying a signed transaction.


443
00:23:55.169 --> 00:23:57.538 line:-2 align:center
You'll follow the same steps
to verify signed data


444
00:23:57.571 --> 00:24:00.841 line:-2 align:center
whether it is a signed notification
payload from a notification


445
00:24:00.874 --> 00:24:04.945 line:-2 align:center
or a signed transaction
from the App Store Server API.


446
00:24:04.978 --> 00:24:09.750 line:-2 align:center
Next, it is important to verify
which app the notification is for.


447
00:24:09,783 --> 00:24:12,553 line:-2
If you have multiple apps
sharing the same endpoint,


448
00:24:12.586 --> 00:24:15.856 line:-2 align:center
this is a good place
to determine the target app.


449
00:24:15,889 --> 00:24:19,293 line:-2
It is also important to confirm that
the app the notification is targeted for


450
00:24:19.326 --> 00:24:24.264 line:-2 align:center
is your app, and the notification
was not intended for another developer.


451
00:24:24.298 --> 00:24:27.701 line:-2 align:center
Last, one more useful check is
to make sure that the environment


452
00:24:27.734 --> 00:24:30.137 line:-2 align:center
of the notification matches
your expected environment,


453
00:24:30,170 --> 00:24:32,606 line:-1
either Production or Sandbox.


454
00:24:32,639 --> 00:24:35,709 line:-2
Because App Store Connect allows
separate URLs for each environment,


455
00:24:35,742 --> 00:24:37,945 line:-2
it is possible to enforce
this requirement,


456
00:24:37,978 --> 00:24:41,481 line:-2
or, if the URLs are shared,
guarantee you are


457
00:24:41,515 --> 00:24:46,019 line:-2
storing and processing notifications
separately based on the environment.


458
00:24:46,053 --> 00:24:50,691 line:-2
At this point, the JWS is fully validated
and can be stored for further processing.


459
00:24:50.724 --> 00:24:53.260 line:-1 align:center
We recommend, besides some basic checks,


460
00:24:53,293 --> 00:24:56,463 line:-2
that your server process
the notification asynchronously.


461
00:24:56.496 --> 00:25:00.834 line:-2 align:center
If processing of the notification takes
too long, our server will record a timeout


462
00:25:00.868 --> 00:25:03.670 line:-2 align:center
and assume the notification
was not delivered successfully.


463
00:25:03.704 --> 00:25:06.840 line:-1 align:center
We will then resend the notification.


464
00:25:06,874 --> 00:25:10,577 line:-2
Therefore, moving time-intensive
processing outside this function


465
00:25:10,611 --> 00:25:13,247 line:-2
helps to ensure that the App Store server
records your notifications


466
00:25:13,280 --> 00:25:16,216 line:-2
as sent successfully
and removes the need for your server


467
00:25:16,250 --> 00:25:19,553 line:-2
to reprocess the notifications
upon a retry.


468
00:25:19,586 --> 00:25:24,558 line:-2
Now, let's go over the body
of the notification after verification.


469
00:25:24,591 --> 00:25:28,695 line:-2
The first fields are notification type
and the optional subtype.


470
00:25:28,729 --> 00:25:32,032 line:-2
Combined, these tell you the scenario
the notification is for.


471
00:25:32,065 --> 00:25:35,903 line:-2
These fields also help show what has
changed since the last notification


472
00:25:35.936 --> 00:25:38.872 line:-2 align:center
and provide information about
why these changes occurred.


473
00:25:38,906 --> 00:25:43,377 line:-2
The notificationUUID is a unique
identifier per notification.


474
00:25:43.410 --> 00:25:45.479 line:-1 align:center
If the server retries a notification,


475
00:25:45,512 --> 00:25:49,583 line:-2
the retried notification contains
the same notificationUUID.


476
00:25:49.616 --> 00:25:52.920 line:-2 align:center
This helps detect cases where
your server processed the notification,


477
00:25:52,953 --> 00:25:57,858 line:-2
but did not respond with a successful
HTTP response code in a timely manner.


478
00:25:57.891 --> 00:26:01.428 line:-2 align:center
We recommend adding duplicate
notification detection due to retries,


479
00:26:01.461 --> 00:26:03.497 line:-1 align:center
based on this field.


480
00:26:03.530 --> 00:26:06.967 line:-2 align:center
The signedDate field tells you
when the notification was created.


481
00:26:07,000 --> 00:26:10,470 line:-2
This is especially useful
for detecting retried notifications.


482
00:26:10,504 --> 00:26:13,507 line:-1
Next, the appAppleId and bundleId.


483
00:26:13.540 --> 00:26:16.310 line:-2 align:center
These are important
for detecting the target application.


484
00:26:16.343 --> 00:26:19.146 line:-2 align:center
As we discussed earlier, it is important
that you check these fields


485
00:26:19.179 --> 00:26:23.884 line:-2 align:center
and confirm they match expected values
to prevent replay attacks.


486
00:26:23.917 --> 00:26:26.854 line:-2 align:center
Additionally, make sure the environment
of the notification matches


487
00:26:26,887 --> 00:26:29,756 line:-2
the expected environment,
that sandbox notifications aren't being


488
00:26:29.790 --> 00:26:32.292 line:-2 align:center
recorded as production data,
and vice versa.


489
00:26:33,861 --> 00:26:38,599 line:0
Last, the actual signedTransactionInfo
and optional signedRenewalInfo.


490
00:26:38,632 --> 00:26:41,001 line:0
These will be the latest status
of the underlying purchase


491
00:26:41,034 --> 00:26:43,103 line:0
at the time of signing.


492
00:26:43,136 --> 00:26:45,439 line:-2
At this point,
having parsed the notification,


493
00:26:45,472 --> 00:26:48,242 line:-2
you are left with the latest transaction
and renewal information,


494
00:26:48,275 --> 00:26:51,411 line:-2
and the latest reason
for the change in status.


495
00:26:51,445 --> 00:26:55,082 line:-2
Now that we've covered setting up
and receiving a specific notification,


496
00:26:55,115 --> 00:26:57,451 line:-2
let's examine
the Version 2 notification model,


497
00:26:57.484 --> 00:27:00.854 line:-2 align:center
how notifications can fit together
to track the subscription lifecycle,


498
00:27:00,888 --> 00:27:03,557 line:-2
and the design decisions
behind Version 2 notifications


499
00:27:03.590 --> 00:27:06.660 line:-2 align:center
through a comparison with
Version 1 notifications.


500
00:27:06,693 --> 00:27:09,530 line:-2
Version 2 adopts a different philosophy
when sending information


501
00:27:09,563 --> 00:27:10,931 line:-1
about the state of a purchase.


502
00:27:10,964 --> 00:27:14,301 line:-2
Instead of sending the entire
recent history every notification,


503
00:27:14.334 --> 00:27:17.938 line:-2 align:center
Version 2 notifications focus
only on sending the latest information:


504
00:27:17.971 --> 00:27:19.506 line:-1 align:center
the latest transaction information,


505
00:27:19.540 --> 00:27:23.343 line:-2 align:center
and in the case of subscriptions,
the pending renewal information as well.


506
00:27:24,912 --> 00:27:26,980 line:-2
With notifications,
we work to provide information


507
00:27:27,014 --> 00:27:30,050 line:-2
on every step
of the subscription lifecycle.


508
00:27:30,083 --> 00:27:33,453 line:-2
Therefore, notifications only contain
the latest information


509
00:27:33.487 --> 00:27:36.123 line:-1 align:center
about the purchase or subscription.


510
00:27:36.156 --> 00:27:39.226 line:-2 align:center
Together, these notifications create
a complete timeline


511
00:27:39.259 --> 00:27:41.161 line:-1 align:center
of a subscription's status.


512
00:27:41,195 --> 00:27:44,598 line:-2
If you need to view the entire
transaction history and don't have access


513
00:27:44.631 --> 00:27:46.834 line:-2 align:center
to the notification history,
this pairs well with


514
00:27:46,867 --> 00:27:49,169 line:-2
the Get Transaction History endpoint
which lets you query


515
00:27:49.203 --> 00:27:54.074 line:-2 align:center
a user's entire transaction history
in a paginated and filterable context.


516
00:27:54.107 --> 00:27:58.879 line:-2 align:center
Second, version 1 notifications
do not require clients use StoreKit 2.


517
00:27:58.912 --> 00:28:01.515 line:-1 align:center
And that's right, neither does version 2.


518
00:28:01.548 --> 00:28:04.852 line:-2 align:center
In fact, no matter what framework
is used on the client side,


519
00:28:04.885 --> 00:28:09.122 line:-2 align:center
you can start enjoying the benefits
of version 2 notifications today.


520
00:28:09.156 --> 00:28:13.994 line:-2 align:center
Last, version 2 notifications work
to enhance the level of detail provided


521
00:28:14.027 --> 00:28:16.897 line:-2 align:center
and expand cases covered
by adding additional types


522
00:28:16,930 --> 00:28:19,299 line:-1
and adding the new subtype field.


523
00:28:19.333 --> 00:28:21.535 line:-2 align:center
Through this,
we are able to cover more scenarios


524
00:28:21,568 --> 00:28:24,605 line:-2
and provide notifications at every step
of the subscription lifecycle.


525
00:28:24.638 --> 00:28:28.041 line:-2 align:center
Some of the notable scenarios
we've added include expiration,


526
00:28:28,075 --> 00:28:31,411 line:-2
more granular information related
to changes in auto renewal status,


527
00:28:31,445 --> 00:28:34,281 line:-2
and more scenarios
around the refund process.


528
00:28:34,314 --> 00:28:37,651 line:-2
Now, to illustrate the complexity
of the scenarios covered


529
00:28:37,684 --> 00:28:40,921 line:-2
and provide a more concrete example,
let's look at how notifications


530
00:28:40.954 --> 00:28:43.156 line:-2 align:center
can inform you of each step
a subscription takes,


531
00:28:43,190 --> 00:28:45,325 line:-1
from start to finish.


532
00:28:45,359 --> 00:28:49,162 line:-2
Let's imagine a user
before a subscription.


533
00:28:49,196 --> 00:28:52,833 line:-2
Upon subscribing, the user moves
into the renewing subscription state


534
00:28:52,866 --> 00:28:55,969 line:-2
and a SUBSCRIBED with subtype INITIAL_BUY
notification is sent,


535
00:28:56.003 --> 00:29:00.107 line:-2 align:center
or an OFFER_REDEEMED with subtype
INITIAL_BUY if an offer was used.


536
00:29:00,140 --> 00:29:03,343 line:-2
Contained in the notification
would be the first signed transaction


537
00:29:03,377 --> 00:29:06,246 line:-1
and the signed renewal information.


538
00:29:06,280 --> 00:29:10,384 line:-2
Time passes, and the subscription renews,
staying in the renewing state.


539
00:29:10,417 --> 00:29:12,920 line:-2
Upon each renewal,
we send a DID_RENEW notification


540
00:29:12.953 --> 00:29:16.723 line:-2 align:center
with the next
signed transaction information.


541
00:29:16.757 --> 00:29:19.159 line:-2 align:center
Whenever the user deactivates
auto renewal,


542
00:29:19.193 --> 00:29:22.029 line:-2 align:center
they move to the expiring
subscription state, and you will receive


543
00:29:22,062 --> 00:29:23,463 line:-1
a DID_CHANGE_RENEWAL_STATUS


544
00:29:23.497 --> 00:29:26.700 line:-2 align:center
with subtype AUTO_RENEW_DISABLED
notification.


545
00:29:28,402 --> 00:29:31,405 line:-2
If they don't reenable auto renewal,
at the end of the period they move


546
00:29:31,438 --> 00:29:34,241 line:-2
to the expired state,
and you will receive an EXPIRED


547
00:29:34,274 --> 00:29:36,643 line:-1
with subtype VOLUNTARY notification.


548
00:29:36,677 --> 00:29:38,278 line:-1
Now, you might be wondering,


549
00:29:38,312 --> 00:29:40,714 line:-2
where are all the other
notification types?


550
00:29:43,050 --> 00:29:46,520 align:center
Here is the subscription lifecycle,
as seen through notifications.


551
00:29:46,553 --> 00:29:49,289 align:center
There is a lot going on.


552
00:29:49,323 --> 00:29:52,626 line:-2
And this diagram doesn't even tell
the whole story.


553
00:29:52.659 --> 00:29:57.130 line:-2 align:center
The refund/revocation lifecycle
isn't included here, for example.


554
00:29:57.164 --> 00:29:59.566 line:-2 align:center
This diagram illustrates
the vast array of scenarios


555
00:29:59,600 --> 00:30:02,603 line:-2
that version 2 notifications cover
and that they work to inform you


556
00:30:02,636 --> 00:30:05,439 line:-2
of each step
of the subscription lifecycle.


557
00:30:06.507 --> 00:30:08.342 line:-2 align:center
The other point I would make
is that we work to cover


558
00:30:08.375 --> 00:30:10.477 line:-1 align:center
every possible transition state.


559
00:30:10,511 --> 00:30:14,147 line:-2
This helps to increase the utility of
notifications by becoming a single source


560
00:30:14.181 --> 00:30:16.950 line:-2 align:center
for tracking subscriptions
and improves confidence


561
00:30:16,984 --> 00:30:19,987 line:-2
that you are seeing every step
of the subscriber's journey.


562
00:30:20.020 --> 00:30:22.623 line:-2 align:center
However, even though
all of this data is here,


563
00:30:22.656 --> 00:30:25.158 line:-2 align:center
you don't need to work
with every type available.


564
00:30:25.192 --> 00:30:28.662 line:-2 align:center
Even just processing notifications
related to renewal preference changes,


565
00:30:28,695 --> 00:30:31,064 line:-1
for example, can provide value.


566
00:30:31.098 --> 00:30:33.166 line:-2 align:center
Especially if
you are just getting started,


567
00:30:33,200 --> 00:30:37,271 line:-2
begin with the notification types
that are most useful for your situation.


568
00:30:37,304 --> 00:30:40,207 line:-2
Now, let's cover what happens
after you've got your server set up,


569
00:30:40,240 --> 00:30:44,011 line:-2
everything is running smoothly,
but, alas, your server goes down.


570
00:30:44,044 --> 00:30:47,014 line:-2
Whether it was for a few days,
a few minutes, or you think you might have


571
00:30:47,047 --> 00:30:50,884 line:-2
missed just one, let's go over some steps
to help resolve this issue.


572
00:30:50,918 --> 00:30:52,719 line:-1
Let's image your server.


573
00:30:52,753 --> 00:30:56,690 line:-2
It is set up successfully
and is receiving notifications.


574
00:30:56,723 --> 00:31:01,695 line:-2
At some point, your server has an issue
and is unable to receive notifications.


575
00:31:01.728 --> 00:31:04.031 line:-2 align:center
We are still attempting
to send messages to your server,


576
00:31:04,064 --> 00:31:06,333 line:-1
but now those requests begin to fail.


577
00:31:06,366 --> 00:31:08,368 line:-2
There are several ways
to deal with this scenario.


578
00:31:08.402 --> 00:31:10.170 line:-1 align:center
The first is just to wait.


579
00:31:10.204 --> 00:31:13.006 line:-2 align:center
If we don't receive
a successful status code from your server


580
00:31:13.040 --> 00:31:14.441 line:-1 align:center
or couldn't connect to it at all,


581
00:31:14,474 --> 00:31:18,645 line:-2
we will retry notifications
according to our documented retry policy.


582
00:31:18,679 --> 00:31:21,815 line:-2
For version 2 notifications,
we retry after each attempt,


583
00:31:21.849 --> 00:31:24.985 line:-2 align:center
first after a 1-hour delay,
then a 12-hour delay,


584
00:31:25,018 --> 00:31:28,789 line:-1
24-, 48-, and finally 72-hour delay.


585
00:31:28.822 --> 00:31:31.225 line:-2 align:center
Waiting works great
for outages less than an hour,


586
00:31:31,258 --> 00:31:34,661 line:-2
as notifications will be retried
an hour after the first failure.


587
00:31:36,029 --> 00:31:37,865 line:-1
At some point your server recovers,


588
00:31:37,898 --> 00:31:41,101 line:-2
and you start receiving
notifications again.


589
00:31:41.134 --> 00:31:46.306 line:-2 align:center
First, you receive a new notification,
unrelated to the missed notifications.


590
00:31:46.340 --> 00:31:49.776 line:-2 align:center
Notifications are retried with a delay,
so as soon as your server comes online,


591
00:31:49,810 --> 00:31:52,679 line:-2
you will not immediately receive
all missed notifications.


592
00:31:53,914 --> 00:31:57,718 line:-2
Some time passes and you start to receive
the notifications you missed,


593
00:31:57,751 --> 00:31:59,853 line:-1
interspersed with new notifications.


594
00:32:01.221 --> 00:32:04.391 line:-2 align:center
This brings up the question,
how can you detect if a notification


595
00:32:04,424 --> 00:32:07,628 line:-1
is the original or a retried notification?


596
00:32:07,661 --> 00:32:09,496 line:-1
Let's examine a notification.


597
00:32:10,531 --> 00:32:13,600 align:center
In this notification,
we're just showing a few fields.


598
00:32:14,935 --> 00:32:17,838 align:center
Notifications contain a signedDate field.


599
00:32:17,871 --> 00:32:20,007 align:center
This field can be useful
for detecting retries,


600
00:32:20,040 --> 00:32:23,677 align:center
by comparing the signing date with
the time the notification was received.


601
00:32:23,710 --> 00:32:26,980 line:0
If you see notifications with
a signing date significantly earlier


602
00:32:27,014 --> 00:32:28,916 line:0
than the date
you received the notification,


603
00:32:28,949 --> 00:32:31,518 line:0
this indicates you may have
experienced an outage.


604
00:32:32,619 --> 00:32:36,256 line:0
Imagine in this scenario
the notifications labeled 6 and 3


605
00:32:36,290 --> 00:32:38,225 line:0
were for the same subscription.


606
00:32:38,258 --> 00:32:41,862 align:center
This could be determined by comparing
the originalTransactionIds.


607
00:32:41,895 --> 00:32:46,567 align:center
In this case, just because notification 3
was received after notification 6


608
00:32:46,600 --> 00:32:51,238 align:center
does not mean it contains
newer information than notification 6.


609
00:32:51,271 --> 00:32:54,241 line:0
Other times, a notification
may have been received by your server,


610
00:32:54,274 --> 00:32:58,712 align:center
but it failed to respond
with a successful HTTP 200 status code.


611
00:32:58,745 --> 00:33:02,015 line:0
This can cause a notification
to be redelivered to your server.


612
00:33:02,049 --> 00:33:06,119 line:0
As discussed earlier, make sure to check
the notificationUUID field


613
00:33:06,153 --> 00:33:08,155 align:center
to deduplicate these requests.


614
00:33:08,188 --> 00:33:11,058 align:center
You may see significant numbers
of retried notifications


615
00:33:11,091 --> 00:33:13,994 line:0
even though you successfully
recorded the notifications.


616
00:33:14,027 --> 00:33:15,929 line:-1
In this case, make sure you are responding


617
00:33:15,963 --> 00:33:19,900 line:-2
with an HTTP 200 response
every time you receive a notification.


618
00:33:19.933 --> 00:33:23.103 line:-2 align:center
Additionally, make sure that you are
doing so in a timely manner,


619
00:33:23,136 --> 00:33:27,474 line:-2
and are not doing extensive processing
before responding successfully,


620
00:33:27.508 --> 00:33:30.777 line:-2 align:center
to prevent us from recording a timeout
and resending the notification.


621
00:33:30.811 --> 00:33:35.949 line:-2 align:center
Sometimes, especially with longer outages,
the next retry may be hours or days away,


622
00:33:35.983 --> 00:33:39.553 line:-2 align:center
or for an extended outage,
retries may have been exhausted.


623
00:33:39,586 --> 00:33:42,155 line:-2
The next option for recovering
from missed notifications


624
00:33:42.189 --> 00:33:44.691 line:-1 align:center
is the Get Notification History endpoint.


625
00:33:45.826 --> 00:33:48.729 line:-2 align:center
We've just announced the new
Get Notification History endpoint,


626
00:33:48,762 --> 00:33:52,232 line:-2
which provides a six-month history
of notifications we have sent your server.


627
00:33:52,266 --> 00:33:54,601 align:center
Refer to "What's new
with in-app purchases" video


628
00:33:54,635 --> 00:33:56,069 line:0
for an overview of this endpoint


629
00:33:56,103 --> 00:33:58,372 align:center
along with other great features
we are announcing.


630
00:33:58,405 --> 00:34:01,642 line:0
Here we will be focusing on
best practices when using this endpoint


631
00:34:01,675 --> 00:34:04,411 align:center
and scenarios where it can assist.


632
00:34:04,444 --> 00:34:05,913 align:center
After an outage is resolved,


633
00:34:05,946 --> 00:34:08,849 line:0
note the start and end timestamps
of the outage.


634
00:34:08.882 --> 00:34:11.318 line:-2 align:center
The Get Notification History endpoint
allows queries to be made


635
00:34:11.351 --> 00:34:13.053 line:-1 align:center
over a specific timespan.


636
00:34:13.086 --> 00:34:15.455 line:-2 align:center
By specifying the start
and end times of the outage,


637
00:34:15,489 --> 00:34:18,325 line:-2
you can only process notifications
that you likely missed,


638
00:34:18.358 --> 00:34:21.295 line:-2 align:center
instead of requiring paging
through the entire history.


639
00:34:21,328 --> 00:34:22,996 line:-2
This will help improve
the speed of recovery


640
00:34:23.030 --> 00:34:26.600 line:-2 align:center
and reduce work reprocessing
already-recorded notifications.


641
00:34:27,534 --> 00:34:29,803 line:-2
Next, the Get Notification
History endpoint


642
00:34:29.837 --> 00:34:32.306 line:-2 align:center
allows you to filter
by type of notification.


643
00:34:32.339 --> 00:34:35.042 line:-2 align:center
If you have experience an extended
outage and expect a significant


644
00:34:35.075 --> 00:34:38.111 line:-2 align:center
number of notifications,
consider filtering by type, and starting


645
00:34:38.145 --> 00:34:42.482 line:-2 align:center
with types that may have immediate impact,
like DID_RENEW and EXPIRED.


646
00:34:42.516 --> 00:34:46.854 line:-2 align:center
These will help you take action
on the most relevant cases first.


647
00:34:46,887 --> 00:34:49,223 line:-1
One tip when passing notification types,


648
00:34:49,256 --> 00:34:51,758 line:-2
if the notificationSubtype
field is omitted,


649
00:34:51.792 --> 00:34:55.596 line:-2 align:center
this will only return notifications
that also do not have a subtype.


650
00:34:55,629 --> 00:34:59,766 line:-2
Therefore, for the example shown
for the DID_RENEW notificationType,


651
00:34:59.800 --> 00:35:01.935 line:-2 align:center
this would not return
DID_RENEW notifications


652
00:35:01,969 --> 00:35:03,370 line:-1
with subtype BILLING_RECOVERY.


653
00:35:05,105 --> 00:35:07,908 line:-2
Last, the Get Notification
History endpoint allows filtering


654
00:35:07.941 --> 00:35:11.712 line:-2 align:center
to a specific user by using
an originalTransactionId.


655
00:35:11.745 --> 00:35:13.614 line:-2 align:center
Thinking back
to the subscription lifecycle,


656
00:35:13.647 --> 00:35:16.016 line:-2 align:center
we've worked to make sure
every step of a user's journey


657
00:35:16,049 --> 00:35:17,985 line:-1
is covered by notifications.


658
00:35:18.018 --> 00:35:21.555 line:-2 align:center
Therefore, if you find yourself
jumping around in unexpected ways,


659
00:35:21.588 --> 00:35:24.825 line:-2 align:center
for example from a renewing subscription
straight to expiration,


660
00:35:24,858 --> 00:35:27,961 line:-2
this may indicate that you missed
a notification for that user.


661
00:35:27,995 --> 00:35:30,364 line:-2
This can also be useful
in a customer-support context


662
00:35:30.397 --> 00:35:33.734 line:-2 align:center
if a user's account is in a different
state than you would expect.


663
00:35:33,767 --> 00:35:37,771 line:-2
In these cases, you can send a query
for that user's notification history.


664
00:35:38.906 --> 00:35:42.176 line:-2 align:center
Let's go over the response from
the Get Notification History endpoint.


665
00:35:42,209 --> 00:35:44,878 line:-2
Only certain values are shown
in the response for simplicity.


666
00:35:46,613 --> 00:35:50,484 line:-2
The values returned in the response
are in the notificationHistory array.


667
00:35:52,119 --> 00:35:55,589 line:-2
Each entry in the array
represents a single notification.


668
00:35:56,823 --> 00:35:59,660 line:-2
The signed payload field contains
the exact notification


669
00:35:59,693 --> 00:36:00,894 line:-1
that was sent to you.


670
00:36:02,162 --> 00:36:05,199 line:-2
Second, we have
the firstSendAttemptResult field.


671
00:36:05,232 --> 00:36:08,001 line:-2
This field contains one of several values
based on the result


672
00:36:08,035 --> 00:36:11,638 line:-2
of the initial notification attempt
as recorded by our servers.


673
00:36:11.672 --> 00:36:14.741 line:-2 align:center
In the successful case,
this will be the value SUCCESS.


674
00:36:14,775 --> 00:36:16,777 line:-1
However, as we've just been discussing,


675
00:36:16,810 --> 00:36:19,780 line:-2
sometimes notifications fail
to reach your server.


676
00:36:19.813 --> 00:36:22.482 line:-2 align:center
These messages are meant to be
a general guide to help point you


677
00:36:22,516 --> 00:36:25,819 line:-2
in the direction of the issue,
to simplify the resolution process.


678
00:36:25,853 --> 00:36:28,522 line:-1
For example, we see SSL_ISSUE here.


679
00:36:28.555 --> 00:36:31.024 line:-2 align:center
This indicates there is a problem
with the SSL certificate


680
00:36:31.058 --> 00:36:33.126 line:-1 align:center
or process on the server.


681
00:36:33.160 --> 00:36:36.697 line:-2 align:center
This field provides improved visibility
into diagnosing servers issues


682
00:36:36.730 --> 00:36:39.233 line:-2 align:center
beyond seeing
the notification did not arrive.


683
00:36:39,266 --> 00:36:42,803 line:-2
We also provide this same field in
the Get Test Notification Status endpoint,


684
00:36:42,836 --> 00:36:45,806 line:-2
to provide this functionality
when using test notifications.


685
00:36:45.839 --> 00:36:48.976 line:-2 align:center
These can be used to help while
onboarding or during troubleshooting,


686
00:36:49,009 --> 00:36:52,446 line:-2
or retrospectively during determining
the root cause of an outage.


687
00:36:52.479 --> 00:36:55.949 line:-2 align:center
Notifications may not cover
all cases of a user's history.


688
00:36:55,983 --> 00:36:58,652 line:-2
You may have just adopted notifications
and have existing users


689
00:36:58,685 --> 00:37:00,354 line:-1
with histories not covered.


690
00:37:00,387 --> 00:37:03,290 line:-2
You also may wish to examine a history
longer than the retention period


691
00:37:03,323 --> 00:37:06,894 line:-2
of notifications in the Get
Notification History endpoint.


692
00:37:06.927 --> 00:37:09.763 line:-2 align:center
That's where the Get Transaction
History endpoint enters the picture.


693
00:37:09.796 --> 00:37:11.899 line:-2 align:center
This endpoint,
as we saw earlier in the presentation


694
00:37:11.932 --> 00:37:14.401 line:-2 align:center
from Gabriel,
solves these issues by providing histories


695
00:37:14.434 --> 00:37:18.605 line:-2 align:center
for your customers that cover cases
before you started using notifications.


696
00:37:18.639 --> 00:37:21.909 line:-2 align:center
Now, let's go over how notifications
can provide insight


697
00:37:21,942 --> 00:37:25,179 line:-2
and opportunities above and beyond
the purchase history.


698
00:37:25,212 --> 00:37:29,082 line:-2
One of the new additions in Version 2
notifications is the subtype field,


699
00:37:29.116 --> 00:37:32.386 line:-2 align:center
adding additional context
to the notificationType field.


700
00:37:32.419 --> 00:37:35.389 line:-2 align:center
This field is meant to provide
more detail in certain scenarios,


701
00:37:35.422 --> 00:37:38.058 line:-2 align:center
like EXPIRED
or DID_CHANGE_RENEWAL_STATUS.


702
00:37:38,091 --> 00:37:41,929 line:-2
For example, with EXPIRED,
the action you take is usually the same,


703
00:37:41.962 --> 00:37:45.332 line:-2 align:center
mark the subscription as inactive
and revoke access to the product.


704
00:37:45,365 --> 00:37:49,102 line:-2
However, it can often be useful
to understand why the user expired.


705
00:37:49,136 --> 00:37:51,772 line:-2
Was it due to a billing issue,
voluntary choice,


706
00:37:51.805 --> 00:37:53.841 line:-2 align:center
or a price increase
that was never accepted?


707
00:37:53,874 --> 00:37:56,877 line:-2
Another notification,
DID_CHANGE_RENEWAL_STATUS,


708
00:37:56.910 --> 00:37:59.246 line:-2 align:center
is a great example of gaining
additional information


709
00:37:59,279 --> 00:38:01,815 line:-2
and opportunities
when using notifications.


710
00:38:01,849 --> 00:38:04,251 line:-2
On the surface,
it looks to be of low priority.


711
00:38:04,284 --> 00:38:06,286 line:-1
No action needs to be immediately taken.


712
00:38:06,320 --> 00:38:09,022 line:-2
The important notification
for revoking access to the product


713
00:38:09,056 --> 00:38:11,058 line:-1
is the EXPIRED notification.


714
00:38:11,091 --> 00:38:14,127 line:-2
Don't be fooled.
There is a lot of opportunity here.


715
00:38:14.161 --> 00:38:16.430 line:-2 align:center
One, this notification is
a great opportunity


716
00:38:16.463 --> 00:38:20.167 line:-2 align:center
to attempt to win back the customer
before their subscription expires.


717
00:38:20,200 --> 00:38:22,536 line:-2
Especially since deactivating
auto renewal may occur


718
00:38:22.569 --> 00:38:25.038 line:-2 align:center
outside the application,
this can be the only trigger


719
00:38:25.072 --> 00:38:29.443 line:-2 align:center
to be informed in this change in
renewal status before the expiration date.


720
00:38:29,476 --> 00:38:32,546 line:-2
This notification also provides insight
into customer behavior.


721
00:38:32,579 --> 00:38:34,014 line:-1
This notification can be used to determine


722
00:38:34,047 --> 00:38:36,550 line:-2
when in the renewal period
subscribers are cancelling.


723
00:38:36,583 --> 00:38:37,885 line:-1
Is it the day before renewal?


724
00:38:37.918 --> 00:38:39.786 line:-2 align:center
Are new subscribers
deactivating auto-renewal


725
00:38:39,820 --> 00:38:42,256 line:-1
soon after signing up for your service?


726
00:38:42,289 --> 00:38:43,824 line:-2
This type of information can be
important for understanding


727
00:38:43,857 --> 00:38:47,427 line:-2
the causes of cancellation
and improving your product.


728
00:38:47,461 --> 00:38:50,130 line:-2
Last, certain scenarios
may never be reflected


729
00:38:50.163 --> 00:38:52.900 line:-1 align:center
in a user's history without notifications.


730
00:38:52,933 --> 00:38:57,237 line:-2
For example, a user may deactivate
but then reactivate auto-renewal,


731
00:38:57.271 --> 00:38:59.940 line:-2 align:center
before their subscription period
has expired.


732
00:38:59.973 --> 00:39:02.242 line:-2 align:center
Because this all occurs
within a subscription period,


733
00:39:02.276 --> 00:39:05.345 line:-2 align:center
there is no effect
on the subscription's long-term status.


734
00:39:05,379 --> 00:39:07,981 line:-2
These decisions can be important
for understanding your customers,


735
00:39:08.015 --> 00:39:09.483 line:-1 align:center
and notifications provide information


736
00:39:09,516 --> 00:39:13,654 line:-2
to detect and record
these types of scenarios.


737
00:39:13,687 --> 00:39:16,924 line:-2
Overall, notifications work
to enhance and create opportunities


738
00:39:16.957 --> 00:39:19.459 line:-2 align:center
for understanding customer behavior
by providing information


739
00:39:19.493 --> 00:39:23.530 line:-2 align:center
at every step of the customer journey,
covering more scenarios than ever before.


740
00:39:23,564 --> 00:39:26,900 line:-2
In conclusion, today we've covered
both the App Store Server API


741
00:39:26.934 --> 00:39:29.269 line:-1 align:center
and App Store Server Notifications.


742
00:39:29,303 --> 00:39:30,871 line:-2
These are available
to improve the capabilities


743
00:39:30,904 --> 00:39:33,207 line:-2
surrounding managing
and tracking purchases.


744
00:39:33,240 --> 00:39:37,177 line:-2
They use updated message types
and cover more cases than ever before.


745
00:39:37,211 --> 00:39:39,046 line:-2
These systems are available
for all clients


746
00:39:39,079 --> 00:39:42,616 line:-2
and cross-compatible with both
Original StoreKit and StoreKit 2


747
00:39:42.649 --> 00:39:46.086 line:-2 align:center
and can improve your ability
to monitor the subscription lifecycle.


748
00:39:46,119 --> 00:39:49,489 line:-2
Last, these tools are already available
in both Sandbox and Production


749
00:39:49.523 --> 00:39:51.458 line:-1 align:center
and are a great addition to any system.


750
00:39:51,491 --> 00:39:54,795 line:-2
Thank you for joining us,
and have a great WWDC.

