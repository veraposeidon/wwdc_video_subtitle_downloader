2
00:00:00.033 --> 00:00:03.003 line:-1 position:50%
♪ instrumental hip hop music ♪


3
00:00:03,003 --> 00:00:09,910 line:0 position:90% align:right
♪


4
00:00:09,910 --> 00:00:12,713 line:-1
Hi, I'm Jon Schoenberg,
and I'm an engineer


5
00:00:12,713 --> 00:00:15,082 line:-1
on the Location Technologies
team at Apple.


6
00:00:15,082 --> 00:00:18,018 line:-1
In this session, I'll cover
the new features we've brought


7
00:00:18,018 --> 00:00:20,721 line:-1
to Nearby Interaction,
that are going to enable you


8
00:00:20,721 --> 00:00:23,123 line:-1
to build richer
and more diverse experiences


9
00:00:23,123 --> 00:00:25,259 line:-1
with spatial awareness.


10
00:00:25,259 --> 00:00:27,928 line:-1
The Nearby Interaction
framework makes it simple


11
00:00:27.928 --> 00:00:31.398 line:-1 position:50%
to take advantage
of the capabilities of U1 --


12
00:00:31,398 --> 00:00:34,935 line:-1
Apple's chip for Ultra Wideband
technology --


13
00:00:34,935 --> 00:00:39,139 line:-1
and enables creating precise
and spatially aware interactions


14
00:00:39,139 --> 00:00:42,276 line:-1
between nearby Apple devices
or accessories


15
00:00:42.276 --> 00:00:47.014 line:-1 position:50%
compatible with Apple's U1 chip
for Ultra Wideband.


16
00:00:47.014 --> 00:00:48.749 line:-1 position:50%
Let's get started
with a quick review


17
00:00:48.749 --> 00:00:52.519 line:-1 position:50%
of what's been available to you
over the last two years.


18
00:00:52.519 --> 00:00:56.189 line:-1 position:50%
When Nearby Interaction
was introduced at WWDC 2020,


19
00:00:56,189 --> 00:00:58,258 line:-1
the functionality
focused on creating


20
00:00:58.258 --> 00:01:02.462 line:-1 position:50%
and running a session
between two iPhones with U1.


21
00:01:02.462 --> 00:01:06.333 line:-1 position:50%
At WWDC 2021,
the functionality was extended


22
00:01:06,333 --> 00:01:09,569 line:-1
to support running sessions
with Apple Watch and third-party


23
00:01:09.569 --> 00:01:13.240 line:-1 position:50%
Ultra Wideband-compatible
accessories.


24
00:01:13,240 --> 00:01:14,875 position:50%
If you're interested
in a deep dive


25
00:01:14,875 --> 00:01:17,511 position:50%
into the Nearby Interaction
framework's APIs,


26
00:01:17,511 --> 00:01:20,847 position:50%
please review the WWDC talk
"Meet Nearby Interaction"


27
00:01:20,847 --> 00:01:22,082 position:50%
from 2020


28
00:01:22,082 --> 00:01:25,285 position:50%
and "Explore Nearby Interaction
with third-party accessories"


29
00:01:25,285 --> 00:01:27,354 line:0
from 2021.


30
00:01:27,354 --> 00:01:29,489 line:-1
We've been blown away
by the community's response


31
00:01:29.489 --> 00:01:31.992 line:-1 position:50%
to Nearby Interaction,
and in this session,


32
00:01:31.992 --> 00:01:34.227 line:-1 position:50%
I'm excited to unveil
the new capabilities


33
00:01:34.227 --> 00:01:36.530 line:-1 position:50%
and improvements for you.


34
00:01:36,530 --> 00:01:39,099 line:-1
I will focus on two main topics:


35
00:01:39.099 --> 00:01:42.135 line:-1 position:50%
enhancing Nearby Interaction
with ARKit


36
00:01:42.135 --> 00:01:44.404 line:-1 position:50%
and background sessions.


37
00:01:44,404 --> 00:01:46,573 line:-1
Along the way,
I'll share some improvements


38
00:01:46,573 --> 00:01:50,610 line:-1
that make it easier to use
the Nearby Interaction framework


39
00:01:50.610 --> 00:01:54.314 line:-1 position:50%
and I'll conclude with an update
on third-party hardware support


40
00:01:54,314 --> 00:01:56,450 line:-1
that was announced
last year.


41
00:01:56.450 --> 00:01:58.018 line:-1 position:50%
We're excited about
what you will do


42
00:01:58.018 --> 00:01:59.519 line:-1 position:50%
with the new capabilities,


43
00:01:59,519 --> 00:02:02,556 line:-1
so let's dive right
into the details.


44
00:02:02.556 --> 00:02:04.992 line:-1 position:50%
I'll start with an exciting
new capability


45
00:02:04.992 --> 00:02:09.062 line:-1 position:50%
that tightly integrates ARKit
with Nearby Interaction.


46
00:02:09.062 --> 00:02:12.532 line:-1 position:50%
This new capability
enhances Nearby Interaction


47
00:02:12,532 --> 00:02:17,371 line:-1
by leveraging the device
trajectory computed from ARKit.


48
00:02:17,371 --> 00:02:19,406 line:-1
ARKit-enhanced
Nearby Interaction


49
00:02:19.406 --> 00:02:22.109 line:-1 position:50%
leverages the same
underlying technology


50
00:02:22.109 --> 00:02:25.345 line:-1 position:50%
that powers Precision Finding
with AirTag,


51
00:02:25.345 --> 00:02:29.783 line:-1 position:50%
and we're making it available
to you via Nearby Interaction.


52
00:02:29,783 --> 00:02:32,619 line:-1
The best use cases are
experiences that guide a user


53
00:02:32.619 --> 00:02:36.189 line:-1 position:50%
to a specific nearby object
such as a misplaced item,


54
00:02:36,189 --> 00:02:37,524 line:-1
object of interest,


55
00:02:37,524 --> 00:02:41,461 line:-1
or object that the user
wants to interact with.


56
00:02:41.461 --> 00:02:44.231 line:-1 position:50%
By integrating ARKit
and Nearby Interaction,


57
00:02:44.231 --> 00:02:46.366 line:-1 position:50%
the distance and direction
information


58
00:02:46.366 --> 00:02:48.235 line:-1 position:50%
is more consistently available


59
00:02:48.235 --> 00:02:50.537 line:-1 position:50%
than using
Nearby Interaction alone,


60
00:02:50.537 --> 00:02:55.342 line:-1 position:50%
effectively broadening the
Ultra Wideband field of view.


61
00:02:55.342 --> 00:02:58.245 line:-1 position:50%
Finally, this new capability
is best used


62
00:02:58.245 --> 00:03:02.049 line:-1 position:50%
for interacting with
stationary devices.


63
00:03:02,049 --> 00:03:04,384 line:-1
Let's jump right
into a demonstration


64
00:03:04.384 --> 00:03:07.687 line:-1 position:50%
of the possibilities
this new integration of ARKit


65
00:03:07,687 --> 00:03:11,358 line:-1
and Nearby Interaction
enable with your application.


66
00:03:11,358 --> 00:03:14,428 line:-1
I've got an application here
for my Jetpack Museum


67
00:03:14,428 --> 00:03:16,430 line:-1
that has
Ultra Wideband accessories


68
00:03:16.430 --> 00:03:18.532 line:-1 position:50%
to help guide users
to the exhibits.


69
00:03:18.532 --> 00:03:21.968 line:-1 position:50%
Let's go find the next jetpack.


70
00:03:21.968 --> 00:03:24.271 line:-1 position:50%
As the user selects
to go to the next exhibit,


71
00:03:24.271 --> 00:03:27.307 line:-1 position:50%
the application discovers
the Ultra Wideband accessory


72
00:03:27.307 --> 00:03:29.142 line:-1 position:50%
and performs
the necessary exchanges


73
00:03:29.142 --> 00:03:31.645 line:-1 position:50%
to start using
Nearby Interaction.


74
00:03:31,645 --> 00:03:33,914 line:-1
The application
then instructs the user


75
00:03:33.914 --> 00:03:37.584 line:-1 position:50%
to move the phone side to side
while it begins to determine


76
00:03:37,584 --> 00:03:40,387 line:-1
the physical location
of the next exhibit,


77
00:03:40.387 --> 00:03:45.058 line:-1 position:50%
using the enhanced Nearby
Interaction mode with ARKit.


78
00:03:45.058 --> 00:03:47.727 line:-1 position:50%
Now that the application
understands the direction


79
00:03:47,727 --> 00:03:49,996 line:-1
that corresponds
to the next exhibit,


80
00:03:49.996 --> 00:03:52.499 line:-1 position:50%
a simple arrow icon
telling the user


81
00:03:52,499 --> 00:03:55,869 line:-1
the direction to head
to check it out appears.


82
00:03:55.869 --> 00:03:58.505 line:-1 position:50%
This rich, spatially-aware
information


83
00:03:58.505 --> 00:04:02.576 line:-1 position:50%
utilizing the combination
of ARKit and Nearby Interaction


84
00:04:02,576 --> 00:04:06,313 line:-1
can even indicate when
the exhibit is behind the user


85
00:04:06.313 --> 00:04:10.250 line:-1 position:50%
and the user is heading in a
direction away from the exhibit.


86
00:04:10.250 --> 00:04:12.719 line:-1 position:50%
Finally, the application
can display,


87
00:04:12.719 --> 00:04:16.690 line:-1 position:50%
in the AR world, an overlay
of the next exhibit's location,


88
00:04:16,690 --> 00:04:19,159 line:-1
and the application prompts
the user to move the iPhone


89
00:04:19.159 --> 00:04:22.262 line:-1 position:50%
up and down slightly
to resolve where the exhibit is


90
00:04:22.262 --> 00:04:23.964 line:-1 position:50%
in the AR world.


91
00:04:23.964 --> 00:04:26.566 line:-1 position:50%
Once the AR content
is placed in the scene,


92
00:04:26.566 --> 00:04:29.769 line:-1 position:50%
the powerful combination
of Nearby Interaction --


93
00:04:29,769 --> 00:04:31,705 line:-1
with its Ultra Wideband
measurements --


94
00:04:31.705 --> 00:04:35.642 line:-1 position:50%
and ARKit, allows the user
to easily head over


95
00:04:35.642 --> 00:04:38.111 line:-1 position:50%
to check out the next jetpack.


96
00:04:38.111 --> 00:04:42.349 line:-1 position:50%
I may not have found a jetpack,
but I found a queen.


97
00:04:42,349 --> 00:04:44,818 line:-1
Let's turn now
to how you can enable


98
00:04:44.818 --> 00:04:47.287 line:-1 position:50%
this enhanced
Nearby Interaction mode.


99
00:04:47.287 --> 00:04:50.757 line:-1 position:50%
With iOS 15, you probably have
a method in your application


100
00:04:50,757 --> 00:04:52,559 line:-1
that accepts
the NIDiscoveryToken


101
00:04:52,559 --> 00:04:55,829 line:-1
from a nearby peer,
creates a session configuration,


102
00:04:55,829 --> 00:04:57,964 line:-1
and runs the NISession.


103
00:04:57.964 --> 00:05:01.067 line:-1 position:50%
Enabling the enhanced mode
with ARKit is easy


104
00:05:01,067 --> 00:05:04,938 line:-1
on new and existing uses of
Nearby Interaction with a new


105
00:05:04.938 --> 00:05:08.375 line:-1 position:50%
isCameraAssistanceEnabled
property on the subclasses


106
00:05:08,375 --> 00:05:11,244 line:-1
of NIConfiguration.


107
00:05:11.244 --> 00:05:13.079 line:-1 position:50%
Setting the
isCameraAssistanceEnabled


108
00:05:13,079 --> 00:05:16,650 line:-1
property is all that's required
to leverage the enhanced mode


109
00:05:16.650 --> 00:05:18.451 line:-1 position:50%
with ARKit.


110
00:05:18,451 --> 00:05:20,353 line:-1
Camera assistance is available
when interacting


111
00:05:20.353 --> 00:05:23.723 line:-1 position:50%
between two Apple devices,
and an Apple device


112
00:05:23,723 --> 00:05:27,694 line:-1
to third-party
Ultra Wideband accessories.


113
00:05:27.694 --> 00:05:30.063 line:-1 position:50%
Let's look at the details
of what happens


114
00:05:30.063 --> 00:05:34.401 line:-1 position:50%
when an NISession is run
with camera assistance enabled.


115
00:05:34,401 --> 00:05:35,902 line:-1
When camera assistance
is enabled,


116
00:05:35,902 --> 00:05:38,872 line:-1
an ARSession
is automatically created


117
00:05:38,872 --> 00:05:41,808 line:-1
within the Nearby Interaction
framework.


118
00:05:41,808 --> 00:05:46,413 line:-1
You are not responsible
for creating this ARSession.


119
00:05:46,413 --> 00:05:49,082 line:-1
Running an NISession
with camera assistance enabled


120
00:05:49,082 --> 00:05:52,819 line:-1
will also run the ARSession
that was automatically created


121
00:05:52.819 --> 00:05:56.423 line:-1 position:50%
within the Nearby Interaction
framework.


122
00:05:56,423 --> 00:06:00,393 position:50%
The ARSession is running
within the application process.


123
00:06:00,393 --> 00:06:01,795 line:0
As a result,


124
00:06:01,795 --> 00:06:06,199 position:50%
the application must provide
a camera usage description key


125
00:06:06,199 --> 00:06:09,336 line:0
within the application's
Info.plist.


126
00:06:09,336 --> 00:06:13,673 line:-1
Be sure to make this a useful
string to inform your users


127
00:06:13,673 --> 00:06:19,379 line:-1
why the camera is necessary
to provide a good experience.


128
00:06:19.379 --> 00:06:23.717 line:-1 position:50%
Only a single ARSession can be
running for a given application.


129
00:06:23,717 --> 00:06:26,620 line:-1
This means that if you already
have an ARKit experience


130
00:06:26.620 --> 00:06:31.424 line:-1 position:50%
in your app, it is necessary to
share the ARSession you create


131
00:06:31.424 --> 00:06:34.160 line:-1 position:50%
with the NISession.


132
00:06:34.160 --> 00:06:36.429 line:-1 position:50%
To share the ARSession
with the NISession,


133
00:06:36.429 --> 00:06:39.466 line:-1 position:50%
a new setARSession method
is available


134
00:06:39.466 --> 00:06:41.601 line:-1 position:50%
on the NISession class.


135
00:06:41.601 --> 00:06:46.306 line:-1 position:50%
When setARSession is called,
prior to run, on the NISession,


136
00:06:46.306 --> 00:06:49.943 line:-1 position:50%
an ARSession will not be
automatically created


137
00:06:49.943 --> 00:06:51.978 line:-1 position:50%
within the Nearby Interaction
framework


138
00:06:51.978 --> 00:06:54.247 line:-1 position:50%
when the session is run.


139
00:06:54,247 --> 00:06:57,284 line:-1
This ensures the application
ARKit experience


140
00:06:57.284 --> 00:07:00.553 line:-1 position:50%
happens concurrently
to the camera assistance


141
00:07:00.553 --> 00:07:02.722 line:-1 position:50%
in Nearby Interaction.


142
00:07:02.722 --> 00:07:06.893 line:-1 position:50%
In this SwiftUI example, as part
of the makeUIView function,


143
00:07:06.893 --> 00:07:09.996 line:-1 position:50%
the underlying ARSession
within the ARView


144
00:07:09.996 --> 00:07:16.303 line:-1 position:50%
is shared with the NISession
via the new setARSession method.


145
00:07:16.303 --> 00:07:19.072 line:-1 position:50%
If you are using
an ARSession directly,


146
00:07:19,072 --> 00:07:22,475 line:-1
it is necessary to call run
on the ARSession


147
00:07:22.475 --> 00:07:26.313 line:-1 position:50%
with
an ARWorldTrackingConfiguration.


148
00:07:26.313 --> 00:07:29.449 line:-1 position:50%
In addition, several properties
must be configured


149
00:07:29,449 --> 00:07:32,952 line:-1
in a specific manner
within this ARConfiguration


150
00:07:32.952 --> 00:07:35.188 line:-1 position:50%
to ensure high-quality
performance


151
00:07:35.188 --> 00:07:37.924 line:-1 position:50%
from camera assistance.


152
00:07:37,924 --> 00:07:41,127 position:50%
The worldAlignment
should be set to gravity,


153
00:07:41,127 --> 00:07:44,698 position:50%
collaboration and
userFaceTracking disabled,


154
00:07:44,698 --> 00:07:47,767 position:50%
a nil initialWorldMap,
and a delegate


155
00:07:47,767 --> 00:07:50,670 line:0
whose sessionShouldAttempt
Relocalization method


156
00:07:50,670 --> 00:07:52,672 line:0
returns false.


157
00:07:52,672 --> 00:07:54,240 line:-1
Let's turn to some
best practices


158
00:07:54,240 --> 00:07:57,277 line:-1
when sharing an ARSession
you created.


159
00:07:57.277 --> 00:08:01.014 line:-1 position:50%
In your NISessionDelegate
didInvalidateWith error method,


160
00:08:01.014 --> 00:08:04.784 line:-1 position:50%
always inspect the error code.


161
00:08:04.784 --> 00:08:08.855 line:-1 position:50%
If the ARConfiguration used
to run the shared ARSession


162
00:08:08,855 --> 00:08:11,725 line:-1
does not conform
to the outlined properties,


163
00:08:11,725 --> 00:08:14,694 line:-1
the NISession
will be invalidated.


164
00:08:14,694 --> 00:08:18,665 line:-1
A new NIError code
invalidARConfiguration


165
00:08:18.665 --> 00:08:21.534 line:-1 position:50%
will be returned.


166
00:08:21.534 --> 00:08:24.471 line:-1 position:50%
To receive nearby object updates
in your app,


167
00:08:24,471 --> 00:08:28,141 line:-1
continue to use the
didUpdateNearbyObjects method


168
00:08:28.141 --> 00:08:30.577 line:-1 position:50%
in your NISessionDelegate.


169
00:08:30.577 --> 00:08:32.946 line:-1 position:50%
In your didUpdateNearbyObjects
method,


170
00:08:32,946 --> 00:08:36,616 line:-1
you probably check the nearby
objects for your desired peer


171
00:08:36.616 --> 00:08:38.852 line:-1 position:50%
and update the UI
based on distance


172
00:08:38,852 --> 00:08:43,323 line:-1
and direction properties of the
NINearbyObject when available,


173
00:08:43.323 --> 00:08:47.460 line:-1 position:50%
always being careful
to recall these can be nil.


174
00:08:47,460 --> 00:08:49,496 line:-1
When camera assistance
is enabled,


175
00:08:49.496 --> 00:08:54.401 line:-1 position:50%
two new properties are available
within the NINearbyObject.


176
00:08:54,401 --> 00:08:57,704 line:-1
The first is horizontalAngle.


177
00:08:57,704 --> 00:08:59,639 line:-1
This is the 1D angle in radians


178
00:08:59.639 --> 00:09:03.376 line:-1 position:50%
indicating the azimuthal
direction to the nearby object.


179
00:09:03.376 --> 00:09:07.447 line:-1 position:50%
When unavailable,
this value will be nil.


180
00:09:07,447 --> 00:09:10,016 line:-1
Second,
verticalDirectionEstimate


181
00:09:10.016 --> 00:09:13.219 line:-1 position:50%
is the positional relationship
to the nearby object


182
00:09:13.219 --> 00:09:14.954 line:-1 position:50%
in the vertical dimension.


183
00:09:14.954 --> 00:09:19.526 line:-1 position:50%
This is a new
VerticalDirectionEstimate type.


184
00:09:19.526 --> 00:09:23.496 line:-1 position:50%
Distance and direction represent
the key spatial relationship


185
00:09:23.496 --> 00:09:27.066 line:-1 position:50%
between the user's device
and a nearby object.


186
00:09:27,066 --> 00:09:31,304 line:-1
Distance is measured in meters
and direction is a 3D vector


187
00:09:31.304 --> 00:09:34.974 line:-1 position:50%
from your device
to the nearby object.


188
00:09:34,974 --> 00:09:38,478 position:50%
Horizontal angle is defined
as the angle between the device


189
00:09:38,478 --> 00:09:41,214 position:50%
running the NISession
and the nearby object


190
00:09:41,214 --> 00:09:44,250 position:50%
within a local
horizontal plane.


191
00:09:44,250 --> 00:09:46,419 line:0
This accounts for any
vertical displacement


192
00:09:46,419 --> 00:09:50,590 position:50%
offset between the two devices
and any horizontal rotation


193
00:09:50,590 --> 00:09:52,926 line:0
of the device itself.


194
00:09:52,926 --> 00:09:55,962 line:0
While direction is 3D,
horizontal angle


195
00:09:55,962 --> 00:10:02,469 line:0
is a 1D representation of the
heading between the two devices.


196
00:10:02,469 --> 00:10:04,471 line:0
This horizontal angle property


197
00:10:04,471 --> 00:10:07,574 line:0
is complimentary
to the direction property,


198
00:10:07,574 --> 00:10:09,709 position:50%
and if the direction
cannot be resolved,


199
00:10:09,709 --> 00:10:12,212 line:0
the horizontal angle
can be available


200
00:10:12,212 --> 00:10:16,716 position:50%
to help you guide your user
to a nearby object.


201
00:10:16,716 --> 00:10:20,253 line:0
Vertical direction estimate
is a qualitative assessment


202
00:10:20,253 --> 00:10:22,822 line:0
of the vertical position
information.


203
00:10:22,822 --> 00:10:27,160 position:50%
You should use it to guide
the user between floor levels.


204
00:10:27,160 --> 00:10:32,599 line:-1
Let's look now at the new
VerticalDirectionEstimate type.


205
00:10:32,599 --> 00:10:35,702 line:0
VerticalDirectionEstimate
is a nested enum


206
00:10:35,702 --> 00:10:38,705 position:50%
within the NINearbyObject
and represents


207
00:10:38,705 --> 00:10:41,808 position:50%
a qualitative assessment
of the vertical relationship


208
00:10:41,808 --> 00:10:44,611 position:50%
to the nearby object.


209
00:10:44,611 --> 00:10:47,146 position:50%
Be sure to check if
the VerticalDirectionEstimate


210
00:10:47,146 --> 00:10:50,517 line:0
is unknown
before using the property.


211
00:10:50,517 --> 00:10:55,755 position:50%
The vertical relationship
can be same, above, below,


212
00:10:55,755 --> 00:10:58,925 position:50%
or a special
aboveOrBelow value


213
00:10:58,925 --> 00:11:02,996 position:50%
that represents the nearby
object is not on the same level,


214
00:11:02,996 --> 00:11:07,967 position:50%
but not clearly above
or below the device.


215
00:11:07,967 --> 00:11:11,070 line:-1
The Ultra Wideband measurements
are subject to field of view


216
00:11:11,070 --> 00:11:12,505 line:-1
and obstructions.


217
00:11:12.505 --> 00:11:14.574 line:-1 position:50%
The field of view
for direction information


218
00:11:14.574 --> 00:11:19.746 line:-1 position:50%
corresponds to a cone projecting
from the rear of the device.


219
00:11:19.746 --> 00:11:22.315 line:-1 position:50%
The device trajectory
computed from ARKit


220
00:11:22.315 --> 00:11:26.085 line:-1 position:50%
when camera assistance
is enabled allows the distance,


221
00:11:26,085 --> 00:11:30,390 line:-1
direction, horizontal angle,
and vertical direction estimate


222
00:11:30,390 --> 00:11:35,495 line:-1
to be available in more
scenarios, effectively expanding


223
00:11:35,495 --> 00:11:39,098 line:-1
the Ultra Wideband sensor
field of view.


224
00:11:39.098 --> 00:11:42.936 line:-1 position:50%
Let's turn now to leveraging
this integration of ARKit


225
00:11:42,936 --> 00:11:48,474 line:-1
and Nearby Interaction to place
AR objects in your scene.


226
00:11:48,474 --> 00:11:52,579 line:-1
To make it easier for you
to overlay 3D virtual content


227
00:11:52.579 --> 00:11:54.547 line:-1 position:50%
that represents
the nearby object


228
00:11:54.547 --> 00:11:56.783 line:-1 position:50%
onto a camera feed
visualization,


229
00:11:56,783 --> 00:12:02,388 line:-1
we've added a helper method:
worldTransform on NISession.


230
00:12:02.388 --> 00:12:05.058 line:-1 position:50%
This method returns
a worldTransform


231
00:12:05,058 --> 00:12:07,860 line:-1
in ARKit's coordinate space
that represents


232
00:12:07.860 --> 00:12:10.330 line:-1 position:50%
the given nearby
object's position


233
00:12:10.330 --> 00:12:13.466 line:-1 position:50%
in the physical environment
when it's available.


234
00:12:13,466 --> 00:12:18,271 line:-1
When not available,
this method returns nil.


235
00:12:18,271 --> 00:12:20,173 line:-1
We used this method
in the demonstration


236
00:12:20.173 --> 00:12:23.843 line:-1 position:50%
to place the floating spheres
above the next exhibit.


237
00:12:23.843 --> 00:12:26.512 line:-1 position:50%
We want to make it as easy
as possible for you


238
00:12:26.512 --> 00:12:29.916 line:-1 position:50%
to leverage Nearby Interaction
positional output


239
00:12:29.916 --> 00:12:34.220 line:-1 position:50%
to manipulate content
in the AR world in your app.


240
00:12:34.220 --> 00:12:38.858 line:-1 position:50%
Two powerful systems in iOS,
combined.


241
00:12:38.858 --> 00:12:42.428 line:-1 position:50%
Your users must sweep the
device sufficiently in vertical


242
00:12:42.428 --> 00:12:46.032 line:-1 position:50%
and horizontal directions
to allow the camera assistance


243
00:12:46.032 --> 00:12:49.402 line:-1 position:50%
to adequately compute
the world transform.


244
00:12:49.402 --> 00:12:52.472 line:-1 position:50%
This method can return nil
when the user motion


245
00:12:52,472 --> 00:12:55,541 line:-1
is insufficient to allow
the camera assistance


246
00:12:55,541 --> 00:12:59,946 line:-1
to fully converge
to an ARKit world transform.


247
00:12:59.946 --> 00:13:04.250 line:-1 position:50%
When this transform is important
to your app experience,


248
00:13:04,250 --> 00:13:07,887 line:-1
it is important to coach
the user to take action


249
00:13:07.887 --> 00:13:11.290 line:-1 position:50%
to generate this transform.


250
00:13:11.290 --> 00:13:14.027 line:-1 position:50%
Let's look now at some
additions we've made


251
00:13:14.027 --> 00:13:17.063 line:-1 position:50%
to the NISessionDelegate
to make it possible


252
00:13:17,063 --> 00:13:20,400 line:-1
for you to guide the user
similar to what you saw


253
00:13:20,400 --> 00:13:22,035 line:-1
in the demonstration.


254
00:13:22.035 --> 00:13:24.504 line:-1 position:50%
To aid in guiding the user
towards your object,


255
00:13:24.504 --> 00:13:27.440 line:-1 position:50%
an NISessionDelegate callback
provides information


256
00:13:27.440 --> 00:13:30.977 line:-1 position:50%
about the Nearby Interaction
algorithm convergence


257
00:13:30.977 --> 00:13:33.880 line:-1 position:50%
via the new
didUpdateAlgorithmConvergence


258
00:13:33,880 --> 00:13:36,149 line:-1
delegate method.


259
00:13:36,149 --> 00:13:39,285 line:-1
Algorithm convergence
can help you understand why


260
00:13:39.285 --> 00:13:42.388 line:-1 position:50%
horizontal angle,
vertical direction estimate,


261
00:13:42,388 --> 00:13:45,024 line:-1
and worldTransform
are unavailable


262
00:13:45.024 --> 00:13:47.727 line:-1 position:50%
and what actions
the user can take


263
00:13:47,727 --> 00:13:50,129 line:-1
to resolve those properties.


264
00:13:50.129 --> 00:13:51.230 line:-1 position:50%
The delegate provides


265
00:13:51,230 --> 00:13:54,734 line:-1
a new NIAlgorithmConvergence
object


266
00:13:54.734 --> 00:13:58.604 line:-1 position:50%
and an optional NINearbyObject.


267
00:13:58,604 --> 00:14:02,975 line:-1
This delegate method is only
called when you have enabled


268
00:14:02.975 --> 00:14:07.046 line:-1 position:50%
camera assistance
in your NIConfiguration.


269
00:14:07,046 --> 00:14:11,517 line:-1
Let's look at the new
NIAlgorithmConvergence type.


270
00:14:11,517 --> 00:14:15,054 line:-1
NIAlgorithmConvergence
has a single-status property


271
00:14:15,054 --> 00:14:18,791 line:-1
that is an NIAlgorithm
ConvergenceStatus type.


272
00:14:18,791 --> 00:14:22,795 line:-1
The NIAlgorithmConvergenceStatus
type is an enum that represents


273
00:14:22,795 --> 00:14:26,232 line:-1
whether the algorithm
is converged or not.


274
00:14:26.232 --> 00:14:28.434 line:-1 position:50%
If the algorithm
is not converged,


275
00:14:28.434 --> 00:14:30.269 line:-1 position:50%
an array of associated values


276
00:14:30,269 --> 00:14:36,109 line:-1
NIAlgorithmConvergenceStatus
.Reasons is provided.


277
00:14:36.109 --> 00:14:38.177 line:-1 position:50%
Let's return
to the new delegate method


278
00:14:38.177 --> 00:14:39.412 line:-1 position:50%
and say you want to update


279
00:14:39.412 --> 00:14:43.015 line:-1 position:50%
the status of the camera
assistance to the user,


280
00:14:43,015 --> 00:14:44,984 line:-1
you can switch on
the convergence status


281
00:14:44,984 --> 00:14:46,519 line:-1
and if unknown or converged,


282
00:14:46,519 --> 00:14:49,856 line:-1
display that information
to the user.


283
00:14:49,856 --> 00:14:53,459 line:-1
Be sure to inspect
the NINearbyObject.


284
00:14:53,459 --> 00:14:54,894 line:-1
When the object is nil,


285
00:14:54.894 --> 00:14:59.732 line:-1 position:50%
the NIAlgorithmConvergence state
applies to the session itself,


286
00:14:59,732 --> 00:15:04,270 line:-1
rather than a specific
NINearbyObject.


287
00:15:04.270 --> 00:15:06.472 line:-1 position:50%
When the status is
notConverged,


288
00:15:06,472 --> 00:15:10,610 line:-1
it also includes an associated
value that describes the reasons


289
00:15:10,610 --> 00:15:13,112 line:-1
the algorithm is not converged.


290
00:15:13.112 --> 00:15:16.015 line:-1 position:50%
A localized description
is available for this reason


291
00:15:16,015 --> 00:15:19,619 line:-1
to help you communicate better
with your users.


292
00:15:19.619 --> 00:15:23.389 line:-1 position:50%
Let's look next
at how to use these values.


293
00:15:23.389 --> 00:15:26.125 line:-1 position:50%
Inspecting the notConverged
case more closely


294
00:15:26,125 --> 00:15:28,027 line:-1
and the associated
reasons value,


295
00:15:28,027 --> 00:15:31,264 line:-1
it is possible to guide
the user to take actions


296
00:15:31,264 --> 00:15:33,766 line:-1
that helps produce
the desired information


297
00:15:33.766 --> 00:15:36.536 line:-1 position:50%
about a nearby object.


298
00:15:36.536 --> 00:15:38.905 line:-1 position:50%
The associated value
is an array of


299
00:15:38.905 --> 00:15:41.941 line:-1 position:50%
NIAlgorithmConvergence
StatusReasons.


300
00:15:41.941 --> 00:15:45.344 line:-1 position:50%
The reason can indicate there's
insufficient total motion,


301
00:15:45.344 --> 00:15:48.648 line:-1 position:50%
insufficient motion in the
horizontal or vertical sweep,


302
00:15:48,648 --> 00:15:51,050 line:-1
and insufficient lighting.


303
00:15:51.050 --> 00:15:56.088 line:-1 position:50%
Be mindful that multiple reasons
may exist at the same time


304
00:15:56.088 --> 00:15:59.592 line:-1 position:50%
and guide the user sequentially
through each action


305
00:15:59,592 --> 00:16:03,763 line:-1
based on which is most important
for your application.


306
00:16:03.763 --> 00:16:06.766 line:-1 position:50%
Recall how I moved the phone
in the demonstration


307
00:16:06,766 --> 00:16:09,468 line:-1
and needed to sweep
in both the horizontal


308
00:16:09.468 --> 00:16:13.406 line:-1 position:50%
and vertical direction
to resolve the world transform.


309
00:16:13.406 --> 00:16:15.174 line:-1 position:50%
That's the most
important bits about


310
00:16:15.174 --> 00:16:18.711 line:-1 position:50%
the enhanced Nearby Interaction
mode with camera assistance.


311
00:16:18.711 --> 00:16:20.379 line:-1 position:50%
We've made some
additional changes


312
00:16:20,379 --> 00:16:23,316 line:-1
to help you better
leverage this mode.


313
00:16:23.316 --> 00:16:27.954 line:-1 position:50%
Previously, a single isSupported
class variable on the NISession


314
00:16:27,954 --> 00:16:31,390 line:-1
was all that was necessary
to check if Nearby Interaction


315
00:16:31,390 --> 00:16:33,826 line:-1
was supported on a given device.


316
00:16:33.826 --> 00:16:36.195 line:-1 position:50%
This is now deprecated.


317
00:16:36.195 --> 00:16:38.164 line:-1 position:50%
With the addition
of camera assistance,


318
00:16:38,164 --> 00:16:40,099 line:-1
we've made
the device capabilities


319
00:16:40.099 --> 00:16:43.669 line:-1 position:50%
supported by Nearby Interaction
more descriptive


320
00:16:43,669 --> 00:16:48,040 line:-1
with a new deviceCapabilities
class member on the NISession


321
00:16:48,040 --> 00:16:52,879 line:-1
that returns a new
NIDeviceCapability object.


322
00:16:52.879 --> 00:16:54.580 line:-1 position:50%
At a minimum, checking the


323
00:16:54.580 --> 00:16:57.450 line:-1 position:50%
supportsPreciseDistance
Measurement property


324
00:16:57.450 --> 00:16:59.986 line:-1 position:50%
is the equivalent
of the now deprecated


325
00:16:59.986 --> 00:17:03.222 line:-1 position:50%
isSupported class variable.


326
00:17:03,222 --> 00:17:05,892 line:-1
Once you've established
that the device supports


327
00:17:05,892 --> 00:17:07,960 line:-1
the precise distance
measurement,


328
00:17:07.960 --> 00:17:10.396 line:-1 position:50%
you should use
NIDeviceCapability


329
00:17:10.396 --> 00:17:13.566 line:-1 position:50%
to fully understand
the capabilities available


330
00:17:13.566 --> 00:17:18.504 line:-1 position:50%
from Nearby Interaction on the
device running your application.


331
00:17:18,504 --> 00:17:22,074 line:-1
It is recommended
you tailor your app experience


332
00:17:22.074 --> 00:17:23.976 line:-1 position:50%
to the capabilities
of the device


333
00:17:23,976 --> 00:17:27,880 line:-1
by checking the additional
supportsDirectionMeasurement


334
00:17:27.880 --> 00:17:30.349 line:-1 position:50%
and supportsCameraAssistance
properties


335
00:17:30.349 --> 00:17:33.986 line:-1 position:50%
of the NIDeviceCapability
object.


336
00:17:33.986 --> 00:17:36.923 line:-1 position:50%
Not all devices will support
direction measurements


337
00:17:36,923 --> 00:17:39,091 line:-1
nor camera assistance,


338
00:17:39,091 --> 00:17:41,961 line:-1
so be sure to include
experiences that are tailored


339
00:17:41.961 --> 00:17:45.131 line:-1 position:50%
to the capabilities
of this device.


340
00:17:45,131 --> 00:17:48,367 line:0
In particular,
be mindful to include


341
00:17:48,367 --> 00:17:50,636 position:50%
distance-only experiences


342
00:17:50,636 --> 00:17:53,806 position:50%
in order to best support
Apple Watch.


343
00:17:53.806 --> 00:17:56.475 line:-1 position:50%
That's all for camera assistance
as a way to enhance


344
00:17:56,475 --> 00:18:00,579 line:-1
Nearby Interaction with ARKit.
So let's turn our attention now


345
00:18:00.579 --> 00:18:03.649 line:-1 position:50%
to accessory background
sessions.


346
00:18:03,649 --> 00:18:07,186 line:-1
Today, you can use
Nearby Interaction in your app


347
00:18:07.186 --> 00:18:11.324 line:-1 position:50%
to allow users to point
to other devices, find friends,


348
00:18:11.324 --> 00:18:13.359 line:-1 position:50%
and show controls or other UI


349
00:18:13.359 --> 00:18:16.829 line:-1 position:50%
based on distance and direction
to an accessory.


350
00:18:16.829 --> 00:18:20.299 line:-1 position:50%
However, when your app
transitions to the background


351
00:18:20,299 --> 00:18:24,236 line:-1
or when the user locks
the screen on iOS and watchOS,


352
00:18:24,236 --> 00:18:27,073 line:-1
any running NISessions
are suspended


353
00:18:27.073 --> 00:18:30.443 line:-1 position:50%
until the application
returns to the foreground.


354
00:18:30.443 --> 00:18:34.714 line:-1 position:50%
This means you needed to focus
on hands-on user experiences


355
00:18:34.714 --> 00:18:38.017 line:-1 position:50%
when interacting
with your accessory.


356
00:18:38,017 --> 00:18:43,422 line:-1
Starting in iOS 16, Nearby
Interaction has gone hands-free.


357
00:18:43.422 --> 00:18:45.658 line:-1 position:50%
You're now able to use
Nearby Interaction


358
00:18:45.658 --> 00:18:47.860 line:-1 position:50%
to start playing music
when you walk into a room


359
00:18:47.860 --> 00:18:51.731 line:-1 position:50%
with a smart speaker, turn on
your eBike when you get on it,


360
00:18:51.731 --> 00:18:56.168 line:-1 position:50%
or trigger other hands-free
actions on an accessory.


361
00:18:56.168 --> 00:18:58.371 line:-1 position:50%
You can do this
even when the user


362
00:18:58.371 --> 00:19:00.606 line:-1 position:50%
isn't actively using your app


363
00:19:00.606 --> 00:19:03.909 line:-1 position:50%
via accessory
background sessions.


364
00:19:03,909 --> 00:19:05,945 line:-1
Let's look at
how you can accomplish


365
00:19:05,945 --> 00:19:09,615 line:-1
this exciting new capability.


366
00:19:09,615 --> 00:19:11,884 line:-1
Let's spend just a minute
reviewing the sequence


367
00:19:11.884 --> 00:19:15.921 line:-1 position:50%
for how to configure and run
an NISession with an accessory.


368
00:19:15,921 --> 00:19:17,590 line:-1
You might recognize
this sequence


369
00:19:17.590 --> 00:19:20.893 line:-1 position:50%
from last year's
WWDC presentation.


370
00:19:20.893 --> 00:19:23.062 line:-1 position:50%
The accessory sends
its Ultra Wideband


371
00:19:23.062 --> 00:19:26.399 line:-1 position:50%
accessory configuration data
over to your application


372
00:19:26.399 --> 00:19:29.168 line:-1 position:50%
via a data channel,
and you create an


373
00:19:29,168 --> 00:19:33,105 line:-1
NINearbyAccessoryConfiguration
from this data.


374
00:19:33.105 --> 00:19:36.876 line:-1 position:50%
You create an NISession,
set an NISessionDelegate


375
00:19:36,876 --> 00:19:40,279 line:-1
to get Ultra Wideband
measurements from the accessory.


376
00:19:40.279 --> 00:19:43.049 line:-1 position:50%
You run the NISession
with your configuration


377
00:19:43,049 --> 00:19:46,685 line:-1
and the session will return
sharable configuration data


378
00:19:46,685 --> 00:19:48,921 line:-1
to setup the accessory
to interoperate


379
00:19:48,921 --> 00:19:51,023 line:-1
with your application.


380
00:19:51,023 --> 00:19:53,559 line:-1
After sending this sharable
configuration data


381
00:19:53.559 --> 00:19:55.194 line:-1 position:50%
back to the accessory,


382
00:19:55.194 --> 00:19:58.264 line:-1 position:50%
you are now able to receive
Ultra Wideband measurements


383
00:19:58.264 --> 00:20:01.901 line:-1 position:50%
in your application
and at the accessory.


384
00:20:01,901 --> 00:20:04,036 line:0
For all the details
on configuring and running


385
00:20:04,036 --> 00:20:06,872 line:0
Nearby Interaction
with third-party accessories,


386
00:20:06,872 --> 00:20:10,509 line:0
please review
last year's WWDC session.


387
00:20:10.509 --> 00:20:14.513 line:-1 position:50%
Let's look now at how you set up
the new background sessions.


388
00:20:14.513 --> 00:20:17.583 line:-1 position:50%
The previous sequence diagram
showed data flowing


389
00:20:17,583 --> 00:20:21,153 line:-1
between your application
and the accessory.


390
00:20:21.153 --> 00:20:24.090 line:-1 position:50%
It is very common to have
the communication channel


391
00:20:24,090 --> 00:20:29,261 line:-1
between an accessory and your
application use Bluetooth LE.


392
00:20:29.261 --> 00:20:32.298 line:-1 position:50%
When paired to the accessory
using Bluetooth LE,


393
00:20:32.298 --> 00:20:34.066 line:-1 position:50%
you can enable
Nearby Interaction


394
00:20:34.066 --> 00:20:37.903 line:-1 position:50%
to start and continue sessions
in the background.


395
00:20:37,903 --> 00:20:40,573 line:-1
Let's look closely
at how this is possible.


396
00:20:40,573 --> 00:20:43,976 position:50%
Today, you can configure
your app to use Core Bluetooth


397
00:20:43,976 --> 00:20:46,779 position:50%
to discover, connect to,
and exchange data


398
00:20:46,779 --> 00:20:48,681 line:0
with Bluetooth LE accessories


399
00:20:48,681 --> 00:20:51,417 line:0
while your app
is in the background.


400
00:20:51,417 --> 00:20:54,386 position:50%
Check out the existing
Core Bluetooth Programming Guide


401
00:20:54,386 --> 00:20:59,425 line:0
or the WWDC session from 2017
for more details.


402
00:20:59,425 --> 00:21:02,294 position:50%
Taking advantage of the powerful
background operations


403
00:21:02,294 --> 00:21:05,431 position:50%
from Core Bluetooth
to efficiently discover


404
00:21:05,431 --> 00:21:08,868 position:50%
the accessory and run your
application in the background,


405
00:21:08,868 --> 00:21:12,304 position:50%
your application can start
an NISession


406
00:21:12,304 --> 00:21:14,073 position:50%
with a Bluetooth LE accessory


407
00:21:14,073 --> 00:21:18,344 position:50%
that also supports Ultra
Wideband in the background.


408
00:21:18,344 --> 00:21:21,380 line:0
Let's look now at how
the sequence diagram updates


409
00:21:21,380 --> 00:21:24,283 position:50%
to reflect this new mode.


410
00:21:24.283 --> 00:21:25.951 line:-1 position:50%
To interact with this accessory,


411
00:21:25,951 --> 00:21:29,889 line:-1
first, ensure that it is
Bluetooth LE-paired.


412
00:21:29.889 --> 00:21:32.691 line:-1 position:50%
Then, connect to the accessory.


413
00:21:32,691 --> 00:21:34,260 line:-1
When the accessory generates


414
00:21:34.260 --> 00:21:37.830 line:-1 position:50%
its accessory Ultra Wideband
configuration data,


415
00:21:37.830 --> 00:21:40.799 line:-1 position:50%
it should both
send it to your application


416
00:21:40,799 --> 00:21:44,270 line:-1
and populate the Nearby
Interaction GATT service;


417
00:21:44,270 --> 00:21:46,071 line:-1
more on this next.


418
00:21:46,071 --> 00:21:48,174 line:-1
Finally, when your
application receives


419
00:21:48,174 --> 00:21:51,076 line:-1
the accessory's
configuration data, construct an


420
00:21:51,076 --> 00:21:55,681 line:-1
NINearbyAccessoryConfiguration
object using a new initializer


421
00:21:55.681 --> 00:21:59.451 line:-1 position:50%
providing both your accessory's
UWB configuration data


422
00:21:59.451 --> 00:22:02.154 line:-1 position:50%
and its Bluetooth
peer identifier.


423
00:22:02,154 --> 00:22:04,657 line:-1
Run your NISession
with this configuration


424
00:22:04,657 --> 00:22:07,293 line:-1
and ensure you complete
the setup by receiving


425
00:22:07.293 --> 00:22:11.163 line:-1 position:50%
the sharable configuration
in your NISessionDelegate


426
00:22:11,163 --> 00:22:15,501 line:-1
and send the sharable
configuration to the accessory.


427
00:22:15.501 --> 00:22:18.637 line:-1 position:50%
In order for your accessory
to create a relationship


428
00:22:18,637 --> 00:22:20,773 line:-1
between its Bluetooth identifier


429
00:22:20.773 --> 00:22:23.275 line:-1 position:50%
and the Ultra Wideband
configuration,


430
00:22:23.275 --> 00:22:27.780 line:-1 position:50%
it must implement the new
Nearby Interaction GATT service.


431
00:22:27,780 --> 00:22:31,283 line:-1
The Nearby Interaction service
contains a single encrypted


432
00:22:31.283 --> 00:22:35.287 line:-1 position:50%
characteristic called
Accessory Configuration Data.


433
00:22:35,287 --> 00:22:38,490 line:-1
It contains the same
UWB configuration data


434
00:22:38.490 --> 00:22:42.394 line:-1 position:50%
used to initialize the
NINearbyAccessoryConfiguration


435
00:22:42.394 --> 00:22:43.696 line:-1 position:50%
object.


436
00:22:43.696 --> 00:22:48.867 line:-1 position:50%
iOS uses this characteristic
to verify the association


437
00:22:48,867 --> 00:22:53,472 line:-1
between your Bluetooth peer
identifier and your NISession.


438
00:22:53.472 --> 00:22:57.843 line:-1 position:50%
Your app cannot read from
this characteristic directly.


439
00:22:57,843 --> 00:23:00,112 position:50%
You can find out more
about the details


440
00:23:00,112 --> 00:23:02,881 position:50%
of this new Nearby Interaction
GATT service


441
00:23:02,881 --> 00:23:07,786 position:50%
on developer.apple.com/
nearby-interaction.


442
00:23:07,786 --> 00:23:11,590 position:50%
If your accessory supports
multiple NISessions in parallel,


443
00:23:11,590 --> 00:23:15,661 line:0
create multiple instances of
Accessory Configuration Data,


444
00:23:15,661 --> 00:23:20,165 position:50%
each with a different
NISession's UWB configuration.


445
00:23:20,165 --> 00:23:23,202 position:50%
That's what's necessary
on the accessory.


446
00:23:23,202 --> 00:23:27,206 position:50%
Let's turn to what you need
to implement in your application


447
00:23:27,206 --> 00:23:30,276 position:50%
by diving into some code!


448
00:23:30.276 --> 00:23:33.712 line:-1 position:50%
Accessory background sessions
require that the accessory


449
00:23:33.712 --> 00:23:37.016 line:-1 position:50%
is LE-paired
to the user's iPhone.


450
00:23:37.016 --> 00:23:40.953 line:-1 position:50%
Your app is responsible
for triggering this process.


451
00:23:40,953 --> 00:23:44,957 line:-1
To do this, implement methods
to scan for your accessory,


452
00:23:44.957 --> 00:23:50.362 line:-1 position:50%
connect to it, and discover its
services and characteristics.


453
00:23:50.362 --> 00:23:52.998 line:-1 position:50%
Then, implement
a method to read


454
00:23:52,998 --> 00:23:56,302 line:-1
one of your accessory's
encrypted characteristics.


455
00:23:56,302 --> 00:23:59,271 line:-1
You only need to do this once.


456
00:23:59.271 --> 00:24:03.842 line:-1 position:50%
It will show the user
a prompt to accept pairing.


457
00:24:03,842 --> 00:24:06,478 line:-1
Accessory background sessions
also require


458
00:24:06,478 --> 00:24:09,548 line:-1
a Bluetooth connection
to your accessory.


459
00:24:09,548 --> 00:24:12,384 line:-1
Your app must be able
to form this connection


460
00:24:12,384 --> 00:24:15,054 line:-1
even when it's backgrounded.


461
00:24:15,054 --> 00:24:18,824 line:-1
To do this, implement a method
to initiate a connection attempt


462
00:24:18.824 --> 00:24:20.426 line:-1 position:50%
to your accessory.


463
00:24:20,426 --> 00:24:22,828 line:-1
You should do this
even if the accessory


464
00:24:22,828 --> 00:24:26,498 line:-1
is not within Bluetooth range.


465
00:24:26,498 --> 00:24:29,635 position:50%
Then, implement
CBManagerDelegate methods


466
00:24:29,635 --> 00:24:35,174 position:50%
to restore state after your app
is relaunched by Core Bluetooth


467
00:24:35,174 --> 00:24:38,510 line:0
and handle when your
connection is established.


468
00:24:38,510 --> 00:24:42,848 position:50%
Now you're ready to run
an accessory background session.


469
00:24:42.848 --> 00:24:45.351 line:-1 position:50%
Create an
NINearbyAccessoryConfiguration


470
00:24:45.351 --> 00:24:48.354 line:-1 position:50%
object by providing
both the accessory's


471
00:24:48,354 --> 00:24:53,058 line:-1
UWB configuration data and its
Bluetooth peer identifier


472
00:24:53.058 --> 00:24:55.894 line:-1 position:50%
from the CBPeripheral
identifier.


473
00:24:55,894 --> 00:24:58,697 line:-1
Run an NISession
with that configuration


474
00:24:58.697 --> 00:25:02.101 line:-1 position:50%
and it will run while your app
is backgrounded.


475
00:25:02,101 --> 00:25:03,402 line:-1
That's it!


476
00:25:03.402 --> 00:25:05.871 line:-1 position:50%
Well, there is one more setting


477
00:25:05,871 --> 00:25:09,441 line:-1
you need to update
for your app in Xcode.


478
00:25:09.441 --> 00:25:13.078 line:-1 position:50%
This background mode requires
the Nearby Interaction string


479
00:25:13.078 --> 00:25:17.616 line:-1 position:50%
in the UIBackgroundModes array
in your app's Info.plist.


480
00:25:17,616 --> 00:25:20,719 line:-1
You can also use
Xcode capabilities editor


481
00:25:20.719 --> 00:25:23.155 line:-1 position:50%
to add this background mode.


482
00:25:23,155 --> 00:25:25,190 line:-1
You will also want to ensure
you have


483
00:25:25,190 --> 00:25:29,261 line:-1
"Uses Bluetooth LE accessories"
enabled to ensure your app


484
00:25:29,261 --> 00:25:33,732 line:-1
can connect with the accessory
in the background.


485
00:25:33.732 --> 00:25:35.501 line:-1 position:50%
One important note


486
00:25:35,501 --> 00:25:38,537 line:-1
about this new accessory
background session.


487
00:25:38.537 --> 00:25:41.206 line:-1 position:50%
When your application
is in the background,


488
00:25:41.206 --> 00:25:45.377 line:-1 position:50%
the NISession will continue to
run and will not be suspended,


489
00:25:45.377 --> 00:25:49.615 line:-1 position:50%
so Ultra Wideband measurements
are available on the accessory.


490
00:25:49.615 --> 00:25:53.252 line:-1 position:50%
You must consume and act on
the Ultra Wideband measurements


491
00:25:53.252 --> 00:25:54.987 line:-1 position:50%
on the accessory.


492
00:25:54.987 --> 00:25:58.190 line:-1 position:50%
Your application
will not receive runtime,


493
00:25:58,190 --> 00:26:00,926 line:-1
and you will not receive
didUpdateNearbyObject


494
00:26:00.926 --> 00:26:02.261 line:-1 position:50%
delegate callbacks


495
00:26:02.261 --> 00:26:06.064 line:-1 position:50%
until your application
returns to the foreground.


496
00:26:06,064 --> 00:26:08,200 line:-1
When using this new
background mode,


497
00:26:08.200 --> 00:26:11.370 line:-1 position:50%
let's review the following
best practices.


498
00:26:11.370 --> 00:26:13.972 line:-1 position:50%
Triggering LE pairing
with your accessory


499
00:26:13.972 --> 00:26:17.342 line:-1 position:50%
will show the user a prompt
to accept the pairing.


500
00:26:17,342 --> 00:26:20,312 line:-1
Do this at a time
that is intuitive to the user


501
00:26:20.312 --> 00:26:23.282 line:-1 position:50%
why they want to pair
the accessory.


502
00:26:23,282 --> 00:26:26,151 line:-1
This could be in the setup flow
that it creates the relationship


503
00:26:26.151 --> 00:26:29.154 line:-1 position:50%
with the accessory or when
the user clearly indicates


504
00:26:29,154 --> 00:26:32,758 line:-1
their desire to interact
with the accessory.


505
00:26:32.758 --> 00:26:34.927 line:-1 position:50%
While your app is backgrounded,


506
00:26:34.927 --> 00:26:37.863 line:-1 position:50%
your NISession
will not be suspended,


507
00:26:37.863 --> 00:26:40.466 line:-1 position:50%
but it will not receive
didUpdateNearbyObject


508
00:26:40,466 --> 00:26:42,367 line:-1
delegate callbacks.


509
00:26:42.367 --> 00:26:45.537 line:-1 position:50%
However, your accessory
will receive


510
00:26:45.537 --> 00:26:47.539 line:-1 position:50%
Ultra Wideband measurements.


511
00:26:47,539 --> 00:26:50,676 line:-1
Process these measurements
directly on your accessory


512
00:26:50.676 --> 00:26:54.513 line:-1 position:50%
to determine what action
should happen for the user.


513
00:26:54.513 --> 00:26:56.882 line:-1 position:50%
Finally, manage battery usage


514
00:26:56,882 --> 00:27:00,419 line:-1
by only sending data
from your accessory to your app


515
00:27:00,419 --> 00:27:02,821 line:-1
during a significant
user interaction;


516
00:27:02,821 --> 00:27:06,458 line:-1
for example, to show
a notification to the user.


517
00:27:06,458 --> 00:27:09,394 line:-1
That's all you need to know
on background sessions


518
00:27:09,394 --> 00:27:14,333 line:-1
and leads me to the last topic
on third-party hardware support.


519
00:27:14.333 --> 00:27:17.836 line:-1 position:50%
Today, I'm happy to announce
that the previously available


520
00:27:17,836 --> 00:27:20,906 line:-1
beta U1-compatible
development kits


521
00:27:20.906 --> 00:27:26.044 line:-1 position:50%
are now out of beta
and available for wider use.


522
00:27:26,044 --> 00:27:29,615 line:0
Please visit developer.apple.com
/nearby-interaction


523
00:27:29,615 --> 00:27:31,083 position:50%
to find out more about


524
00:27:31,083 --> 00:27:35,053 line:0
compatible Ultra Wideband
development kits.


525
00:27:35,053 --> 00:27:36,855 position:50%
We've also updated
the specification


526
00:27:36,855 --> 00:27:39,258 line:0
for accessory manufacturers
to support


527
00:27:39,258 --> 00:27:41,793 line:0
the new accessory
background sessions,


528
00:27:41,793 --> 00:27:44,696 position:50%
including the Nearby Interaction
GATT service,


529
00:27:44,696 --> 00:27:47,699 position:50%
and it is available
on the same website.


530
00:27:47.699 --> 00:27:52.638 line:-1 position:50%
So, let's summarize what we've
discussed in this session.


531
00:27:52,638 --> 00:27:56,875 line:-1
Nearby Interaction now includes
a new camera-assisted mode


532
00:27:56.875 --> 00:28:00.379 line:-1 position:50%
that tightly integrates ARKit
and Nearby Interaction


533
00:28:00.379 --> 00:28:02.548 line:-1 position:50%
to provide a seamless experience


534
00:28:02,548 --> 00:28:05,918 line:-1
for you to create
spatially aware experiences


535
00:28:05,918 --> 00:28:09,821 line:-1
that guide users
to a nearby object.


536
00:28:09.821 --> 00:28:13.292 line:-1 position:50%
The accessory background
sessions enable you to initiate


537
00:28:13.292 --> 00:28:16.061 line:-1 position:50%
and extend sessions
into the background


538
00:28:16.061 --> 00:28:19.197 line:-1 position:50%
for you to build
a more hands-off experience


539
00:28:19,197 --> 00:28:21,767 line:-1
for your users.


540
00:28:21,767 --> 00:28:23,735 line:-1
We've announced
exciting updates


541
00:28:23.735 --> 00:28:28.507 line:-1 position:50%
to the third-party compatible
Ultra Wideband hardware support.


542
00:28:28.507 --> 00:28:31.843 line:-1 position:50%
That's it for the Nearby
Interaction updates this year.


543
00:28:31.843 --> 00:28:33.445 line:-1 position:50%
Download the demos,


544
00:28:33,445 --> 00:28:36,415 line:-1
reach out with feedback
on the updated capabilities,


545
00:28:36,415 --> 00:28:39,217 line:-1
review the updated
third-party specification,


546
00:28:39,217 --> 00:28:43,188 line:-1
and go build amazing apps
with spatial experiences.


547
00:28:43,188 --> 00:28:44,890 line:-1
Thank you.


548
00:28:44,890 --> 00:28:48,927 size:2% align:right line:0
♪

