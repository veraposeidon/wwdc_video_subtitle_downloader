2
00:00:00.167 --> 00:00:03.237 line:-1 position:50%
♪ (Mellow instrumental
hip-hop music) ♪


3
00:00:03,237 --> 00:00:09,810 size:2% line:0 position:90%
♪


4
00:00:09.810 --> 00:00:11.712 line:-1 position:50%
Praveen Sharma: Hi.
My name is Praveen,


5
00:00:11,712 --> 00:00:14,181 line:-1
and I'm from the Prototyping
team here at Apple.


6
00:00:14,181 --> 00:00:15,649 line:-1
Kai Kang: Hi. My name is Kai


7
00:00:15,649 --> 00:00:18,185 line:-1
and I'm from
the Video Engineering team.


8
00:00:18,185 --> 00:00:20,354 line:-1
Praveen: Over the past few years
Apple has enabled


9
00:00:20,354 --> 00:00:24,858 line:-1
powerful new ways for people to
bring the world into their apps.


10
00:00:24,858 --> 00:00:28,462 line:-1
Last year,
we introduced Object Capture,


11
00:00:28.462 --> 00:00:31.365 line:-1 position:50%
which takes in photos
of real-world objects,


12
00:00:31.365 --> 00:00:34.668 line:-1 position:50%
and using the Photogrammetry API
in RealityKit,


13
00:00:34,668 --> 00:00:39,873 line:-1
turns them into a 3D model
ready for use in your app.


14
00:00:39.873 --> 00:00:41.775 line:-1 position:50%
Previous to Object Capture,


15
00:00:41.775 --> 00:00:44.811 line:-1 position:50%
we released
the Scene Reconstruction API


16
00:00:44.811 --> 00:00:46.914 line:-1 position:50%
which gives you
a coarse understanding


17
00:00:46.914 --> 00:00:49.149 line:-1 position:50%
of the geometric structure
of your space


18
00:00:49,149 --> 00:00:52,252 line:-1
and enables brand-new
augmented reality use cases


19
00:00:52,252 --> 00:00:54,421 line:-1
in your apps.


20
00:00:54.421 --> 00:00:57.090 line:-1 position:50%
This year, we are
very excited to announce


21
00:00:57.090 --> 00:01:01.895 line:-1 position:50%
a brand-new framework called
RoomPlan.


22
00:01:01,895 --> 00:01:04,631 line:-1
RoomPlan allows you
to scan your room


23
00:01:04.631 --> 00:01:07.801 line:-1 position:50%
using your LiDAR-enabled
iPhone or iPad.


24
00:01:07,801 --> 00:01:11,371 line:-1
It generates a parametric 3D
model of the room


25
00:01:11.371 --> 00:01:15.075 line:-1 position:50%
and its room-defining objects
which you can use in your app.


26
00:01:15.075 --> 00:01:18.211 line:-1 position:50%
Let's take a look at what
a RoomPlan scanning experience


27
00:01:18,211 --> 00:01:21,648 line:-1
looks like.


28
00:01:21.648 --> 00:01:25.218 line:-1 position:50%
RoomPlan uses sophisticated
machine learning algorithms


29
00:01:25,218 --> 00:01:31,091 line:-1
powered by ARKit to detect
walls, windows, openings,


30
00:01:31,091 --> 00:01:34,227 line:-1
and doors, as well as
room-defining objects


31
00:01:34.227 --> 00:01:40.200 line:-1 position:50%
like fireplaces, couches,
tables, and cabinets.


32
00:01:40.200 --> 00:01:42.336 line:-1 position:50%
With our RoomCaptureView API,


33
00:01:42,336 --> 00:01:47,040 line:-1
which uses RealityKit to render
scanning progress in real time,


34
00:01:47,040 --> 00:01:49,977 line:-1
you can easily integrate
a scanning experience


35
00:01:49,977 --> 00:01:52,946 line:-1
into your app.


36
00:01:52.946 --> 00:01:55.015 line:-1 position:50%
And when you are
finished scanning,


37
00:01:55,015 --> 00:01:59,186 line:-1
RoomCaptureView presents
the final post-processed results


38
00:01:59.186 --> 00:02:04.224 line:-1 position:50%
for you to use however
best fits your use case.


39
00:02:04.224 --> 00:02:07.694 line:-1 position:50%
For the first time, without
the complexities of implementing


40
00:02:07.694 --> 00:02:10.497 line:-1 position:50%
machine learning
and computer vision algorithms,


41
00:02:10,497 --> 00:02:14,634 line:-1
people can now interact with
their room in brand new ways.


42
00:02:14.634 --> 00:02:17.637 line:-1 position:50%
For example, interior design
apps can preview


43
00:02:17,637 --> 00:02:20,374 line:-1
wall color changes
and accurately calculate


44
00:02:20,374 --> 00:02:24,011 line:-1
the amount of paint
required to repaint a room.


45
00:02:24,011 --> 00:02:27,280 line:-1
Architecture apps can now
easily allow someone to preview


46
00:02:27.280 --> 00:02:31.752 line:-1 position:50%
and edit changes to their room's
layout in real time.


47
00:02:31.752 --> 00:02:34.855 line:-1 position:50%
Real estate apps can now
seamlessly enable agents


48
00:02:34.855 --> 00:02:39.059 line:-1 position:50%
to capture floor plans
and 3D models of a listing.


49
00:02:39.059 --> 00:02:41.762 line:-1 position:50%
And e-commerce apps
can engage customers


50
00:02:41.762 --> 00:02:46.099 line:-1 position:50%
through product visualization
in their physical spaces.


51
00:02:46,099 --> 00:02:50,203 line:-1
These are just a few examples of
applications RoomPlan enables,


52
00:02:50,203 --> 00:02:52,506 line:-1
and you'll be surprised
to see how simple it is


53
00:02:52,506 --> 00:02:56,009 line:-1
to integrate RoomPlan
into your app.


54
00:02:56.009 --> 00:02:57.911 line:-1 position:50%
Let's take a look.


55
00:02:57,911 --> 00:03:01,381 line:-1
There are two main ways
you can use RoomPlan.


56
00:03:01,381 --> 00:03:04,684 line:-1
The first is our out-of-the-box
scanning experience


57
00:03:04.684 --> 00:03:06.987 line:-1 position:50%
which allows you to seamlessly
integrate RoomPlan


58
00:03:06.987 --> 00:03:08.855 line:-1 position:50%
into your app.


59
00:03:08.855 --> 00:03:12.492 line:-1 position:50%
The second is our data API
which enables your app


60
00:03:12.492 --> 00:03:15.495 line:-1 position:50%
to use the live
parametric data from a scan


61
00:03:15,495 --> 00:03:18,498 line:-1
however best suits
your use case.


62
00:03:18.498 --> 00:03:22.502 line:-1 position:50%
With both of these APIs,
we recommend some best practices


63
00:03:22,502 --> 00:03:25,238 line:-1
to help you achieve
the best possible scan results,


64
00:03:25.238 --> 00:03:30.010 line:-1 position:50%
which we'll go over in the last
section of this presentation.


65
00:03:30.010 --> 00:03:33.246 line:-1 position:50%
First, let's talk about
the scanning experience


66
00:03:33,246 --> 00:03:34,881 line:-1
that you can bring into your app


67
00:03:34.881 --> 00:03:38.552 line:-1 position:50%
using our new
RoomCaptureView API.


68
00:03:38.552 --> 00:03:41.354 line:-1 position:50%
RoomCaptureView
is a UIView subclass


69
00:03:41.354 --> 00:03:43.824 line:-1 position:50%
that you can easily place
in your app.


70
00:03:43.824 --> 00:03:48.195 line:-1 position:50%
It handles the presentation of
world space scanning feedback,


71
00:03:48.195 --> 00:03:50.964 line:-1 position:50%
real-time room model
generation,


72
00:03:50.964 --> 00:03:54.134 line:-1 position:50%
as well as coaching
and user guidance.


73
00:03:54,134 --> 00:03:56,403 line:-1
Let's take a closer look
at the design elements


74
00:03:56,403 --> 00:04:01,241 line:-1
presented during
a RoomCaptureView-based scan.


75
00:04:01,241 --> 00:04:04,111 position:50%
During an active
RoomCaptureView session,


76
00:04:04,111 --> 00:04:08,915 position:50%
animated lines outline detected
walls, windows, openings,


77
00:04:08,915 --> 00:04:13,620 position:50%
doors, and room-defining objects
in real time.


78
00:04:13,620 --> 00:04:16,323 position:50%
The interactive 3D model
generated in real time


79
00:04:16,323 --> 00:04:18,525 line:0
at the bottom
of the RoomCaptureView,


80
00:04:18,525 --> 00:04:23,163 position:50%
gives you an overview of your
scanning progress at a glance.


81
00:04:23,163 --> 00:04:25,899 position:50%
Finally, text coaching
guides you


82
00:04:25,899 --> 00:04:29,302 position:50%
to the best possible
scanning results.


83
00:04:29,302 --> 00:04:32,305 position:50%
Let's take a look at how you can
start using RoomCaptureView


84
00:04:32,305 --> 00:04:35,809 line:0
in just four easy steps.


85
00:04:35.809 --> 00:04:38.879 line:-1 position:50%
First, we create
a RoomCaptureView reference


86
00:04:38,879 --> 00:04:40,814 line:-1
in our ViewController.


87
00:04:40,814 --> 00:04:43,116 line:-1
Second, we create a reference


88
00:04:43.116 --> 00:04:46.753 line:-1 position:50%
to our RoomCaptureSession
configuration object.


89
00:04:46.753 --> 00:04:49.489 line:-1 position:50%
Third, we start
our scan session,


90
00:04:49.489 --> 00:04:51.191 line:-1 position:50%
passing in our configuration


91
00:04:51.191 --> 00:04:54.027 line:-1 position:50%
to the capture session's
run function.


92
00:04:54,027 --> 00:04:57,464 line:-1
And finally, our application
tells the capture session


93
00:04:57.464 --> 00:05:00.634 line:-1 position:50%
to stop scanning.


94
00:05:00.634 --> 00:05:04.137 line:-1 position:50%
Optionally, your app can adhere
to our RoomCaptureViewDelegate


95
00:05:04,137 --> 00:05:07,674 line:-1
protocol and opt out of
post-processed results


96
00:05:07,674 --> 00:05:09,276 line:-1
and their presentation


97
00:05:09.276 --> 00:05:11.878 line:-1 position:50%
or handle the post-processed
scan results


98
00:05:11,878 --> 00:05:14,981 line:-1
once they have been presented.


99
00:05:14,981 --> 00:05:18,418 line:0
For example, you can export
a USDZ of the results


100
00:05:18,418 --> 00:05:20,754 line:0
by calling
the export function available


101
00:05:20,754 --> 00:05:25,392 position:50%
on the provided
CapturedRoom data struct.


102
00:05:25,392 --> 00:05:27,694 line:-1
And that's how simple it is
to integrate RoomPlan


103
00:05:27.694 --> 00:05:29.329 line:-1 position:50%
into your app.


104
00:05:29,329 --> 00:05:32,599 line:-1
We are so excited to see
what you make with this API.


105
00:05:32,599 --> 00:05:36,503 line:-1
Now my colleague Kai will talk
about RoomCaptureSession


106
00:05:36,503 --> 00:05:39,506 line:-1
and RoomPlan's Data API.


107
00:05:39.506 --> 00:05:40.707 line:-1 position:50%
Kai: Thanks, Praveen.


108
00:05:40.707 --> 00:05:43.743 line:-1 position:50%
In this section, we will
walk you through the Data APIs


109
00:05:43.743 --> 00:05:46.947 line:-1 position:50%
that provide you the access to
the underlying data structures


110
00:05:46,947 --> 00:05:51,117 line:-1
during scanning and can help
you build a custom visualization


111
00:05:51.117 --> 00:05:55.589 line:-1 position:50%
of the scanning experience
from ground up.


112
00:05:55,589 --> 00:05:58,658 line:-1
The basic workflow
consists of three parts:


113
00:05:58,658 --> 00:06:03,296 line:-1
scan, process, and export.


114
00:06:03,296 --> 00:06:06,533 line:-1
For scanning, we will cover
the basics of how to set up


115
00:06:06,533 --> 00:06:08,401 line:-1
and start the capture session,


116
00:06:08.401 --> 00:06:13.340 line:-1 position:50%
as well as display and monitor
the capture process.


117
00:06:13.340 --> 00:06:16.943 line:-1 position:50%
Then we'll look at how
your scanned data is processed


118
00:06:16.943 --> 00:06:21.982 line:-1 position:50%
and the final model is received
for presentation.


119
00:06:21,982 --> 00:06:25,819 line:-1
Finally, we'll discuss
how you can generate and export


120
00:06:25.819 --> 00:06:29.022 line:-1 position:50%
the output USD file
which can also be used


121
00:06:29.022 --> 00:06:32.993 line:-1 position:50%
in your USD workflows.


122
00:06:32,993 --> 00:06:36,930 line:-1
Now, let's look into
the Scan step in detail.


123
00:06:36.930 --> 00:06:39.132 line:-1 position:50%
We will use
the RoomCaptureSession API


124
00:06:39.132 --> 00:06:41.901 line:-1 position:50%
to set up the session
and display the progress


125
00:06:41,901 --> 00:06:43,970 line:-1
as we continue scanning.


126
00:06:43,970 --> 00:06:47,040 line:-1
Let me show you in code.


127
00:06:47.040 --> 00:06:50.744 line:-1 position:50%
Here's a simple RealityKit app
as an example.


128
00:06:50,744 --> 00:06:56,583 line:-1
To start, simply import RoomPlan
into your Swift project.


129
00:06:56.583 --> 00:06:58.451 line:-1 position:50%
In the ViewController
of your app,


130
00:06:58,451 --> 00:07:01,788 line:-1
you can have a custom type
to visualize the results


131
00:07:01.788 --> 00:07:05.859 line:-1 position:50%
and to initiate
a RoomCaptureSession instance.


132
00:07:05,859 --> 00:07:09,129 line:-1
Additionally, RoomCaptureSession
provides a handle


133
00:07:09.129 --> 00:07:12.966 line:-1 position:50%
to the underlying AR session so
that your apps can draw planes


134
00:07:12.966 --> 00:07:17.237 line:-1 position:50%
and object bounding boxes
in the AR view.


135
00:07:17,237 --> 00:07:20,240 line:-1
RoomCaptureSession
adopts the delegate pattern.


136
00:07:20.240 --> 00:07:21.875 line:-1 position:50%
In your ViewController class,


137
00:07:21.875 --> 00:07:24.144 line:-1 position:50%
you can assign
the ViewController itself


138
00:07:24.144 --> 00:07:26.780 line:-1 position:50%
as the captureSession's
delegate.


139
00:07:26.780 --> 00:07:28.548 line:-1 position:50%
This would allow
the ViewController


140
00:07:28,548 --> 00:07:33,553 line:-1
to get real-time updates
from the RoomCaptureSession.


141
00:07:33.553 --> 00:07:36.690 line:-1 position:50%
Theses updates include
3D models and instructions


142
00:07:36.690 --> 00:07:39.659 line:-1 position:50%
in order to guide people
during the capture.


143
00:07:39.659 --> 00:07:42.195 line:-1 position:50%
To get these updates,
your ViewController


144
00:07:42.195 --> 00:07:45.198 line:-1 position:50%
needs to conform to the
RoomCaptureSessionDelegate


145
00:07:45.198 --> 00:07:48.968 line:-1 position:50%
protocol and implement
two methods.


146
00:07:48,968 --> 00:07:50,303 line:-1
The first one is


147
00:07:50,303 --> 00:07:52,906 line:-1
captureSession(_ session:
didUpdate room:) method


148
00:07:52.906 --> 00:07:57.277 line:-1 position:50%
in order to get the real-time
CapturedRoom data structure.


149
00:07:57.277 --> 00:08:01.281 line:-1 position:50%
Your visualizer can use it to
update AR view of the 3D model,


150
00:08:01.281 --> 00:08:03.616 line:-1 position:50%
which provides
real-time feedback to people


151
00:08:03.616 --> 00:08:05.819 line:-1 position:50%
on the progress.


152
00:08:05,819 --> 00:08:08,188 line:-1
We will dive into
the CapturedRoom structure


153
00:08:08,188 --> 00:08:11,191 line:-1
more in a later part
of the talk.


154
00:08:11,191 --> 00:08:13,893 line:-1
This method will be called
when we detect updates


155
00:08:13.893 --> 00:08:16.162 line:-1 position:50%
to the captured room.


156
00:08:16.162 --> 00:08:17.597 line:-1 position:50%
The second method is


157
00:08:17.597 --> 00:08:21.034 line:-1 position:50%
captureSession(_ session:
didProvide instruction:).


158
00:08:21.034 --> 00:08:24.537 line:-1 position:50%
This method provides you
with an instruction structure


159
00:08:24,537 --> 00:08:27,374 line:-1
which contains real-time
feedback.


160
00:08:27.374 --> 00:08:30.143 line:-1 position:50%
Your visualizer can use
the instruction


161
00:08:30,143 --> 00:08:33,146 line:-1
to guide people during the scan.


162
00:08:33,146 --> 00:08:34,748 line:-1
Let's go through
the instructions


163
00:08:34,748 --> 00:08:37,951 line:-1
that this API provides.


164
00:08:37.951 --> 00:08:42.889 line:-1 position:50%
These instructions include
distance to the objects,


165
00:08:42.889 --> 00:08:47.527 line:-1 position:50%
scanning speed,
lighting adjustment to the room,


166
00:08:47.527 --> 00:08:50.697 line:-1 position:50%
as well as focusing on
specific areas of the room


167
00:08:50.697 --> 00:08:53.366 line:-1 position:50%
that have more textures.


168
00:08:53.366 --> 00:08:56.236 line:-1 position:50%
These instructions will be
provided during the scan


169
00:08:56.236 --> 00:09:01.141 line:-1 position:50%
in order to guide people
with real-time feedback.


170
00:09:01.141 --> 00:09:04.611 line:-1 position:50%
Next, we will move on
to the process part.


171
00:09:04.611 --> 00:09:07.580 line:-1 position:50%
In this section, we will use
the RoomBuilder class


172
00:09:07.580 --> 00:09:13.720 line:-1 position:50%
to process the scanned data and
generate the final 3D models.


173
00:09:13,720 --> 00:09:17,390 line:-1
To process the captured data,
the first step is to initiate


174
00:09:17,390 --> 00:09:21,828 line:-1
a RoomBuilder instance
in your ViewController class.


175
00:09:21.828 --> 00:09:24.397 line:-1 position:50%
Next, in order to receive
the sensor data


176
00:09:24.397 --> 00:09:27.634 line:-1 position:50%
after the capture process,
your app needs to implement


177
00:09:27,634 --> 00:09:32,305 line:-1
the captureSession(_ session:
didEndWith data: error:) method.


178
00:09:32,305 --> 00:09:34,908 line:-1
When the RoomCaptureSession
is stopped, by calling


179
00:09:34.908 --> 00:09:38.278 line:-1 position:50%
the stop() function in your app,
or due to an error,


180
00:09:38,278 --> 00:09:42,415 line:-1
this function will be called to
return a CaptureRoomData object


181
00:09:42,415 --> 00:09:45,585 line:-1
and an optional error.


182
00:09:45,585 --> 00:09:48,288 line:-1
Finally, to process
the captured data,


183
00:09:48.288 --> 00:09:52.225 line:-1 position:50%
we call the roomBuilder's
async roomModel(from:) method


184
00:09:52.225 --> 00:09:55.094 line:-1 position:50%
with the await keyword.


185
00:09:55.094 --> 00:09:58.998 line:-1 position:50%
The method runs asynchronously
to process the scanned data


186
00:09:58.998 --> 00:10:01.601 line:-1 position:50%
and build the final 3D model.


187
00:10:01,601 --> 00:10:05,004 line:-1
It utilizes the Swift
async/await function


188
00:10:05.004 --> 00:10:09.175 line:-1 position:50%
that we introduced
in last year's WWDC.


189
00:10:09.175 --> 00:10:12.679 line:-1 position:50%
Within just a few seconds,
the model will be available


190
00:10:12.679 --> 00:10:17.484 line:-1 position:50%
for the final presentation
in your app.


191
00:10:17.484 --> 00:10:19.486 line:-1 position:50%
Now, let's dive into the details


192
00:10:19.486 --> 00:10:21.521 line:-1 position:50%
of the CapturedRoom
data structure


193
00:10:21,521 --> 00:10:26,025 line:-1
and how you can export it
to use in your app.


194
00:10:26,025 --> 00:10:28,695 line:-1
At the top level,
there is CapturedRoom


195
00:10:28.695 --> 00:10:32.599 line:-1 position:50%
which consists of
Surfaces and Objects.


196
00:10:32,599 --> 00:10:36,736 position:50%
Surface contains unique
attributes to represent curves


197
00:10:36,736 --> 00:10:40,607 position:50%
such as radius;
starting and ending angles;


198
00:10:40,607 --> 00:10:43,843 line:0
four different edges
of the surface;


199
00:10:43,843 --> 00:10:49,649 line:0
and architecture categories of
wall, opening, window, door.


200
00:10:49,649 --> 00:10:52,252 position:50%
Object contains
furniture categories


201
00:10:52,252 --> 00:10:56,789 line:0
such as table, bed,
sofa, etc.


202
00:10:56,789 --> 00:11:00,393 line:0
Surface and Object share
some common attributes


203
00:11:00,393 --> 00:11:02,462 position:50%
such as dimensions;


204
00:11:02,462 --> 00:11:05,832 position:50%
confidence, which gives you
three levels of confidence


205
00:11:05,832 --> 00:11:08,268 position:50%
for the scanned surface
or object;


206
00:11:08,268 --> 00:11:13,373 position:50%
the 3D transform matrix;
as well as a unique identifier.


207
00:11:13,373 --> 00:11:17,977 line:0
Let's see how they are
represented in code.


208
00:11:17.977 --> 00:11:21.681 line:-1 position:50%
The CapturedRoom structure is a
fully parametric representation


209
00:11:21,681 --> 00:11:23,950 line:-1
of the elements in the room.


210
00:11:23,950 --> 00:11:27,520 line:-1
It contains five properties
including walls, openings,


211
00:11:27.520 --> 00:11:31.558 line:-1 position:50%
doors, windows,
and objects in the room.


212
00:11:31,558 --> 00:11:33,593 line:-1
For the first four elements,


213
00:11:33,593 --> 00:11:36,563 line:-1
they are represented
as the Surface structure


214
00:11:36.563 --> 00:11:41.000 line:-1 position:50%
which represents 2D planar
architectural structures.


215
00:11:41,000 --> 00:11:43,436 line:-1
On the right, you can see
the various properties


216
00:11:43.436 --> 00:11:47.473 line:-1 position:50%
of Surface we covered earlier.


217
00:11:47.473 --> 00:11:51.444 line:-1 position:50%
The last property is an array
of 3D objects in the room,


218
00:11:51.444 --> 00:11:54.247 line:-1 position:50%
and they are represented
as cuboids.


219
00:11:54.247 --> 00:11:59.919 line:-1 position:50%
On the right, you can see the
various properties of Object.


220
00:11:59,919 --> 00:12:04,190 line:-1
Here is the list of object
types we support in RoomPlan.


221
00:12:04.190 --> 00:12:07.260 line:-1 position:50%
These include a variety
of common furniture types


222
00:12:07.260 --> 00:12:12.899 line:-1 position:50%
such as sofa, table,
chair, bed, and many more.


223
00:12:12,899 --> 00:12:16,336 line:-1
Finally, the export function
allows you to export


224
00:12:16.336 --> 00:12:20.006 line:-1 position:50%
this CapturedRoom
into a USD or USDZ data


225
00:12:20,006 --> 00:12:24,310 line:-1
for your existing workflows.


226
00:12:24.310 --> 00:12:27.647 line:-1 position:50%
Here is an example to show
how you can directly open


227
00:12:27,647 --> 00:12:30,483 line:-1
the USD output in Cinema 4D


228
00:12:30.483 --> 00:12:33.319 line:-1 position:50%
to browse and edit
the hierarchical data structure


229
00:12:33.319 --> 00:12:35.922 line:-1 position:50%
of the room, as well as
the dimensions and location


230
00:12:35,922 --> 00:12:40,326 line:-1
of each room element or object.


231
00:12:40.326 --> 00:12:44.230 line:-1 position:50%
You can also leverage your
existing USD and USDZ workflows


232
00:12:44.230 --> 00:12:47.200 line:-1 position:50%
to add renders
of the captured room


233
00:12:47.200 --> 00:12:52.105 line:-1 position:50%
into a variety of applications
such as real estate, e-commerce,


234
00:12:52.105 --> 00:12:57.143 line:-1 position:50%
utilities, and interior design.


235
00:12:57,143 --> 00:12:59,212 line:-1
So far, we covered
the scanning experience


236
00:12:59.212 --> 00:13:02.115 line:-1 position:50%
and underlying RoomPlan APIs.


237
00:13:02,115 --> 00:13:04,550 line:-1
We'll now go through
some best practices


238
00:13:04.550 --> 00:13:09.022 line:-1 position:50%
to help you get good results
with RoomPlan.


239
00:13:09.022 --> 00:13:10.923 line:-1 position:50%
We will cover
the recommended conditions


240
00:13:10.923 --> 00:13:12.959 line:-1 position:50%
that allow for a good scan,


241
00:13:12,959 --> 00:13:16,829 line:-1
room features to look out for
while selecting a room,


242
00:13:16.829 --> 00:13:19.632 line:-1 position:50%
as well as a few scanning
and thermal considerations


243
00:13:19.632 --> 00:13:22.735 line:-1 position:50%
to keep in mind.


244
00:13:22.735 --> 00:13:26.305 line:-1 position:50%
RoomPlan API supports most
common architectural structures


245
00:13:26.305 --> 00:13:29.142 line:-1 position:50%
and objects
in a typical household.


246
00:13:29.142 --> 00:13:31.711 line:-1 position:50%
It works best
for a single residential room


247
00:13:31,711 --> 00:13:35,248 line:-1
with a maximum room size
of 30 feet by 30 feet


248
00:13:35,248 --> 00:13:38,284 line:-1
or around 9 by 9 meters.


249
00:13:38,284 --> 00:13:40,787 line:-1
Lighting is also important
for the API


250
00:13:40.787 --> 00:13:45.658 line:-1 position:50%
to get a clear video stream and
good AR tracking performance.


251
00:13:45.658 --> 00:13:50.096 line:-1 position:50%
A minimum 50 lux or higher is
recommended for using the API,


252
00:13:50,096 --> 00:13:54,233 line:-1
which is typical for
a family living room at night.


253
00:13:54.233 --> 00:13:57.403 line:-1 position:50%
For the hardware, RoomPlan API
is supported on all


254
00:13:57,403 --> 00:14:02,709 line:-1
LiDAR-enabled iPhone
and iPad Pro models.


255
00:14:02.709 --> 00:14:04.343 line:-1 position:50%
There are
some special conditions


256
00:14:04,343 --> 00:14:07,246 line:-1
that can present a challenge
for the API.


257
00:14:07.246 --> 00:14:11.184 line:-1 position:50%
For example, full-height mirrors
and glass pose a challenge


258
00:14:11.184 --> 00:14:15.188 line:-1 position:50%
for the LiDAR sensor
to produce the expected output.


259
00:14:15,188 --> 00:14:18,658 line:-1
Even high ceilings could exceed
the limit of the scanning range


260
00:14:18.658 --> 00:14:20.493 line:-1 position:50%
of the LiDAR sensor.


261
00:14:20.493 --> 00:14:27.033 line:-1 position:50%
Also, very dark surfaces could
be hard for the device to scan.


262
00:14:27.033 --> 00:14:31.571 line:-1 position:50%
There are some considerations
to get better scanning results.


263
00:14:31.571 --> 00:14:36.609 line:-1 position:50%
First, for applications that
have high accuracy requirements,


264
00:14:36.609 --> 00:14:38.778 line:-1 position:50%
preparing the room
before scanning


265
00:14:38.778 --> 00:14:41.414 line:-1 position:50%
can enhance the quality
of the scan.


266
00:14:41.414 --> 00:14:43.549 line:-1 position:50%
For example,
opening the curtains


267
00:14:43,549 --> 00:14:47,620 line:-1
can let more natural light in
and reduce window occlusions,


268
00:14:47,620 --> 00:14:50,690 line:-1
which works best
for daytime scans.


269
00:14:50,690 --> 00:14:53,159 line:-1
Closing the doors
can reduce the chance


270
00:14:53.159 --> 00:14:57.196 line:-1 position:50%
of scanning unnecessary area
outside of the room.


271
00:14:57.196 --> 00:15:00.700 line:-1 position:50%
Following a good scanning
motion is also very important


272
00:15:00,700 --> 00:15:03,770 line:-1
to achieving good
scanning results with the API.


273
00:15:03,770 --> 00:15:07,440 line:-1
And that is why we provide the
user instruction delegate method


274
00:15:07.440 --> 00:15:12.044 line:-1 position:50%
in order to provide feedback
on textures, distance, speed,


275
00:15:12,044 --> 00:15:16,682 line:-1
and lighting conditions
to people during the scans.


276
00:15:16.682 --> 00:15:18.284 line:-1 position:50%
Another thing to keep in mind


277
00:15:18,284 --> 00:15:21,587 line:-1
is battery and thermals
of the device.


278
00:15:21,587 --> 00:15:24,657 line:-1
We have done many optimizations
on RoomPlan API


279
00:15:24.657 --> 00:15:27.693 line:-1 position:50%
to ensure a good
scanning experience.


280
00:15:27.693 --> 00:15:30.997 line:-1 position:50%
Nevertheless, it's best
to avoid repeated scans


281
00:15:30,997 --> 00:15:34,267 line:-1
or single long scans
over 5 minutes.


282
00:15:34.267 --> 00:15:36.235 line:-1 position:50%
These could
not only cause fatigue


283
00:15:36,235 --> 00:15:39,305 line:-1
but also drain out the battery
and create thermal issues


284
00:15:39,305 --> 00:15:45,278 line:-1
which might in turn impact
the user experience of your app.


285
00:15:45.278 --> 00:15:47.346 line:-1 position:50%
There is a lot
that we covered today.


286
00:15:47,346 --> 00:15:50,349 position:50%
We introduced a brand-new API,
RoomPlan.


287
00:15:50,349 --> 00:15:52,985 position:50%
It provides an intuitive
scanning experience


288
00:15:52,985 --> 00:15:54,887 position:50%
to capture your rooms,


289
00:15:54,887 --> 00:15:58,457 position:50%
powerful machine learning models
to understand the environment,


290
00:15:58,457 --> 00:16:01,861 position:50%
as well as a fully parametric
USD output format


291
00:16:01,861 --> 00:16:05,064 line:0
for easy integration
in your apps.


292
00:16:05,064 --> 00:16:07,767 line:0
For guidance on how to better
design and implement


293
00:16:07,767 --> 00:16:10,002 position:50%
your new RoomPlan experience,


294
00:16:10,002 --> 00:16:13,506 position:50%
please check out
the related talks below.


295
00:16:13,506 --> 00:16:16,342 line:-1
Praveen: It's time for you
to try RoomPlan in your app.


296
00:16:16,342 --> 00:16:19,779 line:-1
We can't wait to see what you
can create with this new API.


297
00:16:19,779 --> 00:16:21,581 line:-1
Kai: Thanks for watching!


298
00:16:21,581 --> 00:16:26,018 line:0 position:90% size:2%
♪

