2
00:00:00.501 --> 00:00:08.509 line:-1 align:center
â™ª â™ª


3
00:00:09.643 --> 00:00:11.178 line:-2 align:center
Hello!
My name is Tom,


4
00:00:11.211 --> 00:00:13.614 line:-1 align:center
and I'm part of the Swift team at Apple.


5
00:00:13.647 --> 00:00:18.752 line:-2 align:center
Today I'd like to share what it takes to
extend an iOS application into the cloud.


6
00:00:18.785 --> 00:00:22.456 line:-2 align:center
Many of our applications start out
focusing on a single device,


7
00:00:22.489 --> 00:00:24.558 line:-1 align:center
usually the iPhone.


8
00:00:24,591 --> 00:00:27,661 line:-2
As usage grows,
we find ourselves wanting to bring it


9
00:00:27.694 --> 00:00:30.430 line:-2 align:center
to additional devices like the Mac,
the watch,


10
00:00:30.464 --> 00:00:33.667 line:-1 align:center
or other Apple platforms and devices.


11
00:00:33.700 --> 00:00:38.572 line:-2 align:center
Xcode helps us organize and build
our application for these platforms.


12
00:00:38,605 --> 00:00:40,941 line:-1
We can share code using packages


13
00:00:40.974 --> 00:00:43.477 line:-2 align:center
while embracing the unique aspects
of each device


14
00:00:43.510 --> 00:00:47.014 line:-1 align:center
in the platform specific application code.


15
00:00:47.047 --> 00:00:49.483 line:-1 align:center
As systems continue to grow and evolve,


16
00:00:49.516 --> 00:00:52.452 line:-2 align:center
applications often need to complement
the client application


17
00:00:52.486 --> 00:00:54.288 line:-1 align:center
with a server component.


18
00:00:54,321 --> 00:00:57,157 line:-2
These server components enable
the client application


19
00:00:57.191 --> 00:00:59.826 line:-2 align:center
to extend their functionality
into the cloud.


20
00:00:59.860 --> 00:01:01.361 line:-1 align:center
For example,


21
00:01:01.395 --> 00:01:04.097 line:-2 align:center
offload tasks that can be done
in the background,


22
00:01:04,131 --> 00:01:06,600 line:-2
offload tasks
that are computational heavy,


23
00:01:06.633 --> 00:01:11.672 line:-2 align:center
or tasks that require access to data
that is not available on the device.


24
00:01:11,705 --> 00:01:14,007 line:-1
Often, server components need to be built


25
00:01:14.041 --> 00:01:18.045 line:-2 align:center
using different tools and methodologies
from their client counterparts,


26
00:01:18.078 --> 00:01:21.748 line:-2 align:center
creating duplication of effort
and integration challenges.


27
00:01:21,782 --> 00:01:24,318 line:-2
Using Swift for
building server components


28
00:01:24,351 --> 00:01:26,320 line:-1
help bridge this technology gap,


29
00:01:26,353 --> 00:01:30,324 line:-2
providing a familiar environment
across the stack.


30
00:01:30.357 --> 00:01:33.193 line:-2 align:center
Let's see what building a server
application in Swift looks like.


31
00:01:34.161 --> 00:01:38.465 line:-2 align:center
Server applications are modeled
as Swift packages.


32
00:01:38,498 --> 00:01:40,901 line:-1
The package defines an executable target


33
00:01:40.934 --> 00:01:43.837 line:-1 align:center
that maps the application entry point.


34
00:01:43,871 --> 00:01:46,974 line:-2
To make the application
into a web application,


35
00:01:47,007 --> 00:01:49,610 line:-2
we can add a dependency
on a web framework


36
00:01:49,643 --> 00:01:54,715 line:-2
that helps us structure our code
and provides basic utilities like routing.


37
00:01:54,748 --> 00:01:57,851 line:-2
In this example,
we use the Vapor web framework,


38
00:01:57.885 --> 00:02:01.588 line:-2 align:center
an open source community project
popular for building web services.


39
00:02:03.290 --> 00:02:05.559 line:-1 align:center
As with other Swift based executables,


40
00:02:05,592 --> 00:02:10,364 line:-2
the program's entry point is best modeled
using the @main annotation.


41
00:02:10.397 --> 00:02:12.165 line:-1 align:center
To integrate the web framework,


42
00:02:12.199 --> 00:02:15.669 line:-2 align:center
we add the relevant bootstrap code
to the main function.


43
00:02:15,702 --> 00:02:21,141 line:-2
The Application type used in this example
is provided by the Vapor web framework.


44
00:02:21,175 --> 00:02:23,410 line:-1
With the basic bootstrapping in place,


45
00:02:23.443 --> 00:02:26.213 line:-2 align:center
we can make our application
do something useful.


46
00:02:26.246 --> 00:02:31.285 line:-2 align:center
For example, let's add code to greet users
making a request to the server.


47
00:02:31.318 --> 00:02:35.088 line:-2 align:center
We use the web framework to define
an HTTP endpoint


48
00:02:35,122 --> 00:02:38,959 line:-2
and point it to a method
that provides the greeting.


49
00:02:38.992 --> 00:02:42.930 line:-2 align:center
Taking a step further,
we add a second HTTP endpoint,


50
00:02:42,963 --> 00:02:46,366 line:-1
this one handling an HTTP post request,


51
00:02:46.400 --> 00:02:50.571 line:-2 align:center
and echoing the content
of the request body back to the caller.


52
00:02:50,604 --> 00:02:52,573 line:-1
Let's see this in action.


53
00:02:52,606 --> 00:02:55,642 line:-2
Here we have our server application
in Xcode.


54
00:02:55.676 --> 00:02:57.244 line:-1 align:center
Since we're just getting started,


55
00:02:57,277 --> 00:03:01,281 line:-2
we can run the server locally
on our own machine to test things out.


56
00:03:01.315 --> 00:03:03.784 line:-2 align:center
To run it locally,
we pick the "MyServer" scheme


57
00:03:03.817 --> 00:03:07.421 line:-2 align:center
that was generated for us by Xcode,
use the â€œMy Mac" as the destination,


58
00:03:07.454 --> 00:03:08.722 line:-1 align:center
and hit "run".


59
00:03:17,231 --> 00:03:18,699 line:-1
Once the application has launched,


60
00:03:18,732 --> 00:03:23,036 line:-2
we can use Xcode console to examine
log messages emitted by the server.


61
00:03:23.070 --> 00:03:25.339 line:-2 align:center
In this case,
we can see that the server started


62
00:03:25.372 --> 00:03:31.712 line:-2 align:center
and listening on the localhost address
(127.0.0.1) port 8080.


63
00:03:31,745 --> 00:03:34,481 line:-2
We can use this information
to test our server.


64
00:03:34.515 --> 00:03:35.883 line:-1 align:center
Let's switch over to the terminal,


65
00:03:35.916 --> 00:03:39.086 line:-2 align:center
and make a request
to the advertised server address.


66
00:03:39.119 --> 00:03:43.857 line:-2 align:center
We use a utility called "curl"
to make the request.


67
00:03:43,891 --> 00:03:46,660 line:-1
Use our first endpoint.


68
00:03:48,562 --> 00:03:51,398 line:-1
And our second one.


69
00:03:51,431 --> 00:03:54,067 line:-1
Pass in some data to echo.


70
00:03:59,239 --> 00:04:01,008 line:-1
Nice!


71
00:04:01,041 --> 00:04:03,443 line:-1
Using the terminal sure was fun,


72
00:04:03.477 --> 00:04:08.182 line:-2 align:center
but what we really want to know is
how to call our server from an iOS app.


73
00:04:08.215 --> 00:04:09.883 line:-1 align:center
Let's dig into that.


74
00:04:09.917 --> 00:04:12.619 line:-2 align:center
Here is an example
of a Swift data structure


75
00:04:12,653 --> 00:04:15,756 line:-2
we can use to abstract the interaction
with the server.


76
00:04:15,789 --> 00:04:20,194 line:-2
We model the server APIs as async methods
on our abstraction,


77
00:04:20.227 --> 00:04:23.530 line:-2 align:center
because networking is
inherently asynchronous.


78
00:04:23,564 --> 00:04:25,399 line:-1
We use URLSession


79
00:04:25.432 --> 00:04:27.701 line:-1 align:center
to make an asynchronous request


80
00:04:27.734 --> 00:04:32.573 line:-2 align:center
then parse the server response
and finally return it to the caller.


81
00:04:32.606 --> 00:04:35.809 line:-2 align:center
In this case,
the server response is a plain string,


82
00:04:35,843 --> 00:04:39,213 line:-2
but in reality,
it is likely to be more sophisticated.


83
00:04:39,246 --> 00:04:43,083 line:-2
For example,
the response may be encoded in JSON,


84
00:04:43.116 --> 00:04:47.254 line:-2 align:center
in which case we can decode it using
Swift's Codable system.


85
00:04:47.287 --> 00:04:50.390 line:-1 align:center
Let's put this all together in Xcode.


86
00:04:50,424 --> 00:04:52,926 line:-2
We are using an Xcode workspace
to build and test


87
00:04:52,960 --> 00:04:55,996 line:-2
the iOS and server applications
side by side.


88
00:04:56,029 --> 00:05:00,801 line:-2
We already have the iOS application
server abstraction ready to go.


89
00:05:00.834 --> 00:05:04.605 line:-2 align:center
Let's change the default SwiftUI
ContentView to fetch the server greeting


90
00:05:04.638 --> 00:05:07.074 line:-1 align:center
using the code we put together.


91
00:05:07,107 --> 00:05:10,410 line:-2
First we create a state variable
called serverGreeting.


92
00:05:13.180 --> 00:05:17.150 line:-2 align:center
Next, we bind the serverGreeting
to the Text display.


93
00:05:21,221 --> 00:05:24,024 line:-2
Finally,
we add a task to call the server API,


94
00:05:24.057 --> 00:05:25.392 line:-1 align:center
and set the state.


95
00:05:27.794 --> 00:05:31.164 line:-2 align:center
With the code ready, we can run
the application in the simulator.


96
00:05:31,198 --> 00:05:34,201 line:-1
We pick the "MyApp" scheme,


97
00:05:34,234 --> 00:05:38,172 line:-1
a simulator,


98
00:05:38,205 --> 00:05:41,175 line:-1
and hit "run".


99
00:05:42,176 --> 00:05:44,411 line:-1
Oh, no! We got an error!


100
00:05:44.444 --> 00:05:48.148 line:-2 align:center
Hmm, this seems to be
some sort of a connection error.


101
00:05:48.182 --> 00:05:49.650 line:-1 align:center
The address seems right,


102
00:05:49,683 --> 00:05:52,786 line:-2
so we must have forgotten
to start the local server.


103
00:05:52,819 --> 00:05:55,189 line:-2
Let's switch back to Xcode,
pick the server scheme,


104
00:05:55.222 --> 00:05:56.723 line:-1 align:center
and run the server.


105
00:06:07.100 --> 00:06:11.805 line:-1 align:center
Now, let's restart our application,


106
00:06:11,839 --> 00:06:13,040 line:-1
cross our fingers...


107
00:06:14.975 --> 00:06:16.710 line:-1 align:center
And whoo-hoo! It worked!


108
00:06:16.743 --> 00:06:18.679 line:-1 align:center
To complete this part of the demo,


109
00:06:18.712 --> 00:06:21.381 line:-1 align:center
let's deploy our application to the cloud.


110
00:06:21.415 --> 00:06:24.885 line:-2 align:center
There are many cloud providers
to choose from, including AWS,


111
00:06:24.918 --> 00:06:28.222 line:-2 align:center
Google Cloud, Azure, Heroku,
and many others.


112
00:06:28,255 --> 00:06:31,058 line:-1
In this example, we will use Heroku.


113
00:06:31.091 --> 00:06:34.294 line:-2 align:center
Heroku has a convenient
git push to deploy system


114
00:06:34,328 --> 00:06:36,864 line:-2
for small projects like this
demo application.


115
00:06:36,897 --> 00:06:39,700 line:-2
Let's switch over to the terminal
to kick off a deployment.


116
00:06:39,733 --> 00:06:42,503 line:-2
After setting up our account,
and configuring our application


117
00:06:42.536 --> 00:06:46.473 line:-2 align:center
with the Heroku service, we can git push
our code to the Heroku remote.


118
00:06:48.542 --> 00:06:56.550 line:-1 align:center
[silence while typing]


119
00:07:01.021 --> 00:07:02.723 line:-1 align:center
And off it goes!


120
00:07:02.756 --> 00:07:07.427 line:-2 align:center
Heroku uses a technology called buildpacks
to compile the application remotely,


121
00:07:07,461 --> 00:07:11,298 line:-2
then deploys the binary artifacts
to an ephemeral host.


122
00:07:11,331 --> 00:07:13,834 line:-2
Heroku swift buildpack was built
by members


123
00:07:13,867 --> 00:07:15,836 line:-1
of the Swift open source community,


124
00:07:15.869 --> 00:07:19.006 line:-2 align:center
and it is available
for all Swift on Server users.


125
00:07:19,039 --> 00:07:21,942 line:-2
With our application deployed,
we can test it using curl,


126
00:07:21,975 --> 00:07:24,144 line:-1
as we have done with our local server.


127
00:07:24,178 --> 00:07:26,046 line:-1
Let's test the first endpoint.


128
00:07:28.248 --> 00:07:30.717 line:-1 align:center
Copy the address here.


129
00:07:37.658 --> 00:07:39.593 line:-1 align:center
And our second one.


130
00:07:42,596 --> 00:07:45,632 line:-1
This time, we'll send a different payload.


131
00:07:51,939 --> 00:07:55,042 line:-2
Sweet,
our application was successfully deployed!


132
00:07:55,075 --> 00:07:58,545 line:-2
Before we continue, let's pause here
and review the main takeaways


133
00:07:58,579 --> 00:08:00,581 line:-1
from this part of the talk.


134
00:08:00.614 --> 00:08:04.218 line:-2 align:center
If you're already using Swift
to build iOS or macOS Applications,


135
00:08:04,251 --> 00:08:08,121 line:-2
you could also be using it for
developing the server side of the system.


136
00:08:08.155 --> 00:08:12.125 line:-2 align:center
Xcode helps us develop and debug
the different components of the system,


137
00:08:12,159 --> 00:08:15,829 line:-2
both the client and the server,
all in one Workspace.


138
00:08:15,863 --> 00:08:18,098 line:-2
And finally,
you have a choice of cloud providers


139
00:08:18,131 --> 00:08:20,834 line:-2
for deploying
Swift based server applications.


140
00:08:20.868 --> 00:08:23.804 line:-2 align:center
Additional information about deploying
to these cloud platforms


141
00:08:23.837 --> 00:08:26.240 line:-2 align:center
can be found
on the Swift Server documentation


142
00:08:26.273 --> 00:08:28.075 line:-1 align:center
at swift.org.


143
00:08:28.108 --> 00:08:30.110 line:-1 align:center
Now that we have seen a basic setup,


144
00:08:30,143 --> 00:08:33,247 line:-2
let's look at a more real exampleâ€“
Food Truck!


145
00:08:33,280 --> 00:08:36,717 line:-2
You've probably seen this application
used in many of our sessions.


146
00:08:36,750 --> 00:08:39,720 line:-2
Let's peek under the hood
and see how data is managed.


147
00:08:39,753 --> 00:08:43,690 line:-2
Hmm, looks like the donut list
is hard coded.


148
00:08:43,724 --> 00:08:47,294 line:-2
This means that users of the application
may see a different menu of donuts


149
00:08:47.327 --> 00:08:49.630 line:-1 align:center
from what is actually available.


150
00:08:49,663 --> 00:08:52,599 line:-2
While this may be useful
for a small Food Truck operation,


151
00:08:52.633 --> 00:08:55.335 line:-2 align:center
one that can make
any kind of donut on the spot,


152
00:08:55,369 --> 00:08:57,871 line:-1
we want to build a donuts empire


153
00:08:57.905 --> 00:09:01.909 line:-2 align:center
where the menu is centralized and
the trucks are all about customer service.


154
00:09:01.942 --> 00:09:05.045 line:-2 align:center
Let's design how our centralized
Food Truck system may look like.


155
00:09:06.213 --> 00:09:10.417 line:-2 align:center
We are starting out with our iOS app,
with its in-memory storage.


156
00:09:10,450 --> 00:09:14,154 line:-2
To centralize the menu, we can extract
the storage from the iOS app


157
00:09:14.188 --> 00:09:16.423 line:-1 align:center
and move it to the server.


158
00:09:16,456 --> 00:09:19,626 line:-2
This will allow all users of the app
to share the same storage,


159
00:09:19.660 --> 00:09:22.396 line:-1 align:center
and thus, the same donuts menu.


160
00:09:22,429 --> 00:09:25,399 line:-2
Similar to the example
in the first part of the talk,


161
00:09:25.432 --> 00:09:28.869 line:-1 align:center
our server will expose an HTTP based API.


162
00:09:28,902 --> 00:09:32,806 line:-2
The iOS app will use an abstraction
for working with these APIs,


163
00:09:32.840 --> 00:09:35.209 line:-2 align:center
then tie them back together
to the presentation tier,


164
00:09:35,242 --> 00:09:37,978 line:-1
in this example, SwiftUI.


165
00:09:38.011 --> 00:09:39.880 line:-1 align:center
Our design is complete.


166
00:09:39.913 --> 00:09:42.482 line:-1 align:center
Time to write some sweet code.


167
00:09:42,516 --> 00:09:45,219 line:-2
You can follow along by downloading
the Food Truck sample app


168
00:09:45,252 --> 00:09:47,888 line:-1
from the developer resource kit.


169
00:09:47,921 --> 00:09:51,058 line:-2
We start building our Server
with an application skeleton,


170
00:09:51.091 --> 00:09:55.229 line:-2 align:center
then define an HTTP endpoint
for the "donuts" web API,


171
00:09:55.262 --> 00:09:59.533 line:-2 align:center
and point it to the "listDonuts" method
on our server abstraction.


172
00:09:59.566 --> 00:10:03.704 line:-2 align:center
You may have noticed that the API returns
a Response of type Donuts


173
00:10:03.737 --> 00:10:08.375 line:-2 align:center
and that Response.Donuts conforms
to a protocol called Content.


174
00:10:08.408 --> 00:10:11.078 line:-2 align:center
The Content protocol
is defined by the web framework


175
00:10:11,111 --> 00:10:15,516 line:-2
and helps us encode the response
as JSON on the wire.


176
00:10:15,549 --> 00:10:18,185 line:-2
You may have also noticed
that the API includes an array


177
00:10:18.218 --> 00:10:21.989 line:-2 align:center
of a mysterious Model.Donut,
which we have yet to define


178
00:10:22,022 --> 00:10:25,058 line:-2
So here it is,
our data model in all of its glory:


179
00:10:25,092 --> 00:10:29,129 line:-1
Donut, Dough, Glaze, and Topping.


180
00:10:29,162 --> 00:10:30,964 line:-1
One interesting point to make here


181
00:10:30,998 --> 00:10:34,968 line:-2
is that we copied the definition
of this model from our Food Truck iOS app,


182
00:10:35,002 --> 00:10:38,972 line:-2
as we need the data models of the server
and the client to roughly align.


183
00:10:39.006 --> 00:10:43.210 line:-2 align:center
Another interesting point is the
conformance to the Encodable protocol.


184
00:10:43,243 --> 00:10:46,547 line:-2
This is required so that our server
can encode the model objects


185
00:10:46,580 --> 00:10:49,049 line:-1
as JSON over the wire.


186
00:10:49.082 --> 00:10:51.485 line:-2 align:center
With the data model
and basic APIs in place,


187
00:10:51,518 --> 00:10:54,855 line:-2
we can expand our logic
to include a storage abstraction.


188
00:10:54,888 --> 00:10:58,892 line:-2
The storage will provide the Application
with the list of available donuts.


189
00:10:58,926 --> 00:11:01,929 line:-2
At this point, we should have
a fully functional server.


190
00:11:01.962 --> 00:11:04.298 line:-2 align:center
But wait!
Our donuts menu is empty!


191
00:11:04.331 --> 00:11:07.467 line:-2 align:center
Where should we get
the our centralized menu from?


192
00:11:07,501 --> 00:11:12,072 line:-2
Storage is always an interesting topic
when designing server side applications.


193
00:11:12.105 --> 00:11:13.807 line:-2 align:center
There are several strategies
to choose from,


194
00:11:13,841 --> 00:11:15,976 line:-1
depending on the use case.


195
00:11:16,009 --> 00:11:19,947 line:-2
If the application data is static
or changes very slowly and manually,


196
00:11:19,980 --> 00:11:22,983 line:-2
files on disk may provide
a good enough solution.


197
00:11:23,016 --> 00:11:25,819 line:-1
For user-centric data or global datasets,


198
00:11:25.853 --> 00:11:29.857 line:-2 align:center
iCloud provides a set of APIs that you can
use directly from the iOS application,


199
00:11:29.890 --> 00:11:32.192 line:-1 align:center
without deploying a dedicated server.


200
00:11:32.226 --> 00:11:34.795 line:-2 align:center
When dealing with dynamic
or transactional data,


201
00:11:34.828 --> 00:11:37.965 line:-1 align:center
databases provide an excellent solution.


202
00:11:37.998 --> 00:11:40.200 line:-2 align:center
There is a variety of database
technologies available


203
00:11:40,234 --> 00:11:42,202 line:-1
for server-side applications.


204
00:11:42.236 --> 00:11:45.072 line:-2 align:center
Each technology is designed
for specific performance,


205
00:11:45.105 --> 00:11:48.041 line:-2 align:center
data consistency,
and data modeling needs.


206
00:11:48.075 --> 00:11:50.611 line:-2 align:center
Over the years,
the Swift open source community


207
00:11:50.644 --> 00:11:53.180 line:-2 align:center
developed database drivers
that help interact natively


208
00:11:53,213 --> 00:11:55,682 line:-1
with most databases technologies.


209
00:11:55.716 --> 00:11:58.585 line:-1 align:center
Partial list includes Postgres, MySQL,


210
00:11:58.619 --> 00:12:03.156 line:-2 align:center
MongoDB, Redis, DynamoDB,
and many others.


211
00:12:03.190 --> 00:12:05.192 line:-1 align:center
For the purposes of simplifying this demo,


212
00:12:05,225 --> 00:12:09,162 line:-2
we will only demonstrate
a static file storage strategy,


213
00:12:09.196 --> 00:12:11.365 line:-2 align:center
but you can learn more
about using databases


214
00:12:11.398 --> 00:12:14.601 line:-2 align:center
on the Swift Server documentation
at swift.org.


215
00:12:14.635 --> 00:12:17.504 line:-2 align:center
Since we are using
a static file storage strategy,


216
00:12:17,538 --> 00:12:21,642 line:-2
we start off by creating a JSON file
that captures the donut menu.


217
00:12:21,675 --> 00:12:23,310 line:-1
After creating this file,


218
00:12:23,343 --> 00:12:25,445 line:-2
we can make it accessible
to the application


219
00:12:25.479 --> 00:12:28.382 line:-1 align:center
using SwiftPM's resources support.


220
00:12:28,415 --> 00:12:33,053 line:-2
With that in place, it is time to make our
storage abstraction more sophisticated.


221
00:12:33.086 --> 00:12:36.056 line:-1 align:center
Namely, we add a "load" method.


222
00:12:36.089 --> 00:12:38.458 line:-1 align:center
This method finds the resource file path


223
00:12:38.492 --> 00:12:41.628 line:-2 align:center
using SwiftPM's
generated resource accessor,


224
00:12:41.662 --> 00:12:46.867 line:-2 align:center
then uses FileManager APIs to load
the content of the file into memory.


225
00:12:46.900 --> 00:12:48.735 line:-1 align:center
Finally, we use JSONDecoder


226
00:12:48.769 --> 00:12:53.574 line:-2 align:center
to decode the JSON content
into the server application data model.


227
00:12:53.607 --> 00:12:57.811 line:-2 align:center
One interesting change is that
Storage is now defined as an actor.


228
00:12:57,845 --> 00:13:02,549 line:-2
We chose to use an actor because Storage
now has a mutable "donuts" variable,


229
00:13:02.583 --> 00:13:07.421 line:-2 align:center
and which the "load" and "listDonuts"
methods might access concurrently.


230
00:13:07.454 --> 00:13:10.624 line:-2 align:center
Actors,
which were first introduced in Swift 5.5,


231
00:13:10.657 --> 00:13:13.660 line:-2 align:center
help us avoid data races
and deal with shared mutable state


232
00:13:13,694 --> 00:13:16,563 line:-1
in a safe but easy way.


233
00:13:16,597 --> 00:13:18,465 line:-1
Prior to the introduction of actors,


234
00:13:18.498 --> 00:13:21.068 line:-2 align:center
we would have needed to remember
and add synchronization blocks


235
00:13:21.101 --> 00:13:25.272 line:-2 align:center
when accessing mutable state
using APIs such as Locks or Queues.


236
00:13:25,305 --> 00:13:28,942 line:-2
With the storage updates done,
we can tie it all together.


237
00:13:28.976 --> 00:13:31.278 line:-2 align:center
We add a "bootstrap" method
to our server abstraction


238
00:13:31.311 --> 00:13:33.213 line:-1 align:center
and load the storage from there.


239
00:13:33.247 --> 00:13:37.084 line:-2 align:center
Then we wire up the bootstrap
to the executables entry point.


240
00:13:37,117 --> 00:13:42,322 line:-2
Note that since storage is now an actor,
we access it in an async context.


241
00:13:42.356 --> 00:13:43.423 line:-1 align:center
Our server is ready.


242
00:13:43,457 --> 00:13:45,959 line:-1
Let's switch over to the client side.


243
00:13:45,993 --> 00:13:48,896 line:-1
We start by adding a Server abstraction


244
00:13:48.929 --> 00:13:52.032 line:-2 align:center
that will help us encapsulate
the server APIs.


245
00:13:52,065 --> 00:13:55,335 line:-1
We use URLSession to make the HTTP request


246
00:13:55.369 --> 00:13:58.005 line:-2 align:center
and a JSONDecoder
to decode the server response


247
00:13:58.038 --> 00:14:02.142 line:-2 align:center
and transform it from JSON into our iOS
application model.


248
00:14:02,176 --> 00:14:05,145 line:-2
At this point,
we can remove the hard coded menu


249
00:14:05,179 --> 00:14:08,415 line:-2
and replace it with an asynchronous fetch
from the server.


250
00:14:08,448 --> 00:14:12,553 line:-2
Finally, we make the call to the server
from the ContentView load task.


251
00:14:12,586 --> 00:14:14,121 line:-1
Time to test!


252
00:14:14.154 --> 00:14:17.090 line:-2 align:center
This time,
let's not forget to start the server.


253
00:14:17,124 --> 00:14:19,326 line:-2
We'll select
the "FoodTruckServer" scheme here.


254
00:14:19.359 --> 00:14:20.661 line:-1 align:center
Hit run.


255
00:14:24,298 --> 00:14:26,233 line:-1
And with the application running,


256
00:14:26,266 --> 00:14:30,237 line:-2
let's jump on the terminal
and see that we can access the APIs.


257
00:14:33.473 --> 00:14:35.309 line:-1 align:center
Copy the address again.


258
00:14:37,110 --> 00:14:39,513 line:-2
This time, we're going to use
a utility called jq


259
00:14:39.546 --> 00:14:43.517 line:-1 align:center
to print the JSON output more nicely.


260
00:14:43,550 --> 00:14:44,818 line:-1
This looks pretty good.


261
00:14:46.286 --> 00:14:48.755 line:-1 align:center
All right, time to test with our App.


262
00:14:49,957 --> 00:14:52,359 line:-1
Switch to Xcode.


263
00:14:52,392 --> 00:14:56,129 line:-1
Pick the Food Truck scheme here.


264
00:14:56.163 --> 00:14:57.898 line:-1 align:center
Simulator.


265
00:14:57.931 --> 00:14:59.466 line:-1 align:center
And run it.


266
00:15:01.969 --> 00:15:03.237 line:-1 align:center
And there we have it,


267
00:15:03.270 --> 00:15:05.372 line:-2 align:center
the three donuts
from our centralized menu.


268
00:15:05.405 --> 00:15:08.442 line:-2 align:center
We can cross reference that
with what we see from the server.


269
00:15:08.475 --> 00:15:09.877 line:-1 align:center
Let's switch back to the terminal.


270
00:15:09.910 --> 00:15:15.315 line:-2 align:center
To make the comparison easy, we will use
jq to query just the name of the donuts.


271
00:15:26.827 --> 00:15:29.763 line:-2 align:center
Deep space, Chocolate 2,
Coffee Caramelâ€“


272
00:15:29.796 --> 00:15:32.332 line:-1 align:center
exactly what we expected.


273
00:15:32,366 --> 00:15:34,234 line:-1
That was amazing!


274
00:15:34.268 --> 00:15:36.069 line:-1 align:center
But we can do even better.


275
00:15:36.103 --> 00:15:38.805 line:-2 align:center
As it stands,
our server and client applications


276
00:15:38.839 --> 00:15:41.642 line:-2 align:center
both have identical copies
of the data model code.


277
00:15:41,675 --> 00:15:44,778 line:-2
We can avoid repetition
and make serialization safer,


278
00:15:44.811 --> 00:15:48.615 line:-2 align:center
by sharing the model
across the iOS and server applications.


279
00:15:48.649 --> 00:15:51.718 line:-2 align:center
Let's review how to set this up
at a high level.


280
00:15:51,752 --> 00:15:55,722 line:-2
First, we create another package
for a library named "Shared"


281
00:15:55.756 --> 00:15:58.058 line:-1 align:center
and add it to the Xcode workspace.


282
00:15:58.091 --> 00:16:01.395 line:-2 align:center
We can then move the data model code to
the Shared package,


283
00:16:01.428 --> 00:16:05.032 line:-2 align:center
add Shared as a dependency
of the server application,


284
00:16:05,065 --> 00:16:07,467 line:-2
and as a dependency of the iOS
application,


285
00:16:07,501 --> 00:16:10,304 line:-2
using the Target Frameworks
and Libraries settings.


286
00:16:10,337 --> 00:16:13,040 line:-2
At which point,
we can refactor our client code


287
00:16:13,073 --> 00:16:15,309 line:-1
to use the shared model


288
00:16:15.342 --> 00:16:18.178 line:-1 align:center
and do the same


289
00:16:18.212 --> 00:16:19.580 line:-1 align:center
to the server code.


290
00:16:22,282 --> 00:16:24,751 line:-1
Things look much nicer now.


291
00:16:24,785 --> 00:16:29,256 line:-2
Before we conclude, here are some ideas of
where we can take the application next.


292
00:16:29.289 --> 00:16:32.192 line:-2 align:center
To take full advantage of the fact
that we have a centralized server,


293
00:16:32,226 --> 00:16:37,931 line:-2
we are likely to want and define APIs for
adding, editing, or deleting donuts from the menu.


294
00:16:37.965 --> 00:16:42.369 line:-2 align:center
This will require that we move our storage
from a static file to a database.


295
00:16:42.402 --> 00:16:46.473 line:-2 align:center
With a database in place, we can also
implement buying and ordering APIs.


296
00:16:46,507 --> 00:16:50,110 line:-2
Such APIs can help us
monetize our donut business.


297
00:16:50.143 --> 00:16:51.645 line:-1 align:center
They also provide a signal,


298
00:16:51,678 --> 00:16:54,314 line:-2
which we can use to implement
dynamic pricing,


299
00:16:54,348 --> 00:16:58,018 line:-2
like sales and discounts
for those donuts that are less popular.


300
00:16:58,051 --> 00:17:00,754 line:-1
The opportunities are endless.


301
00:17:00.787 --> 00:17:03.156 line:-2 align:center
To wrap up,
in this session we have seen


302
00:17:03.190 --> 00:17:05.659 line:-1 align:center
that Swift is a general purpose language,


303
00:17:05.692 --> 00:17:08.362 line:-2 align:center
useful for both client and server
applications,


304
00:17:08.395 --> 00:17:10.931 line:-2 align:center
sharing code between the server
and client applications


305
00:17:10.964 --> 00:17:14.668 line:-2 align:center
can reduce boilerplate
and make our system serialization safer,


306
00:17:14.701 --> 00:17:18.872 line:-2 align:center
URLSession is a key tool for interacting
with the server asynchronously,


307
00:17:18,906 --> 00:17:21,909 line:-2
and finally, Xcode is
a powerful development environment


308
00:17:21.942 --> 00:17:24.311 line:-1 align:center
for the entire system.


309
00:17:24.344 --> 00:17:25.913 line:-1 align:center
Thank you so much for watching,


310
00:17:25,946 --> 00:17:28,248 line:-1
and enjoy the rest of the conference.

