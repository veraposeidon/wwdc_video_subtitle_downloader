2
00:00:00.000 --> 00:00:03.170 line:-1 position:50%
♪ Mellow instrumental
hip-hop music ♪


3
00:00:03,170 --> 00:00:10,043 size:2% align:right line:0
♪


4
00:00:10.043 --> 00:00:12.312 line:-1 position:50%
Hello, my name is Johnathan.


5
00:00:12,312 --> 00:00:15,215 line:-1
macOS developers submit
software to the notary service


6
00:00:15.215 --> 00:00:16.850 line:-1 position:50%
in order to help protect
their customers


7
00:00:16,850 --> 00:00:18,852 line:-1
from malicious software.


8
00:00:18.852 --> 00:00:21.622 line:-1 position:50%
Last year we introduced
a faster and simpler way


9
00:00:21,622 --> 00:00:25,025 line:-1
to submit apps for notarization
with the notarytool CLI


10
00:00:25.025 --> 00:00:27.160 line:-1 position:50%
or command-line interface.


11
00:00:27,160 --> 00:00:30,264 line:-1
This year we are excited to
continue championing performance


12
00:00:30,264 --> 00:00:32,833 line:-1
and flexibility with
some major improvements


13
00:00:32,833 --> 00:00:36,403 line:-1
for your interactions
with the notary service.


14
00:00:36,403 --> 00:00:39,907 line:-1
In this session, we'll be
talking about three main topics.


15
00:00:39.907 --> 00:00:41.909 line:-1 position:50%
First, we'll go through
important deadlines


16
00:00:41,909 --> 00:00:45,078 line:-1
for the migration from
using altool for notarization


17
00:00:45.078 --> 00:00:47.814 line:-1 position:50%
to using notarytool.


18
00:00:47.814 --> 00:00:51.118 line:-1 position:50%
Next, we'll discuss improvements
to the Xcode integration


19
00:00:51.118 --> 00:00:53.520 line:-1 position:50%
with the upcoming Xcode 14,


20
00:00:53.520 --> 00:00:57.457 line:-1 position:50%
bringing the submission speed
of notarytool to Xcode.


21
00:00:57,457 --> 00:00:59,927 line:-1
And finally, we'll talk about
a flexible new way


22
00:00:59.927 --> 00:01:01.995 line:-1 position:50%
to interact with
the notary service,


23
00:01:01.995 --> 00:01:05.933 line:-1 position:50%
a REST API, letting you expand
the places you can upload,


24
00:01:05.933 --> 00:01:09.703 line:-1 position:50%
check the status of,
and review submissions.


25
00:01:11,705 --> 00:01:14,775 line:-1
Last year we introduced
notarytool,


26
00:01:14.775 --> 00:01:18.211 line:-1 position:50%
a replacement for altool
for notarization.


27
00:01:18,211 --> 00:01:20,847 line:-1
Later in this talk,
I'll be discussing Xcode


28
00:01:20.847 --> 00:01:25.218 line:-1 position:50%
moving to our updated backend
with Xcode 14.


29
00:01:25.218 --> 00:01:27.921 line:-1 position:50%
With migration paths in place
for notarization


30
00:01:27,921 --> 00:01:30,457 line:-1
via altool and Xcode 13,


31
00:01:30.457 --> 00:01:32.826 line:-1 position:50%
we're announcing the sunset date
for notarization


32
00:01:32,826 --> 00:01:37,431 line:-1
with these older methods
to be fall of 2023.


33
00:01:37,431 --> 00:01:40,334 line:-1
For help moving
from altool to notarytool,


34
00:01:40,334 --> 00:01:42,703 line:-1
please refer
to last year’s presentation


35
00:01:42,703 --> 00:01:47,140 line:-1
"Faster and simpler notarization
for Mac apps."


36
00:01:47,140 --> 00:01:50,277 position:50%
To highlight some specifics,
the notarytool CLI


37
00:01:50,277 --> 00:01:53,847 position:50%
will continue to work
past the fall 2023 deadline,


38
00:01:53,847 --> 00:01:57,184 position:50%
including the one
bundled in Xcode 13.


39
00:01:57,184 --> 00:01:59,086 line:0
As always, however,
we do encourage you


40
00:01:59,086 --> 00:02:02,990 line:0
to update to receive the latest
improvements and fixes.


41
00:02:02,990 --> 00:02:06,393 line:0
Uploads to the notary service
using the Xcode 13 UI


42
00:02:06,393 --> 00:02:09,062 position:50%
will stop working
after that deadline.


43
00:02:09,062 --> 00:02:11,298 line:0
Stay tuned to hear about
some performance improvements


44
00:02:11,298 --> 00:02:14,368 line:0
in Xcode 14,
but largely you can expect


45
00:02:14,368 --> 00:02:17,337 position:50%
your workflow
to remain unchanged.


46
00:02:17,337 --> 00:02:20,507 line:0
Finally, notarization
with all forms of altool


47
00:02:20,507 --> 00:02:23,443 line:0
will stop working in fall 2023.


48
00:02:23,443 --> 00:02:27,214 line:-1
Again, please refer
to last year's WWDC presentation


49
00:02:27,214 --> 00:02:30,417 line:-1
for details on migrating
to notarytool.


50
00:02:30,417 --> 00:02:34,888 line:-1
Next, we'll touch on changes
to notarization in Xcode 14.


51
00:02:34.888 --> 00:02:37.190 line:-1 position:50%
We've migrated
the notarization support


52
00:02:37.190 --> 00:02:40.160 line:-1 position:50%
built into Xcode to use
the same reliable backend


53
00:02:40.160 --> 00:02:44.464 line:-1 position:50%
as the notarytool CLI
we introduced last year.


54
00:02:44,464 --> 00:02:46,700 line:0
Because of this,
we're happy to bring the same


55
00:02:46,700 --> 00:02:49,970 position:50%
roughly 4x performance increase
we announced last year


56
00:02:49,970 --> 00:02:53,240 line:0
for notarytool to Xcode 14.


57
00:02:53,240 --> 00:02:55,809 line:-1
The best part is that,
besides updating,


58
00:02:55.809 --> 00:02:58.412 line:-1 position:50%
you don't need to change your
project settings or workflows


59
00:02:58.412 --> 00:03:01.481 line:-1 position:50%
to receive this
performance boost.


60
00:03:01.481 --> 00:03:03.683 line:-1 position:50%
For the final topic
of this presentation,


61
00:03:03,683 --> 00:03:05,952 line:-1
we're excited to announce
a new service,


62
00:03:05,952 --> 00:03:08,121 line:-1
a REST API for notary.


63
00:03:08,121 --> 00:03:10,457 line:-1
This new service allows you
to interact more flexibly


64
00:03:10,457 --> 00:03:14,361 line:-1
with the notary service
in even more places.


65
00:03:14.361 --> 00:03:16.630 line:-1 position:50%
To go over some
important concepts,


66
00:03:16,630 --> 00:03:18,465 line:-1
this new API
is intended to allow


67
00:03:18,465 --> 00:03:21,735 line:-1
for a more flexible interface
to the notary service.


68
00:03:21.735 --> 00:03:23.770 line:-1 position:50%
As a JSON-based web service,


69
00:03:23,770 --> 00:03:27,140 line:-1
integration should be
fairly simple in most languages.


70
00:03:27,140 --> 00:03:29,576 line:-1
This API allows you
to upload submissions


71
00:03:29.576 --> 00:03:32.379 line:-1 position:50%
from any place
with an internet connection,


72
00:03:32,379 --> 00:03:34,614 line:-1
including continuous
integration servers --


73
00:03:34,614 --> 00:03:38,452 line:-1
places where you might not
be running macOS today.


74
00:03:38.452 --> 00:03:41.188 line:-1 position:50%
Additionally, other interactions
with the notary service


75
00:03:41.188 --> 00:03:43.557 line:-1 position:50%
are also supported in this API,


76
00:03:43,557 --> 00:03:45,392 line:-1
such as retrieving
your submission history


77
00:03:45,392 --> 00:03:48,295 line:-1
or past submission details.


78
00:03:48,295 --> 00:03:50,197 line:-1
Our goal with introducing
the REST API


79
00:03:50,197 --> 00:03:52,799 line:-1
is to support submitting
software for notarization


80
00:03:52.799 --> 00:03:55.836 line:-1 position:50%
from more platforms and to allow
for easier interactions


81
00:03:55,836 --> 00:03:58,672 line:-1
with notary
in automated systems.


82
00:03:58.672 --> 00:04:00.907 line:-1 position:50%
This complements the current
methods of submission,


83
00:04:00.907 --> 00:04:04.010 line:-1 position:50%
Xcode and notarytool,
where those can't be run today,


84
00:04:04.010 --> 00:04:07.147 line:-1 position:50%
such as a Linux-based
continuous integration.


85
00:04:07.147 --> 00:04:09.749 line:-1 position:50%
For example, imagine you want
your deployment pipeline


86
00:04:09.749 --> 00:04:11.485 line:-1 position:50%
to submit your application
to notary


87
00:04:11.485 --> 00:04:13.453 line:-1 position:50%
prior to distribution.


88
00:04:13,453 --> 00:04:15,689 line:-1
With this new API
and some basic scripts,


89
00:04:15,689 --> 00:04:18,925 line:-1
you can easily
automate the process.


90
00:04:18,925 --> 00:04:20,227 line:-1
Before I dive in,


91
00:04:20,227 --> 00:04:22,896 line:-1
one important topic
is authentication.


92
00:04:22.896 --> 00:04:26.366 line:-1 position:50%
You can authenticate with
the API using JSON Web Tokens,


93
00:04:26,366 --> 00:04:30,604 line:-1
or JWTs, just like other
App Store Connect APIs.


94
00:04:30,604 --> 00:04:32,339 line:-1
For more details
on authentication


95
00:04:32.339 --> 00:04:34.307 line:-1 position:50%
or the code I'm about to show,


96
00:04:34.307 --> 00:04:38.211 line:-1 position:50%
please visit the REST API
documentation linked below.


97
00:04:38,211 --> 00:04:41,248 line:-1
In these snippets,
I'll assume you have a valid JWT


98
00:04:41,248 --> 00:04:44,284 line:-1
passed into the functions
as the token variable.


99
00:04:44.284 --> 00:04:46.953 line:-1 position:50%
Let's walk through an example
of submitting files


100
00:04:46.953 --> 00:04:49.022 line:-1 position:50%
to notary in Python.


101
00:04:49,022 --> 00:04:50,690 line:-1
This same basic flow
is applicable


102
00:04:50.690 --> 00:04:53.360 line:-1 position:50%
in other programming languages.


103
00:04:53.360 --> 00:04:57.130 line:-1 position:50%
There are two major steps
for uploading files to notary.


104
00:04:57,130 --> 00:04:58,932 line:-1
The first step
is to inform notary


105
00:04:58.932 --> 00:05:01.301 line:-1 position:50%
that you wish to upload a file.


106
00:05:01,301 --> 00:05:04,671 line:-1
Included in this is some
basic information about the file


107
00:05:04.671 --> 00:05:07.674 line:-1 position:50%
like name and SHA-256.


108
00:05:07,674 --> 00:05:09,776 line:-1
The response contains
information necessary


109
00:05:09,776 --> 00:05:13,079 line:-1
to upload the file and an ID
to track your submission


110
00:05:13,079 --> 00:05:15,415 line:-1
through our pipeline.


111
00:05:15,415 --> 00:05:18,251 position:50%
The second step actually uploads
the file for notarization


112
00:05:18,251 --> 00:05:21,054 line:0
via Amazon S3.


113
00:05:21,054 --> 00:05:23,657 line:0
You'll need to grab
your favorite S3 SDK.


114
00:05:23,657 --> 00:05:24,724 line:0
For this example,


115
00:05:24,724 --> 00:05:27,727 line:0
I'm going to be using
the boto3 library.


116
00:05:27,727 --> 00:05:29,496 position:50%
Here we use
the temporary credentials


117
00:05:29,496 --> 00:05:31,498 line:0
returned in the previous call


118
00:05:31,498 --> 00:05:34,167 line:0
to authenticate
and create a client.


119
00:05:34,167 --> 00:05:37,037 position:50%
We then use the client to upload
the file to the bucket


120
00:05:37,037 --> 00:05:40,807 position:50%
and object specified
in the first step's response.


121
00:05:40.807 --> 00:05:43.043 line:-1 position:50%
Once uploaded,
the submission will proceed


122
00:05:43,043 --> 00:05:45,412 line:-1
though the
notarization pipeline.


123
00:05:45.412 --> 00:05:47.981 line:-1 position:50%
This process should complete
in under 15 minutes


124
00:05:47.981 --> 00:05:50.417 line:-1 position:50%
for most submissions.


125
00:05:50,417 --> 00:05:52,752 line:-1
After upload, you should confirm
the notary service


126
00:05:52,752 --> 00:05:54,621 line:-1
has successfully processed
your submission


127
00:05:54,621 --> 00:05:56,756 line:-1
prior to distribution.


128
00:05:56.756 --> 00:05:59.993 line:-1 position:50%
There are, broadly speaking,
two approaches to this.


129
00:05:59.993 --> 00:06:01.661 line:-1 position:50%
The first, and the simplest,


130
00:06:01,661 --> 00:06:04,598 line:-1
is checking the result
through the same API.


131
00:06:04,598 --> 00:06:06,600 line:-1
The other option is via
the webhook support


132
00:06:06.600 --> 00:06:08.969 line:-1 position:50%
introduced with notarytool.


133
00:06:08,969 --> 00:06:12,505 line:-1
First, let's look at
the API approach.


134
00:06:12,505 --> 00:06:14,674 line:-1
Checking the status
of a submission to notary


135
00:06:14,674 --> 00:06:17,010 line:-1
is pretty straightforward,


136
00:06:17,010 --> 00:06:19,079 line:-1
You can make a request
with the submission ID


137
00:06:19.079 --> 00:06:22.315 line:-1 position:50%
received during
the upload process


138
00:06:22,315 --> 00:06:24,417 line:-1
Part of the response
is the current status


139
00:06:24.417 --> 00:06:27.153 line:-1 position:50%
of the submission,
which will remain "In Progress"


140
00:06:27.153 --> 00:06:29.956 line:-1 position:50%
until notary is finished
processing it.


141
00:06:29,956 --> 00:06:32,225 line:-1
The status will then transition
to the final state


142
00:06:32,225 --> 00:06:36,896 line:-1
of your submission,
such as Accepted or Invalid.


143
00:06:36,896 --> 00:06:38,565 line:-1
Once the submission
is complete,


144
00:06:38,565 --> 00:06:39,933 line:-1
you can then use the API


145
00:06:39,933 --> 00:06:43,236 line:-1
to retrieve the notarization log
for this upload.


146
00:06:43,236 --> 00:06:46,072 line:-1
Please refer to the
Notary REST API documentation


147
00:06:46,072 --> 00:06:49,409 line:-1
for more details
on these endpoints.


148
00:06:49.409 --> 00:06:51.511 line:-1 position:50%
Next, we'll talk about
the second approach


149
00:06:51.511 --> 00:06:53.913 line:-1 position:50%
to getting your status:
a webhook.


150
00:06:53.913 --> 00:06:57.350 line:-1 position:50%
In the webhook workflow,
the process is largely the same,


151
00:06:57,350 --> 00:06:59,886 line:-1
but this time you'll provide
a webhook URL


152
00:06:59.886 --> 00:07:02.422 line:-1 position:50%
in the initial request
to upload.


153
00:07:02,422 --> 00:07:04,991 line:-1
Details on the format can be
found in the documentation


154
00:07:04.991 --> 00:07:07.961 line:-1 position:50%
for the notary REST API.


155
00:07:07,961 --> 00:07:10,363 line:-1
As before, this will trigger
the notary service


156
00:07:10.363 --> 00:07:12.966 line:-1 position:50%
to analyze your submission.


157
00:07:12,966 --> 00:07:16,403 line:-1
As the automated analysis
concludes, tickets are created,


158
00:07:16.403 --> 00:07:19.039 line:-1 position:50%
and the final status is saved.


159
00:07:19,039 --> 00:07:21,641 line:-1
Once complete,
the notary service will call out


160
00:07:21,641 --> 00:07:23,843 line:-1
to the webhook URL provided.


161
00:07:23,843 --> 00:07:26,546 line:-1
The contents of this call
include the submission ID,


162
00:07:26,546 --> 00:07:32,085 line:-1
the team ID, and a signature
to verify it came from us.


163
00:07:32.085 --> 00:07:35.955 line:-1 position:50%
On receiving that notification,
you can choose what to do next.


164
00:07:35.955 --> 00:07:39.025 line:-1 position:50%
For example, you might notify
the original submitter


165
00:07:39.025 --> 00:07:42.495 line:-1 position:50%
or begin an automated
distribution pipeline.


166
00:07:42,495 --> 00:07:44,197 line:-1
Compared to waiting
with notarytool,


167
00:07:44.197 --> 00:07:47.200 line:-1 position:50%
this allows you to decouple
the system that uploads the file


168
00:07:47.200 --> 00:07:51.905 line:-1 position:50%
from the system that automates
actions after notarization.


169
00:07:51,905 --> 00:07:54,774 line:-1
We're excited to see this new
REST API open the doors


170
00:07:54,774 --> 00:07:57,944 line:-1
to more integrations with
continuous integration systems


171
00:07:57.944 --> 00:08:01.281 line:-1 position:50%
and other tools
to build software for macOS.


172
00:08:01,281 --> 00:08:03,750 line:-1
To wrap up,
as one more reminder,


173
00:08:03.750 --> 00:08:07.487 line:-1 position:50%
the deadline to migrate
to using Xcode 14, notarytool,


174
00:08:07.487 --> 00:08:11.458 line:-1 position:50%
or the REST API
directly is fall of 2023.


175
00:08:11.458 --> 00:08:14.194 line:-1 position:50%
Finally, if you haven't yet
been able to use notarytool


176
00:08:14,194 --> 00:08:15,929 line:-1
in your deployment pipelines,


177
00:08:15.929 --> 00:08:18.031 line:-1 position:50%
this is your chance
to jumpstart your automation


178
00:08:18,031 --> 00:08:20,734 line:-1
by trying the notary
REST API today.


179
00:08:20.734 --> 00:08:23.336 line:-1 position:50%
You can find a link
to the documentation below.


180
00:08:23,336 --> 00:08:26,973 line:-1
Thank you, and I hope you enjoy
the rest of WWDC22


181
00:08:26,973 --> 00:08:30,844 align:right line:0 size:2%
♪

