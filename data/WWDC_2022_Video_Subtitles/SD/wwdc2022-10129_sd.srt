2
00:00:00,000 --> 00:00:03,003 line:-1
♪ instrumental hip hop music ♪


3
00:00:03,003 --> 00:00:09,509 align:right size:2% position:90%
♪


4
00:00:09.509 --> 00:00:12.145 line:-1 position:50%
Hello, and welcome to WWDC.


5
00:00:12.145 --> 00:00:14.047 line:-1 position:50%
My name is Kacey.


6
00:00:14.047 --> 00:00:16.617 line:-1 position:50%
You may have come across
Universal Scene Description,


7
00:00:16.617 --> 00:00:18.218 line:-1 position:50%
or USD, already.


8
00:00:18.218 --> 00:00:21.555 line:-1 position:50%
You may have interacted with
USD files in augmented reality.


9
00:00:21,555 --> 00:00:25,058 line:-1
Or you may have converted assets
from other formats to USD.


10
00:00:25.058 --> 00:00:28.195 line:-1 position:50%
But what's really inside
of a USD file?


11
00:00:28,195 --> 00:00:31,365 line:-1
USD is an important technology
with unique features,


12
00:00:31.365 --> 00:00:32.933 line:-1 position:50%
so let's take a look
under the hood


13
00:00:32,933 --> 00:00:36,370 line:-1
and explore the fundamentals
of USD together.


14
00:00:36.370 --> 00:00:39.139 line:-1 position:50%
We'll learn what USD is,


15
00:00:39,139 --> 00:00:42,843 line:-1
introduce some
basic USD concepts,


16
00:00:42.843 --> 00:00:46.113 line:-1 position:50%
learn how to compose scenes
with USD,


17
00:00:46.113 --> 00:00:50.684 line:-1 position:50%
and get an understanding
of the USD file formats.


18
00:00:50,684 --> 00:00:53,921 line:-1
First, what is USD?


19
00:00:53.921 --> 00:00:56.924 line:-1 position:50%
USD was developed
by Pixar Animation Studios


20
00:00:56.924 --> 00:00:59.693 line:-1 position:50%
to enable them to create
the complex movies we love,


21
00:00:59.693 --> 00:01:02.696 line:-1 position:50%
and it is widely used
across the film, entertainment,


22
00:01:02.696 --> 00:01:04.665 line:-1 position:50%
and other industries.


23
00:01:04,665 --> 00:01:07,200 line:-1
It's extensible by design
and is rapidly emerging


24
00:01:07,200 --> 00:01:10,370 line:-1
as a collaborative,
key workflow technology.


25
00:01:10,370 --> 00:01:12,506 line:-1
It's an open source project
built on decades


26
00:01:12.506 --> 00:01:14.908 line:-1 position:50%
of production experience
in the film industry


27
00:01:14,908 --> 00:01:17,210 line:-1
and is increasingly
being adopted for games,


28
00:01:17,210 --> 00:01:22,416 line:-1
simulation, AR, manufacturing,
and e-commerce.


29
00:01:22,416 --> 00:01:24,818 line:-1
There are three
core aspects to USD:


30
00:01:24.818 --> 00:01:27.921 line:-1 position:50%
the scene description
specification, the API,


31
00:01:27.921 --> 00:01:30.824 line:-1 position:50%
and the rendering system.


32
00:01:30,824 --> 00:01:35,529 line:-1
Your application interacts
with USD using the API.


33
00:01:35.529 --> 00:01:36.964 line:-1 position:50%
The rendering system
provides support


34
00:01:36.964 --> 00:01:41.468 line:-1 position:50%
for visualizing the scenes
with different renderers.


35
00:01:41.468 --> 00:01:44.604 line:-1 position:50%
Apple has multiple different
rendering systems for USD.


36
00:01:44,604 --> 00:01:47,341 line:1
Check out the "Explore USD tools
and rendering" session


37
00:01:47,341 --> 00:01:50,677 position:50%
to learn more about it.


38
00:01:50.677 --> 00:01:51.878 line:-1 position:50%
In this session,


39
00:01:51.878 --> 00:01:54.381 line:-1 position:50%
we focus on the scene
description specification


40
00:01:54,381 --> 00:01:56,616 line:-1
which states how
scene data is described,


41
00:01:56,616 --> 00:01:58,018 line:-1
how it is organized,


42
00:01:58,018 --> 00:02:02,155 line:-1
and how it is represented
in a file format.


43
00:02:02,155 --> 00:02:04,958 line:-1
Fundamentally,
these USD files contain data


44
00:02:04.958 --> 00:02:07.627 line:-1 position:50%
describing how a scene
should look.


45
00:02:07.627 --> 00:02:09.763 line:-1 position:50%
Rendering applications
interpret the data,


46
00:02:09,763 --> 00:02:12,632 line:-1
and produce an image
on the screen.


47
00:02:12.632 --> 00:02:15.936 line:-1 position:50%
For example,
at last year's WWDC session,


48
00:02:15,936 --> 00:02:19,940 line:-1
we created this USD scene
and rendered it in Octane.


49
00:02:19.940 --> 00:02:22.242 line:-1 position:50%
Now let's dive into
the fundamental concepts


50
00:02:22.242 --> 00:02:24.811 line:-1 position:50%
and learn about the data
behind the render.


51
00:02:24.811 --> 00:02:26.246 line:-1 position:50%
To keep things simple,


52
00:02:26.246 --> 00:02:29.549 line:-1 position:50%
we will use
a text USD representation


53
00:02:29.549 --> 00:02:32.386 line:-1 position:50%
USD has a lot of cool features
we'd love to talk about,


54
00:02:32,386 --> 00:02:33,787 line:-1
but for the sake of time,


55
00:02:33.787 --> 00:02:35.255 line:-1 position:50%
we will focus on
the essentials features


56
00:02:35.255 --> 00:02:36.723 line:-1 position:50%
that you may
most commonly encounter


57
00:02:36.723 --> 00:02:41.361 line:-1 position:50%
while working with USD
such as stage, prim, and layers,


58
00:02:41.361 --> 00:02:43.296 line:-1 position:50%
just to name a few.


59
00:02:43,296 --> 00:02:45,832 line:-1
Let's start with the stage.


60
00:02:45.832 --> 00:02:48.969 line:-1 position:50%
Imagine we are attending
a play in a theater.


61
00:02:48.969 --> 00:02:51.371 line:-1 position:50%
As audience members,
we observe the stage


62
00:02:51.371 --> 00:02:54.341 line:-1 position:50%
to watch the actors perform,
notice the environments,


63
00:02:54.341 --> 00:02:56.877 line:-1 position:50%
lighting, and the props.


64
00:02:56,877 --> 00:03:01,281 line:-1
This is a good analogy
to how a stage works in USD.


65
00:03:01.281 --> 00:03:04.051 line:-1 position:50%
A stage is a scene graph,
or a data structure,


66
00:03:04.051 --> 00:03:06.086 line:-1 position:50%
that organizes
graphical information


67
00:03:06.086 --> 00:03:07.487 line:-1 position:50%
in a hierarchical way,


68
00:03:07,487 --> 00:03:10,624 line:-1
where all the scene elements
come together.


69
00:03:10,624 --> 00:03:13,293 line:-1
A stage is a composition
of one or more layers,


70
00:03:13.293 --> 00:03:18.298 line:-1 position:50%
which are typically files
containing scene information.


71
00:03:18.298 --> 00:03:20.767 line:-1 position:50%
In general,
a stage is made up of prims,


72
00:03:20,767 --> 00:03:24,104 line:-1
which are the primary
container objects of a scene.


73
00:03:24,104 --> 00:03:25,605 line:-1
Prims can contain other prims


74
00:03:25,605 --> 00:03:28,108 line:-1
to create a hierarchy
of scene elements.


75
00:03:28.108 --> 00:03:30.844 line:-1 position:50%
Let's check out an example.


76
00:03:30.844 --> 00:03:33.780 line:-1 position:50%
On the left,
we have a sample USD layer


77
00:03:33,780 --> 00:03:36,650 line:-1
and on the right, we see
a preview visual representation


78
00:03:36.650 --> 00:03:38.351 line:-1 position:50%
of the stage.


79
00:03:38.351 --> 00:03:43.623 line:-1 position:50%
We see two prims:
a sphere and a cube.


80
00:03:43,623 --> 00:03:45,525 line:-1
Each prim has a certain type


81
00:03:45,525 --> 00:03:48,662 line:-1
that defines what it represents
on the stage.


82
00:03:48.662 --> 00:03:50.230 line:-1 position:50%
There are many
different types of prims


83
00:03:50,230 --> 00:03:55,068 line:-1
that make up a stage such as
meshes, lights, and materials.


84
00:03:55,068 --> 00:03:56,303 line:-1
For this example,


85
00:03:56,303 --> 00:03:59,406 line:-1
the sphere prim
has a type called "Sphere,"


86
00:03:59.406 --> 00:04:03.710 line:-1 position:50%
and the cube prim
has a type called "Cube."


87
00:04:03.710 --> 00:04:06.279 line:-1 position:50%
But this brings up
a good question.


88
00:04:06,279 --> 00:04:10,016 line:-1
How does USD know
what these prim types mean?


89
00:04:10.016 --> 00:04:12.419 line:-1 position:50%
USD knows this
through the use of schemas.


90
00:04:12.419 --> 00:04:14.020 line:-1 position:50%
Schemas are structured data


91
00:04:14.020 --> 00:04:16.957 line:-1 position:50%
that define the role
of a prim on the stage.


92
00:04:16.957 --> 00:04:19.292 line:-1 position:50%
They provide meaning
to common scene concepts


93
00:04:19,292 --> 00:04:22,529 line:-1
like geometry,
materials, and more.


94
00:04:22.529 --> 00:04:23.797 line:-1 position:50%
For this example,


95
00:04:23,797 --> 00:04:26,466 line:-1
here is a schema definition
of a sphere.


96
00:04:26.466 --> 00:04:28.435 line:-1 position:50%
It defines that every sphere
has a radius


97
00:04:28,435 --> 00:04:31,104 line:-1
and a bounding box extent.


98
00:04:31,104 --> 00:04:34,174 line:-1
With the existing schemas,
USD gives you a rich foundation


99
00:04:34,174 --> 00:04:38,011 line:-1
of built-in types
to describe your scenes.


100
00:04:38,011 --> 00:04:41,848 line:-1
Custom schemas enable you
to extend USD even further.


101
00:04:41,848 --> 00:04:44,851 line:-1
You can provide your own schemas
that represent your custom data


102
00:04:44.851 --> 00:04:47.420 line:-1 position:50%
for your own use cases
and workflows.


103
00:04:47.420 --> 00:04:49.890 line:-1 position:50%
Schemas don't need to have
a visual representation.


104
00:04:49,890 --> 00:04:52,125 line:-1
They can just be data
you want to have in the stage


105
00:04:52.125 --> 00:04:54.427 line:-1 position:50%
in a structured, meaningful way.


106
00:04:54.427 --> 00:04:55.529 line:-1 position:50%
For example,


107
00:04:55.529 --> 00:04:59.432 line:-1 position:50%
here, I've created a new schema
called "WWDC."


108
00:04:59,432 --> 00:05:01,268 line:-1
It defines that a prim
that has a title


109
00:05:01,268 --> 00:05:03,370 line:-1
and a year associated with it,


110
00:05:03,370 --> 00:05:06,373 line:-1
and here is a prim
called "WWDC22"


111
00:05:06,373 --> 00:05:07,908 line:-1
that uses the schema.


112
00:05:07.908 --> 00:05:09.876 line:-1 position:50%
It has set the year to 2022


113
00:05:09.876 --> 00:05:12.612 line:-1 position:50%
and the title is set
to "Call to code."


114
00:05:12,612 --> 00:05:14,981 line:-1
The year and the title
are called the "attributes"


115
00:05:14,981 --> 00:05:16,183 line:-1
of the prim.


116
00:05:16,183 --> 00:05:18,518 line:-1
Prims can have many
different attributes.


117
00:05:18.518 --> 00:05:21.621 line:-1 position:50%
Each attribute has a type
and a value.


118
00:05:21,621 --> 00:05:24,024 line:-1
Attributes can also have
default values authored


119
00:05:24,024 --> 00:05:25,825 line:-1
so they don't have to be
explicitly defined


120
00:05:25.825 --> 00:05:28.395 line:-1 position:50%
in the prim
that uses the schema.


121
00:05:28,395 --> 00:05:30,163 line:-1
Going back
to our Sphere schema,


122
00:05:30,163 --> 00:05:31,898 line:-1
you can see how we've defined
default values


123
00:05:31,898 --> 00:05:34,901 line:-1
for the radius
and extent attributes.


124
00:05:34.901 --> 00:05:37.637 line:-1 position:50%
In this layer,
we have a single Sphere prim.


125
00:05:37.637 --> 00:05:39.839 line:-1 position:50%
Since the Radius attribute
is not set,


126
00:05:39,839 --> 00:05:42,042 line:-1
it derives its value
from the Sphere schema:


127
00:05:42.042 --> 00:05:43.910 line:-1 position:50%
a default radius of one.


128
00:05:43,910 --> 00:05:47,280 line:-1
We can be explicit though,
and set the radius attribute.


129
00:05:47,280 --> 00:05:48,748 line:-1
The sphere still looks the same


130
00:05:48.748 --> 00:05:50.951 line:-1 position:50%
because this value matches
the default value of one


131
00:05:50,951 --> 00:05:52,686 line:-1
that is set in the schema.


132
00:05:52,686 --> 00:05:57,123 line:-1
Now let's add a second sphere,
and set the radius to 0.5.


133
00:05:57.123 --> 00:05:58.825 line:-1 position:50%
We can see that
it's indeed half the size


134
00:05:58.825 --> 00:06:00.694 line:-1 position:50%
of the other sphere.


135
00:06:00.694 --> 00:06:04.864 line:-1 position:50%
Attributes, prims, and stages
can also contain metadata,


136
00:06:04,864 --> 00:06:07,234 line:-1
which are key-value pairings
of information


137
00:06:07,234 --> 00:06:10,604 line:-1
that can provide auxiliary data
for parts of a scene.


138
00:06:10.604 --> 00:06:13.807 line:-1 position:50%
Metadata is set
at the level where it applies.


139
00:06:13.807 --> 00:06:15.809 line:-1 position:50%
Metadata that affects
the whole stage


140
00:06:15.809 --> 00:06:19.246 line:-1 position:50%
and all prims in it
is set at the stage level.


141
00:06:19,246 --> 00:06:21,214 line:-1
Metadata that is specific
to a single prim,


142
00:06:21.214 --> 00:06:23.583 line:-1 position:50%
is set on the prim.


143
00:06:23,583 --> 00:06:26,019 line:-1
Attributes can also
have metadata.


144
00:06:26.019 --> 00:06:30.223 line:-1 position:50%
For example, here is some
typical stage metadata.


145
00:06:30.223 --> 00:06:33.760 line:-1 position:50%
metersPerUnit defines the scale
units for the scene.


146
00:06:33,760 --> 00:06:36,830 line:-1
upAxis defines which
of the X, Y, or Z axes


147
00:06:36,830 --> 00:06:41,167 line:-1
is considered the up direction
for the camera in the scene.


148
00:06:41,167 --> 00:06:43,169 line:-1
doc strings store
useful documentation


149
00:06:43,169 --> 00:06:46,806 line:-1
for workflow tracking purposes.


150
00:06:46.806 --> 00:06:48.742 line:-1 position:50%
Now that we have defined
these basics,


151
00:06:48,742 --> 00:06:51,544 line:-1
we can already start
making use of USD.


152
00:06:51.544 --> 00:06:53.346 line:-1 position:50%
Let's see how
the pancakes scene can be done


153
00:06:53.346 --> 00:06:55.849 line:-1 position:50%
using just these concepts.


154
00:06:55.849 --> 00:06:56.916 line:-1 position:50%
In our layer,


155
00:06:56,916 --> 00:07:00,654 line:-1
we create a transform prim
called "Pancakes."


156
00:07:00.654 --> 00:07:03.690 line:-1 position:50%
We then add a transform prim
called "Blueberry_01"


157
00:07:03,690 --> 00:07:06,893 line:-1
that is a child
of the Pancakes prim.


158
00:07:06.893 --> 00:07:11.631 line:-1 position:50%
Within the Blueberry_01 prim,
we include the Mesh prim.


159
00:07:11,631 --> 00:07:14,000 line:-1
The Mesh prim holds
the geometry for the blueberry


160
00:07:14.000 --> 00:07:17.037 line:-1 position:50%
and binds to the materials.


161
00:07:17.037 --> 00:07:18.538 line:-1 position:50%
Let's complete
the rest of the asset


162
00:07:18.538 --> 00:07:21.274 line:-1 position:50%
by adding the other prims.


163
00:07:21,274 --> 00:07:23,243 line:-1
Here is our completed
pancake scene,


164
00:07:23.243 --> 00:07:25.245 line:-1 position:50%
using just these basic concepts.


165
00:07:28.848 --> 00:07:30.684 line:-1 position:50%
These fundamentals
can get you far,


166
00:07:30,684 --> 00:07:32,385 line:-1
but in production-centric
projects,


167
00:07:32.385 --> 00:07:34.387 line:-1 position:50%
we need to collaborate
with many different team members


168
00:07:34.387 --> 00:07:36.289 line:-1 position:50%
and organizations.


169
00:07:36,289 --> 00:07:38,425 line:-1
USD has a lot of features
to address this need


170
00:07:38,425 --> 00:07:41,661 line:-1
in what is called "composition."


171
00:07:41,661 --> 00:07:43,697 line:-1
Composition enables
the creation of a stage


172
00:07:43.697 --> 00:07:46.733 line:-1 position:50%
from separate units
of scene description.


173
00:07:46,733 --> 00:07:48,835 line:-1
This allows for the efficient
reuse of 3D elements


174
00:07:48.835 --> 00:07:51.137 line:-1 position:50%
in a scene
that enables collaboration


175
00:07:51,137 --> 00:07:53,573 line:-1
and fast iteration.


176
00:07:53,573 --> 00:07:56,509 line:-1
We will discuss the most common
types of composition:


177
00:07:56.509 --> 00:08:01.181 line:-1 position:50%
layering, references, payloads,
and variantSets.


178
00:08:01,181 --> 00:08:03,216 line:-1
But let's do it in a fun way.


179
00:08:03.216 --> 00:08:05.585 line:-1 position:50%
Fancy a game of chess?


180
00:08:05,585 --> 00:08:07,787 line:-1
Let's build out
a chess set scene.


181
00:08:07,787 --> 00:08:09,089 line:-1
In the scene,


182
00:08:09,089 --> 00:08:12,158 line:-1
we will use a catalog of assets
in a catalog layer,


183
00:08:12,158 --> 00:08:14,694 line:-1
which will refer
to our chess pieces.


184
00:08:14,694 --> 00:08:16,863 line:-1
We will then arrange these
pieces on the chessboard


185
00:08:16.863 --> 00:08:19.399 line:-1 position:50%
in a layout layer
to get our final result,


186
00:08:19.399 --> 00:08:22.535 line:-1 position:50%
which is viewable
with the ChessSet layer.


187
00:08:22.535 --> 00:08:25.572 line:-1 position:50%
We'll first need to get
our chess pieces


188
00:08:25.572 --> 00:08:28.441 line:-1 position:50%
In chess,
there are six main pieces:


189
00:08:28,441 --> 00:08:35,014 line:-1
the pawn, rook, bishop,
knight, queen, and king.


190
00:08:35.014 --> 00:08:37.584 line:-1 position:50%
We will use these assets,
created with Object Capture,


191
00:08:37.584 --> 00:08:40.487 line:-1 position:50%
to build a complete chess set.


192
00:08:40,487 --> 00:08:42,655 line:-1
Let's start by bringing in
our pieces to our stage


193
00:08:42,655 --> 00:08:45,892 line:-1
using a USD concept,
referencing.


194
00:08:45,892 --> 00:08:49,462 line:-1
Referencing is when a prim in
a stage refers to another prim


195
00:08:49.462 --> 00:08:51.931 line:-1 position:50%
in either the same stage
or a different layer


196
00:08:51,931 --> 00:08:54,534 line:-1
without copying the data.


197
00:08:54,534 --> 00:08:56,903 line:-1
This helps minimize
duplication of data


198
00:08:56.903 --> 00:08:58.872 line:-1 position:50%
and allows for the data
to be updated separately


199
00:08:58.872 --> 00:09:01.674 line:-1 position:50%
by different people
and applications.


200
00:09:01,674 --> 00:09:06,379 line:-1
Let's reference our pawn asset
into our scene.


201
00:09:06,379 --> 00:09:10,150 line:1
In our catalog layer,
we define a prim called "Pawn".


202
00:09:10,150 --> 00:09:15,555 line:1
So far it doesn't have any data
and so our stage is still empty.


203
00:09:15,555 --> 00:09:19,459 line:1
Next, we add a reference
to the Pawn.usda layer.


204
00:09:19,459 --> 00:09:20,994 line:1
This brings in the pawn asset,


205
00:09:20,994 --> 00:09:24,097 position:50%
and we can see it
in the catalog layer.


206
00:09:24,097 --> 00:09:26,166 line:-1
But how does USD know
which prim it should bring in


207
00:09:26,166 --> 00:09:28,368 line:-1
from the file you reference?


208
00:09:28,368 --> 00:09:32,439 line:-1
We can specify this prim
with the defaultPrim metadata.


209
00:09:32.439 --> 00:09:35.408 line:-1 position:50%
The defaultPrim metadata
is defined on the stage


210
00:09:35,408 --> 00:09:37,477 line:-1
and specifies which prim
should be referred to


211
00:09:37,477 --> 00:09:40,280 line:-1
when using this scene
on another stage.


212
00:09:40,280 --> 00:09:44,417 line:-1
We recommend always authoring
a defaultPrim for USD assets.


213
00:09:44.417 --> 00:09:45.718 line:-1 position:50%
Let's check our pawn asset


214
00:09:45.718 --> 00:09:48.421 line:-1 position:50%
to make sure
the defaultPrim is authored.


215
00:09:48,421 --> 00:09:50,690 line:-1
We can see the defaultPrim
metadata at the stage level


216
00:09:50,690 --> 00:09:51,891 line:-1
in our asset.


217
00:09:51.891 --> 00:09:53.893 line:-1 position:50%
Great.


218
00:09:53,893 --> 00:09:57,096 line:-1
Alternatively, if the
defaultPrim is not authored


219
00:09:57,096 --> 00:09:58,698 line:-1
or you wish to refer to a prim


220
00:09:58,698 --> 00:10:00,767 line:-1
that is different
from the defaultPrim,


221
00:10:00,767 --> 00:10:02,435 line:-1
you can specify the path
to the prim


222
00:10:02,435 --> 00:10:04,337 line:-1
in the referencing
layer explicitly,


223
00:10:04,337 --> 00:10:08,341 line:-1
anywhere in the hierarchy.


224
00:10:08.341 --> 00:10:12.579 line:-1 position:50%
Paths in USD are used to
identify elements on a stage.


225
00:10:12.579 --> 00:10:16.049 line:-1 position:50%
The prim path is a unique
identifier for a prim.


226
00:10:16.049 --> 00:10:19.819 line:-1 position:50%
For example, on this stage
we see three prims.


227
00:10:19.819 --> 00:10:23.323 line:-1 position:50%
The World prim
has a prim path of /World.


228
00:10:23.323 --> 00:10:24.691 line:-1 position:50%
The Pawn and Knight prims


229
00:10:24,691 --> 00:10:27,360 line:-1
are considered children
of the World prim.


230
00:10:27.360 --> 00:10:31.130 line:-1 position:50%
Thus the path to the Pawn prim
would be /World/Pawn,


231
00:10:31.130 --> 00:10:36.736 line:-1 position:50%
and the path to the Knight prim
would be /World/Knight.


232
00:10:36,736 --> 00:10:39,806 position:50%
With that in mind, we can
explicitly set the prim path


233
00:10:39,806 --> 00:10:44,210 position:50%
to the Pawn prim
in our reference here.


234
00:10:44,210 --> 00:10:46,179 position:50%
For larger scenes,
it can be expensive


235
00:10:46,179 --> 00:10:49,048 position:50%
to load all
the scene information at once.


236
00:10:49,048 --> 00:10:51,251 line:-1
For this, USD allows
for the deferred loading


237
00:10:51.251 --> 00:10:52.952 line:-1 position:50%
of scene description
onto a stage


238
00:10:52,952 --> 00:10:56,289 line:-1
with a type of reference
called a "payload."


239
00:10:56.289 --> 00:10:58.258 line:-1 position:50%
It is recommended to use
payloads when referencing


240
00:10:58.258 --> 00:11:00.827 line:-1 position:50%
large data sets,
such as complex geometry,


241
00:11:00,827 --> 00:11:02,161 line:-1
or other large scene graphs


242
00:11:02,161 --> 00:11:04,163 line:-1
representing props
or characters.


243
00:11:07,433 --> 00:11:10,003 position:50%
We'll convert these asset
references to payloads instead,


244
00:11:10,003 --> 00:11:14,541 position:50%
so we can choose to defer
the loading of the chess pieces.


245
00:11:14,541 --> 00:11:16,576 position:50%
If we choose
not to load the payloads,


246
00:11:16,576 --> 00:11:20,246 position:50%
our scene appears empty
when initially opened.


247
00:11:20,246 --> 00:11:22,181 line:1
Once we enable
the loading of payloads,


248
00:11:22,181 --> 00:11:24,517 position:50%
we can see
all of our pieces again.


249
00:11:24,517 --> 00:11:26,452 position:50%
Now that we have our pieces
in the scene,


250
00:11:26,452 --> 00:11:28,888 position:50%
we can start laying them out
on the chess board.


251
00:11:28,888 --> 00:11:30,423 line:1
We can do this
on yet another layer


252
00:11:30,423 --> 00:11:33,259 line:1
using the USD concept
of layering.


253
00:11:33.259 --> 00:11:35.929 line:-1 position:50%
With layering,
layers can be stacked,


254
00:11:35,929 --> 00:11:38,264 line:-1
similar to popular image editing
software packages


255
00:11:38,264 --> 00:11:41,534 line:-1
such as Photoshop
or Affinity Photo.


256
00:11:41.534 --> 00:11:43.536 line:-1 position:50%
Prims in a layer
that are above another layer


257
00:11:43.536 --> 00:11:46.539 line:-1 position:50%
are considered stronger
and can add or override data


258
00:11:46.539 --> 00:11:49.075 line:-1 position:50%
in the lower layers.


259
00:11:49.075 --> 00:11:50.376 line:-1 position:50%
As you can see,


260
00:11:50.376 --> 00:11:53.179 line:-1 position:50%
the pieces are currently
in their wrong places


261
00:11:53,179 --> 00:11:55,081 line:-1
But don't worry,
we can use layering


262
00:11:55,081 --> 00:11:58,718 line:-1
to make nondestructive
modifications to other layers.


263
00:11:58,718 --> 00:12:00,453 line:-1
This is perfect for us
to move our pieces


264
00:12:00,453 --> 00:12:04,090 line:-1
to the right positions without
editing our catalog layer.


265
00:12:04.090 --> 00:12:06.659 line:-1 position:50%
Let's see how this can be done


266
00:12:06,659 --> 00:12:09,596 line:-1
We start by creating a new stage
called ChessSet


267
00:12:09.596 --> 00:12:12.131 line:-1 position:50%
which will be our final scene.


268
00:12:12,131 --> 00:12:13,833 line:-1
It contains metadata
called "sublayers"


269
00:12:13,833 --> 00:12:15,802 line:-1
at the top of the layer.


270
00:12:15.802 --> 00:12:20.573 line:-1 position:50%
Here we bring in our pieces
with the catalog layer.


271
00:12:20.573 --> 00:12:23.776 line:-1 position:50%
Next, we create a new layer --
Layout.usda --


272
00:12:23,776 --> 00:12:27,780 line:-1
which we use to move our pieces.


273
00:12:27,780 --> 00:12:29,983 line:-1
This layout layer will contain
the positions


274
00:12:29.983 --> 00:12:31.818 line:-1 position:50%
of our chess pieces.


275
00:12:31,818 --> 00:12:34,921 line:-1
Let's override the position
of our pieces in the scene.


276
00:12:34,921 --> 00:12:37,857 line:-1
We'll start with Pawn_01.


277
00:12:37,857 --> 00:12:39,859 line:-1
We modify
the pawn asset's position


278
00:12:39,859 --> 00:12:42,662 line:-1
by changing
its translation attributes.


279
00:12:42,662 --> 00:12:46,766 line:-1
Let's check out
how this updates our scene.


280
00:12:46.766 --> 00:12:50.003 line:-1 position:50%
Here we have our chess set again
without our layout layer,


281
00:12:50.003 --> 00:12:53.406 line:-1 position:50%
so the pawn is still
in its original position.


282
00:12:53,406 --> 00:12:55,975 line:-1
Once we add our layout layer,
the pawn has been moved


283
00:12:55,975 --> 00:12:59,212 line:-1
to its expected position
on the chessboard.


284
00:12:59.212 --> 00:13:00.947 line:-1 position:50%
Let's do the same
for the other pieces


285
00:13:00.947 --> 00:13:03.249 line:-1 position:50%
and move them
to their correct locations.


286
00:13:04.951 --> 00:13:06.285 line:-1 position:50%
We position our other
chess pieces


287
00:13:06.285 --> 00:13:09.055 line:-1 position:50%
the same way
we position the pawn.


288
00:13:09,055 --> 00:13:12,225 line:-1
Here's how we did it
for Pawn_02.


289
00:13:12,225 --> 00:13:16,529 line:1
And then again
for Pawn_03, and so on.


290
00:13:16,529 --> 00:13:18,398 line:-1
We finished the changes
to the layout layer,


291
00:13:18,398 --> 00:13:21,534 line:-1
and now we have the chess pieces
set in their correct location.


292
00:13:23,903 --> 00:13:26,205 position:50%
We have half
of our chess set built.


293
00:13:26,205 --> 00:13:29,676 line:1
We use layers to bring in our
assets with the catalog layer


294
00:13:29,676 --> 00:13:32,045 position:50%
and use the overrides
to place them on the board


295
00:13:32,045 --> 00:13:33,680 line:1
with the layout layer.


296
00:13:35.715 --> 00:13:37.450 line:-1 position:50%
All that is left
is setting up the pieces


297
00:13:37.450 --> 00:13:39.519 line:-1 position:50%
for the opponent side.


298
00:13:39,519 --> 00:13:41,621 line:-1
One thing to note is that
our opponent's pieces


299
00:13:41.621 --> 00:13:43.556 line:-1 position:50%
are a different color.


300
00:13:43,556 --> 00:13:45,525 line:-1
Instead of making
a new set of assets,


301
00:13:45.525 --> 00:13:47.226 line:-1 position:50%
we can update
our chess piece assets


302
00:13:47,226 --> 00:13:50,863 line:-1
using another USD concept,
variantSets.


303
00:13:50.863 --> 00:13:53.232 line:-1 position:50%
VariantSets allow
for the dynamic swapping


304
00:13:53,232 --> 00:13:56,169 line:-1
of discrete alternatives
on the stage.


305
00:13:56,169 --> 00:13:57,870 line:-1
The variants contained
in a variantSet


306
00:13:57,870 --> 00:14:00,440 line:-1
can be different materials,
geometry,


307
00:14:00.440 --> 00:14:03.943 line:-1 position:50%
or anything that
can be represented in USD.


308
00:14:03.943 --> 00:14:06.079 line:-1 position:50%
Switching between
different variants on a stage


309
00:14:06,079 --> 00:14:08,347 line:-1
is nondestructive.


310
00:14:08.347 --> 00:14:10.216 line:-1 position:50%
We will setup variant sets
to switch between


311
00:14:10.216 --> 00:14:14.320 line:-1 position:50%
different materials
for the chess pieces.


312
00:14:14.320 --> 00:14:17.657 line:-1 position:50%
In our Pawn asset, we add
a variantSet called "color"


313
00:14:17.657 --> 00:14:21.194 line:-1 position:50%
so we can switch between
different colors for the pawn.


314
00:14:21.194 --> 00:14:24.197 line:-1 position:50%
Now we add two variants
to our variantSet:


315
00:14:24,197 --> 00:14:30,570 line:-1
Dark using the dark material and
Light using the light material.


316
00:14:30.570 --> 00:14:33.473 line:-1 position:50%
Finally, we set
the default variant to specify


317
00:14:33,473 --> 00:14:38,244 line:-1
which one to use when we load
the pawn onto the stage.


318
00:14:38.244 --> 00:14:40.913 line:-1 position:50%
Now, we are back
in our catalog layer.


319
00:14:40.913 --> 00:14:42.849 line:-1 position:50%
We've set up all the pieces
on the board,


320
00:14:42,849 --> 00:14:45,651 line:-1
but they are all using
the light material.


321
00:14:45.651 --> 00:14:47.153 line:-1 position:50%
That is because
the default variant


322
00:14:47,153 --> 00:14:49,689 line:-1
is set to the light material.


323
00:14:49.689 --> 00:14:51.557 line:-1 position:50%
Let's change the variant
of one of the pawns


324
00:14:51.557 --> 00:14:54.560 line:-1 position:50%
to the dark material.


325
00:14:54,560 --> 00:14:56,362 line:-1
We set the variant to Dark.


326
00:14:56,362 --> 00:14:58,531 line:-1
We can see that one of the pawns
on the opponent's side


327
00:14:58,531 --> 00:15:00,633 line:-1
is now dark.


328
00:15:00.633 --> 00:15:04.871 line:-1 position:50%
Let's apply this change
to the other pieces as well.


329
00:15:04,871 --> 00:15:07,607 line:-1
Finally, we completed
our chess set.


330
00:15:09.208 --> 00:15:13.012 line:-1 position:50%
There's one more USD concept we
can use to optimize our scene:


331
00:15:13.012 --> 00:15:15.414 line:-1 position:50%
scene graph instancing.


332
00:15:15,414 --> 00:15:17,016 line:-1
Scene graph instancing allows us


333
00:15:17,016 --> 00:15:20,019 line:-1
to reuse parts of scene graph
on a stage many times


334
00:15:20,019 --> 00:15:21,220 line:-1
to represent anything
that contains


335
00:15:21,220 --> 00:15:24,690 line:-1
more than one of something
such as foliage, furniture,


336
00:15:24.690 --> 00:15:27.660 line:-1 position:50%
or in our case, chess pieces.


337
00:15:27.660 --> 00:15:29.862 line:-1 position:50%
Using scene graph instancing
provides both memory


338
00:15:29.862 --> 00:15:33.266 line:-1 position:50%
and performance improvements
in your applications.


339
00:15:33,266 --> 00:15:35,101 line:-1
To use scene graph instancing,


340
00:15:35.101 --> 00:15:37.570 line:-1 position:50%
we can specify the instance
metadata on a prim


341
00:15:37.570 --> 00:15:40.139 line:-1 position:50%
or part of a scene graph.


342
00:15:40.139 --> 00:15:42.175 line:-1 position:50%
All prims that are instanced
are candidates


343
00:15:42.175 --> 00:15:44.577 line:-1 position:50%
to share the same scene graph.


344
00:15:44,577 --> 00:15:48,347 line:-1
Let's add support for prim
instancing in our scene.


345
00:15:48.347 --> 00:15:51.384 line:-1 position:50%
In our catalog file, we will add
the metadata "instanceable"


346
00:15:51.384 --> 00:15:55.021 line:-1 position:50%
to the chess piece prims
and set the value to true.


347
00:15:55.021 --> 00:15:57.924 line:-1 position:50%
By adding this metadata,
USD will now treat these assets


348
00:15:57,924 --> 00:16:01,494 line:-1
as potentially instanceable
prims that share the same data,


349
00:16:01,494 --> 00:16:05,198 line:-1
rather than duplicating the data
for each prim.


350
00:16:05,198 --> 00:16:06,999 line:-1
Our chess set
still looks the same


351
00:16:06.999 --> 00:16:10.069 line:-1 position:50%
but it's now more performant
and memory efficient.


352
00:16:10.069 --> 00:16:12.572 line:-1 position:50%
And with this, we're done
with our chess set!


353
00:16:12,572 --> 00:16:16,008 line:-1
It looks great, and we exercised
a lot of USD features.


354
00:16:17.310 --> 00:16:21.214 line:-1 position:50%
Layering, referencing, payloads
and variantSets


355
00:16:21,214 --> 00:16:25,451 line:-1
are just some of the types
of composition that USD defines.


356
00:16:25,451 --> 00:16:26,853 line:-1
There is a specific
strength order


357
00:16:26.853 --> 00:16:28.821 line:-1 position:50%
in which USD composes
the scene graph


358
00:16:28,821 --> 00:16:32,291 line:-1
to ensure consistent
scene representation.


359
00:16:32.291 --> 00:16:34.126 line:-1 position:50%
More information
about composition


360
00:16:34,126 --> 00:16:36,362 line:-1
and the order acronym LIVRPS


361
00:16:36,362 --> 00:16:40,466 line:-1
can be learned
in Pixar's USD documentation.


362
00:16:40,466 --> 00:16:41,767 line:-1
In this session,


363
00:16:41,767 --> 00:16:44,237 line:-1
we talked about
what's inside of USD files.


364
00:16:44,237 --> 00:16:46,339 line:-1
Now let's talk about
the files themselves


365
00:16:46.339 --> 00:16:48.908 line:-1 position:50%
and how they might
appear on disk.


366
00:16:48,908 --> 00:16:51,744 line:-1
There are several types
of USD files.


367
00:16:51.744 --> 00:16:53.946 line:-1 position:50%
USD files containing
readable ASCII text


368
00:16:53,946 --> 00:16:56,282 line:-1
had the .usda extension.


369
00:16:56.282 --> 00:16:59.952 line:-1 position:50%
We have been using these files
the whole time in this session.


370
00:16:59.952 --> 00:17:02.788 line:-1 position:50%
A more compact and efficient
binary representation


371
00:17:02,788 --> 00:17:07,226 line:-1
is the crate format,
which has the .usdc extension.


372
00:17:07,226 --> 00:17:10,496 line:-1
You may also have files
with the .usd extension.


373
00:17:10.496 --> 00:17:15.034 line:-1 position:50%
These could either be ASCII text
or binary crate files.


374
00:17:15.034 --> 00:17:18.537 line:-1 position:50%
Lastly, USD has a packaging
format which can contain


375
00:17:18.537 --> 00:17:21.540 line:-1 position:50%
multiple USD files
and associated auxiliary files,


376
00:17:21,540 --> 00:17:24,110 line:-1
like textures, in an
uncompressed zip archive


377
00:17:24.110 --> 00:17:27.680 line:-1 position:50%
with the .usdz extension.


378
00:17:27,680 --> 00:17:31,317 line:-1
Today we learned about some
of USD's fundamental concepts:


379
00:17:31.317 --> 00:17:38.357 line:-1 position:50%
stage, layers, prims, schemas,
attributes, and metadata.


380
00:17:38,357 --> 00:17:40,426 line:-1
We used these concepts
to build a chess set


381
00:17:40.426 --> 00:17:44.263 line:-1 position:50%
and made use of referencing,
payloads, the defaultPrim,


382
00:17:44,263 --> 00:17:48,200 line:-1
prim paths, layering,
and instancing.


383
00:17:48,200 --> 00:17:51,904 line:1
And finally, we discussed
the different USD file formats:


384
00:17:51,904 --> 00:17:57,343 line:1
.usda, .usdc, .usd, and .usdz.


385
00:17:57,343 --> 00:17:59,645 line:-1
We encourage you to learn more
about these concepts


386
00:17:59,645 --> 00:18:02,748 line:-1
with Pixar's USD documentation
and take full advantage


387
00:18:02,748 --> 00:18:05,918 line:-1
of USD's capabilities
in your applications.


388
00:18:05,918 --> 00:18:07,386 line:-1
Thank you!


389
00:18:07,386 --> 00:18:11,390 size:2% line:1 align:right
♪

