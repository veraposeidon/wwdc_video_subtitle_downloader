2
00:00:00,501 --> 00:00:08,509 line:-1
♪ ♪


3
00:00:09.643 --> 00:00:12.779 line:-2 align:center
Hi, I'm Slava
from the swift compiler team.


4
00:00:12.813 --> 00:00:16.850 line:-2 align:center
Welcome to Design
Protocol Interfaces in Swift.


5
00:00:17.684 --> 00:00:21.822 line:-2 align:center
I'm going to pick up where the Embrace
Swift Generics talk left off,


6
00:00:21.855 --> 00:00:26.527 line:-2 align:center
and show you some advanced techniques
for abstracting over concrete types


7
00:00:26.560 --> 00:00:30.430 line:-2 align:center
and modeling type relationships
using protocols.


8
00:00:30,464 --> 00:00:34,001 line:-2
This talk will cover both
existing language features,


9
00:00:34,034 --> 00:00:39,540 line:-2
as well as some of the new capabilities
introduced in Swift 5.7.


10
00:00:40,340 --> 00:00:43,010 line:-1
This talk has three main themes:


11
00:00:43,043 --> 00:00:46,980 line:-2
First, I'll show you how protocols with
associated types


12
00:00:47.014 --> 00:00:49.883 line:-1 align:center
interact with existential 'any' types,


13
00:00:49.917 --> 00:00:53.887 line:-2 align:center
by explaining
how 'result type erasure' works.


14
00:00:53,921 --> 00:00:57,758 line:-2
Next, I'll explain using
opaque result types


15
00:00:57.791 --> 00:00:59.693 line:-1 align:center
to improve encapsulation


16
00:00:59.726 --> 00:01:03.497 line:-2 align:center
by separating
interface from implementation.


17
00:01:03.530 --> 00:01:05.132 line:-1 align:center
For the final topic,


18
00:01:05.165 --> 00:01:08.702 line:-2 align:center
you will see how
same-type requirements in protocols


19
00:01:08,735 --> 00:01:13,607 line:-2
can model relationships between
multiple different sets of concrete types.


20
00:01:14.942 --> 00:01:18.946 line:-2 align:center
Let's start by learning
how protocols with associated types


21
00:01:18,979 --> 00:01:22,216 line:-1
interact with existential types.


22
00:01:22.249 --> 00:01:25.619 line:-2 align:center
Here, we have a data model
with a pair of protocols,


23
00:01:25.652 --> 00:01:28.055 line:-1 align:center
and four concrete types.


24
00:01:28,088 --> 00:01:31,558 line:-2
There are two types of animals,
chickens and cows,


25
00:01:31.592 --> 00:01:35.529 line:-1 align:center
and two types of food, eggs and milk.


26
00:01:35,562 --> 00:01:39,933 line:-2
Chickens produce eggs,
and cows produce milk.


27
00:01:39.967 --> 00:01:42.503 line:-1 align:center
To abstract over the production of food,


28
00:01:42,536 --> 00:01:46,640 line:-2
I'm going to add a produce() method
to the Animal protocol.


29
00:01:46.673 --> 00:01:50.244 line:-3 align:center
You might remember
from the 'Embrace swift generics' talk


30
00:01:50.277 --> 00:01:52.980 line:-3 align:center
that that the best way to abstract the
different return types


31
00:01:53,013 --> 00:01:55,315 line:-2
of produce() on Cow and Chicken


32
00:01:55,349 --> 00:01:58,118 line:-2
is to use an associated type.


33
00:01:58,151 --> 00:02:01,522 line:-2
By using an associated type,
we're declaring that:


34
00:02:01,555 --> 00:02:04,191 line:-1
given some concrete type of Animal,


35
00:02:04.224 --> 00:02:08.495 line:-2 align:center
calling produce() returns
some specific type of Food,


36
00:02:08,529 --> 00:02:12,332 line:-1
that depends on the concrete Animal type.


37
00:02:12.366 --> 00:02:15.736 line:-4 align:center
We can show
this relationship with a diagram.


38
00:02:15.769 --> 00:02:20.040 line:-4 align:center
The protocol 'Self' type stands in
for the actual concrete type


39
00:02:20,073 --> 00:02:22,876 line:-3
conforming to the 'Animal' protocol.


40
00:02:22.910 --> 00:02:26.213 line:-4 align:center
The 'Self' type has an associated
'Commodity' type,


41
00:02:26,246 --> 00:02:28,515 line:-3
conforming to 'Food'.


42
00:02:28.549 --> 00:02:32.719 line:-2 align:center
Let's look at the relationships between
the concrete Chicken and Cow types,


43
00:02:32,753 --> 00:02:36,423 line:-2
and the associated type diagram
for the Animal protocol.


44
00:02:37,424 --> 00:02:42,529 align:center
The Chicken type conforms to the Animal
protocol with a CommodityType of 'Egg'.


45
00:02:42,563 --> 00:02:48,101 align:center
And the Cow type conforms to the Animal
protocol with a CommodityType of 'Milk'.


46
00:02:48,135 --> 00:02:51,471 line:-2
Now, let's say we have a farm
full of animals.


47
00:02:51.505 --> 00:02:57.978 line:-2 align:center
The 'animals' stored property on Farm
is a heterogenous array of 'any Animal'.


48
00:02:58,011 --> 00:03:02,182 line:-2
In embrace Swift generics,
we saw how the 'any Animal' type


49
00:03:02.216 --> 00:03:05.953 line:-2 align:center
has a box representation
that has the ability to store


50
00:03:05.986 --> 00:03:09.323 line:-1 align:center
any concrete type of animal dynamically.


51
00:03:09.356 --> 00:03:12.259 line:-2 align:center
This strategy of using
the same representation


52
00:03:12,292 --> 00:03:15,529 line:-2
for different concrete types
is called type erasure.


53
00:03:17.030 --> 00:03:21.001 line:-2 align:center
The produceCommodities() method
maps over the array of animals,


54
00:03:21.034 --> 00:03:24.037 line:-1 align:center
calling the produce() method on each one.


55
00:03:24,071 --> 00:03:27,007 line:-2
The method looks simple,
but we know that type erasure


56
00:03:27.040 --> 00:03:31.912 line:-2 align:center
will eliminate static type relationships
to the underlying type of animal,


57
00:03:31.945 --> 00:03:36.350 line:-2 align:center
so it's worth digging deeper
to understand why this code type checks.


58
00:03:37.684 --> 00:03:42.990 line:-2 align:center
The 'animal' parameter in
the map() closure has type 'any Animal'.


59
00:03:43,023 --> 00:03:47,261 line:-2
The return type of 'produce()'
is an associated type.


60
00:03:47,294 --> 00:03:52,165 align:center
When you call a method returning
an associated type on an existential type,


61
00:03:52,199 --> 00:03:57,971 align:center
the compiler will use type erasure
to determine the result type of the call.


62
00:03:58,005 --> 00:04:01,308 align:center
Type erasure replaces
these associated types


63
00:04:01,341 --> 00:04:05,846 align:center
with corresponding existential types
that have equivalent constraints.


64
00:04:05.879 --> 00:04:09.683 line:-2 align:center
We've erased the relationship
between the concrete Animal type


65
00:04:09,716 --> 00:04:12,119 line:-1
and the associated CommodityType


66
00:04:12.152 --> 00:04:16.089 line:-2 align:center
by replacing them with 'any Animal'
and 'any Food'.


67
00:04:16.123 --> 00:04:22.429 line:-2 align:center
The type 'any Food' is called the upper
bound of the associated CommodityType.


68
00:04:22,462 --> 00:04:25,666 line:-2
Since the produce() method
is called on an 'any Animal',


69
00:04:25.699 --> 00:04:31.038 line:-2 align:center
the return value is type erased,
giving us a value of type 'any Food'.


70
00:04:31.071 --> 00:04:33.640 line:-1 align:center
This is exactly the type we expect here.


71
00:04:34,775 --> 00:04:38,378 line:-2
Let's take a closer look at
how associated-type erasure works,


72
00:04:38.412 --> 00:04:41.882 line:-1 align:center
which is a new feature in Swift 5.7.


73
00:04:41.915 --> 00:04:46.420 line:-2 align:center
An associated type appearing in
the result type of a protocol method –


74
00:04:46.453 --> 00:04:48.755 line:-1 align:center
on the right-hand side of the arrow –


75
00:04:48.789 --> 00:04:51.291 line:-1 align:center
is said to be in 'producing position',


76
00:04:51,325 --> 00:04:56,129 line:-2
because calling the method
will produce a value of this type.


77
00:04:56.163 --> 00:04:59.066 line:-1 align:center
When we call this method on 'any Animal',


78
00:04:59.099 --> 00:05:02.269 line:-2 align:center
we don't know the concrete result type
at compile time,


79
00:05:02,302 --> 00:05:06,440 line:-2
but we do know that it is a subtype
of the upper bound.


80
00:05:06,473 --> 00:05:10,477 line:-2
Here in this example,
we're calling produce() on an 'any Animal'


81
00:05:10,511 --> 00:05:13,447 line:-1
that holds a Cow at runtime.


82
00:05:13,480 --> 00:05:17,851 line:-2
In our case,
the produce() method on Cow returns Milk.


83
00:05:17.885 --> 00:05:21.255 line:-2 align:center
Milk can be stored
inside of an 'any Food',


84
00:05:21,288 --> 00:05:26,159 line:-2
which is the upper bound of the associated
CommodityType of the Animal protocol.


85
00:05:27.127 --> 00:05:32.733 line:-2 align:center
This is always safe, for all concrete
types that conform to the Animal protocol.


86
00:05:34.034 --> 00:05:38.205 line:-2 align:center
On the other hand, let's think about
what happens if the associated type


87
00:05:38,238 --> 00:05:42,543 line:-2
appears in the parameter list
of a method or initializer.


88
00:05:42.576 --> 00:05:45.379 line:-2 align:center
Here, the eat() method on
the Animal protocol


89
00:05:45,412 --> 00:05:49,483 line:-2
has the associated FeedType
in consuming position.


90
00:05:49,516 --> 00:05:53,687 line:-2
We need to pass in a value of this type
to call the method.


91
00:05:53,720 --> 00:05:56,456 line:-2
Since the conversion goes
in the other direction,


92
00:05:56.490 --> 00:05:59.226 line:-1 align:center
type erasure cannot be performed.


93
00:05:59.259 --> 00:06:03.230 line:-2 align:center
The upper bound existential type
for the associated type


94
00:06:03.263 --> 00:06:06.867 line:-2 align:center
does not safety convert
to the actual concrete type,


95
00:06:06,900 --> 00:06:09,970 line:-1
because the concrete type is unknown.


96
00:06:10.003 --> 00:06:11.772 line:-1 align:center
Let's look at an example.


97
00:06:11,805 --> 00:06:15,876 line:-2
Once again,
we have an 'any Animal' storing a Cow.


98
00:06:15.909 --> 00:06:19.179 line:-2 align:center
Suppose that the 'eat' method
on Cow takes Hay.


99
00:06:19,213 --> 00:06:25,752 line:-2
The upper bound of the Animal protocol's
associated 'FeedType' is 'any AnimalFeed'.


100
00:06:25,786 --> 00:06:28,755 line:-1
But given an arbitrary 'any AnimalFeed',


101
00:06:28,789 --> 00:06:31,592 line:-1
there is no way to statically guarantee


102
00:06:31,625 --> 00:06:34,294 line:-1
that it stores the 'Hay' concrete type.


103
00:06:34,328 --> 00:06:38,465 line:-2
Type erasure does not allow us
to work with associated types


104
00:06:38,498 --> 00:06:40,334 line:-1
in consuming position.


105
00:06:40.367 --> 00:06:44.271 line:-2 align:center
Instead, you must unbox
the existential 'any' type


106
00:06:44.304 --> 00:06:48.308 line:-2 align:center
by passing it to a function
that takes an opaque 'some' type.


107
00:06:49.076 --> 00:06:53.347 line:-2 align:center
This type erasure behavior with
associated types is actually similar


108
00:06:53,380 --> 00:06:58,752 line:-2
to an existing language feature
you may have seen in Swift 5.6.


109
00:06:58,785 --> 00:07:02,289 line:-2
Consider a protocol
for cloning reference types.


110
00:07:02,322 --> 00:07:06,894 line:-2
This protocol defines a single
clone() method, returning Self.


111
00:07:06.927 --> 00:07:10.931 line:-2 align:center
When you call clone()
on a value of type 'any Cloneable',


112
00:07:10,964 --> 00:07:16,236 line:-2
the result type 'Self',
is type erased to its upper bound.


113
00:07:16,270 --> 00:07:20,774 line:-2
The upper bound of the Self type
is always the protocol itself,


114
00:07:20,807 --> 00:07:25,279 line:-2
so we get back a new value
of type 'any Cloneable'.


115
00:07:25,312 --> 00:07:29,983 line:-2
So to summarize: you can use
'any' to declare that the type of a value


116
00:07:30.017 --> 00:07:36.089 line:-2 align:center
is an existential type that stores some
concrete type conforming to a protocol.


117
00:07:36.123 --> 00:07:40.661 line:-2 align:center
This even works with protocols
that have associated types.


118
00:07:40,694 --> 00:07:45,866 line:-2
When calling a protocol method with
an associated type in producing position,


119
00:07:45,899 --> 00:07:49,703 line:-2
the associated type is type-erased
to its upper bound,


120
00:07:49,736 --> 00:07:54,908 line:-2
which is another existential type that
carries the associated type's constraints.


121
00:07:54.942 --> 00:08:00.247 line:-2 align:center
Abstracting over concrete types
isn't only useful for function inputs -


122
00:08:00,280 --> 00:08:02,850 line:-1
it's useful for function outputs, too,


123
00:08:02.883 --> 00:08:07.454 line:-2 align:center
so that concrete types are only visible
from the implementation.


124
00:08:07.487 --> 00:08:11.491 line:-2 align:center
Let's take a look at how to abstract away
concrete result types


125
00:08:11.525 --> 00:08:14.962 line:-2 align:center
to separate the essential interface
of a piece of code


126
00:08:14.995 --> 00:08:17.264 line:-1 align:center
from its implementation details,


127
00:08:17.297 --> 00:08:22.836 line:-2 align:center
making static type assignments more
modular and robust in the face of changes.


128
00:08:22.870 --> 00:08:27.007 line:-2 align:center
Let's generalize the Animal protocol
to allow feeding Animals.


129
00:08:27.040 --> 00:08:30.911 line:-2 align:center
Animals get hungry,
and when they're hungry they need to eat.


130
00:08:30.944 --> 00:08:35.115 line:-2 align:center
Let's add an isHungry property
to the Animal protocol.


131
00:08:35.148 --> 00:08:40.787 line:-2 align:center
The feedAnimals() method on Farm will feed
the subset of animals that are hungry.


132
00:08:40,821 --> 00:08:44,691 line:-2
I've split off the computation
of this subset of hungry animals


133
00:08:44.725 --> 00:08:47.594 line:-1 align:center
into a hungryAnimals property.


134
00:08:47.628 --> 00:08:51.899 line:-2 align:center
This initial implementation of
hungryAnimals() uses the filter() method


135
00:08:51,932 --> 00:08:56,837 line:-2
to select the subset of animals
where the isHungry property is true.


136
00:08:56.870 --> 00:08:59.907 line:-2 align:center
Calling filter() on an array
of 'any Animal'


137
00:08:59.940 --> 00:09:03.744 line:-1 align:center
returns a new array of 'any Animal'.


138
00:09:03.777 --> 00:09:05.913 line:-2 align:center
Now you might notice
that feedAnimals()


139
00:09:05,946 --> 00:09:09,483 line:-2
only iterates over the result
of hungryAnimals once,


140
00:09:09,516 --> 00:09:13,120 line:-2
and then immediately discards
this temporary array.


141
00:09:13.153 --> 00:09:18.425 line:-2 align:center
This is inefficient if the farm contains
a large number of hungry animals.


142
00:09:18,458 --> 00:09:21,094 line:-2
One way to avoid
this temporary allocation


143
00:09:21,128 --> 00:09:25,199 line:-2
is to use the standard library's
lazy collections feature.


144
00:09:25,232 --> 00:09:29,736 line:-2
By replacing the call to 'filter'
with 'lazy.filter',


145
00:09:29.770 --> 00:09:33.574 line:-1 align:center
we get what is known as a lazy collection.


146
00:09:33,607 --> 00:09:38,011 line:-2
A lazy collection has the same elements
as the array returned


147
00:09:38,045 --> 00:09:43,584 line:-2
by a plain call to 'filter',
but it avoids the temporary allocation.


148
00:09:43,617 --> 00:09:47,221 line:-2
However, now the type of
the 'hungryAnimals' property


149
00:09:47.254 --> 00:09:51.291 line:-2 align:center
must be declared
as this rather complex concrete type,


150
00:09:51,325 --> 00:09:55,963 line:-2
'LazyFilterSequence
of Array of any Animal'.


151
00:09:55,996 --> 00:10:00,334 line:-2
This exposes
an unnecessary implementation detail.


152
00:10:00,367 --> 00:10:05,939 line:-2
The client, feedAnimals(), doesn't care
that we used 'lazy.filter'


153
00:10:05,973 --> 00:10:08,709 line:-1
in the implementation of 'hungryAnimals';


154
00:10:08,742 --> 00:10:14,181 line:-2
it only needs to know that it's getting
some collection that it can iterate over.


155
00:10:14,214 --> 00:10:19,019 line:-2
An opaque result type can be used
to hide the complex concrete type


156
00:10:19,052 --> 00:10:23,023 line:-2
behind the abstract interface
of a Collection.


157
00:10:23,056 --> 00:10:28,595 line:-2
Now clients calling 'hungryAnimals' only
know they're getting some concrete type


158
00:10:28,629 --> 00:10:31,231 line:-1
conforming to the Collection protocol,


159
00:10:31,265 --> 00:10:35,135 line:-2
but they don't know the specific
concrete type of collection.


160
00:10:36.170 --> 00:10:39.606 line:-2 align:center
However as written,
this actually hides too much


161
00:10:39,640 --> 00:10:43,210 line:-1
static type information from the client.


162
00:10:43,243 --> 00:10:47,648 line:-2
We're declaring that hungryAnimals
outputs some concrete type


163
00:10:47.681 --> 00:10:49.483 line:-1 align:center
conforming to Collection,


164
00:10:49,516 --> 00:10:53,754 line:-2
but we don't know anything
about this Collection's Element type.


165
00:10:53.787 --> 00:10:57.925 line:-2 align:center
Without the knowledge
that the element type is 'any Animal',


166
00:10:57,958 --> 00:11:01,562 line:-2
all we can do with the element type
is pass it around;


167
00:11:01,595 --> 00:11:06,233 line:-2
we can't call any of the methods
of the Animal protocol.


168
00:11:06,266 --> 00:11:10,771 line:-2
Let's focus on the opaque result type
'some Collection'.


169
00:11:10,804 --> 00:11:15,042 line:-2
We can strike the right balance
between hiding implementation details


170
00:11:15,075 --> 00:11:18,145 line:-1
and exposing a sufficiently-rich interface


171
00:11:18,178 --> 00:11:22,049 line:-1
by using a constrained opaque result type.


172
00:11:22.082 --> 00:11:26.653 line:-2 align:center
Constrained opaque result types
are new in Swift 5.7.


173
00:11:26.687 --> 00:11:31.458 line:-2 align:center
A constrained opaque result type
is written by applying type arguments


174
00:11:31.491 --> 00:11:34.361 line:-2 align:center
in angle brackets
after the protocol name.


175
00:11:34,394 --> 00:11:39,032 line:-2
The Collection protocol has
a single type argument, the Element type.


176
00:11:39,066 --> 00:11:44,171 line:-2
Now once 'hungryAnimals' is declared
with a constrained opaque result type,


177
00:11:44.204 --> 00:11:49.076 line:-2 align:center
the fact that it is actually
a 'LazyFilterSequence of an array


178
00:11:49,109 --> 00:11:52,946 line:-1
of any Animal' is hidden from the client;


179
00:11:52,980 --> 00:11:55,215 line:-1
but the client still has the knowledge


180
00:11:55.249 --> 00:11:59.152 line:-2 align:center
that it is some concrete type
conforming to Collection,


181
00:11:59,186 --> 00:12:03,524 line:-2
whose Element associated type
is equal to 'any Animal'.


182
00:12:03,557 --> 00:12:07,961 line:-2
This is precisely the interface
that we want here.


183
00:12:07,995 --> 00:12:11,064 line:-1
Inside the for loop in 'feedAnimals()',


184
00:12:11.098 --> 00:12:14.568 line:-2 align:center
the 'animal' variable
has the type 'any Animal',


185
00:12:14.601 --> 00:12:20.874 line:-2 align:center
allowing methods of the Animal protocol
to be called on each hungry animal.


186
00:12:20,908 --> 00:12:24,511 line:-2
This all works because
the Collection protocol declares


187
00:12:24,545 --> 00:12:30,050 line:-2
that the Element associated type
is a primary associated type.


188
00:12:30.083 --> 00:12:34.321 line:-2 align:center
You can declare your own protocols
with primary associated types


189
00:12:34.354 --> 00:12:39.760 line:-2 align:center
by naming one or more associated types
in angle brackets after the protocol name,


190
00:12:39,793 --> 00:12:41,695 line:-1
like this.


191
00:12:41,728 --> 00:12:46,533 line:-2
The associated types that work best
as primary associated types


192
00:12:46.567 --> 00:12:49.403 line:-2 align:center
are those that are usually provided
by the caller,


193
00:12:49.436 --> 00:12:52.206 line:-1 align:center
such as an Element type of a collection,


194
00:12:52,239 --> 00:12:55,042 line:-1
as opposed to implementation details,


195
00:12:55,075 --> 00:12:58,212 line:-1
such as the collection's Iterator type.


196
00:12:58,245 --> 00:13:01,949 line:-2
Often, you will see a correspondence
between the primary associated types


197
00:13:01,982 --> 00:13:05,919 line:-2
of a protocol, and the generic parameters
of a concrete type


198
00:13:05,953 --> 00:13:07,788 line:-1
conforming to this protocol.


199
00:13:07,821 --> 00:13:11,792 line:-2
Here, you can see that the Element primary
associated type of 'Collection'


200
00:13:11,825 --> 00:13:16,263 line:-2
is implemented by the 'Element'
generic parameter of Array and Set,


201
00:13:16.296 --> 00:13:21.635 line:-2 align:center
two concrete types defined by the standard
library that both conform to Collection.


202
00:13:21,668 --> 00:13:25,439 line:-2
'Collection of Element' can be used
with opaque result types


203
00:13:25.472 --> 00:13:27.241 line:-1 align:center
using the 'some' keyword,


204
00:13:27,274 --> 00:13:32,112 line:-2
as well as with constrained
existential types using the 'any' keyword.


205
00:13:32,145 --> 00:13:36,850 line:-2
Before Swift 5.7, you would've needed
to write your own data type


206
00:13:36,884 --> 00:13:41,522 line:-2
to represent an existential type
with a specific generic argument.


207
00:13:41.555 --> 00:13:45.058 line:-2 align:center
Swift 5.7 builds this concept
into the language


208
00:13:45.092 --> 00:13:47.628 line:-1 align:center
with constrained existential types.


209
00:13:48.662 --> 00:13:51.632 line:-2 align:center
If we wanted hungryAnimals
to have the option


210
00:13:51.665 --> 00:13:56.470 line:-2 align:center
of whether to compute
the hungryAnimals lazily or eagerly,


211
00:13:56,503 --> 00:14:02,042 line:-2
using an opaque Collection
of any Animal would result in an error


212
00:14:02.075 --> 00:14:06.346 line:-2 align:center
that the function returns
two different underlying types.


213
00:14:06.380 --> 00:14:11.051 line:-2 align:center
We can fix this by instead
returning 'any Collection of any Animal',


214
00:14:11,084 --> 00:14:16,523 line:-2
signaling that this API can return
different types across calls.


215
00:14:16.557 --> 00:14:20.227 line:-2 align:center
The ability to constrain primary
associated types


216
00:14:20.260 --> 00:14:26.033 line:-2 align:center
gives opaque types and existential types
a new level of expressivity.


217
00:14:26.066 --> 00:14:31.104 line:-2 align:center
This can be used with various standard
library protocols such as Collection;


218
00:14:31,138 --> 00:14:36,076 line:-2
you can also declare your own protocols
to have primary associated types.


219
00:14:36,910 --> 00:14:43,317 line:-2
Writing generic code using opaque types
must rely on abstract type relationships.


220
00:14:43.350 --> 00:14:48.722 line:-2 align:center
Let's discuss how to identify
and guarantee necessary type relationships


221
00:14:48.755 --> 00:14:53.527 line:-2 align:center
between multiple abstract types
using related protocols.


222
00:14:54,127 --> 00:14:58,131 line:-2
We're going to add a new associated type
to the Animal protocol


223
00:14:58,165 --> 00:15:02,269 line:-2
for the concrete type of animal feed
that this animal eats,


224
00:15:02.302 --> 00:15:07.774 line:-2 align:center
together with an eat() method that tells
the animal to consume this type of feed.


225
00:15:07.808 --> 00:15:10.777 line:-2 align:center
To make things more interesting,
I'm going to introduce


226
00:15:10.811 --> 00:15:12.779 line:-1 align:center
an additional complication:


227
00:15:12.813 --> 00:15:15.282 line:-1 align:center
before we can feed an animal,


228
00:15:15.315 --> 00:15:18.318 line:-1 align:center
we must grow the appropriate type of crop,


229
00:15:18,352 --> 00:15:21,588 line:-1
and harvest the crop to produce the feed.


230
00:15:21.622 --> 00:15:24.224 line:-1 align:center
Here is the first set of concrete types.


231
00:15:24,258 --> 00:15:26,727 line:-1
A cow eats hay,


232
00:15:26,760 --> 00:15:28,996 line:-1
so given a cow,


233
00:15:29,029 --> 00:15:31,798 line:-1
we first need to grow some hay.


234
00:15:31.832 --> 00:15:33.934 line:-1 align:center
This gives us alfalfa,


235
00:15:33,967 --> 00:15:37,571 line:-1
which is harvested and processed into hay,


236
00:15:37,604 --> 00:15:40,407 line:-1
that the cow can eat.


237
00:15:40,440 --> 00:15:43,577 line:-1
Here's the second set of concrete types.


238
00:15:43.610 --> 00:15:46.113 line:-1 align:center
A chicken eats scratch,


239
00:15:46.146 --> 00:15:48.615 line:-1 align:center
so if you bring me a chicken,


240
00:15:48.649 --> 00:15:52.319 line:-2 align:center
we first need to grow a type of grain
called millet


241
00:15:52.352 --> 00:15:54.321 line:-1 align:center
that we harvest and process


242
00:15:54.354 --> 00:15:56.590 line:-1 align:center
to produce chicken scratch,


243
00:15:56,623 --> 00:15:59,927 line:-1
which we feed to our chicken.


244
00:15:59.960 --> 00:16:04.932 line:-2 align:center
I want to abstract over these two sets of
related concrete types,


245
00:16:04.965 --> 00:16:07.801 line:-2 align:center
so I can implement
the feedAnimal() method once,


246
00:16:07,835 --> 00:16:10,704 line:-1
and have it feed both cows and chickens,


247
00:16:10.737 --> 00:16:15.909 line:-2 align:center
as well as any new types of animals
I might adopt in the future.


248
00:16:15.943 --> 00:16:20.747 line:-2 align:center
Since feedAnimal() needs to work with
the eat() method of the Animal protocol,


249
00:16:20,781 --> 00:16:24,384 line:-2
which has an associated type
in consuming position,


250
00:16:24.418 --> 00:16:29.489 line:-2 align:center
I'm going to unbox the existential
by declaring that the feedAnimal() method


251
00:16:29,523 --> 00:16:33,360 line:-1
takes 'some Animal' as a parameter type.


252
00:16:33.393 --> 00:16:36.530 line:-1 align:center
To start, I'll define a pair of protocols,


253
00:16:36.563 --> 00:16:38.332 line:-1 align:center
AnimalFeed and Crop,


254
00:16:38.365 --> 00:16:43.737 line:-2 align:center
using what we know about protocols
and associated types so far.


255
00:16:43.770 --> 00:16:46.673 line:-1 align:center
AnimalFeed has an associated CropType,


256
00:16:46,707 --> 00:16:48,842 line:-1
which conforms to Crop,


257
00:16:48,876 --> 00:16:51,678 line:-1
and Crop has an associated FeedType,


258
00:16:51,712 --> 00:16:54,448 line:-1
which conforms to AnimalFeed.


259
00:16:54,481 --> 00:17:00,354 line:-2
As before, we can look at a diagram
of type parameters for each protocol.


260
00:17:00,387 --> 00:17:03,490 align:center
First, let's look at AnimalFeed.


261
00:17:03,524 --> 00:17:05,692 line:0
Every protocol has a 'Self' type,


262
00:17:05,726 --> 00:17:09,096 line:0
which stands for
the concrete conforming type.


263
00:17:09,129 --> 00:17:12,032 line:0
Our protocol has an associated 'CropType',


264
00:17:12,065 --> 00:17:14,434 line:0
which conforms to Crop.


265
00:17:14,468 --> 00:17:18,705 align:center
The associated 'CropType' has a nested
associated 'FeedType',


266
00:17:18,739 --> 00:17:21,241 align:center
which conforms to AnimalFeed,


267
00:17:21,275 --> 00:17:27,247 line:0
which has a nested associated 'CropType'
conforming to Crop, and so on.


268
00:17:27,281 --> 00:17:30,584 line:0
In fact, this back-and-forth
continues forever,


269
00:17:30,617 --> 00:17:33,787 align:center
with an infinite nesting
of associated types


270
00:17:33,820 --> 00:17:38,425 align:center
that alternate between conforming
to AnimalFeed and Crop.


271
00:17:39,660 --> 00:17:44,998 align:center
With the Crop protocol, we have
a similar situation, just shifted by one.


272
00:17:45,032 --> 00:17:48,802 line:0
We start with the 'Self' type,
conforming to 'Crop',


273
00:17:48,836 --> 00:17:53,607 line:0
which has an associated 'FeedType',
conforming to AnimalFeed.


274
00:17:53,640 --> 00:17:59,112 line:0
This has a nested associated 'CropType',
conforming to Crop and so on...


275
00:18:02,082 --> 00:18:04,618 align:center
To infinity.


276
00:18:04,651 --> 00:18:08,388 line:-2
Let's see if these protocols
correctly model the relationship


277
00:18:08.422 --> 00:18:11.024 line:-1 align:center
between our concrete types.


278
00:18:11.058 --> 00:18:13.527 line:-1 align:center
Recall that before we can feed an animal,


279
00:18:13,560 --> 00:18:15,062 line:-1
we need to grow the crop


280
00:18:15,095 --> 00:18:18,999 line:-2
that is then processed into
the correct type of animal feed.


281
00:18:19.032 --> 00:18:22.903 line:-2 align:center
grow() is a static method
in the AnimalFeed protocol,


282
00:18:22,936 --> 00:18:27,708 line:-2
which means it must be called directly
on a type conforming to AnimalFeed,


283
00:18:27,741 --> 00:18:32,846 line:-2
and not on a specific value
whose type conforms to AnimalFeed.


284
00:18:32.880 --> 00:18:37.017 line:-2 align:center
We need to write down a the name of a type
conforming to AnimalFeed,


285
00:18:37,050 --> 00:18:39,520 line:-1
but all we have is a specific value,


286
00:18:39,553 --> 00:18:43,557 line:-2
of some type conforming to Animal,
a different protocol.


287
00:18:43,590 --> 00:18:47,494 line:0
Well, we can get the type of this value,
which we know is some type


288
00:18:47,528 --> 00:18:49,396 line:0
conforming to Animal,


289
00:18:49,429 --> 00:18:51,865 align:center
and Animal has an associated FeedType,


290
00:18:51,899 --> 00:18:54,168 align:center
which conforms to AnimalFeed.


291
00:18:56,703 --> 00:19:00,741 align:center
This type can be used as the base
of the method call grow().


292
00:19:00,774 --> 00:19:04,044 line:0
The grow() method on AnimalFeed
returns a value


293
00:19:04,077 --> 00:19:09,249 line:0
whose type is the nested
associated CropType of AnimalFeed.


294
00:19:09,283 --> 00:19:11,852 line:0
We know that CropType conforms to Crop,


295
00:19:11,885 --> 00:19:13,921 line:0
so I can call harvest() on it.


296
00:19:13,954 --> 00:19:15,889 line:0
But what do I get back?


297
00:19:15,923 --> 00:19:19,426 align:center
harvest() is declared to return
the associated FeedType


298
00:19:19,459 --> 00:19:21,795 line:0
of the Crop protocol.


299
00:19:21,828 --> 00:19:29,236 line:0
In our case, since the base of the call is
(some Animal).FeedType.CropType,


300
00:19:29,269 --> 00:19:32,239 line:0
harvest() will output a value of type


301
00:19:32,272 --> 00:19:37,411 align:center
(some Animal).FeedType.CropType.FeedType.


302
00:19:37,444 --> 00:19:40,347 line:0
Unfortunately, this is the wrong type.


303
00:19:40,380 --> 00:19:45,352 line:0
The eat() method on (some Animal) expects
(some Animal).FeedType,


304
00:19:45,385 --> 00:19:51,158 align:center
and not
(some Animal).FeedType.CropType.FeedType.


305
00:19:51,191 --> 00:19:53,927 line:0
The program is not well-typed.


306
00:19:53,961 --> 00:19:58,765 line:0
These protocol definitions, as written,
do not actually guarantee


307
00:19:58,799 --> 00:20:01,235 align:center
that if we start
with a type of animal feed,


308
00:20:01,268 --> 00:20:04,137 align:center
and then grow and harvest this crop,


309
00:20:04,171 --> 00:20:06,740 line:0
we'll get back
the same type of animal feed


310
00:20:06,773 --> 00:20:10,944 line:0
that we started with,
which is what our animal expects to eat.


311
00:20:10,978 --> 00:20:14,181 line:-2
Another way to think about it
is that these protocol definitions


312
00:20:14,214 --> 00:20:17,251 line:-2
are too general -
they don't accurately model


313
00:20:17.284 --> 00:20:21.455 line:-2 align:center
the desired relationship
between our concrete types.


314
00:20:21,488 --> 00:20:26,293 line:0
To understand why,
let's look at our Hay and Alfalfa types.


315
00:20:26,326 --> 00:20:29,096 line:0
When I grow hay, I get alfalfa,


316
00:20:29,129 --> 00:20:33,066 align:center
and when I harvest alfalfa,
I get hay, and so on.


317
00:20:33,100 --> 00:20:35,636 line:0
Now imagine I'm refactoring my code,


318
00:20:35,669 --> 00:20:40,507 align:center
and I accidentally change the return type
of the harvest() method on Alfalfa


319
00:20:40,541 --> 00:20:43,777 align:center
to return Scratch instead of Hay.


320
00:20:43,810 --> 00:20:46,046 align:center
After this accidental change,


321
00:20:46,079 --> 00:20:49,349 align:center
the concrete types
still satisfy the requirements


322
00:20:49,383 --> 00:20:51,885 align:center
of the AnimalFeed and Crop protocols,


323
00:20:51,919 --> 00:20:56,423 align:center
even though we violate our desired
invariant that growing and harvesting


324
00:20:56,456 --> 00:21:02,062 line:0
a crop produces the same type
of animal feed that we started with.


325
00:21:02,095 --> 00:21:05,632 line:0
Let's look
at the AnimalFeed protocol again.


326
00:21:05,666 --> 00:21:08,435 line:0
the real problem here is that in a sense,


327
00:21:08,468 --> 00:21:12,139 align:center
we have too many
distinct associated types.


328
00:21:12,172 --> 00:21:16,743 line:-2
We need to write down the fact
that two of these associated types


329
00:21:16,777 --> 00:21:19,813 line:-1
are actually the same concrete type.


330
00:21:19,847 --> 00:21:23,417 line:-2
This will prevent
incorrectly-written concrete types


331
00:21:23,450 --> 00:21:26,019 line:-1
from conforming to our protocols;


332
00:21:26.053 --> 00:21:28.555 line:-2 align:center
it will also to give
the feedAnimal() method


333
00:21:28,589 --> 00:21:30,657 line:-1
the guarantee that it needs.


334
00:21:30.691 --> 00:21:34.761 line:-2 align:center
We can express the relationship
between these associated types


335
00:21:34,795 --> 00:21:39,733 line:-2
using a same-type requirement,
written in a 'where' clause.


336
00:21:39,766 --> 00:21:43,737 line:-2
A same-type requirement
expresses a static guarantee


337
00:21:43,770 --> 00:21:47,207 line:-2
that two different,
possibly nested associated types


338
00:21:47,241 --> 00:21:50,477 line:-1
must in fact be the same concrete type.


339
00:21:50,511 --> 00:21:54,281 line:-2
Adding a same-type requirement here
imposes a restriction


340
00:21:54.314 --> 00:21:58.785 line:-2 align:center
on the concrete types that conform
to the AnimalFeed protocol.


341
00:21:58,819 --> 00:22:02,689 align:center
In this same-type requirement here,
we're declaring that


342
00:22:02,723 --> 00:22:09,296 line:0
`Self dot CropType dot FeedType'
is the same type as 'Self'.


343
00:22:09,329 --> 00:22:12,366 line:0
what does this look like in our diagram?


344
00:22:12,399 --> 00:22:15,235 line:0
Well, here is how we can visualize it:


345
00:22:15,269 --> 00:22:19,506 line:0
Each concrete type conforming
to AnimalFeed has a CropType,


346
00:22:19,540 --> 00:22:21,508 line:0
which conforms to Crop.


347
00:22:21,542 --> 00:22:24,945 line:0
However, the FeedType of this CropType,


348
00:22:24,978 --> 00:22:28,615 align:center
is not just some other type
conforming to AnimalFeed,


349
00:22:28,649 --> 00:22:34,588 align:center
it is the same concrete type
as the original AnimalFeed.


350
00:22:34,621 --> 00:22:38,759 line:0
Instead of an infinite tower
of nested associated types,


351
00:22:38,792 --> 00:22:42,429 align:center
I've collapsed all relationships down
to a single pair


352
00:22:42,462 --> 00:22:45,599 line:0
of related associated types.


353
00:22:45,632 --> 00:22:48,135 line:0
What about the 'Crop' protocol?


354
00:22:48,168 --> 00:22:53,440 align:center
Here, the Crop's FeedType
has collapsed down to a pair of types,


355
00:22:53,473 --> 00:22:57,878 align:center
but we still have
one too many associated types.


356
00:22:57,911 --> 00:23:02,182 align:center
We want to say
that the Crop's FeedType's Crop Type


357
00:23:02,216 --> 00:23:06,620 line:0
is the same type as the Crop
that we originally started with.


358
00:23:10,591 --> 00:23:13,260 align:center
Now that these two protocols
have been equipped


359
00:23:13,293 --> 00:23:15,329 line:0
with same-type requirements,


360
00:23:15,362 --> 00:23:19,132 line:0
we can revisit the 'feedAnimal()'
method again.


361
00:23:19,166 --> 00:23:22,803 align:center
We start with the type of some Animal,
as before.


362
00:23:22,836 --> 00:23:25,205 line:0
and we get the animal's feed type,


363
00:23:25,239 --> 00:23:29,309 line:0
which we know conforms
to the AnimalFeed protocol.


364
00:23:29,343 --> 00:23:35,249 align:center
When we grow this crop, we get
some animal's feed type's crop type.


365
00:23:35,282 --> 00:23:37,985 align:center
But now, when we harvest this crop,


366
00:23:38,018 --> 00:23:41,622 align:center
instead of getting yet another
nested associated type,


367
00:23:41,655 --> 00:23:45,392 align:center
we get exactly the feed type
that our animal expects,


368
00:23:45,425 --> 00:23:47,794 align:center
and the happy animal is now guaranteed


369
00:23:47,828 --> 00:23:52,499 align:center
to eat() the correct type of animal feed
that we just grew.


370
00:23:52,533 --> 00:23:57,804 line:-2
Finally, let's look at an associated type
diagram for the Animal protocol,


371
00:23:57,838 --> 00:24:01,175 line:-2
which pulls everything together
we've seen so far.


372
00:24:03,677 --> 00:24:06,480 align:center
Here are the two sets of conforming types:


373
00:24:06,513 --> 00:24:10,184 line:0
first, we have Cow, Hay, and Alfalfa.


374
00:24:10,217 --> 00:24:13,887 line:0
Second, we have Chicken, Scratch
and Millet.


375
00:24:13,921 --> 00:24:18,125 line:0
Notice how our three protocols
precisely model the relationships


376
00:24:18,158 --> 00:24:21,728 align:center
between each set of three concrete types.


377
00:24:21,762 --> 00:24:24,131 line:-1
By understanding your data model,


378
00:24:24,164 --> 00:24:26,300 line:-1
you can use same-type requirements


379
00:24:26,333 --> 00:24:31,872 line:-2
to define equivalences between
these different nested associated types.


380
00:24:31,905 --> 00:24:35,075 line:-2
Generic code can then rely on
these relationships


381
00:24:35,108 --> 00:24:40,013 line:-2
when chaining together multiple calls
to protocol requirements.


382
00:24:40,047 --> 00:24:44,284 line:-2
During this session,
we explored when type erasure is safe,


383
00:24:44,318 --> 00:24:49,556 line:-2
and when we need to be in a context
where type relationships are guaranteed.


384
00:24:49.590 --> 00:24:52.759 line:-2 align:center
Then, we discussed how to strike
the right balance


385
00:24:52,793 --> 00:24:55,495 line:-1
between preserving rich type information


386
00:24:55,529 --> 00:25:00,100 line:-2
and hiding implementation details
using primary associated types,


387
00:25:00.133 --> 00:25:05.939 line:-2 align:center
which can be used with both opaque
result types and existential types.


388
00:25:05,973 --> 00:25:10,410 line:-2
Finally, we saw how to identify
and guarantee type relationships


389
00:25:10.444 --> 00:25:14.314 line:-2 align:center
between sets of concrete types
using same-type requirements


390
00:25:14,348 --> 00:25:18,952 line:-2
across the protocols that represent
those related sets of types.


391
00:25:18,986 --> 00:25:20,888 line:-1
Thank you for joining me.


392
00:25:20,921 --> 00:25:23,590 line:-1
I hope you have a great WWDC.

