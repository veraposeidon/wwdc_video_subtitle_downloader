2
00:00:00.300 --> 00:00:05.339 line:-1 position:50%
♪ instrumental hip hop music ♪


3
00:00:05,339 --> 00:00:09,476 align:right size:2% line:0
♪


4
00:00:09,476 --> 00:00:12,980 line:-1
Hello, and welcome to
"What's new in WKWebView"


5
00:00:12.980 --> 00:00:16.450 line:-1 position:50%
I'm Alex Christensen,
an engineer on the WebKit team.


6
00:00:16.450 --> 00:00:19.653 line:-1 position:50%
We've been busy, and we've added
a lot of new web technology


7
00:00:19.653 --> 00:00:23.223 line:-1 position:50%
for you to use
in your apps this year.


8
00:00:23,223 --> 00:00:25,158 line:-1
Before we start, though,


9
00:00:25.158 --> 00:00:27.494 line:-1 position:50%
let's make sure you are
using the right technology


10
00:00:27.494 --> 00:00:29.830 line:-1 position:50%
for your application.


11
00:00:29.830 --> 00:00:33.467 line:-1 position:50%
If you want a browser-like
experience inside your app,


12
00:00:33.467 --> 00:00:36.003 line:-1 position:50%
and don't need
deep customization,


13
00:00:36,003 --> 00:00:40,974 line:-1
you'll definitely want to
use SFSafariViewController.


14
00:00:40,974 --> 00:00:45,712 line:-1
If your app still uses
the deprecated UIWebView,


15
00:00:45.712 --> 00:00:48.248 line:-1 position:50%
now is the time to migrate
to the faster


16
00:00:48,248 --> 00:00:51,051 line:-1
and more responsive
WKWebView.


17
00:00:51,051 --> 00:00:56,189 line:-1
UIWebView will be removed
in a future release.


18
00:00:56.189 --> 00:00:58.759 line:-1 position:50%
WKWebView is the API to use


19
00:00:58.759 --> 00:01:02.663 line:-1 position:50%
to write an application
that interacts with web content.


20
00:01:02.663 --> 00:01:05.532 line:-1 position:50%
You could be using it
for CSS-based UI


21
00:01:05.532 --> 00:01:09.102 line:-1 position:50%
or writing some of your app
in JavaScript.


22
00:01:09.102 --> 00:01:11.705 line:-1 position:50%
You might be interacting
with your own web content


23
00:01:11.705 --> 00:01:14.274 line:-1 position:50%
using app-bound domains.


24
00:01:14.274 --> 00:01:17.978 line:-1 position:50%
You may also be developing
your own browser.


25
00:01:17,978 --> 00:01:20,213 line:-1
Whatever your application is,


26
00:01:20,213 --> 00:01:22,215 line:-1
we are constantly adding
new capabilities


27
00:01:22.215 --> 00:01:25.786 line:-1 position:50%
to allow you to make
richer web applications.


28
00:01:25.786 --> 00:01:28.622 line:-1 position:50%
The new features available
to WKWebView this year


29
00:01:28.622 --> 00:01:30.624 line:-1 position:50%
come in four categories:


30
00:01:30,624 --> 00:01:33,160 line:-1
new ways to interact
with web content,


31
00:01:33,160 --> 00:01:35,762 line:-1
new capabilities
for content blockers,


32
00:01:35.762 --> 00:01:41.601 line:-1 position:50%
encrypted media,
and use of Remote Web Inspector.


33
00:01:41.601 --> 00:01:44.371 line:-1 position:50%
First, we're going
to cover new APIs


34
00:01:44.371 --> 00:01:47.708 line:-1 position:50%
for interacting
with web content.


35
00:01:47,708 --> 00:01:50,444 line:-1
There are three new ways
your app can interact


36
00:01:50,444 --> 00:01:55,615 line:-1
with web content in iOS 16:
using the full-screen API,


37
00:01:55.615 --> 00:02:01.154 line:-1 position:50%
using new CSS viewport units,
and using find interactions.


38
00:02:01.154 --> 00:02:03.490 line:-1 position:50%
Let's get started
with full screen.


39
00:02:03,490 --> 00:02:04,791 line:-1
For many years now,


40
00:02:04.791 --> 00:02:07.627 line:-1 position:50%
JavaScript has been able
to make HTML elements,


41
00:02:07.627 --> 00:02:11.698 line:-1 position:50%
like videos or canvas games,
full screen in browsers,


42
00:02:11,698 --> 00:02:15,469 line:-1
and now they can do
that in your apps too.


43
00:02:15,469 --> 00:02:19,172 line:-1
Here's what a simple example
looks like on a phone.


44
00:02:19.172 --> 00:02:21.708 line:-1 position:50%
JavaScript can request
full screen,


45
00:02:21,708 --> 00:02:26,113 line:-1
then the user or JavaScript
can exit full screen.


46
00:02:26,113 --> 00:02:27,748 line:-1
All you need to do
in your app


47
00:02:27.748 --> 00:02:32.519 line:-1 position:50%
is set WKPreferences
.isElementFullscreenEnabled


48
00:02:32.519 --> 00:02:37.024 line:-1 position:50%
to true and load web content
that uses full-screen APIs


49
00:02:37.024 --> 00:02:39.893 line:-1 position:50%
like webkitRequestFullscreen.


50
00:02:39.893 --> 00:02:41.595 line:-1 position:50%
It works pretty well
out of the box,


51
00:02:41,595 --> 00:02:44,798 line:-1
but if you'd like to customize
the transitions in your app,


52
00:02:44,798 --> 00:02:49,036 line:-1
you can observe the value
of WKWebView.fullscreenState,


53
00:02:49,036 --> 00:02:52,105 line:-1
which will let your app know
when the web content


54
00:02:52.105 --> 00:02:55.275 line:-1 position:50%
is becoming full screen
or returning.


55
00:02:55.275 --> 00:02:58.412 line:-1 position:50%
And that's all there is to
using WebKit's full-screen APIs


56
00:02:58.412 --> 00:02:59.913 line:-1 position:50%
in your app.


57
00:03:01.248 --> 00:03:04.251 line:-1 position:50%
We also have new CSS units
to allow web content


58
00:03:04,251 --> 00:03:08,221 line:-1
to lay out according
to dynamic viewport sizes.


59
00:03:08.221 --> 00:03:14.861 line:-1 position:50%
These new CSS units include
svh, lvh, dvh, and many others.


60
00:03:14.861 --> 00:03:17.064 line:-1 position:50%
They allow web developers
to modify layout


61
00:03:17,064 --> 00:03:22,102 line:-1
based on the smallest, largest,
and dynamic viewport sizes.


62
00:03:22.102 --> 00:03:24.004 line:-1 position:50%
Let's take a look
at what Safari does


63
00:03:24.004 --> 00:03:28.742 line:-1 position:50%
to get an idea of how
this can be used in your app.


64
00:03:28,742 --> 00:03:31,311 line:0
When you first open
a page in Safari,


65
00:03:31,311 --> 00:03:35,348 line:0
you see the webpage host
and some buttons at the bottom.


66
00:03:35,348 --> 00:03:38,452 line:0
As you scroll,
the viewport increases in size


67
00:03:38,452 --> 00:03:41,621 position:50%
when the buttons slide
out of the way.


68
00:03:41,621 --> 00:03:45,659 position:50%
Svh, lvh, and dvh
provide useful units


69
00:03:45,659 --> 00:03:49,896 position:50%
to measure these different
sizes of the viewport.


70
00:03:49.896 --> 00:03:53.900 line:-1 position:50%
If your app changes the viewport
of your WKWebView,


71
00:03:53.900 --> 00:03:56.536 line:-1 position:50%
then you should inform
WebKit up front


72
00:03:56.536 --> 00:03:59.639 line:-1 position:50%
what the viewport
size ranges are.


73
00:03:59,639 --> 00:04:02,642 line:-1
In Swift, one function call
informs WebKit


74
00:04:02,642 --> 00:04:05,912 line:-1
of the maximum and minimum
edge insets


75
00:04:05.912 --> 00:04:08.715 line:-1 position:50%
to allow this web content
to lay out correctly


76
00:04:08,715 --> 00:04:10,717 line:-1
in your app.


77
00:04:10.717 --> 00:04:13.753 line:-1 position:50%
We are also introducing support
for Find interactions


78
00:04:13,753 --> 00:04:17,824 line:-1
in WKWebView in iOS 16.


79
00:04:17,824 --> 00:04:21,428 line:-1
Many WKWebView applications
load lots of text,


80
00:04:21.428 --> 00:04:24.331 line:-1 position:50%
and users want
to search this text.


81
00:04:24,331 --> 00:04:27,667 line:-1
If you set WKWebView
.findInteractionEnabled


82
00:04:27.667 --> 00:04:28.969 line:-1 position:50%
to true,


83
00:04:28,969 --> 00:04:32,139 line:-1
then your users will be able
to use familiar UI


84
00:04:32.139 --> 00:04:36.409 line:-1 position:50%
and shortcuts like Command-F
to search the text


85
00:04:36,409 --> 00:04:38,845 line:-1
on the open page.


86
00:04:38,845 --> 00:04:40,947 line:0
That one line of code
is all you need


87
00:04:40,947 --> 00:04:42,883 position:50%
to turn on the feature,


88
00:04:42,883 --> 00:04:46,286 position:50%
but you can also access
the UIFindInteraction object


89
00:04:46,286 --> 00:04:48,889 line:0
through WKWebView
.findInteraction


90
00:04:48,889 --> 00:04:52,058 line:0
to do things like present
and dismiss the Find panel,


91
00:04:52,058 --> 00:04:55,929 position:50%
or move to the next or previous
results programmatically.


92
00:04:55,929 --> 00:04:59,132 line:0
Try it out and see
what it can do in your app.


93
00:04:59.132 --> 00:05:00.634 line:-1 position:50%
For content blocking,


94
00:05:00,634 --> 00:05:04,738 line:-1
we added a new capability
to WKContentRuleList,


95
00:05:04,738 --> 00:05:08,975 line:-1
the API used to implement
content blockers in Safari.


96
00:05:08.975 --> 00:05:14.147 line:-1 position:50%
Here, we have Wikipedia embedded
in an iframe on an example site.


97
00:05:14,147 --> 00:05:17,651 position:50%
Previously, you could run
regular expressions on the URL


98
00:05:17,651 --> 00:05:20,754 line:0
being requested
and the top-frame URL,


99
00:05:20,754 --> 00:05:24,758 line:0
to decide whether to block
a load or perform other actions.


100
00:05:24,758 --> 00:05:26,193 position:50%
Sometimes, though,


101
00:05:26,193 --> 00:05:29,029 position:50%
what you really wanted
was for a certain rule


102
00:05:29,029 --> 00:05:33,934 line:0
to apply only to loads
inside certain iframes.


103
00:05:33,934 --> 00:05:36,469 line:-1
Now you can run
regular expressions


104
00:05:36,469 --> 00:05:39,339 line:-1
on the URL of the current frame.


105
00:05:39,339 --> 00:05:41,908 line:-1
We are going to write a rule
to block images


106
00:05:41,908 --> 00:05:47,147 line:-1
but only from frames
containing Wikipedia.


107
00:05:47,147 --> 00:05:48,215 line:-1
To do this,


108
00:05:48,215 --> 00:05:52,686 line:-1
we add if-frame-url
to the JSON like this.


109
00:05:52.686 --> 00:05:55.455 line:-1 position:50%
You then compile the JSON
as you have before


110
00:05:55.455 --> 00:05:58.959 line:-1 position:50%
and apply it to
a WKWebViewConfiguration.


111
00:05:58,959 --> 00:06:01,027 position:50%
The regular expression then runs


112
00:06:01,027 --> 00:06:06,199 position:50%
on the URL of the frame
that is making the request.


113
00:06:06.199 --> 00:06:10.203 line:-1 position:50%
This blocking rule will now only
apply to requests from frames


114
00:06:10.203 --> 00:06:14.541 line:-1 position:50%
that match the if-frame-url
regular expression.


115
00:06:14,541 --> 00:06:16,910 line:-1
Here we see that it has
blocked the image loads


116
00:06:16,910 --> 00:06:20,347 line:-1
inside the Wikipedia iframe.


117
00:06:20,347 --> 00:06:23,450 line:-1
If you're serious about
implementing content blockers,


118
00:06:23,450 --> 00:06:28,188 line:-1
you should check out the WWDC
session about Safari Extensions


119
00:06:28.188 --> 00:06:30.323 line:-1 position:50%
which includes some
new possibilities


120
00:06:30.323 --> 00:06:33.059 line:-1 position:50%
in declarativeNetRequest.


121
00:06:33.059 --> 00:06:36.796 line:-1 position:50%
Another new capability
in WKWebView in iPadOS 16


122
00:06:36,796 --> 00:06:38,898 line:-1
is encrypted media.


123
00:06:38,898 --> 00:06:42,202 line:-1
If you have content that uses
the Encrypted Media Extensions


124
00:06:42,202 --> 00:06:45,305 line:-1
and Media Source
Extensions APIs,


125
00:06:45.305 --> 00:06:49.276 line:-1 position:50%
you can now use it
in your apps on iPadOS.


126
00:06:49,276 --> 00:06:53,480 line:-1
This means that if you have
premium content like AppleTV+,


127
00:06:53,480 --> 00:06:57,684 line:-1
it will work on iPadOS
like it has in macOS.


128
00:06:57,684 --> 00:07:00,887 line:-1
If your app has
the web-browser entitlement,


129
00:07:00.887 --> 00:07:03.223 line:-1 position:50%
then Remote Web Inspector
will just work


130
00:07:03.223 --> 00:07:07.260 line:-1 position:50%
with your production app
like it has on Safari on iOS;


131
00:07:07.260 --> 00:07:11.931 line:-1 position:50%
no need to add
or change any code.


132
00:07:11.931 --> 00:07:15.001 line:-1 position:50%
To enable Web Inspector
in third-party browsers,


133
00:07:15.001 --> 00:07:17.671 line:-1 position:50%
the process is the same
as with Safari.


134
00:07:17.671 --> 00:07:20.006 line:-1 position:50%
You'll first need to turn on
Web Inspector


135
00:07:20.006 --> 00:07:23.276 line:-1 position:50%
in Safari settings
on the iOS device,


136
00:07:23,276 --> 00:07:26,846 line:-1
then enable the Develop menu
in Advanced Settings


137
00:07:26,846 --> 00:07:29,416 line:-1
in Safari on your Mac.


138
00:07:29,416 --> 00:07:33,019 line:-1
Attach your phone to the Mac
and look for your device


139
00:07:33.019 --> 00:07:36.489 line:-1 position:50%
in Safari's Develop menu
on macOS.


140
00:07:36.489 --> 00:07:40.060 line:-1 position:50%
Web Inspector has many tools
for debugging web content.


141
00:07:40.060 --> 00:07:42.062 line:-1 position:50%
You can explore the DOM,


142
00:07:42,062 --> 00:07:45,198 line:-1
run and debug
JavaScript execution,


143
00:07:45,198 --> 00:07:48,702 line:-1
view timelines
of your page-loading, and more.


144
00:07:48,702 --> 00:07:50,370 line:-1
If you have a website,


145
00:07:50,370 --> 00:07:53,106 line:-1
you can now inspect
and debug it yourself


146
00:07:53,106 --> 00:07:55,241 line:-1
in third-party browsers
on iOS,


147
00:07:55.241 --> 00:07:57.844 line:-1 position:50%
using Remote Web Inspector.


148
00:07:57,844 --> 00:08:00,146 line:-1
Those are the main
new API additions


149
00:08:00,146 --> 00:08:02,582 line:-1
to WKWebView this year.


150
00:08:02.582 --> 00:08:06.252 line:-1 position:50%
Try them out and see
what they can do in your apps.


151
00:08:06,252 --> 00:08:10,056 line:-1
Remember to use the best APIs
for your application,


152
00:08:10.056 --> 00:08:13.360 line:-1 position:50%
and if there's something you're
unable to do with WKWebView,


153
00:08:13.360 --> 00:08:17.364 line:-1 position:50%
please file a feature request
using Feedback Assistant.


154
00:08:17.364 --> 00:08:19.399 line:-1 position:50%
We read the feature requests
we get


155
00:08:19,399 --> 00:08:23,770 line:-1
and prioritize our development
based on your input.


156
00:08:23,770 --> 00:08:24,938 position:50%
Don't forget to check out


157
00:08:24,938 --> 00:08:27,440 position:50%
"What's new in Safari
Web Extensions”,


158
00:08:27,440 --> 00:08:30,343 line:0
and for more additions
to the web platform,


159
00:08:30,343 --> 00:08:31,711 line:0
remember to check out


160
00:08:31,711 --> 00:08:34,447 position:50%
"What's new in Safari
and WebKit”.


161
00:08:34,447 --> 00:08:37,684 line:-1
Thanks for watching,
and enjoy the rest of WWDC.


162
00:08:37,684 --> 00:08:41,921 line:0 size:2% align:right
♪ ♪

