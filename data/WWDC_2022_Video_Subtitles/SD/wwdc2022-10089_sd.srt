2
00:00:01,468 --> 00:00:07,474 line:-1
[spacey music]


3
00:00:09,877 --> 00:00:11,912 line:-1
Conrad: I'm Conrad Carlen, and today,


4
00:00:11.945 --> 00:00:14.481 line:-2 align:center
I'll be talking about what's new
in PDFKit.


5
00:00:14,515 --> 00:00:15,883 line:-1
Here's our agenda.


6
00:00:15,916 --> 00:00:19,520 line:-1
First a quick review of PDFKit,


7
00:00:19,553 --> 00:00:21,455 line:-1
and then, look at what's new,


8
00:00:21.488 --> 00:00:24.558 line:-1 align:center
including Live text and forms,


9
00:00:24.591 --> 00:00:27.628 line:-1 align:center
a new way to make PDF pages from images,


10
00:00:27.661 --> 00:00:30.831 line:-1 align:center
and, finally, overlay views.


11
00:00:30.864 --> 00:00:33.567 line:-2 align:center
Let's start with a quick refresher
on how PDFKit works.


12
00:00:34.501 --> 00:00:38.539 line:-2 align:center
PDFKit is a full-featured framework
that helps your app view,


13
00:00:38.572 --> 00:00:41.041 line:-1 align:center
edit, and write PDF files.


14
00:00:41,074 --> 00:00:44,978 line:-2
It's available on iOS, macOS,
and Mac Catalyst,


15
00:00:45,012 --> 00:00:49,616 line:-2
and it can also be used in SwiftUI
by way of UIViewRepresentable,


16
00:00:49,650 --> 00:00:54,888 line:-2
a wrapper that lets you integrate
UI views into your app.


17
00:00:54.922 --> 00:00:58.592 line:-2 align:center
PDFKit consists of 4 core classes
that cover most of the functionality


18
00:00:58.625 --> 00:01:00.694 line:-1 align:center
you'll need in your app.


19
00:01:00,727 --> 00:01:03,430 line:-2
PDFView is the widget
that you include in your layout


20
00:01:03.463 --> 00:01:05.966 line:-1 align:center
using SwiftUI or Interface Builder.


21
00:01:05,999 --> 00:01:09,670 line:-2
It displays the content of a PDF document
and lets people navigate,


22
00:01:09,703 --> 00:01:12,372 line:-2
set zoom level,
and copy text to the Pasteboard.


23
00:01:13.507 --> 00:01:16.710 line:-1 align:center
PDFDocument represents a PDF file.


24
00:01:16.743 --> 00:01:20.681 line:-2 align:center
It's not common to subclass PDFDocument,
but you will always use one.


25
00:01:20,714 --> 00:01:24,518 line:-2
It's the root of the PDF object graph,
or the trunk of the tree.


26
00:01:24,551 --> 00:01:26,720 line:-2
You can't have a tree
without one of these.


27
00:01:28,455 --> 00:01:32,192 line:-2
Each document contains one
or more PDFPage objects.


28
00:01:32.226 --> 00:01:36.263 line:-2 align:center
Pages render content and store resources
like fonts and images


29
00:01:36,296 --> 00:01:37,631 line:-1
that are unique to that page.


30
00:01:38,799 --> 00:01:41,969 align:center
At the leaves of our object graph
are PDFAnnotations.


31
00:01:42,002 --> 00:01:43,537 line:0
These are optional.


32
00:01:43,570 --> 00:01:46,306 line:0
Whereas the content of a PDFPage
is not intended to be edited,


33
00:01:46,340 --> 00:01:49,610 align:center
annotations are interactive
by nature and often editable.


34
00:01:50,177 --> 00:01:53,947 align:center
Each of these objects will play a role
in what I'll cover today.


35
00:01:53,981 --> 00:01:55,949 line:0
To learn more about the fundamentals
of PDFKit,


36
00:01:55,983 --> 00:01:59,953 line:0
check out the great presentation
"Introducing PDFKit" in the link below.


37
00:02:01,989 --> 00:02:07,160 line:-2
Now, let's talk about new features
introduced in iOS 16 and macOS Ventura.


38
00:02:08.228 --> 00:02:11.131 line:-1 align:center
PDFKit now supports Live Text.


39
00:02:11,164 --> 00:02:13,000 line:-2
It's different than in Photos,
where the text


40
00:02:13,033 --> 00:02:16,703 line:-2
is often a small amount
that you can tap to copy.


41
00:02:16,737 --> 00:02:21,275 line:-2
Unlike with photos, with a PDF,
if you see text, it generally is text,


42
00:02:21.308 --> 00:02:25.312 line:-2 align:center
and people expect it to behave as such
without doing anything special.


43
00:02:25.345 --> 00:02:27.614 line:-2 align:center
Now, with Live Text,
you can select and search


44
00:02:27.648 --> 00:02:30.517 line:-1 align:center
text in a PDF document like this one.


45
00:02:30.551 --> 00:02:32.886 line:-2 align:center
It's just a scanned bitmap,
with no text at all.


46
00:02:34,188 --> 00:02:36,890 line:-1
Of course, PDFs can have many pages.


47
00:02:36,924 --> 00:02:40,594 line:-2
You wouldn't want to grind through OCR
on all the pages of a PDF document


48
00:02:40.627 --> 00:02:41.895 line:-1 align:center
when you open it,


49
00:02:41,929 --> 00:02:45,566 line:-2
so PDFKit does it on demand,
as you interact with each page,


50
00:02:45,599 --> 00:02:47,534 line:-1
if you interact with it.


51
00:02:47.568 --> 00:02:51.605 line:-2 align:center
OCR is done in place, so there's no need
to make a copy of the document.


52
00:02:52,472 --> 00:02:55,209 line:-2
And, if you choose to save text
for the whole document,


53
00:02:55,242 --> 00:02:56,877 line:-1
there's an option to do so when saving.


54
00:02:58.478 --> 00:03:02.783 line:-2 align:center
In addition to live text,
PDFKit has improved form handling.


55
00:03:02,816 --> 00:03:05,719 line:-2
Documents that contain form fields
are automatically recognized,


56
00:03:05,752 --> 00:03:08,522 line:-2
even if they don't contain
built-in text fields.


57
00:03:08,555 --> 00:03:11,191 line:-2
You can tab through these text fields
and enter text,


58
00:03:11.225 --> 00:03:12.526 line:-1 align:center
just like you would expect.


59
00:03:14.394 --> 00:03:18.365 line:-2 align:center
Next, let's talk about a new API
for creating PDF pages from images.


60
00:03:20.567 --> 00:03:24.605 line:-2 align:center
In iOS 16 and macOS Ventura,
there's a new, flexible API


61
00:03:24,638 --> 00:03:28,041 line:-2
that lets your app create PDF pages
using images as inputs.


62
00:03:28,809 --> 00:03:32,012 line:-1
Your app supplies images using CGImageRef.


63
00:03:32,045 --> 00:03:35,549 line:-2
PDFKit takes the CGImageRef
that you provide and compresses it


64
00:03:35,582 --> 00:03:37,518 line:-1
using high-quality JPEG encoding.


65
00:03:38.285 --> 00:03:41.455 line:-2 align:center
Because CGImageRef is
a native data type in CoreGraphics,


66
00:03:41.488 --> 00:03:43.657 line:-1 align:center
additional conversions are unnecessary.


67
00:03:44,725 --> 00:03:48,161 line:-2
There are several options that help you
handle the most common cases.


68
00:03:49,463 --> 00:03:52,599 line:-1
MediaBox specifies the size of the page.


69
00:03:52.633 --> 00:03:56.937 line:-2 align:center
You can choose to fit the image exactly,
or choose a paper size, like Letter.


70
00:03:58.372 --> 00:04:02.009 line:-2 align:center
Rotation lets you specify
portrait or landscape orientation.


71
00:04:03.210 --> 00:04:04.444 line:-1 align:center
UpscaleIfSmaller.


72
00:04:04,478 --> 00:04:07,080 line:-2
By default,
if the image is larger than the MediaBox,


73
00:04:07.114 --> 00:04:09.216 line:-1 align:center
the image is downscaled to fit.


74
00:04:09,249 --> 00:04:12,452 line:-2
If UpscaleIfSmaller is specified,
that still applies,


75
00:04:12,486 --> 00:04:16,456 line:-2
but, if the image is small,
it will be upscaled to fill the page.


76
00:04:18.292 --> 00:04:21.562 line:-2 align:center
And now, to answer a question
that many of you have asked--


77
00:04:21,595 --> 00:04:24,865 line:-2
"How can I draw on PDF pages
using PencilKit?"--


78
00:04:24,898 --> 00:04:27,301 line:-1
the answer is to use an overlay view.


79
00:04:28.535 --> 00:04:31.538 line:-2 align:center
In the past, the only way to do
additional drawing on PDFs


80
00:04:31.572 --> 00:04:34.842 line:-2 align:center
was to subclass PDFPage
and override the drawing method,


81
00:04:34,875 --> 00:04:37,678 line:-1
or by using custom PDF annotations.


82
00:04:37.711 --> 00:04:41.615 line:-2 align:center
But starting in iOS 16 and macOS Ventura,
it's now possible


83
00:04:41.648 --> 00:04:44.952 line:-2 align:center
to overlay your own view
on top of each PDF page.


84
00:04:44,985 --> 00:04:47,988 line:-2
This allows your app to create
live, fully interactive views


85
00:04:48,021 --> 00:04:49,756 line:-1
that appear on top of PDF pages.


86
00:04:50,557 --> 00:04:53,961 line:-2
Here are the 3 things you need
to know about overlaying views.


87
00:04:54,695 --> 00:04:58,265 line:-2
First, you'll use a new protocol
to install your overlay view


88
00:04:58.298 --> 00:04:59.733 line:-1 align:center
on a PDF page.


89
00:05:00,934 --> 00:05:05,339 line:-2
When it comes time to save, you'll need
to incorporate your content into the PDF.


90
00:05:06,306 --> 00:05:09,576 line:-2
And, speaking of saving, we'll cover
some best practices


91
00:05:09,610 --> 00:05:11,311 line:-1
when saving a PDF document.


92
00:05:13,280 --> 00:05:17,885 line:-2
Installing overlay views
on PDF Pages is straightforward.


93
00:05:17.918 --> 00:05:21.121 line:-2 align:center
Because PDFs can contain hundreds,
if not thousands, of pages,


94
00:05:21,154 --> 00:05:25,792 line:-2
there's no way you want to create views
for all of those pages when opening a PDF.


95
00:05:25,826 --> 00:05:28,562 line:-2
And what if the user scrolls
back and forth rapidly?


96
00:05:28,595 --> 00:05:30,464 line:-1
How do you know when to create your views?


97
00:05:31.732 --> 00:05:35.869 line:-2 align:center
Fortunately, PDFKit is already designed
to intelligently prepare content


98
00:05:35.903 --> 00:05:38.238 line:-1 align:center
before people scroll pages into view.


99
00:05:38.272 --> 00:05:41.341 line:-2 align:center
So it knows best
when to ask for an overlay view.


100
00:05:41,375 --> 00:05:43,777 line:-2
Your app just needs to respond
to its requests


101
00:05:43.810 --> 00:05:45.546 line:-1 align:center
that are made through the new protocol.


102
00:05:47,881 --> 00:05:51,685 line:-2
PDFPageOverlayViewProvider
is the new protocol.


103
00:05:51,718 --> 00:05:56,924 line:-2
By the way, PDFKitPlatformView is just
a define of UIView or NSView,


104
00:05:56,957 --> 00:05:59,593 line:-1
depending on the platform.


105
00:05:59,626 --> 00:06:03,730 line:-2
The most important method you need
to implement is overlayViewForPage.


106
00:06:04,398 --> 00:06:07,835 line:-2
Simply provide an instance
of your view, and PDFKit will size it


107
00:06:07,868 --> 00:06:10,070 line:-1
by applying the appropriate constraints.


108
00:06:10.103 --> 00:06:13.173 line:-2 align:center
It will also rotate it
if the page has a non-zero rotation.


109
00:06:14,641 --> 00:06:16,643 line:-1
The next 2 methods are optional.


110
00:06:16.677 --> 00:06:20.414 line:-2 align:center
willDisplayOverlayView can be used
to install your own gesture handlers,


111
00:06:20,447 --> 00:06:23,917 line:-2
or to set up failure relationships
with those of PDFKit.


112
00:06:25.619 --> 00:06:30.224 line:-2 align:center
willEndDisplayingOverlayView is called
when PDFKit is done with your view,


113
00:06:30.257 --> 00:06:32.559 line:-2 align:center
likely because
the page scrolled out of view.


114
00:06:32.593 --> 00:06:37.431 line:-2 align:center
You can release your view here, but there
is another important use for this method.


115
00:06:37,464 --> 00:06:40,968 line:-2
Assuming your view has some data
to represent what it's drawing,


116
00:06:41,001 --> 00:06:44,671 line:-2
you can use this method
to get that data and set it aside.


117
00:06:44,705 --> 00:06:47,474 line:-2
We'll do that in
our example with PencilKit,


118
00:06:47.508 --> 00:06:49.977 line:-2 align:center
but, if your view data lives
somewhere else,


119
00:06:50,010 --> 00:06:51,612 line:-1
you won't need to implement this.


120
00:06:53.380 --> 00:06:57.150 line:-2 align:center
In the example, this is the class
we're using as the provider.


121
00:06:57,184 --> 00:07:01,154 line:-2
It implements
the PDFPageOverlayViewProvider protocol.


122
00:07:01,188 --> 00:07:05,392 line:-2
This is iOS, so the PDFKitPlatformView
is a UIView.


123
00:07:05,425 --> 00:07:09,029 line:-2
It uses a map
to go from a PDFPage to a UIView.


124
00:07:09,930 --> 00:07:12,132 line:-1
Here are the placeholder protocol methods.


125
00:07:12,165 --> 00:07:15,169 line:-1
Next, lets look at the implementations.


126
00:07:15,202 --> 00:07:18,238 line:-2
overlayViewForPage checks
its pageToView map


127
00:07:18,272 --> 00:07:20,908 line:-2
to see if it's already made a view
for the given page.


128
00:07:20,941 --> 00:07:23,010 line:-1
If not, it creates a new view.


129
00:07:23.043 --> 00:07:25.679 line:-2 align:center
In either case, we get the drawing
from the page


130
00:07:25.712 --> 00:07:28.182 line:-1 align:center
and set that on the canvas view.


131
00:07:28.215 --> 00:07:32.252 line:-2 align:center
In these examples,
I'm using a subclass of PDFPage.


132
00:07:32.286 --> 00:07:34.521 line:-2 align:center
All it does is
to add a "drawing" property.


133
00:07:37,691 --> 00:07:42,196 line:-2
And now, let's focus on the next method:
WillEndDisplayingOverlay.


134
00:07:44,264 --> 00:07:46,466 line:-1
willEndDisplayingOverlayView is simple.


135
00:07:46,500 --> 00:07:51,939 line:-2
It gets the drawing from the view
and stores it on our custom page class.


136
00:07:51,972 --> 00:07:54,408 line:-2
Now that we've done that,
let's see it in action.


137
00:07:56.076 --> 00:07:59.713 line:-2 align:center
Normally, around this time off the year,
I would be in Maine, fishing,


138
00:07:59.746 --> 00:08:01.982 line:-1 align:center
but instead, I'm here at WWDC,


139
00:08:02,015 --> 00:08:04,618 line:-2
so another person is taking my place
on the trip,


140
00:08:04,651 --> 00:08:07,521 line:-2
and I'm going to show him
some of my favorite spots.


141
00:08:07.554 --> 00:08:09.723 line:-1 align:center
I'll be doing that with this app,


142
00:08:09,756 --> 00:08:12,159 line:-1
which uses PencilKit in an overlay view.


143
00:08:12,793 --> 00:08:16,129 line:-2
This app consists of the code we just saw
and little else.


144
00:08:16.163 --> 00:08:21.001 line:-2 align:center
The entirety of the code to get
overlay views onscreen is about 30 lines!


145
00:08:21,034 --> 00:08:24,972 line:-2
So, Grand Lake Stream.
This is the dam pool.


146
00:08:25.005 --> 00:08:28.675 line:-2 align:center
There are always lots of fish in there.
It's where most of the action is.


147
00:08:28.709 --> 00:08:30.811 line:-1 align:center
You can get to the dam pool


148
00:08:30.844 --> 00:08:33.647 line:-2 align:center
by taking this trail down
through the woods and then fishing.


149
00:08:33.680 --> 00:08:35.449 line:-1 align:center
You can fish all of that stuff,


150
00:08:35,482 --> 00:08:40,053 line:-2
or you can take this road,
go over the dam,


151
00:08:40.087 --> 00:08:41.522 line:-1 align:center
and down around through here.


152
00:08:41,555 --> 00:08:43,857 line:-1
From there, you can fish up into here,


153
00:08:43.891 --> 00:08:46.326 line:-1 align:center
go around the island, down into here,


154
00:08:46.360 --> 00:08:49.763 line:-2 align:center
but whatever you do,
don't go past here.


155
00:08:49,796 --> 00:08:52,599 line:-1
The water gets deep and fast.


156
00:08:52,633 --> 00:08:56,670 line:-1
Avoid that and come down here,


157
00:08:56.703 --> 00:08:58.572 line:-1 align:center
to the hatchery.


158
00:08:58.605 --> 00:09:02.009 line:-1 align:center
Walk down beside the hatchery


159
00:09:02,042 --> 00:09:04,578 line:-1
and enter this pool here.


160
00:09:04,611 --> 00:09:06,580 line:-1
You can cast all around through here


161
00:09:06,613 --> 00:09:09,283 line:-2
This is a great spot.
I always catch fish here.


162
00:09:10,317 --> 00:09:14,588 line:-2
All right, now that we have some marks
on the page,


163
00:09:14,621 --> 00:09:16,423 line:-1
let's exercise zooming and scrolling.


164
00:09:17,891 --> 00:09:19,059 line:-1
See how responsive it is?


165
00:09:25,299 --> 00:09:26,233 line:-1
And there we have it.


166
00:09:26,266 --> 00:09:28,235 line:-1
Overlay views in PDFKit.


167
00:09:28.268 --> 00:09:31.738 line:-2 align:center
So, now that you have these sketches,
how do you save them?


168
00:09:31.772 --> 00:09:34.441 line:-2 align:center
We'll use the PDFAnnotation class
to do this.


169
00:09:34,474 --> 00:09:37,144 line:-2
There are 2 things we want to achieve when
saving:


170
00:09:37,177 --> 00:09:39,379 line:-1
We want to match the onscreen appearance


171
00:09:39.413 --> 00:09:40.848 line:-1 align:center
with high fidelity,


172
00:09:40.881 --> 00:09:43.217 line:-1 align:center
and we want to do round-trip editing.


173
00:09:43.250 --> 00:09:47.554 line:-2 align:center
PDF annotations have some features
that will facilitate this.


174
00:09:47,588 --> 00:09:49,590 line:-2
PDF annotations can have an
"appearance stream,"


175
00:09:49,623 --> 00:09:52,526 line:-1
which is a stream of PDF drawing commands.


176
00:09:52,559 --> 00:09:55,195 line:-2
Nearly anything that you can draw
using Quartz2D


177
00:09:55.229 --> 00:09:57.731 line:-1 align:center
can be recorded in an appearance stream.


178
00:09:57,764 --> 00:10:02,102 line:-2
Anything else can be rendered
into an image, and that can be recorded.


179
00:10:02,135 --> 00:10:03,904 line:-1
That's how we do it if we're using Metal.


180
00:10:04.771 --> 00:10:07.074 line:-1 align:center
And, since it's recorded as PDF drawing,


181
00:10:07.107 --> 00:10:10.043 line:-2 align:center
it will look identical in Adobe Reader,
Chrome, etc.


182
00:10:11,378 --> 00:10:14,915 line:-2
PDF annotations are stored
as dictionaries in a PDF document.


183
00:10:14,948 --> 00:10:18,685 line:-2
That means we can also store custom data
in private key/value pairs.


184
00:10:19.653 --> 00:10:22.756 line:-1 align:center
So let's see what the code looks like.


185
00:10:22,789 --> 00:10:26,360 line:-2
Start by creating a subclass
of PDFAnnotation.


186
00:10:26,393 --> 00:10:28,795 line:-2
We do this in order to override
the draw() method.


187
00:10:29.596 --> 00:10:32.766 line:-2 align:center
PDFKit will call this method when it saves
the appearance stream


188
00:10:32.799 --> 00:10:34.434 line:-1 align:center
that I mentioned on the last slide.


189
00:10:36,336 --> 00:10:39,640 line:-2
To save our document, we override
UIDocument's contents().


190
00:10:39,673 --> 00:10:43,610 line:-2
Here is an overview of the function,
for context later.


191
00:10:43,644 --> 00:10:47,147 line:-2
We loop through all pages
of the PDFDocument.


192
00:10:47.181 --> 00:10:49.316 line:-1 align:center
We'll flesh out the loop next.


193
00:10:51,084 --> 00:10:53,253 line:-1
We do the following for each page:


194
00:10:53,287 --> 00:10:57,090 line:-1
create an annotation of our custom class;


195
00:10:57.124 --> 00:11:00.527 line:-1 align:center
encode our drawing into data;


196
00:11:00.561 --> 00:11:02.129 line:-1 align:center
add the data to our annotation.


197
00:11:02,162 --> 00:11:06,300 line:-2
Next time, when we open this document,
we can use value:forAnnotationKey


198
00:11:06,333 --> 00:11:08,235 line:-1
to read back the stored drawing data


199
00:11:08.268 --> 00:11:10.003 line:-1 align:center
and put that into our overlay view.


200
00:11:11.238 --> 00:11:14.174 line:-1 align:center
Finally, add the annotation to the page.


201
00:11:15,075 --> 00:11:16,944 line:-1
Back to our contents() override.


202
00:11:16,977 --> 00:11:20,881 line:-2
Now that we have added annotations
to our pages,


203
00:11:20.914 --> 00:11:25.018 line:-2 align:center
We use PDFDocument's dataRepresentation()
and return the result.


204
00:11:26,153 --> 00:11:28,589 line:-2
When your content
is saved as an annotation,


205
00:11:28.622 --> 00:11:31.892 line:-2 align:center
a recipient of the document can move it,
resize it, or delete it.


206
00:11:31.925 --> 00:11:33.260 line:-1 align:center
Often, that's what you want.


207
00:11:33,293 --> 00:11:38,232 line:-2
But sometimes, you want your annotations
to be "burned in," as part of the page.


208
00:11:38.265 --> 00:11:42.970 line:-2 align:center
There is a new PDFDocumentWriteOption
in iOS 16 and macOS Ventura


209
00:11:43,003 --> 00:11:44,404 line:-1
that makes this easy.


210
00:11:44.438 --> 00:11:47.274 line:-1 align:center
Just add burnInAnnotationsOption = true


211
00:11:47,307 --> 00:11:49,142 line:-1
to the save options, and that does it.


212
00:11:50,544 --> 00:11:52,779 line:-2
Speaking of PDF writing options,
there are a few


213
00:11:52.813 --> 00:11:56.717 line:-2 align:center
that have been made available
in iOS 16 and macOS Ventura.


214
00:11:56,750 --> 00:11:58,418 line:-1
Let's look at them.


215
00:11:58.452 --> 00:12:01.488 line:-2 align:center
CoreGraphics has always strived
to save images in PDFs


216
00:12:01.522 --> 00:12:03.423 line:-1 align:center
with maximum fidelity,


217
00:12:03,457 --> 00:12:07,294 line:-2
so images are saved at full resolution,
with lossless compression.


218
00:12:07,327 --> 00:12:10,898 line:-2
That's great if the PDF will be printed
on a large-format printer.


219
00:12:10,931 --> 00:12:13,634 line:-2
More likely, though,
it will be displayed on screen,


220
00:12:13,667 --> 00:12:18,005 line:-2
and all of that high-fidelity image data
will result in a file that's very large.


221
00:12:18,038 --> 00:12:20,807 line:-2
To address that, I introduce
the next two options.


222
00:12:21.942 --> 00:12:25.379 line:-2 align:center
saveAllImagesAsJPEG
does just what it says.


223
00:12:25,412 --> 00:12:28,015 line:-2
No matter how the image was created,
it will be saved


224
00:12:28,048 --> 00:12:30,150 line:-1
with JPEG encoding in the PDF.


225
00:12:31,351 --> 00:12:34,154 line:-2
optimizeImagesForScreen
will downsample images


226
00:12:34,188 --> 00:12:37,057 line:-1
to a maximum of HiDPI screen resolution.


227
00:12:37.090 --> 00:12:39.159 line:-1 align:center
These two options may be used together.


228
00:12:41,428 --> 00:12:44,665 line:-2
createLinearizedPDF will create
a special kind of PDF


229
00:12:44.698 --> 00:12:46.600 line:-1 align:center
that's optimized for the internet.


230
00:12:46,633 --> 00:12:50,971 line:-2
The PDF format, as originally designed
right before the Internet came along,


231
00:12:51.004 --> 00:12:53.207 line:-1 align:center
is read from the end of the file.


232
00:12:53,240 --> 00:12:55,876 line:-2
That means the entirety of it needs
to be downloaded first


233
00:12:55.909 --> 00:12:57.911 line:-1 align:center
before anything is displayed.


234
00:12:57.945 --> 00:13:01.415 line:-2 align:center
A linearized PDF has everything
needed to display the first page


235
00:13:01,448 --> 00:13:03,450 line:-1
at the beginning of the file,


236
00:13:03.483 --> 00:13:05.419 line:-1 align:center
so a web browser can show that quickly


237
00:13:05.452 --> 00:13:06.920 line:-1 align:center
while the rest of it is loaded.


238
00:13:08,722 --> 00:13:12,059 line:-2
You can pass these options
to PDFDocument's dataRepresentation


239
00:13:12.092 --> 00:13:14.394 line:-1 align:center
or writeToURL methods.


240
00:13:14.428 --> 00:13:18.131 line:-2 align:center
And there we have it.
PDFKit is powerful, yet easy to use,


241
00:13:18,165 --> 00:13:21,902 line:-2
used by many of your apps today on iOS
and macOS,


242
00:13:21,935 --> 00:13:25,239 line:-2
and now with new features for iOS 16 and
macOS Ventura.


243
00:13:25,272 --> 00:13:27,307 line:-1
I'm stoked to see what you do with them!


244
00:13:28,642 --> 00:13:30,511 line:-2
To learn more,
check out the sessions below


245
00:13:30.544 --> 00:13:32.012 line:-1 align:center
for additional information.


246
00:13:32.045 --> 00:13:33.146 line:-1 align:center
Thank you for watching!


247
00:13:33,180 --> 00:13:36,183 line:-1
[spacey music]

