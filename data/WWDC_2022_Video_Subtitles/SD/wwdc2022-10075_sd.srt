2
00:00:00.000 --> 00:00:03.036 line:-1 position:50%
♪ instrumental hip hop music ♪


3
00:00:03,036 --> 00:00:09,610 position:90% align:right line:0
♪


4
00:00:09.610 --> 00:00:12.045 line:-1 position:50%
Welcome to
"Use SwiftUI with AppKit."


5
00:00:12,045 --> 00:00:16,350 line:-1
I'm Ian, an engineer
working on Shortcuts.


6
00:00:16,350 --> 00:00:20,120 line:-1
In macOS Monterey,
Shortcuts came to macOS.


7
00:00:20,120 --> 00:00:23,757 line:-1
Shortcuts uses a lot
of SwiftUI on the Mac.


8
00:00:23,757 --> 00:00:26,760 line:-1
SwiftUI helps customize
the experience for the platform,


9
00:00:26,760 --> 00:00:28,862 line:-1
while sharing common views
with the apps


10
00:00:28.862 --> 00:00:31.398 line:-1 position:50%
on iOS and watchOS.


11
00:00:31.398 --> 00:00:33.333 line:-1 position:50%
In this video, I'm going to show


12
00:00:33,333 --> 00:00:36,703 line:-1
how you can start adopting
SwiftUI in your Mac app,


13
00:00:36.703 --> 00:00:40.707 line:-1 position:50%
by looking at some examples
from Shortcuts.


14
00:00:40.707 --> 00:00:42.542 line:-1 position:50%
First, I'll show you an example


15
00:00:42.542 --> 00:00:45.512 line:-1 position:50%
of how to host
SwiftUI views in your app,


16
00:00:45,512 --> 00:00:47,447 line:-1
and then talk about
how to pass data


17
00:00:47.447 --> 00:00:50.817 line:-1 position:50%
between AppKit and SwiftUI.


18
00:00:50.817 --> 00:00:53.086 line:-1 position:50%
I'll also cover
hosting SwiftUI views


19
00:00:53,086 --> 00:00:55,989 line:-1
in the cells of a collection
or table view,


20
00:00:55.989 --> 00:00:58.926 line:-1 position:50%
how to handle layout
and sizing of SwiftUI views


21
00:00:58,926 --> 00:01:01,495 line:-1
when they are embedded
in AppKit,


22
00:01:01,495 --> 00:01:03,931 line:-1
how to make
your SwiftUI views participate


23
00:01:03.931 --> 00:01:07.000 line:-1 position:50%
in the responder chain
and be focusable,


24
00:01:07.000 --> 00:01:12.439 line:-1 position:50%
and, finally, how to host
an AppKit view in SwiftUI.


25
00:01:12.439 --> 00:01:16.877 line:-1 position:50%
Alright, I'll start with
how to host SwiftUI in AppKit.


26
00:01:16,877 --> 00:01:18,578 line:-1
In Shortcuts,


27
00:01:18,578 --> 00:01:23,150 line:-1
the main window contains
an AppKit split view controller


28
00:01:23,150 --> 00:01:28,588 line:-1
and the sidebar on the left
is written using SwiftUI.


29
00:01:28,588 --> 00:01:32,326 line:-1
The sidebar view is implemented
as a SwiftUI List,


30
00:01:32,326 --> 00:01:35,896 line:-1
and the list shows sections
with rows for all of the places


31
00:01:35.896 --> 00:01:38.899 line:-1 position:50%
you can navigate to in the app.


32
00:01:38,899 --> 00:01:42,302 line:-1
The view keeps track
of which item is selected,


33
00:01:42,302 --> 00:01:45,806 line:-1
through the selected item
binding.


34
00:01:45.806 --> 00:01:47.908 line:-1 position:50%
The possible items
that can be selected


35
00:01:47.908 --> 00:01:53.113 line:-1 position:50%
are represented as cases
in the SidebarItem type.


36
00:01:53,113 --> 00:01:56,850 line:-1
In this case, since there's a
split view controller already.


37
00:01:56.850 --> 00:01:58.986 line:-1 position:50%
To host this sidebar view,


38
00:01:58.986 --> 00:02:03.890 line:-1 position:50%
we use a class from SwiftUI
called NSHostingController.


39
00:02:03,890 --> 00:02:06,727 line:-1
The SwiftUI sidebar view
is passed in


40
00:02:06,727 --> 00:02:10,897 line:-1
as the root view
of that hosting controller.


41
00:02:10.897 --> 00:02:12.632 line:-1 position:50%
Since a hosting controller
can be used


42
00:02:12,632 --> 00:02:14,801 line:-1
like any other view controller,


43
00:02:14,801 --> 00:02:19,072 line:-1
here, we configure it
as a splitViewItem


44
00:02:19,072 --> 00:02:23,076 line:-1
and add that
to the splitViewController.


45
00:02:23.076 --> 00:02:26.213 line:-1 position:50%
Now the sidebar is hosted
in the split view,


46
00:02:26,213 --> 00:02:29,983 line:-1
but for it to work
when the selection changes,


47
00:02:29,983 --> 00:02:35,522 line:-1
the right side of the split view
needs to show a different page.


48
00:02:35,522 --> 00:02:37,791 line:-1
Currently,
the selected item state


49
00:02:37.791 --> 00:02:40.527 line:-1 position:50%
only exists within SwiftUI.


50
00:02:40.527 --> 00:02:43.864 line:-1 position:50%
What we need to do is move that
to a place that can be shared


51
00:02:43,864 --> 00:02:47,234 line:-1
between the split view
and the sidebar.


52
00:02:47,234 --> 00:02:50,704 line:-1
A good way to do this
is to create a model object


53
00:02:50.704 --> 00:02:54.241 line:-1 position:50%
that can be stored outside
of SwiftUI and contain the state


54
00:02:54,241 --> 00:02:56,109 line:-1
that needs to be shared.


55
00:02:56.109 --> 00:02:59.479 line:-1 position:50%
I'll call this object
the SelectionModel.


56
00:02:59,479 --> 00:03:02,582 line:-1
Now, the sidebar can still
read and write the state


57
00:03:02,582 --> 00:03:05,285 line:-1
in the SelectionModel.


58
00:03:05.285 --> 00:03:08.989 line:-1 position:50%
In code, the SelectionModel
is a class that conforms


59
00:03:08,989 --> 00:03:11,425 line:-1
to ObservableObject.


60
00:03:11.425 --> 00:03:15.195 line:-1 position:50%
Being an observable object
lets SwiftUI reload the view


61
00:03:15.195 --> 00:03:18.799 line:-1 position:50%
when the state stored
in the model changes.


62
00:03:18,799 --> 00:03:23,103 line:-1
It stores which sidebar item
is currently selected.


63
00:03:23,103 --> 00:03:27,240 line:-1
This property is published
so that the SwiftUI sidebar view


64
00:03:27.240 --> 00:03:31.211 line:-1 position:50%
can update when
the selected item changes.


65
00:03:31.211 --> 00:03:34.314 line:-1 position:50%
Whenever someone changes
the selection in the sidebar,


66
00:03:34.314 --> 00:03:39.119 line:-1 position:50%
the model can show a new page
in the detail view.


67
00:03:39,119 --> 00:03:42,856 line:-1
Now that I've covered
how to host SwiftUI in AppKit,


68
00:03:42.856 --> 00:03:46.760 line:-1 position:50%
let's move on to collection
and table cells.


69
00:03:46,760 --> 00:03:50,730 line:0
When bringing Shortcuts
from other platforms to macOS,


70
00:03:50,730 --> 00:03:53,600 position:50%
there was already
an iconic SwiftUI view


71
00:03:53,600 --> 00:03:57,137 position:50%
built to display a shortcut
in a collection view cell


72
00:03:57,137 --> 00:04:00,006 position:50%
or a Home Screen widget.


73
00:04:00,006 --> 00:04:03,777 line:-1
On macOS, these same views
are displayed in the cells


74
00:04:03,777 --> 00:04:06,880 line:-1
of an NSCollectionView.


75
00:04:06.880 --> 00:04:10.317 line:-1 position:50%
In a collection or table view
with lots of items,


76
00:04:10,317 --> 00:04:13,653 line:-1
each cell view is recycled
as you scroll,


77
00:04:13,653 --> 00:04:17,023 line:-1
showing different content
over time.


78
00:04:17.023 --> 00:04:20.026 line:-1 position:50%
To make sure the cell reuse
is performant,


79
00:04:20.026 --> 00:04:22.763 line:-1 position:50%
you need to avoid
adding and removing subviews


80
00:04:22,763 --> 00:04:26,800 line:-1
from the cells
as the user scrolls.


81
00:04:26,800 --> 00:04:29,803 line:-1
When displaying a SwiftUI view
in each cell,


82
00:04:29,803 --> 00:04:32,539 line:-1
use a single hosting view
and update it


83
00:04:32,539 --> 00:04:35,542 line:-1
with a different root view
when the cell's content


84
00:04:35,542 --> 00:04:37,778 line:-1
needs to change.


85
00:04:37,778 --> 00:04:40,280 line:-1
Here's all you need
to build a collection view cell


86
00:04:40,280 --> 00:04:42,249 line:-1
to host SwiftUI.


87
00:04:42,249 --> 00:04:43,683 line:-1
In the example here,


88
00:04:43.683 --> 00:04:47.687 line:-1 position:50%
I'm building the cell
that displays a shortcut view.


89
00:04:47,687 --> 00:04:52,359 line:-1
Each cell contains an
NSHostingView to host SwiftUI.


90
00:04:52.359 --> 00:04:54.094 line:-1 position:50%
Since cells are created


91
00:04:54,094 --> 00:04:56,663 line:-1
before they are configured
with any content,


92
00:04:56.663 --> 00:04:58.565 line:-1 position:50%
this will start off as nil,


93
00:04:58,565 --> 00:05:00,300 line:-1
and will be set the first time


94
00:05:00.300 --> 00:05:03.503 line:-1 position:50%
a shortcut
is ready to be displayed.


95
00:05:03,503 --> 00:05:06,773 line:-1
The displayShortcut method
is called by the data source


96
00:05:06.773 --> 00:05:10.343 line:-1 position:50%
when configuring the cell
to display a shortcut.


97
00:05:10,343 --> 00:05:14,614 line:-1
This method creates
a SwiftUI ShortcutView.


98
00:05:14,614 --> 00:05:17,551 line:-1
Then, if there's already
a hostingView,


99
00:05:17,551 --> 00:05:21,988 line:-1
the rootView of that hostingView
is set to the new view.


100
00:05:21.988 --> 00:05:24.291 line:-1 position:50%
Otherwise,
if it's the first time,


101
00:05:24,291 --> 00:05:26,927 line:-1
a newHostingView
is created and added


102
00:05:26,927 --> 00:05:30,263 line:-1
as a subview of the cell.


103
00:05:30.263 --> 00:05:34.000 line:-1 position:50%
Here's the lifecycle of the cell
that's hosting SwiftUI.


104
00:05:34,000 --> 00:05:38,772 line:-1
First, the cell is initialized
and it starts with no subviews,


105
00:05:38,772 --> 00:05:41,908 line:-1
since there is not
a shortcut to display yet.


106
00:05:41,908 --> 00:05:44,711 line:-1
The first time
displayShortcut is called,


107
00:05:44,711 --> 00:05:49,683 line:-1
the hostingView is created with
the shortcutView to display.


108
00:05:49,683 --> 00:05:52,319 line:-1
This creates
a SwiftUI view hierarchy,


109
00:05:52,319 --> 00:05:59,993 line:-1
containing a VStack, an image,
a spacer, and two text views.


110
00:05:59,993 --> 00:06:02,896 line:-1
If this cell is then scrolled
off screen,


111
00:06:02.896 --> 00:06:05.565 line:-1 position:50%
it will be potentially
dequeued by the system


112
00:06:05,565 --> 00:06:08,268 line:-1
and need to show
a different shortcut.


113
00:06:08,268 --> 00:06:12,072 line:-1
When this happens,
a new ShortcutView is created


114
00:06:12,072 --> 00:06:15,041 line:-1
and given to the HostingView.


115
00:06:15.041 --> 00:06:17.510 line:-1 position:50%
Since the HostingView
was already displaying


116
00:06:17,510 --> 00:06:19,312 line:-1
a different shortcut view,


117
00:06:19.312 --> 00:06:22.549 line:-1 position:50%
it will reuse the overall
structure of the view,


118
00:06:22.549 --> 00:06:25.385 line:-1 position:50%
including the VStack
and the spacer,


119
00:06:25,385 --> 00:06:30,790 line:-1
and only update the image, text,
and background that changed.


120
00:06:30,790 --> 00:06:35,595 line:-1
Alright, next, let's talk about
layout and sizing.


121
00:06:35.595 --> 00:06:37.797 line:-1 position:50%
Hosting controllers
and hosting views


122
00:06:37.797 --> 00:06:39.899 line:-1 position:50%
have intrinsic sizes


123
00:06:39,899 --> 00:06:43,603 line:-1
based on the SwiftUI view's
ideal width and height.


124
00:06:43.603 --> 00:06:46.273 line:-1 position:50%
SwiftUI automatically
creates and updates


125
00:06:46.273 --> 00:06:49.843 line:-1 position:50%
Auto Layout constraints,
which the AppKit layout system


126
00:06:49.843 --> 00:06:53.313 line:-1 position:50%
uses to size the view
appropriately.


127
00:06:53,313 --> 00:06:56,349 line:-1
Views are also flexible,
meaning they support


128
00:06:56,349 --> 00:07:00,854 line:-1
a variety of sizes,
between a minimum and a maximum.


129
00:07:00.854 --> 00:07:05.358 line:-1 position:50%
SwiftUI creates constraints
for these as well.


130
00:07:05,358 --> 00:07:08,762 line:-1
When embedding SwiftUI
hosting views in your hierarchy,


131
00:07:08,762 --> 00:07:11,865 line:-1
you should apply your own
Auto Layout constraints


132
00:07:11.865 --> 00:07:15.935 line:-1 position:50%
to the superview
or to other adjacent views.


133
00:07:15,935 --> 00:07:19,506 line:0
Using the frame modifier
or other SwiftUI layout


134
00:07:19,506 --> 00:07:23,376 line:0
will result in an update to the
constraints that are created,


135
00:07:23,376 --> 00:07:28,214 line:0
such as overriding the width
to be a fixed size.


136
00:07:28.214 --> 00:07:31.184 line:-1 position:50%
Since windows can be resized
by the user,


137
00:07:31.184 --> 00:07:35.088 line:-1 position:50%
they have a minimum
and a maximum size.


138
00:07:35.088 --> 00:07:36.723 line:-1 position:50%
When HostingViews are set


139
00:07:36.723 --> 00:07:39.793 line:-1 position:50%
as the top-level contentView
of a window,


140
00:07:39.793 --> 00:07:43.096 line:-1 position:50%
SwiftUI will automatically
update that window's minimum


141
00:07:43.096 --> 00:07:47.400 line:-1 position:50%
and maximum size based on
the content being displayed.


142
00:07:47,400 --> 00:07:49,669 line:-1
And this lets windows
be resizable


143
00:07:49,669 --> 00:07:52,672 line:-1
either vertically,
horizontally, or both,


144
00:07:52,672 --> 00:07:55,275 line:-1
depending on the content.


145
00:07:55.275 --> 00:07:58.411 line:-1 position:50%
SwiftUI views,
placed in hosting controllers,


146
00:07:58,411 --> 00:08:02,349 line:-1
also are sized based on the
content when presented modally.


147
00:08:02,349 --> 00:08:05,585 line:-1
For example, you can easily
place SwiftUI views


148
00:08:05,585 --> 00:08:07,520 line:-1
into an AppKit popover,


149
00:08:07,520 --> 00:08:09,556 line:-1
by presenting
a hosting controller


150
00:08:09,556 --> 00:08:13,259 line:-1
using the popover presentation
API on NSViewController,


151
00:08:13.259 --> 00:08:15.261 line:-1 position:50%
as shown here.


152
00:08:15.261 --> 00:08:18.031 line:-1 position:50%
You can also present
SwiftUI views as sheets,


153
00:08:18,031 --> 00:08:20,967 line:-1
using the presentAsSheet
method.


154
00:08:20.967 --> 00:08:23.570 line:-1 position:50%
And finally, for a modal window,


155
00:08:23,570 --> 00:08:26,606 line:-1
you can use the
presentAsModalWindow method


156
00:08:26.606 --> 00:08:30.777 line:-1 position:50%
to present a window that
blocks interaction until closed.


157
00:08:30,777 --> 00:08:34,614 line:-1
The window is sized
to fit the content.


158
00:08:34.614 --> 00:08:37.550 line:-1 position:50%
In macOS Ventura,
there are new APIs


159
00:08:37,550 --> 00:08:40,720 line:-1
on NSHostingView
and NSHostingController


160
00:08:40.720 --> 00:08:42.922 line:-1 position:50%
that allow you to customize
the constraints


161
00:08:42,922 --> 00:08:45,458 line:-1
that are automatically added.


162
00:08:45.458 --> 00:08:47.961 line:-1 position:50%
By default,
hosting controllers and views


163
00:08:47,961 --> 00:08:50,497 line:-1
create constraints
for the minimum size,


164
00:08:50,497 --> 00:08:53,867 line:-1
intrinsic size,
and maximum size.


165
00:08:53,867 --> 00:08:56,903 line:-1
You may want to disable some of
these for performance reasons


166
00:08:56,903 --> 00:09:00,173 line:-1
if you want the view
to always be flexibly sized,


167
00:09:00,173 --> 00:09:02,208 line:-1
or the constraints
are already added


168
00:09:02,208 --> 00:09:05,345 line:-1
to surrounding views in AppKit.


169
00:09:05.345 --> 00:09:06.746 line:-1 position:50%
For hosting controllers,


170
00:09:06,746 --> 00:09:08,681 line:-1
to let the ideal size
of the view


171
00:09:08.681 --> 00:09:11.618 line:-1 position:50%
determine the preferred
content size,


172
00:09:11,618 --> 00:09:15,622 line:-1
you can enable the
preferredContentSize option.


173
00:09:15.622 --> 00:09:18.825 line:-1 position:50%
When you start adding
SwiftUI views to your app,


174
00:09:18,825 --> 00:09:21,594 line:-1
it's important that they take
part in the responder chain


175
00:09:21.594 --> 00:09:26.199 line:-1 position:50%
and focus system just like
other views in your app.


176
00:09:26.199 --> 00:09:29.302 line:-1 position:50%
In Shortcuts,
our editor is implemented


177
00:09:29,302 --> 00:09:32,038 line:-1
as a SwiftUI View.


178
00:09:32.038 --> 00:09:35.008 line:-1 position:50%
But the editor needs to handle
menu bar commands


179
00:09:35,008 --> 00:09:40,013 line:-1
defined in the main menu,
which is implemented in AppKit.


180
00:09:40,013 --> 00:09:45,084 line:-1
These commands include
cut, copy, paste, and others.


181
00:09:45,084 --> 00:09:49,088 line:-1
We implemented a few of our
own custom menu items as well,


182
00:09:49.088 --> 00:09:52.525 line:-1 position:50%
for moving actions up and down.


183
00:09:52.525 --> 00:09:56.229 line:-1 position:50%
In AppKit, your view hierarchy
makes up a chain of views


184
00:09:56,229 --> 00:09:58,898 line:-1
called "the responder chain."


185
00:09:58.898 --> 00:10:02.902 line:-1 position:50%
The focused responder
is called the first responder.


186
00:10:02.902 --> 00:10:04.838 line:-1 position:50%
When a menu item is selected,


187
00:10:04,838 --> 00:10:08,708 line:-1
the selector for that item
is sent to the first responder.


188
00:10:08.708 --> 00:10:10.210 line:-1 position:50%
But if the first responder


189
00:10:10,210 --> 00:10:12,145 line:-1
doesn't respond
to that selector,


190
00:10:12,145 --> 00:10:15,215 line:-1
then the selector is sent
to each next responder,


191
00:10:15,215 --> 00:10:17,650 line:-1
until something
handles the selector,


192
00:10:17,650 --> 00:10:20,653 line:-1
or it reaches the app.


193
00:10:20,653 --> 00:10:23,790 line:-1
The equivalent to the first
responder in SwiftUI


194
00:10:23.790 --> 00:10:26.993 line:-1 position:50%
is the focused view.


195
00:10:26,993 --> 00:10:31,097 line:-1
Focusable SwiftUI views
can respond to keyboard input


196
00:10:31,097 --> 00:10:35,602 line:-1
and handle selectors
sent to the responder chain.


197
00:10:35.602 --> 00:10:40.206 line:-1 position:50%
Some views like text fields
are already focusable,


198
00:10:40.206 --> 00:10:42.909 line:-1 position:50%
but you can use
the focusable modifier


199
00:10:42.909 --> 00:10:46.312 line:-1 position:50%
to make other views
focusable too.


200
00:10:46,312 --> 00:10:50,016 line:-1
SwiftUI has a few modifiers
to handle common commands,


201
00:10:50.016 --> 00:10:52.886 line:-1 position:50%
such as copy, cut, and paste.


202
00:10:52.886 --> 00:10:55.555 line:-1 position:50%
These pass values
in and out of the pasteboard,


203
00:10:55,555 --> 00:10:58,391 line:-1
and it's an easy way
to let people transfer data


204
00:10:58.391 --> 00:11:00.994 line:-1 position:50%
in and out of your app.


205
00:11:00,994 --> 00:11:03,763 line:-1
The shortcuts editor uses
the onMoveCommand


206
00:11:03,763 --> 00:11:07,333 line:-1
and onExit command modifiers
to handle the arrow keys


207
00:11:07,333 --> 00:11:09,602 line:-1
and escape keys.


208
00:11:09.602 --> 00:11:12.272 line:-1 position:50%
The onCommand modifier
can be used to handle


209
00:11:12.272 --> 00:11:14.674 line:-1 position:50%
any of the common selectors
from AppKit


210
00:11:14.674 --> 00:11:17.844 line:-1 position:50%
or your own custom selectors
defined in your app.


211
00:11:17.844 --> 00:11:21.748 line:-1 position:50%
Here, we handle the
selectAll command from AppKit


212
00:11:21,748 --> 00:11:25,685 line:-1
and the moveActionUp
and moveActionDown commands


213
00:11:25,685 --> 00:11:28,855 line:-1
defined in the Shortcuts app.


214
00:11:28,855 --> 00:11:32,091 line:-1
When testing focus and keyboard
navigability in your app,


215
00:11:32,091 --> 00:11:34,627 line:-1
make sure to open
Keyboard System Settings


216
00:11:34.627 --> 00:11:36.896 line:-1 position:50%
and test with
Full Keyboard Navigation


217
00:11:36.896 --> 00:11:39.632 line:-1 position:50%
turned both on and off,


218
00:11:39,632 --> 00:11:44,370 line:-1
since many controls are only
focusable when that's enabled.


219
00:11:44,370 --> 00:11:46,005 line:0
There's a lot more you can do


220
00:11:46,005 --> 00:11:48,775 line:0
to make your app work great
with the keyboard.


221
00:11:48,775 --> 00:11:52,579 line:0
For example, there are APIs
such as FocusState


222
00:11:52,579 --> 00:11:54,314 line:0
and the focused modifier


223
00:11:54,314 --> 00:11:58,217 line:0
that let you programmatically
change which view is focused.


224
00:11:58,217 --> 00:12:01,054 position:50%
To learn more about focus
and the keyboard,


225
00:12:01,054 --> 00:12:02,221 position:50%
you should go watch


226
00:12:02,221 --> 00:12:06,326 line:0
the "Direct and reflect
focus in SwiftUI" video.


227
00:12:06,326 --> 00:12:11,931 line:-1
Finally, let's talk about
hosting AppKit views in SwiftUI.


228
00:12:11,931 --> 00:12:13,266 line:-1
There are some instances


229
00:12:13.266 --> 00:12:15.602 line:-1 position:50%
where Shortcuts
is hosting AppKit views


230
00:12:15.602 --> 00:12:17.971 line:-1 position:50%
inside of a SwiftUI layout,


231
00:12:17.971 --> 00:12:20.640 line:-1 position:50%
and you may need to host
AppKit views, too,


232
00:12:20.640 --> 00:12:24.243 line:-1 position:50%
as you adopt SwiftUI
in your app.


233
00:12:24.243 --> 00:12:29.482 line:-1 position:50%
One example is inside
of the SwiftUI shortcuts editor,


234
00:12:29.482 --> 00:12:32.051 line:-1 position:50%
where there's an embedded
AppleScript editor view,


235
00:12:32.051 --> 00:12:33.920 line:-1 position:50%
which is an AppKit control


236
00:12:33,920 --> 00:12:37,624 line:-1
shared with a few
other system apps on macOS.


237
00:12:37,624 --> 00:12:40,693 line:-1
SwiftUI provides two
representable protocols


238
00:12:40.693 --> 00:12:43.363 line:-1 position:50%
that allow AppKit views
and view controllers


239
00:12:43,363 --> 00:12:48,401 line:-1
to be embedded within
a SwiftUI view hierarchy.


240
00:12:48.401 --> 00:12:50.336 line:-1 position:50%
Like SwiftUI views,


241
00:12:50,336 --> 00:12:54,007 line:-1
representables are descriptions
for how to create and update


242
00:12:54.007 --> 00:12:57.310 line:-1 position:50%
AppKit views.


243
00:12:57,310 --> 00:13:01,481 line:-1
Since many classes in AppKit
have delegates, observers,


244
00:13:01,481 --> 00:13:06,052 line:-1
or rely on KVO or notifications
to be observed,


245
00:13:06,052 --> 00:13:09,822 line:-1
the protocols also include
an optional coordinator object


246
00:13:09,822 --> 00:13:12,325 line:-1
that you can implement
to accompany your view


247
00:13:12,325 --> 00:13:15,662 line:-1
or view controller.


248
00:13:15,662 --> 00:13:18,231 line:-1
Here's the lifecycle
of the hosted object


249
00:13:18.231 --> 00:13:20.266 line:-1 position:50%
and its coordinator.


250
00:13:20,266 --> 00:13:23,603 line:-1
We start with the hosted view
being initialized.


251
00:13:23.603 --> 00:13:26.139 line:-1 position:50%
This happens when the view
is about to be displayed


252
00:13:26,139 --> 00:13:28,608 line:-1
for the first time.


253
00:13:28,608 --> 00:13:31,644 position:50%
The first thing SwiftUI
does during initialization


254
00:13:31,644 --> 00:13:33,446 line:0
is make the coordinator.


255
00:13:33,446 --> 00:13:35,948 position:50%
This is optional,
but you can define your own type


256
00:13:35,948 --> 00:13:37,950 position:50%
and return it from
makeCoordinator


257
00:13:37,950 --> 00:13:41,821 position:50%
if you need it for delegation
or state management.


258
00:13:41,821 --> 00:13:43,690 position:50%
A single instance
of the coordinator


259
00:13:43,690 --> 00:13:47,593 line:0
will stay around
for the lifetime of the view.


260
00:13:47,593 --> 00:13:50,329 position:50%
Second, either the makeNSView


261
00:13:50,329 --> 00:13:53,966 line:0
or makeNSViewController method
is called.


262
00:13:53,966 --> 00:13:56,202 line:0
This is where
you describe to SwiftUI


263
00:13:56,202 --> 00:14:00,406 position:50%
how to create
a new instance of your view.


264
00:14:00,406 --> 00:14:03,810 position:50%
The context contains the
coordinator that was just made,


265
00:14:03,810 --> 00:14:07,447 line:0
if any, so here's a good place
to assign the coordinator


266
00:14:07,447 --> 00:14:13,386 position:50%
as the view's delegate
or other type of observer.


267
00:14:13.386 --> 00:14:15.354 line:-1 position:50%
Once the view has been created,


268
00:14:15,354 --> 00:14:17,490 line:-1
the update view method
will be called


269
00:14:17.490 --> 00:14:22.128 line:-1 position:50%
whenever the SwiftUI state
or environment changes.


270
00:14:22.128 --> 00:14:25.965 line:-1 position:50%
Here, it's your responsibility
to update any properties


271
00:14:25,965 --> 00:14:28,835 line:-1
or state stored
in the AppKit view


272
00:14:28.835 --> 00:14:31.637 line:-1 position:50%
to keep it in sync with
the surrounding SwiftUI state


273
00:14:31.637 --> 00:14:33.473 line:-1 position:50%
and environment.


274
00:14:33.473 --> 00:14:35.842 line:-1 position:50%
The update method
can be called often,


275
00:14:35,842 --> 00:14:38,010 line:-1
so the changes you make
to the view


276
00:14:38.010 --> 00:14:40.747 line:-1 position:50%
should be
as minimal as possible.


277
00:14:40.747 --> 00:14:42.749 line:-1 position:50%
You should check
for what has changed


278
00:14:42.749 --> 00:14:45.184 line:-1 position:50%
and only reload the affected
part of the view


279
00:14:45,184 --> 00:14:47,854 line:-1
when changes are made.


280
00:14:47,854 --> 00:14:50,690 line:-1
When SwiftUI is done displaying
the hosted view,


281
00:14:50.690 --> 00:14:53.092 line:-1 position:50%
it will be dismantled.


282
00:14:53.092 --> 00:14:57.296 line:-1 position:50%
The hosted view and coordinator
will both be deallocated.


283
00:14:57,296 --> 00:15:00,633 line:-1
Before these are deallocated,
the representable protocols


284
00:15:00.633 --> 00:15:02.835 line:-1 position:50%
give you an optional method
to implement,


285
00:15:02,835 --> 00:15:06,105 line:-1
where you can clean up
state if needed.


286
00:15:06,105 --> 00:15:08,674 line:-1
Alright, now that you know
the lifecycle


287
00:15:08,674 --> 00:15:12,111 line:-1
and are familiar with
the representable protocols,


288
00:15:12,111 --> 00:15:14,380 line:-1
I'm going to show you
how Shortcuts hosts


289
00:15:14,380 --> 00:15:18,117 line:-1
the custom script editor view
in the app.


290
00:15:18,117 --> 00:15:22,989 position:50%
The script editor is an NSView
called ScriptEditorView.


291
00:15:22,989 --> 00:15:25,658 line:0
The code that's written
in the editor can be accessed


292
00:15:25,658 --> 00:15:28,661 line:0
and modified through
the sourceCode property,


293
00:15:28,661 --> 00:15:30,363 line:0
and the view can be disabled


294
00:15:30,363 --> 00:15:32,999 line:0
to prevent changes
from being made.


295
00:15:32,999 --> 00:15:35,735 line:0
The script editor
also has a delegate,


296
00:15:35,735 --> 00:15:38,371 line:0
which is notified any time
someone modifies


297
00:15:38,371 --> 00:15:40,773 line:0
the source code.


298
00:15:40,773 --> 00:15:42,975 line:0
When hosting an AppKit view,


299
00:15:42,975 --> 00:15:46,612 line:0
first think about where the
view will be placed in SwiftUI,


300
00:15:46,612 --> 00:15:50,449 line:0
and what data needs
to be passed in and out.


301
00:15:50,449 --> 00:15:54,153 line:0
In Shortcuts, this view
is placed into a container view


302
00:15:54,153 --> 00:15:57,290 position:50%
next to the compile button.


303
00:15:57,290 --> 00:16:00,760 position:50%
The compile button's handler
needs to access the source code


304
00:16:00,760 --> 00:16:03,596 position:50%
that's entered into the view.


305
00:16:03,596 --> 00:16:05,998 line:0
The source code
is stored in SwiftUI


306
00:16:05,998 --> 00:16:08,501 line:0
using the State property
wrapper.


307
00:16:08,501 --> 00:16:10,436 line:0
The representable
will need to both read


308
00:16:10,436 --> 00:16:13,406 line:0
and write to this state.


309
00:16:13.406 --> 00:16:15.107 line:-1 position:50%
To build the representable,


310
00:16:15,107 --> 00:16:19,212 line:-1
start by creating a type that
conforms to NSViewRepresentable,


311
00:16:19.212 --> 00:16:22.915 line:-1 position:50%
since it will host an NSView.


312
00:16:22,915 --> 00:16:26,352 line:-1
Add properties for each thing
that needs to be configurable


313
00:16:26.352 --> 00:16:28.154 line:-1 position:50%
from SwiftUI.


314
00:16:28.154 --> 00:16:31.057 line:-1 position:50%
For the source code
a binding is used,


315
00:16:31,057 --> 00:16:36,128 line:-1
which will read and write
the state stored in SwiftUI.


316
00:16:36.128 --> 00:16:40.166 line:-1 position:50%
The first method you need
to implement is makeNSView.


317
00:16:40.166 --> 00:16:41.467 line:-1 position:50%
Here is where you describe


318
00:16:41,467 --> 00:16:44,003 line:-1
how to create a new instance
of the view,


319
00:16:44,003 --> 00:16:47,974 line:-1
and where you should do any
one-time setup that's required.


320
00:16:47.974 --> 00:16:51.143 line:-1 position:50%
Here, the delegate is set
to the coordinator.


321
00:16:51.143 --> 00:16:55.248 line:-1 position:50%
I'll talk about the coordinator
more in a bit.


322
00:16:55.248 --> 00:16:58.551 line:-1 position:50%
Next, implement updateNSView.


323
00:16:58.551 --> 00:17:01.220 line:-1 position:50%
This will be called when
either the sourceCode changes,


324
00:17:01,220 --> 00:17:05,091 line:-1
or when the
SwiftUI environment changes.


325
00:17:05.091 --> 00:17:07.627 line:-1 position:50%
Since the script editor
does a bunch of work


326
00:17:07.627 --> 00:17:09.829 line:-1 position:50%
when the sourceCode property
is set,


327
00:17:09.829 --> 00:17:12.198 line:-1 position:50%
we compare the value
already in the view,


328
00:17:12,198 --> 00:17:15,034 line:-1
and only set the property
if it changes


329
00:17:15,034 --> 00:17:17,937 line:-1
to avoid unnecessary work.


330
00:17:17,937 --> 00:17:20,907 line:-1
The context passed
to updateNSView


331
00:17:20.907 --> 00:17:23.542 line:-1 position:50%
contains
the SwiftUI environment.


332
00:17:23.542 --> 00:17:25.745 line:-1 position:50%
The isEnabled environment key


333
00:17:25.745 --> 00:17:30.016 line:-1 position:50%
is passed to the isEditable
property on the script editor,


334
00:17:30.016 --> 00:17:31.717 line:-1 position:50%
so editing is disabled


335
00:17:31.717 --> 00:17:35.688 line:-1 position:50%
if the rest of the
SwiftUI view hierarchy is.


336
00:17:35,688 --> 00:17:39,191 line:-1
Whenever someone modifies
the source code in the view,


337
00:17:39.191 --> 00:17:42.828 line:-1 position:50%
the source code binding
needs to capture the new value.


338
00:17:42.828 --> 00:17:44.931 line:-1 position:50%
To do this,
we'll build a coordinator


339
00:17:44,931 --> 00:17:49,268 line:-1
that conforms to the
ScriptEditorViewDelegate.


340
00:17:49,268 --> 00:17:52,204 line:-1
The coordinator will store
the representable value,


341
00:17:52,204 --> 00:17:56,242 line:-1
which contains the source code
binding that it needs to update.


342
00:17:56.242 --> 00:17:59.178 line:-1 position:50%
And in the
sourceCodeDidChange method,


343
00:17:59,178 --> 00:18:01,514 line:-1
the binding is set
to the new string value


344
00:18:01.514 --> 00:18:04.317 line:-1 position:50%
from the view.


345
00:18:04,317 --> 00:18:07,553 line:-1
Finally, we need to tell
the SwiftUI representable


346
00:18:07.553 --> 00:18:10.489 line:-1 position:50%
how to make and update
the coordinator.


347
00:18:10.489 --> 00:18:14.093 line:-1 position:50%
First, you need to implement
the makeCoordinator method


348
00:18:14.093 --> 00:18:17.296 line:-1 position:50%
to create a new coordinator.


349
00:18:17,296 --> 00:18:21,067 line:-1
Coordinators have the same
lifetime as the hosted view,


350
00:18:21,067 --> 00:18:23,202 line:-1
and like hosted views,


351
00:18:23,202 --> 00:18:25,304 line:-1
properties you add
to the coordinator


352
00:18:25,304 --> 00:18:29,375 line:-1
need to remain up to date
as the representable changes.


353
00:18:29.375 --> 00:18:31.544 line:-1 position:50%
Since updateNSView is called


354
00:18:31.544 --> 00:18:34.947 line:-1 position:50%
when the values stored
in the representable change,


355
00:18:34,947 --> 00:18:40,319 line:-1
here, the representable property
on the coordinator is updated.


356
00:18:40.319 --> 00:18:43.622 line:-1 position:50%
Now that you know how to add
AppKit into SwiftUI,


357
00:18:43,622 --> 00:18:46,726 line:-1
and also add SwiftUI
into AppKit,


358
00:18:46.726 --> 00:18:50.396 line:-1 position:50%
you should start integrating
SwiftUI into your app.


359
00:18:50,396 --> 00:18:52,765 line:-1
A great place to start
is in your sidebar,


360
00:18:52.765 --> 00:18:55.534 line:-1 position:50%
or table
and collection view cells.


361
00:18:55.534 --> 00:18:58.070 line:-1 position:50%
Make sure your views are sizing
themselves correctly


362
00:18:58,070 --> 00:19:01,507 line:-1
and handling common commands
and focus.


363
00:19:01.507 --> 00:19:02.508 line:-1 position:50%
Thanks for your time,


364
00:19:02,508 --> 00:19:05,044 line:-1
and I can't wait
to see what you build


365
00:19:05,044 --> 00:19:08,981 position:90% size:2% align:right
♪

