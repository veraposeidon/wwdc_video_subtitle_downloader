2
00:00:00,067 --> 00:00:03,003 line:-1
â™ª Mellow instrumental
hip-hop music â™ª


3
00:00:03,003 --> 00:00:09,610 size:2% line:1 position:90%
â™ª


4
00:00:09,610 --> 00:00:11,245 line:-1
Hello! I'm Justin,


5
00:00:11,245 --> 00:00:13,280 line:-1
and I'm an engineer
on the Photos team.


6
00:00:13.280 --> 00:00:15.983 line:-1 position:50%
Today, I would like to talk
about some of the improvements


7
00:00:15,983 --> 00:00:18,619 line:-1
we have made
to the system Photos picker.


8
00:00:18.619 --> 00:00:21.388 line:-1 position:50%
The system Photos picker
is the best way for most apps


9
00:00:21,388 --> 00:00:24,224 line:-1
to access photos
and videos on iOS.


10
00:00:24.224 --> 00:00:26.960 line:-1 position:50%
The picker runs out of process,
so your app doesn't need


11
00:00:26,960 --> 00:00:29,796 line:-1
to request any library access
to use it.


12
00:00:29,796 --> 00:00:33,734 line:-1
It has an intuitive UI
and an easy-to-use API.


13
00:00:33,734 --> 00:00:36,670 line:1
If you aren't familiar
with the PHPicker API,


14
00:00:36,670 --> 00:00:39,840 line:1
you can watch our previous
years' WWDC sessions


15
00:00:39,840 --> 00:00:43,343 line:1
where we talked
about it in depth.


16
00:00:43,343 --> 00:00:46,413 line:-1
In today's session,
I'll start with an overview


17
00:00:46,413 --> 00:00:50,083 line:-1
of the new features
we added to the picker.


18
00:00:50,083 --> 00:00:53,353 line:-1
Then, I will talk about
additional platforms


19
00:00:53,353 --> 00:00:56,857 line:-1
and frameworks
the picker now supports.


20
00:00:56.857 --> 00:00:59.927 line:-1 position:50%
All right, let's dive in.


21
00:00:59.927 --> 00:01:02.863 line:-1 position:50%
The picker supports filtering
between images, videos,


22
00:01:02,863 --> 00:01:06,333 line:-1
and Live Photos
since its introduction.


23
00:01:06,333 --> 00:01:08,669 line:-1
However, we understand
that some of your apps


24
00:01:08.669 --> 00:01:11.138 line:-1 position:50%
may have some other requirements.


25
00:01:11,138 --> 00:01:13,974 line:-1
For example,
a screenshot-stitching app


26
00:01:13.974 --> 00:01:17.210 line:-1 position:50%
wants to only show
screenshots in the picker.


27
00:01:17,210 --> 00:01:20,213 line:-1
Now it is possible
with the new screenshots filter


28
00:01:20,213 --> 00:01:23,583 line:-1
we added this year.


29
00:01:23,583 --> 00:01:27,587 line:-1
In addition to screenshots,
we added other asset types


30
00:01:27.587 --> 00:01:31.725 line:-1 position:50%
like screen recordings
and slo-mo videos.


31
00:01:31,725 --> 00:01:34,027 line:-1
There is also a way for you
to create a new filter


32
00:01:34,027 --> 00:01:38,532 line:-1
using PHAsset.PlaybackStyle.


33
00:01:38,532 --> 00:01:42,970 line:-1
Other than Cinematic videos,
depth effect photos, and bursts,


34
00:01:42.970 --> 00:01:45.706 line:-1 position:50%
all of the new filters
are backported.


35
00:01:45.706 --> 00:01:48.408 line:-1 position:50%
If your app
is targeting iOS 15,


36
00:01:48,408 --> 00:01:50,877 line:-1
you can still use them
as long as you are compiling


37
00:01:50.877 --> 00:01:53.847 line:-1 position:50%
with the iOS 16 SDK.


38
00:01:53,847 --> 00:01:58,218 line:-1
For compound filters, in
addition to the existing "any,"


39
00:01:58.218 --> 00:02:00.954 line:-1 position:50%
now you also use
"all" and "not."


40
00:02:00,954 --> 00:02:04,358 line:-1
They are also backported
to iOS 15.


41
00:02:04,358 --> 00:02:06,994 line:-1
Let's look at some
code examples.


42
00:02:06.994 --> 00:02:12.299 line:-1 position:50%
To show videos and Live Photos,
you can combine them with "any."


43
00:02:12,299 --> 00:02:17,404 line:-1
Or you may only want
to show screenshots.


44
00:02:17,404 --> 00:02:20,140 line:-1
To show all images
without screenshots,


45
00:02:20,140 --> 00:02:22,442 line:-1
you can combine images
and screenshots filters


46
00:02:22.442 --> 00:02:25.612 line:-1 position:50%
using "all" and "not."


47
00:02:25,612 --> 00:02:29,149 line:1
And the last example, you can
use .cinematicVideos filter


48
00:02:29,149 --> 00:02:32,285 line:1
if you are targeting iOS 16.


49
00:02:32,285 --> 00:02:35,122 line:-1
Next, let's talk
about improvements


50
00:02:35.122 --> 00:02:37.624 line:-1 position:50%
related to the half-height
picker.


51
00:02:37,624 --> 00:02:41,995 line:-1
In iOS 15, UIKit has a new
UISheetPresentationController


52
00:02:41.995 --> 00:02:47.300 line:-1 position:50%
API which you can use to present
the picker in half-height mode.


53
00:02:47,300 --> 00:02:50,637 line:-1
It already works great
in many cases.


54
00:02:50.637 --> 00:02:53.807 line:-1 position:50%
But some of you may want
to implement a custom UI


55
00:02:53.807 --> 00:02:56.543 line:-1 position:50%
to adjust selected assets
and have those changes


56
00:02:56.543 --> 00:03:00.447 line:-1 position:50%
be reflected back in picker.


57
00:03:00,447 --> 00:03:03,650 line:-1
In iOS 16,
you can deselect assets


58
00:03:03.650 --> 00:03:07.320 line:-1 position:50%
using their asset identifiers.


59
00:03:07.320 --> 00:03:10.857 line:-1 position:50%
As shown here, the second photo
is no longer selected


60
00:03:10,857 --> 00:03:16,696 line:-1
in the picker after
deselectAssets is called.


61
00:03:16,696 --> 00:03:21,568 line:-1
You can also call the moveAsset
method to reorder assets.


62
00:03:21,568 --> 00:03:24,704 line:-1
Now we are familiar with
all of the new picker features,


63
00:03:24.704 --> 00:03:27.574 line:-1 position:50%
let's talk about
platform support.


64
00:03:27,574 --> 00:03:30,577 line:-1
Currently, the system Photos
picker can only be used


65
00:03:30.577 --> 00:03:33.814 line:-1 position:50%
by iOS and iPadOS apps.


66
00:03:33,814 --> 00:03:35,982 line:-1
This year, we are bringing
the Photos picker


67
00:03:35.982 --> 00:03:41.154 line:-1 position:50%
to two additional platforms:
macOS and watchOS.


68
00:03:41.154 --> 00:03:44.157 line:-1 position:50%
The iPadOS picker is also
updated with a new design


69
00:03:44.157 --> 00:03:46.493 line:-1 position:50%
just for the iPad.


70
00:03:46,493 --> 00:03:49,696 line:-1
Let's take a look
at the new iPad UI first.


71
00:03:49,696 --> 00:03:51,398 line:-1
The picker now shows a sidebar


72
00:03:51.398 --> 00:03:55.202 line:-1 position:50%
to take advantage
of the larger iPad display.


73
00:03:55,202 --> 00:03:57,070 line:-1
The sidebar allows
faster navigation


74
00:03:57,070 --> 00:03:59,239 line:-1
between different collections.


75
00:03:59.239 --> 00:04:01.274 line:-1 position:50%
But if there is not
enough space,


76
00:04:01,274 --> 00:04:03,677 line:-1
like in Split Screen mode,


77
00:04:03.677 --> 00:04:08.215 line:-1 position:50%
we will fall back to the
existing compact picker UI.


78
00:04:08.215 --> 00:04:11.718 line:-1 position:50%
Next, macOS.


79
00:04:11.718 --> 00:04:16.056 line:-1 position:50%
The macOS picker also has a
sidebar with Mac-style controls.


80
00:04:16,056 --> 00:04:20,527 line:-1
And just like the iOS picker,
it supports multiple selection,


81
00:04:20,527 --> 00:04:23,930 line:-1
fluid zooming in the grid, and
has a powerful search feature


82
00:04:23.930 --> 00:04:27.434 line:-1 position:50%
which allows you to search
for things like people, places,


83
00:04:27,434 --> 00:04:30,070 line:-1
and a lot more.


84
00:04:30,070 --> 00:04:34,407 line:-1
The new picker UI is also
available in NSOpenPanel.


85
00:04:34.407 --> 00:04:38.278 line:-1 position:50%
You can use it to select assets
from the system photo library,


86
00:04:38,278 --> 00:04:39,846 line:-1
and for the first time,


87
00:04:39,846 --> 00:04:43,617 line:-1
including those assets
stored in iCloud Photos.


88
00:04:43.617 --> 00:04:46.086 line:-1 position:50%
Your app will get
the new UI for free


89
00:04:46.086 --> 00:04:49.856 line:-1 position:50%
without needing to do
any adoption work.


90
00:04:49.856 --> 00:04:54.227 line:-1 position:50%
Drag and drop is supported
in the NSOpenPanel picker.


91
00:04:54,227 --> 00:04:57,164 line:-1
It's also supported
in the standard picker on iOS,


92
00:04:57,164 --> 00:05:00,734 line:-1
iPadOS, and macOS.


93
00:05:00.734 --> 00:05:04.838 line:-1 position:50%
If your app only needs to select
a few images or videos,


94
00:05:04.838 --> 00:05:08.742 line:-1 position:50%
the NSOpenPanel API
may be all you need.


95
00:05:08.742 --> 00:05:11.244 line:-1 position:50%
But keep in mind that selected
files in the photo library


96
00:05:11,244 --> 00:05:15,115 line:-1
may be deleted by the system
at any time.


97
00:05:15.115 --> 00:05:18.118 line:-1 position:50%
You should copy them to
a location managed by your app


98
00:05:18,118 --> 00:05:23,557 line:-1
if you need to ensure their
availability in the long term.


99
00:05:23.557 --> 00:05:28.094 line:-1 position:50%
For media-centric macOS apps,
we encourage you to default


100
00:05:28.094 --> 00:05:32.699 line:-1 position:50%
to the new Photos picker
for the best user experience.


101
00:05:32,699 --> 00:05:37,237 line:-1
However, your app should still
provide an alternative way


102
00:05:37.237 --> 00:05:39.573 line:-1 position:50%
to select assets
from the file system


103
00:05:39,573 --> 00:05:42,842 line:-1
using the NSOpenPanel API.


104
00:05:42.842 --> 00:05:46.479 line:-1 position:50%
Sometimes your customers
may still want to select assets


105
00:05:46,479 --> 00:05:50,984 line:-1
outside their photo libraries.


106
00:05:50,984 --> 00:05:55,522 line:-1
Last but not least,
let's talk about watchOS.


107
00:05:55,522 --> 00:05:58,191 line:-1
For the first time,
you can have access to images


108
00:05:58,191 --> 00:06:01,561 line:-1
stored on the watch
using a new API.


109
00:06:01,561 --> 00:06:04,264 line:-1
The watchOS picker
also runs out of process,


110
00:06:04,264 --> 00:06:06,933 line:-1
like the iOS
and the macOS picker,


111
00:06:06,933 --> 00:06:10,770 line:-1
so you don't need to request
any library access to use it.


112
00:06:10,770 --> 00:06:13,373 line:-1
It has a UI
similar to the iOS picker


113
00:06:13,373 --> 00:06:17,177 line:-1
but optimized
for the smaller screen.


114
00:06:17,177 --> 00:06:21,681 line:-1
You can browse your photos
in the grid or by collections.


115
00:06:21.681 --> 00:06:24.784 line:-1 position:50%
You can configure the picker
to show the selection order,


116
00:06:24.784 --> 00:06:29.356 line:-1 position:50%
as well as specifying
a selection limit.


117
00:06:29,356 --> 00:06:32,626 line:-1
However, unlike iOS and macOS,


118
00:06:32,626 --> 00:06:36,696 line:-1
only images will be displayed
in the watchOS picker.


119
00:06:36,696 --> 00:06:39,733 line:-1
If the device has more
than 500 images,


120
00:06:39,733 --> 00:06:43,370 line:-1
only the most recent 500
will be shown.


121
00:06:43.370 --> 00:06:45.005 line:-1 position:50%
You may be wondering,


122
00:06:45,005 --> 00:06:48,041 line:-1
"PHPickerViewController
is UIKit based.


123
00:06:48,041 --> 00:06:52,545 line:-1
How can I use it for my macOS
or watchOS app?"


124
00:06:52,545 --> 00:06:54,547 line:-1
As you may have guessed,


125
00:06:54.547 --> 00:07:00.687 line:-1 position:50%
new picker APIs are now
available in AppKit and SwiftUI.


126
00:07:00,687 --> 00:07:03,690 line:-1
Let's take a look
at the AppKit API first.


127
00:07:03,690 --> 00:07:07,961 line:-1
Actually, it is very similar
to the UIKit API.


128
00:07:07.961 --> 00:07:11.264 line:-1 position:50%
You have access to the same
PHPickerConfiguration type


129
00:07:11.264 --> 00:07:13.767 line:-1 position:50%
and its properties.


130
00:07:13.767 --> 00:07:16.336 line:-1 position:50%
There is only
a small difference:


131
00:07:16,336 --> 00:07:19,706 line:-1
PHPickerViewController
is a NSViewController subclass


132
00:07:19.706 --> 00:07:23.710 line:-1 position:50%
for AppKit apps.


133
00:07:23,710 --> 00:07:27,480 line:-1
With the introduction
of the AppKit-based PHPicker,


134
00:07:27,480 --> 00:07:31,785 line:-1
it's time to move away from the
legacy media library browser.


135
00:07:31,785 --> 00:07:35,121 line:-1
PHPicker is a lot more powerful.


136
00:07:35.121 --> 00:07:38.158 line:-1 position:50%
It's also easier to maintain
if you are working on both


137
00:07:38,158 --> 00:07:43,730 line:-1
UIKit and AppKit apps
at the same time.


138
00:07:43,730 --> 00:07:47,734 line:-1
Finally, it's time to talk about
the SwiftUI API.


139
00:07:49,969 --> 00:07:53,540 line:-1
Remember the iOS picker you saw
at the beginning of the session?


140
00:07:53,540 --> 00:07:58,044 line:-1
It can be presented with only
a few lines of SwiftUI code.


141
00:07:58,044 --> 00:08:00,513 line:-1
More importantly,
you have access


142
00:08:00,513 --> 00:08:03,016 line:-1
to the SwiftUI PhotosPicker API


143
00:08:03.016 --> 00:08:06.219 line:-1 position:50%
on all picker-supported
platforms:


144
00:08:06.219 --> 00:08:10.957 line:-1 position:50%
iOS, iPadOS, macOS, and watchOS.


145
00:08:10,957 --> 00:08:13,693 line:-1
The picker will automatically
choose the best layout


146
00:08:13,693 --> 00:08:17,297 line:-1
depending on the platform,
your app's configuration,


147
00:08:17,297 --> 00:08:20,133 line:-1
and available screen space.


148
00:08:20,133 --> 00:08:23,069 line:-1
You don't need to worry about
what the picker UI should be,


149
00:08:23,069 --> 00:08:26,639 line:-1
so you just can focus
on making your app better.


150
00:08:29,409 --> 00:08:32,979 line:-1
Before we look at the new API
in detail via a demo,


151
00:08:32,979 --> 00:08:34,481 line:-1
we should talk about how to load


152
00:08:34.481 --> 00:08:38.318 line:-1 position:50%
selected photos
and videos first.


153
00:08:38.318 --> 00:08:42.055 line:-1 position:50%
The selection you receive
through the SwiftUI binding


154
00:08:42,055 --> 00:08:45,458 line:-1
only contains
placeholder objects.


155
00:08:45,458 --> 00:08:50,029 line:-1
You still need to load
actual asset data on demand.


156
00:08:50,029 --> 00:08:51,931 line:-1
Keep in mind
that some asset data


157
00:08:51,931 --> 00:08:54,634 line:-1
won't be loaded immediately.


158
00:08:54.634 --> 00:08:56.836 line:-1 position:50%
The load operation
could also fail


159
00:08:56,836 --> 00:08:58,938 line:-1
if an error was encountered,


160
00:08:58.938 --> 00:09:02.075 line:-1 position:50%
for example, when the picker
was trying to download data


161
00:09:02.075 --> 00:09:05.512 line:-1 position:50%
from iCloud Photos
but the device was not connected


162
00:09:05,512 --> 00:09:08,014 line:-1
to the internet.


163
00:09:08,014 --> 00:09:12,485 line:-1
Some large files like videos may
take a long time to download,


164
00:09:12,485 --> 00:09:16,456 line:-1
so we recommend you to show
a per-item inline loading UI


165
00:09:16,456 --> 00:09:21,060 line:-1
instead of a blocking
loading indicator.


166
00:09:21.060 --> 00:09:23.563 line:-1 position:50%
The PhotosPicker
uses Transferable,


167
00:09:23,563 --> 00:09:26,766 line:-1
which is a new SwiftUI protocol
for transferring data


168
00:09:26,766 --> 00:09:29,903 line:-1
between apps and extensions.


169
00:09:29,903 --> 00:09:33,506 line:-1
You can load SwiftUI Image
via Transferable directly,


170
00:09:33,506 --> 00:09:35,809 line:-1
but for advanced use cases,


171
00:09:35,809 --> 00:09:37,844 line:-1
you should define
your own model objects


172
00:09:37,844 --> 00:09:40,280 line:-1
conforming to
the Transferable protocol


173
00:09:40,280 --> 00:09:44,918 line:-1
to fully control the type
of data you want to load.


174
00:09:44,918 --> 00:09:47,687 line:1
For more information
about Transferable,


175
00:09:47,687 --> 00:09:50,890 line:1
you can check out
the "Meet Transferable" session.


176
00:09:50,890 --> 00:09:54,861 line:-1
If your app needs to deal with
a lot of items at the same time,


177
00:09:54,861 --> 00:09:57,530 line:-1
or large assets like videos,


178
00:09:57,530 --> 00:10:00,633 line:-1
it may not be feasible
to load everything in memory


179
00:10:00,633 --> 00:10:03,169 line:-1
at the same time.


180
00:10:03.169 --> 00:10:08.007 line:-1 position:50%
To reduce memory usage, you can
use FileTransferRepresentation


181
00:10:08,007 --> 00:10:11,711 line:-1
to load selected assets
as files.


182
00:10:11.711 --> 00:10:13.646 line:-1 position:50%
When loading assets as files,


183
00:10:13,646 --> 00:10:16,216 line:-1
keep in mind
that your app is responsible


184
00:10:16.216 --> 00:10:19.219 line:-1 position:50%
for managing their lifecycles.


185
00:10:19,219 --> 00:10:21,821 line:-1
Files should always be copied
to your app directory


186
00:10:21.821 --> 00:10:27.227 line:-1 position:50%
when received and deleted
when they are no longer needed.


187
00:10:27.227 --> 00:10:30.163 line:-1 position:50%
OK, it's time for the demo!


188
00:10:30,163 --> 00:10:31,931 line:-1
I have already set up
this demo app


189
00:10:31.931 --> 00:10:34.634 line:-1 position:50%
showing an account profile page.


190
00:10:34,634 --> 00:10:39,205 line:-1
Right now the profile image
is just a placeholder icon.


191
00:10:39,205 --> 00:10:42,675 line:-1
We want to add an edit button
to change the profile image


192
00:10:42,675 --> 00:10:45,011 line:-1
using the PhotosPicker API.


193
00:10:45,011 --> 00:10:47,013 line:-1
The profile image view
can already respond


194
00:10:47.013 --> 00:10:50.383 line:-1 position:50%
to the image state
defined in our view model,


195
00:10:50.383 --> 00:10:52.719 line:-1 position:50%
so we just need to update
the image state


196
00:10:52.719 --> 00:10:56.189 line:-1 position:50%
when a picker selection
is received.


197
00:10:56,189 --> 00:10:58,591 line:-1
First, let's go
to our view model


198
00:10:58,591 --> 00:11:01,494 line:-1
and add a new
imageSelection property.


199
00:11:01,494 --> 00:11:04,030 line:-1
It will be passed
to the PhotosPicker API


200
00:11:04.030 --> 00:11:07.300 line:-1 position:50%
as the selection binding.


201
00:11:07,300 --> 00:11:10,937 line:-1
Now we can go back
to our profile image view,


202
00:11:10,937 --> 00:11:14,340 line:-1
and add an overlay button
that brings up the picker.


203
00:11:19,212 --> 00:11:22,682 line:-1
OK, let's pause for a second
and take a look at the code


204
00:11:22,682 --> 00:11:24,384 line:-1
we just added.


205
00:11:24.384 --> 00:11:26.085 line:-1 position:50%
We added a PhotosPicker view,


206
00:11:26.085 --> 00:11:29.289 line:-1 position:50%
given it the selection binding
we just defined,


207
00:11:29,289 --> 00:11:33,059 line:-1
and configured it
to only show images.


208
00:11:33,059 --> 00:11:34,294 line:-1
The label of the PhotosPicker


209
00:11:34,294 --> 00:11:39,098 line:-1
is just a pencil glyph
with a circle background.


210
00:11:39,098 --> 00:11:42,335 line:-1
We can build and run
to see what we have so far.


211
00:11:42,335 --> 00:11:46,005 line:-1
I can tap the edit button
to bring up the picker.


212
00:11:46,005 --> 00:11:49,909 line:-1
Tapping an image will
automatically close the picker,


213
00:11:49.909 --> 00:11:52.512 line:-1 position:50%
but the profile image
is not updated.


214
00:11:52.512 --> 00:11:53.713 line:-1 position:50%
Why?


215
00:11:53,713 --> 00:11:55,815 line:-1
We still need to connect
the image selection


216
00:11:55,815 --> 00:11:57,350 line:-1
and the image state.


217
00:11:57,350 --> 00:11:59,452 line:-1
So, let's do that.


218
00:11:59.452 --> 00:12:01.054 line:-1 position:50%
We can go back to the view model


219
00:12:01,054 --> 00:12:04,624 line:-1
and respond to image
selection did set.


220
00:12:04,624 --> 00:12:08,695 line:-1
We set the image state to empty
if the image selection is nil.


221
00:12:08,695 --> 00:12:12,532 line:-1
Otherwise,
we start loading the image.


222
00:12:12,532 --> 00:12:15,535 line:-1
We are seeing a compiler error
because we haven't implemented


223
00:12:15.535 --> 00:12:17.870 line:-1 position:50%
the loadTransferable
method yet.


224
00:12:17,870 --> 00:12:19,472 line:-1
Let's fix it.


225
00:12:23.042 --> 00:12:25.645 line:-1 position:50%
The implementation
is very simple.


226
00:12:25.645 --> 00:12:28.247 line:-1 position:50%
We just need to respond
to the completion handler


227
00:12:28.247 --> 00:12:29.916 line:-1 position:50%
and update image state


228
00:12:29.916 --> 00:12:34.220 line:-1 position:50%
if the request is still
the most recent one.


229
00:12:34.220 --> 00:12:37.790 line:-1 position:50%
Let's build and run
to see it in action.


230
00:12:37,790 --> 00:12:43,229 line:-1
I can tap the edit button
and select an image.


231
00:12:43.229 --> 00:12:46.899 line:-1 position:50%
Great!
It works as expected.


232
00:12:46,899 --> 00:12:52,338 line:-1
Actually, the project is already
set up to run on macOS as well.


233
00:12:52.338 --> 00:12:56.209 line:-1 position:50%
Will the code I just added
automatically work on macOS?


234
00:12:56,209 --> 00:12:59,445 line:-1
Let's build and run to find out.


235
00:12:59,445 --> 00:13:01,014 line:1
It compiles!


236
00:13:01,014 --> 00:13:04,150 line:-1
I can open the picker,
select an image,


237
00:13:04.150 --> 00:13:07.954 line:-1 position:50%
and it is reflected in the app.


238
00:13:07.954 --> 00:13:09.989 line:-1 position:50%
That's it for the demo.


239
00:13:09,989 --> 00:13:13,226 line:-1
You just saw the demo
on iOS and macOS,


240
00:13:13,226 --> 00:13:17,030 line:-1
but the same code will work
on watchOS as well.


241
00:13:17.030 --> 00:13:20.433 line:-1 position:50%
However, there are a few things
to keep in mind.


242
00:13:23,269 --> 00:13:25,805 line:-1
The watchOS picker is designed
for simple flows


243
00:13:25,805 --> 00:13:28,274 line:-1
and short interactions.


244
00:13:28,274 --> 00:13:31,778 line:-1
Images are scaled
based on the device size.


245
00:13:31,778 --> 00:13:36,616 line:-1
Usually, they are synced
from the paired iPhone.


246
00:13:36,616 --> 00:13:39,986 line:-1
However, Family Setup
lets your family members


247
00:13:39.986 --> 00:13:41.487 line:-1 position:50%
who don't have their own iPhone


248
00:13:41,487 --> 00:13:46,092 line:-1
enjoy the features and benefits
of an Apple Watch.


249
00:13:46,092 --> 00:13:49,228 line:-1
If a device is in
the Family Setup mode,


250
00:13:49,228 --> 00:13:52,899 line:-1
the most recent 1000 images in
iCloud Photos can be selected


251
00:13:52,899 --> 00:13:55,301 line:-1
using the picker.


252
00:13:55,301 --> 00:13:59,439 line:-1
The picker may need to download
some images from the internet.


253
00:13:59.439 --> 00:14:01.207 line:-1 position:50%
And if that's the case,


254
00:14:01.207 --> 00:14:04.877 line:-1 position:50%
a loading UI will be shown
in the picker before closing.


255
00:14:06.746 --> 00:14:08.715 line:-1 position:50%
Before you go,
I just want to say


256
00:14:08,715 --> 00:14:11,350 line:-1
that we are committed to making
the system Photos picker


257
00:14:11,350 --> 00:14:15,488 line:-1
the best way for most apps
to access photos and videos.


258
00:14:15.488 --> 00:14:17.590 line:-1 position:50%
We really encourage you
to switch to it


259
00:14:17.590 --> 00:14:20.326 line:-1 position:50%
if you are still using
a custom picker.


260
00:14:20,326 --> 00:14:23,396 line:-1
Thank you,
and have a great WWDC!


261
00:14:23,396 --> 00:14:27,533 align:right size:2% position:90%
â™ª

