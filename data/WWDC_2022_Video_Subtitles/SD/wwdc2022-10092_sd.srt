2
00:00:00.067 --> 00:00:03.003 line:-1 position:50%
♪ Mellow instrumental
hip-hop music ♪


3
00:00:03,003 --> 00:00:09,776 position:90% align:right line:0
♪


4
00:00:09.776 --> 00:00:11.912 line:-1 position:50%
Hi, I'm Garrett,


5
00:00:11.912 --> 00:00:15.148 line:-1 position:50%
an engineer on the
Authentication Experience team.


6
00:00:15,148 --> 00:00:19,386 line:-1
And in this video, I'm excited
to talk about passkeys,


7
00:00:19,386 --> 00:00:23,490 line:-1
a next-generation
authentication technology.


8
00:00:23.490 --> 00:00:25.359 line:-1 position:50%
But first, I need to talk about


9
00:00:25,359 --> 00:00:28,896 line:-1
today's authentication
technology: passwords.


10
00:00:28,896 --> 00:00:30,397 line:-1
You're probably used
to signing in


11
00:00:30,397 --> 00:00:33,600 line:-1
to nearly every app
and website with them.


12
00:00:33.600 --> 00:00:37.137 line:-1 position:50%
Passwords are really hard
to use securely.


13
00:00:37,137 --> 00:00:39,940 line:-1
All of us know
we're supposed to create strong,


14
00:00:39.940 --> 00:00:42.709 line:-1 position:50%
unique passwords
for every account,


15
00:00:42.709 --> 00:00:45.779 line:-1 position:50%
but not many people actually do.


16
00:00:45,779 --> 00:00:48,782 line:-1
As you're designing
your apps and websites,


17
00:00:48.782 --> 00:00:52.019 line:-1 position:50%
there's this constant tradeoff
between keeping accounts secure


18
00:00:52,019 --> 00:00:55,322 line:-1
and designing a good experience.


19
00:00:55.322 --> 00:00:59.760 line:-1 position:50%
And even if your apps and
websites do everything right,


20
00:00:59.760 --> 00:01:02.996 line:-1 position:50%
issues like phishing
and password reuse


21
00:01:02,996 --> 00:01:06,433 line:-1
can still lead
to account compromise.


22
00:01:06.433 --> 00:01:09.436 line:-1 position:50%
In macOS Monterey
and iOS 15,


23
00:01:09,436 --> 00:01:12,606 line:-1
we announced a developer
preview of the solution --


24
00:01:12,606 --> 00:01:16,310 line:-1
passkeys -- and got so much
great feedback.


25
00:01:16.310 --> 00:01:19.313 line:-1 position:50%
In macOS Ventura and iOS 16,


26
00:01:19.313 --> 00:01:23.083 line:-1 position:50%
we're excited to make passkeys
available to everyone.


27
00:01:23.083 --> 00:01:26.086 line:-1 position:50%
Now is the time to adopt them.


28
00:01:26.086 --> 00:01:27.387 line:-1 position:50%
With passkeys,


29
00:01:27.387 --> 00:01:31.358 line:-1 position:50%
not only is the user experience
better than a password,


30
00:01:31.358 --> 00:01:35.329 line:-1 position:50%
but also entire categories
of security problems,


31
00:01:35,329 --> 00:01:37,564 line:-1
like weak and reused
credentials,


32
00:01:37,564 --> 00:01:42,769 line:-1
credential leaks, and phishing,
are just not possible anymore.


33
00:01:42.769 --> 00:01:45.272 line:-1 position:50%
And they're so easy to use.


34
00:01:45.272 --> 00:01:47.975 line:-1 position:50%
Let me show you.


35
00:01:47,975 --> 00:01:51,378 line:-1
Let's start with our favorite
demo app, Shiny.


36
00:01:51,378 --> 00:01:54,781 line:-1
This app lets me see
one cute picture a day


37
00:01:54.781 --> 00:01:59.386 line:-1 position:50%
and has a typical
password-based sign-in flow.


38
00:01:59,386 --> 00:02:01,755 line:-1
I can tap in the
user name field


39
00:02:01.755 --> 00:02:04.958 line:-1 position:50%
and see an AutoFill suggestion
for my account.


40
00:02:04.958 --> 00:02:08.428 line:-1 position:50%
I'll select that, sign in.


41
00:02:08.428 --> 00:02:10.664 line:-1 position:50%
Then, I can fill in my password.


42
00:02:12.933 --> 00:02:14.968 line:-1 position:50%
Then, I wait around
for a little bit


43
00:02:14,968 --> 00:02:18,005 line:-1
until an SMS message comes in
with my one-time code.


44
00:02:20.374 --> 00:02:22.142 line:-1 position:50%
There it is.


45
00:02:22.142 --> 00:02:25.212 line:-1 position:50%
And eventually, I'm signed in.


46
00:02:25.212 --> 00:02:28.348 line:-1 position:50%
It took a few steps,
but with the help of AutoFill


47
00:02:28,348 --> 00:02:31,051 line:-1
and my password manager,
I was able to get there.


48
00:02:33,320 --> 00:02:37,524 line:0
Now that I'm signed in, I'll add
a passkey to this account.


49
00:02:37,524 --> 00:02:41,228 line:0
Account Management, Add passkey.


50
00:02:41,228 --> 00:02:45,332 position:50%
Here, I get the system sheet
for creating a passkey.


51
00:02:45.332 --> 00:02:47.000 line:-1 position:50%
Continue.


52
00:02:47,000 --> 00:02:48,802 line:-1
Done!


53
00:02:48,802 --> 00:02:52,172 line:-1
In just a few taps,
my device has generated


54
00:02:52.172 --> 00:02:56.109 line:-1 position:50%
a unique, cryptographically
strong key pair for my account


55
00:02:56,109 --> 00:02:58,879 line:-1
and stored it
in my iCloud Keychain,


56
00:02:58.879 --> 00:03:02.049 line:-1 position:50%
so it will sync and work
across all of my devices


57
00:03:02.049 --> 00:03:04.584 line:-1 position:50%
running macOS Ventura
and iOS 16.


58
00:03:06.987 --> 00:03:08.688 line:-1 position:50%
Now that I have a passkey,


59
00:03:08.688 --> 00:03:11.458 line:-1 position:50%
let me show you
how easy it is to use.


60
00:03:11,458 --> 00:03:13,627 line:-1
I'm going to sign out,


61
00:03:13.627 --> 00:03:18.398 line:-1 position:50%
and I'm back at the same
sign-in form I used earlier.


62
00:03:18.398 --> 00:03:21.902 line:-1 position:50%
I'm going to focus
the user name field like before.


63
00:03:21.902 --> 00:03:25.572 line:-1 position:50%
Now that I have a passkey
saved for my account,


64
00:03:25.572 --> 00:03:28.208 line:-1 position:50%
it shows up
in the QuickType bar.


65
00:03:28.208 --> 00:03:31.978 line:-1 position:50%
All I have to do is tap it
and I'm signed in.


66
00:03:31,978 --> 00:03:34,247 line:-1
One step.


67
00:03:34.247 --> 00:03:35.882 line:-1 position:50%
When saving the passkey,


68
00:03:35,882 --> 00:03:38,652 line:-1
I didn't have to come up
with a new password


69
00:03:38.652 --> 00:03:42.689 line:-1 position:50%
or try to satisfy
any complexity requirements.


70
00:03:42,689 --> 00:03:45,926 line:-1
Each passkey
is generated by the system


71
00:03:45,926 --> 00:03:49,663 line:-1
and guaranteed to be strong
and only ever used


72
00:03:49.663 --> 00:03:52.332 line:-1 position:50%
for a single account.


73
00:03:52,332 --> 00:03:54,968 line:-1
And when I'm signing in with it,
it can be shown


74
00:03:54.968 --> 00:03:57.938 line:-1 position:50%
in the existing sign-in flows
I'm used to,


75
00:03:57.938 --> 00:04:00.774 line:-1 position:50%
and it's a single tap to use.


76
00:04:00,774 --> 00:04:04,511 line:-1
And the system will take care
of only letting me use it


77
00:04:04,511 --> 00:04:07,013 line:-1
in the correct app or website,


78
00:04:07,013 --> 00:04:10,784 line:-1
with strong built-in
phishing resistance.


79
00:04:10.784 --> 00:04:14.354 line:-1 position:50%
Of course, passkeys
work on the web too.


80
00:04:14,354 --> 00:04:17,924 line:-1
Here I am on Shiny's
website in Safari.


81
00:04:17,924 --> 00:04:21,828 line:-1
Just like on my phone, when I
focus the user name field,


82
00:04:21,828 --> 00:04:25,298 line:-1
my passkey is already there
and ready to use,


83
00:04:25.298 --> 00:04:27.334 line:-1 position:50%
thanks to iCloud Keychain.


84
00:04:27.334 --> 00:04:30.837 line:-1 position:50%
All I have to do is Touch ID
and I'm signed in.


85
00:04:30.837 --> 00:04:32.973 line:-1 position:50%
That's it.


86
00:04:32.973 --> 00:04:37.010 line:-1 position:50%
Apple's passkey implementation
is built on open standards.


87
00:04:37,010 --> 00:04:39,279 line:-1
We've been working
with other platform vendors


88
00:04:39.279 --> 00:04:42.182 line:-1 position:50%
within the FIDO Alliance
to make sure


89
00:04:42.182 --> 00:04:45.886 line:-1 position:50%
that passkey implementations
are compatible cross-platform


90
00:04:45.886 --> 00:04:49.923 line:-1 position:50%
and can work on as many
devices as possible.


91
00:04:49.923 --> 00:04:52.893 line:-1 position:50%
After upgrading my account
to use a passkey,


92
00:04:52,893 --> 00:04:57,297 line:-1
I'm still able to sign in to it
on my friend's PC.


93
00:04:57,297 --> 00:05:00,600 line:-1
Of course, my friend's PC
doesn't have the passkey


94
00:05:00,600 --> 00:05:05,805 line:-1
saved locally, but I can still
type my user name here.


95
00:05:05.805 --> 00:05:07.307 line:-1 position:50%
When I press Sign In,


96
00:05:07,307 --> 00:05:11,077 line:-1
I get a sheet that's offering
to let me use my phone.


97
00:05:11.077 --> 00:05:14.581 line:-1 position:50%
Then I get a QR code.
Let me scan that.


98
00:05:16,883 --> 00:05:19,419 line:-1
My phone recognizes
that this QR code


99
00:05:19.419 --> 00:05:22.656 line:-1 position:50%
is for signing in
with a passkey.


100
00:05:22.656 --> 00:05:24.457 line:-1 position:50%
When I select this option,


101
00:05:24.457 --> 00:05:29.062 line:-1 position:50%
my phone and the browser
securely connect to each other.


102
00:05:29,062 --> 00:05:34,668 line:-1
Now I can just Continue,
and I'm signed in.


103
00:05:34,668 --> 00:05:37,270 line:-1
This cross-platform
sign-in experience


104
00:05:37.270 --> 00:05:39.973 line:-1 position:50%
is a first-class system feature


105
00:05:39,973 --> 00:05:43,176 line:-1
that's part of the standards
behind passkeys.


106
00:05:43,176 --> 00:05:46,680 line:-1
On the surface,
it appears incredibly simple,


107
00:05:46.680 --> 00:05:49.516 line:-1 position:50%
but this is not just a QR code.


108
00:05:49,516 --> 00:05:50,684 line:-1
Behind the scenes,


109
00:05:50.684 --> 00:05:53.587 line:-1 position:50%
the devices are performing
a local key agreement,


110
00:05:53,587 --> 00:05:55,288 line:-1
proving proximity,


111
00:05:55,288 --> 00:05:59,259 line:-1
establishing an end-to-end
encrypted communication channel,


112
00:05:59.259 --> 00:06:02.796 line:-1 position:50%
all to let you sign in
in a way that's easy


113
00:06:02,796 --> 00:06:07,033 line:-1
but maintains the strong
phishing resistance of passkeys.


114
00:06:07.033 --> 00:06:10.136 line:-1 position:50%
It works great for allowing me
to sign in securely


115
00:06:10.136 --> 00:06:14.541 line:-1 position:50%
to my account on any device.


116
00:06:14,541 --> 00:06:17,877 line:-1
Another important feature
for a password replacement


117
00:06:17.877 --> 00:06:22.382 line:-1 position:50%
is the ability to share accounts
between two or more people.


118
00:06:22.382 --> 00:06:24.551 line:-1 position:50%
To share a passkey
with someone else,


119
00:06:24.551 --> 00:06:26.386 line:-1 position:50%
I can use AirDrop.


120
00:06:28,521 --> 00:06:32,626 line:-1
My partner and I also have an
account for Shiny that we share,


121
00:06:32.626 --> 00:06:35.962 line:-1 position:50%
which I've already upgraded
to use a passkey.


122
00:06:35,962 --> 00:06:39,833 line:-1
With a passkey, the credential
isn't something I could type,


123
00:06:39,833 --> 00:06:43,169 line:-1
but I'm still able to share it
with people I trust.


124
00:06:43,169 --> 00:06:46,006 line:-1
On my phone, I'll open up
the account details.


125
00:06:48.942 --> 00:06:50.644 line:-1 position:50%
Here are all of my accounts,


126
00:06:50.644 --> 00:06:54.648 line:-1 position:50%
which use both passwords
and passkeys.


127
00:06:54,648 --> 00:06:58,852 line:-1
I can tap on our shared account
to pull up more details.


128
00:06:58,852 --> 00:07:02,455 line:-1
Here, I can get some information
about my saved passkey


129
00:07:02.455 --> 00:07:04.824 line:-1 position:50%
or add a note to this account.


130
00:07:04,824 --> 00:07:08,428 line:-1
I can also share my passkey.


131
00:07:08,428 --> 00:07:09,996 line:-1
There's my partner's phone.


132
00:07:09.996 --> 00:07:11.698 line:-1 position:50%
I'll go ahead and select that.


133
00:07:14.868 --> 00:07:17.604 line:-1 position:50%
Now my partner
has the passkey too.


134
00:07:19,839 --> 00:07:25,512 line:0
And that's how easy it is
to use passkeys everywhere.


135
00:07:25,512 --> 00:07:29,316 line:-1
I've just gone over the
experience of using a passkey.


136
00:07:29,316 --> 00:07:32,118 line:-1
Next, I'll talk about
what a passkey is


137
00:07:32,118 --> 00:07:36,323 line:-1
and some interface guidelines
when using them.


138
00:07:36.323 --> 00:07:39.359 line:-1 position:50%
Then I'll show you
how you can integrate passkeys


139
00:07:39,359 --> 00:07:42,929 line:-1
into your existing sign-in flows
in your apps and websites,


140
00:07:42,929 --> 00:07:45,832 line:-1
by taking advantage of AutoFill,


141
00:07:45,832 --> 00:07:48,201 line:-1
followed by some
additional options


142
00:07:48.201 --> 00:07:52.539 line:-1 position:50%
that can further streamline
your sign-in process.


143
00:07:52,539 --> 00:07:55,475 line:-1
After that, I'll go into
some more technical detail


144
00:07:55.475 --> 00:07:58.278 line:-1 position:50%
about how passkeys work


145
00:07:58.278 --> 00:08:04.284 line:-1 position:50%
and finally, discuss passkeys
and multifactor authentication.


146
00:08:04.284 --> 00:08:07.921 line:-1 position:50%
First up,
designing for passkeys.


147
00:08:07,921 --> 00:08:10,490 line:-1
When it comes to talking
about passkeys,


148
00:08:10,490 --> 00:08:15,862 line:-1
first and foremost, passkeys are
replacements for passwords.


149
00:08:15.862 --> 00:08:19.399 line:-1 position:50%
They're faster to sign in with,
easier to use,


150
00:08:19,399 --> 00:08:23,370 line:-1
and so much more secure.


151
00:08:23,370 --> 00:08:26,473 line:-1
Here are some guidelines
for how to refer to passkeys


152
00:08:26,473 --> 00:08:29,342 line:-1
in your apps and websites.


153
00:08:29.342 --> 00:08:33.246 line:-1 position:50%
"Passkey" is a generic,
user-visible term.


154
00:08:33,246 --> 00:08:37,217 line:-1
This video focuses on
Apple's implementation,


155
00:08:37.217 --> 00:08:40.220 line:-1 position:50%
but as I've just shown you,
other major platforms


156
00:08:40,220 --> 00:08:45,091 line:-1
have already started building
their own support for passkeys.


157
00:08:45,091 --> 00:08:49,195 line:-1
"Passkey" is also a common noun,
like "password."


158
00:08:49.195 --> 00:08:51.965 line:-1 position:50%
In English, this means
it's lowercase


159
00:08:51.965 --> 00:08:54.968 line:-1 position:50%
and gets pluralized
like "password" would.


160
00:08:54.968 --> 00:08:59.439 line:-1 position:50%
I have a passkey for my account,
and I can go to Settings


161
00:08:59,439 --> 00:09:03,610 line:-1
to view all of my accounts
with passkeys.


162
00:09:03,610 --> 00:09:07,580 position:50%
On Apple platforms,
you can also use the SF Symbol


163
00:09:07,580 --> 00:09:11,484 position:50%
person.key.badge
and the .fill variant


164
00:09:11,484 --> 00:09:15,722 line:0
to provide iconography
consistent with the system.


165
00:09:15.722 --> 00:09:18.124 line:-1 position:50%
When it comes to offering
passkeys in your apps


166
00:09:18.124 --> 00:09:24.030 line:-1 position:50%
and websites, you don't need
to design entire new interfaces.


167
00:09:24.030 --> 00:09:27.534 line:-1 position:50%
The user name field is
the center point for most app


168
00:09:27,534 --> 00:09:30,136 line:-1
and website sign-in today.


169
00:09:30,136 --> 00:09:32,639 line:-1
Pretty much everyone
knows how to use it,


170
00:09:32,639 --> 00:09:36,376 line:-1
and many apps and websites
already take advantage of it


171
00:09:36.376 --> 00:09:40.613 line:-1 position:50%
to tailor the sign-in experience
per account.


172
00:09:40.613 --> 00:09:45.084 line:-1 position:50%
Now the user name field
has another big feature.


173
00:09:45.084 --> 00:09:47.554 line:-1 position:50%
While passkeys
bring new paradigms


174
00:09:47.554 --> 00:09:51.858 line:-1 position:50%
for how signing in works, the
transition away from passwords


175
00:09:51.858 --> 00:09:55.061 line:-1 position:50%
needs to be smooth
and easy too.


176
00:09:55.061 --> 00:09:58.531 line:-1 position:50%
You can now present passkeys
using AutoFill


177
00:09:58,531 --> 00:10:01,901 line:-1
as a first-class feature,
letting you drop them


178
00:10:01.901 --> 00:10:05.238 line:-1 position:50%
right in to your existing
sign-in flows,


179
00:10:05.238 --> 00:10:10.276 line:-1 position:50%
in an interface that's familiar
and people know how to use.


180
00:10:10,276 --> 00:10:12,145 line:0
Presenting passkeys
with AutoFill


181
00:10:12,145 --> 00:10:15,281 line:0
is the primary way
you should use them.


182
00:10:15,281 --> 00:10:18,284 position:50%
For more advanced uses though,
Apple platforms


183
00:10:18,284 --> 00:10:21,921 line:0
also have a wide range
of additional UI options


184
00:10:21,921 --> 00:10:25,358 line:0
for signing in with passkeys.


185
00:10:25.358 --> 00:10:27.660 line:-1 position:50%
Here's how to get started
using passkeys


186
00:10:27.660 --> 00:10:30.530 line:-1 position:50%
and presenting them
with AutoFill.


187
00:10:30,530 --> 00:10:33,099 line:-1
Passkeys are built
on the WebAuthentication --


188
00:10:33,099 --> 00:10:37,670 line:-1
or WebAuthn standard --
and use public-key cryptography.


189
00:10:37,670 --> 00:10:41,508 line:-1
Rather than having
a typable word or string,


190
00:10:41.508 --> 00:10:46.679 line:-1 position:50%
unique cryptographic key pairs
are generated for every account.


191
00:10:46,679 --> 00:10:49,949 line:-1
You'll need to adopt WebAuthn
on your server back end


192
00:10:49,949 --> 00:10:52,952 line:-1
in order to perform
passkey sign-in.


193
00:10:52,952 --> 00:10:55,955 line:-1
Any standard WebAuthn
server implementation


194
00:10:55,955 --> 00:10:59,859 line:-1
should work with passkeys.


195
00:10:59.859 --> 00:11:01.861 line:-1 position:50%
In apps on Apple platforms,


196
00:11:01.861 --> 00:11:05.598 line:-1 position:50%
passkeys are part of the
ASAuthorization API family


197
00:11:05.598 --> 00:11:08.468 line:-1 position:50%
in the AuthenticationServices
framework.


198
00:11:08,468 --> 00:11:11,004 line:-1
This is our API
for working with all kinds


199
00:11:11,004 --> 00:11:14,140 line:-1
of different credentials,
including passwords,


200
00:11:14,140 --> 00:11:17,744 line:-1
security keys,
and Sign in with Apple.


201
00:11:17,744 --> 00:11:20,513 line:-1
We've also added a few
new methods you can use,


202
00:11:20.513 --> 00:11:25.318 line:-1 position:50%
like AutoFill support, to make
this API even more flexible


203
00:11:25.318 --> 00:11:30.423 line:-1 position:50%
and let you fit it in seamlessly
in your existing sign-in flows.


204
00:11:30,423 --> 00:11:33,726 line:-1
To get started using
passkeys in your apps,


205
00:11:33.726 --> 00:11:36.496 line:-1 position:50%
first, you'll need to set up
associated domains,


206
00:11:36.496 --> 00:11:39.165 line:-1 position:50%
using the webcredentials
service.


207
00:11:39,165 --> 00:11:41,301 line:0
You can find more
details about that


208
00:11:41,301 --> 00:11:44,237 line:0
in the "Introducing Password
AutoFill for Apps"


209
00:11:44,237 --> 00:11:47,607 position:50%
and "What's new
in Universal Links" videos.


210
00:11:47.607 --> 00:11:51.277 line:-1 position:50%
In your app's interface,
make sure your user name field


211
00:11:51.277 --> 00:11:54.914 line:-1 position:50%
is using the user name
textContentTtype.


212
00:11:54.914 --> 00:11:59.586 line:-1 position:50%
This lets the system know where
to offer passkey suggestions.


213
00:11:59.586 --> 00:12:02.088 line:-1 position:50%
Once that's configured,
here's the code needed


214
00:12:02.088 --> 00:12:05.592 line:-1 position:50%
to start an AutoFill-assisted
passkey request.


215
00:12:05.592 --> 00:12:09.529 line:-1 position:50%
It's just a few simple steps
when you break it down.


216
00:12:09.529 --> 00:12:12.665 line:-1 position:50%
As with any WebAuthn request,
you'll first need


217
00:12:12.665 --> 00:12:16.102 line:-1 position:50%
to fetch a challenge
from your server.


218
00:12:16.102 --> 00:12:19.472 line:-1 position:50%
Then create the provider
and the request.


219
00:12:19.472 --> 00:12:23.142 line:-1 position:50%
ASAuthorizationPlatformPublicKey
CredentialProvider


220
00:12:23.142 --> 00:12:25.178 line:-1 position:50%
is the
ASAuthorizationProvider


221
00:12:25.178 --> 00:12:28.247 line:-1 position:50%
for working
with passkey requests.


222
00:12:28.247 --> 00:12:32.452 line:-1 position:50%
In WebAuthn terms, assertions
are used when signing in,


223
00:12:32,452 --> 00:12:35,054 line:-1
so here, I'm creating
an assertion request


224
00:12:35.054 --> 00:12:38.191 line:-1 position:50%
to sign in with
an existing passkey.


225
00:12:38.191 --> 00:12:39.993 line:-1 position:50%
ASAuthorizationController


226
00:12:39,993 --> 00:12:42,695 line:-1
is what actually handles
the request.


227
00:12:42,695 --> 00:12:45,365 line:-1
Create an instance
with the passkey request


228
00:12:45.365 --> 00:12:50.536 line:-1 position:50%
and configure its delegate and
presentationContextProvider.


229
00:12:50,536 --> 00:12:54,273 position:50%
And finally, call
performAutoFillAssistedRequests


230
00:12:54,273 --> 00:12:56,509 position:50%
to start the request.


231
00:12:56,509 --> 00:12:59,045 line:-1
While this request
is running in your app,


232
00:12:59,045 --> 00:13:01,714 line:-1
whenever a user name field
is focused,


233
00:13:01.714 --> 00:13:05.918 line:-1 position:50%
the system will offer available
passkeys in the QuickType bar.


234
00:13:05,918 --> 00:13:09,756 line:-1
Make sure to start this request
early in your view lifetime


235
00:13:09,756 --> 00:13:11,858 line:-1
before a user name field
gets focused,


236
00:13:11.858 --> 00:13:15.628 line:-1 position:50%
so passkeys are ready
when the keyboard appears.


237
00:13:15,628 --> 00:13:18,464 line:-1
When an item from
the QuickType bar is selected,


238
00:13:18.464 --> 00:13:21.467 line:-1 position:50%
Face ID gets invoked,
then you'll receive


239
00:13:21.467 --> 00:13:24.470 line:-1 position:50%
an ASAuthorizationController
Delegate callback


240
00:13:24.470 --> 00:13:26.472 line:-1 position:50%
to complete the sign-in.


241
00:13:26.472 --> 00:13:29.575 line:-1 position:50%
Nothing actually gets filled
in your text field.


242
00:13:29,575 --> 00:13:32,912 line:-1
When an authorization succeeds
for any credential type,


243
00:13:32,912 --> 00:13:35,048 line:-1
you'll get the
didCompleteWithAuthorization


244
00:13:35.048 --> 00:13:37.216 line:-1 position:50%
callback.


245
00:13:37,216 --> 00:13:38,785 line:-1
The first thing you should do


246
00:13:38.785 --> 00:13:41.821 line:-1 position:50%
is check the type
of the credential that you got.


247
00:13:41,821 --> 00:13:44,657 line:-1
In the case of passkey sign-in,
it will be an


248
00:13:44,657 --> 00:13:50,029 line:-1
ASAuthorizationPlatformPublicKey
CredentialAssertion.


249
00:13:50,029 --> 00:13:52,465 line:-1
The assertion object will
contain the fields needed


250
00:13:52,465 --> 00:13:55,368 line:-1
to verify the sign-in
on your back end.


251
00:13:55.368 --> 00:13:59.005 line:-1 position:50%
You should read the values,
verify them with your server,


252
00:13:59,005 --> 00:14:01,140 line:-1
and complete the sign-in.


253
00:14:01.140 --> 00:14:04.977 line:-1 position:50%
AutoFill-assisted passkey
requests are powerful.


254
00:14:04.977 --> 00:14:06.813 line:-1 position:50%
With that small code change,


255
00:14:06,813 --> 00:14:11,284 line:-1
your app's sign-in flow
now offers a lot of flexibility.


256
00:14:11,284 --> 00:14:14,153 line:-1
The primary case, of course,
is to select


257
00:14:14.153 --> 00:14:16.823 line:-1 position:50%
the passkey suggestion
from the QuickType bar


258
00:14:16,823 --> 00:14:19,959 line:-1
to sign in quickly
with that passkey.


259
00:14:19.959 --> 00:14:24.030 line:-1 position:50%
This is what you should expect
to happen most often.


260
00:14:24.030 --> 00:14:26.499 line:-1 position:50%
There are other options though.


261
00:14:26,499 --> 00:14:29,769 line:-1
The code I just showed you
also allows passkey sign-in


262
00:14:29.769 --> 00:14:33.439 line:-1 position:50%
from nearby devices
with no additional changes.


263
00:14:33,439 --> 00:14:36,175 line:-1
You can tap the key icon
to bring up a view


264
00:14:36,175 --> 00:14:40,079 line:-1
that lists all available
passkeys and passwords


265
00:14:40.079 --> 00:14:43.683 line:-1 position:50%
and get to the option to sign in
with a nearby device.


266
00:14:43,683 --> 00:14:47,687 line:0
Then you can perform a
cross-device passkey sign-in.


267
00:14:47,687 --> 00:14:50,723 line:0
In both cases,
if a passkey is used,


268
00:14:50,723 --> 00:14:52,024 position:50%
you'll receive the same


269
00:14:52,024 --> 00:14:55,061 line:0
ASAuthorizationController
Delegate callback.


270
00:14:55,061 --> 00:14:59,165 line:-1
There's nothing special you need
to do to support this.


271
00:14:59.165 --> 00:15:01.868 line:-1 position:50%
If a user doesn't have
any passkeys yet,


272
00:15:01.868 --> 00:15:05.772 line:-1 position:50%
they can just use your login
form like they're used to.


273
00:15:05.772 --> 00:15:09.142 line:-1 position:50%
They'll get password suggestions
in the QuickType bar,


274
00:15:09,142 --> 00:15:11,978 line:-1
or they can just type
in the fields.


275
00:15:11.978 --> 00:15:14.347 line:-1 position:50%
If a password item is selected,


276
00:15:14.347 --> 00:15:17.750 line:-1 position:50%
the credential will still be
filled in to your text fields,


277
00:15:17.750 --> 00:15:21.154 line:-1 position:50%
and you can cancel
the running request.


278
00:15:21.154 --> 00:15:23.289 line:-1 position:50%
We designed this API
to let you drop it


279
00:15:23.289 --> 00:15:25.992 line:-1 position:50%
right in to your existing
sign-in flows


280
00:15:25.992 --> 00:15:30.630 line:-1 position:50%
and make it super easy
for your users.


281
00:15:30,630 --> 00:15:34,233 position:50%
If someone that has already
upgraded to using a passkey


282
00:15:34,233 --> 00:15:36,869 position:50%
decides to enter
their user name anyway


283
00:15:36,869 --> 00:15:39,305 position:50%
instead of using
the AutoFill suggestion,


284
00:15:39,305 --> 00:15:41,207 line:0
you should cancel
the AutoFill request


285
00:15:41,207 --> 00:15:43,342 line:0
and use
ASAuthorizationController


286
00:15:43,342 --> 00:15:46,279 position:50%
to present a modal passkey
sign-in sheet.


287
00:15:46,279 --> 00:15:48,815 line:0
From here,
it's still a single tap,


288
00:15:48,815 --> 00:15:50,316 line:0
and you'll receive the same


289
00:15:50,316 --> 00:15:53,920 position:50%
ASAuthorizationController
Delegate callback.


290
00:15:53,920 --> 00:15:56,122 line:0
Here's the code from before.


291
00:15:56,122 --> 00:15:59,792 line:0
To switch this from an AutoFill
request to a modal request,


292
00:15:59,792 --> 00:16:03,229 line:0
just swap this
performAutoFillAssistedRequests


293
00:16:03,229 --> 00:16:07,600 line:0
method call
with a performRequests() call.


294
00:16:07,600 --> 00:16:11,571 line:0
This will present a modal sheet
with all available passkeys


295
00:16:11,571 --> 00:16:16,008 line:0
as well as the option to use
a passkey from a nearby device.


296
00:16:16,008 --> 00:16:19,278 line:0
Those are the only code changes
you need in your app


297
00:16:19,278 --> 00:16:22,081 position:50%
to support passkeys.


298
00:16:22,081 --> 00:16:25,618 line:-1
The web platform also supports
both AutoFill-assisted


299
00:16:25,618 --> 00:16:28,287 line:-1
and modal passkey requests.


300
00:16:28.287 --> 00:16:33.292 line:-1 position:50%
On the web, passkeys are used
via standard WebAuthn API,


301
00:16:33,292 --> 00:16:36,696 line:-1
which is also used
for security keys.


302
00:16:36,696 --> 00:16:40,333 line:-1
Just like in apps, adopting
AutoFill-assisted requests


303
00:16:40.333 --> 00:16:43.803 line:-1 position:50%
allows signing in quickly
with just a Touch ID,


304
00:16:43.803 --> 00:16:47.673 line:-1 position:50%
getting to all of your available
passkeys and passwords


305
00:16:47.673 --> 00:16:50.877 line:-1 position:50%
or using a passkey
from a nearby device,


306
00:16:50.877 --> 00:16:54.080 line:-1 position:50%
all with very little code.


307
00:16:54.080 --> 00:16:57.884 line:-1 position:50%
First off, make sure to annotate
your user name field


308
00:16:57,884 --> 00:17:01,020 line:-1
on your webpage
with both the username


309
00:17:01.020 --> 00:17:04.657 line:-1 position:50%
and webauthn
autocomplete detail tokens,


310
00:17:04.657 --> 00:17:07.860 line:-1 position:50%
so that both password
and passkey suggestions


311
00:17:07.860 --> 00:17:10.129 line:-1 position:50%
are shown in the right place.


312
00:17:10.129 --> 00:17:13.666 line:-1 position:50%
Once that's done, here's
a typical WebAuthn sign-in,


313
00:17:13.666 --> 00:17:16.302 line:-1 position:50%
in JavaScript.


314
00:17:16.302 --> 00:17:19.472 line:-1 position:50%
In WebAuthn,
AutoFill-style requests


315
00:17:19,472 --> 00:17:22,975 line:-1
are invoked using
conditional mediation.


316
00:17:22,975 --> 00:17:24,210 line:-1
You should start by using


317
00:17:24,210 --> 00:17:26,545 line:-1
standard JavaScript
feature detection


318
00:17:26,545 --> 00:17:29,248 line:-1
to check if it is available.


319
00:17:29,248 --> 00:17:33,319 line:-1
If it is, you can proceed
making your request.


320
00:17:33,319 --> 00:17:37,056 line:-1
Just like with a native API,
you'll start by making a request


321
00:17:37,056 --> 00:17:40,693 line:-1
using a challenge
fetched from your server.


322
00:17:40.693 --> 00:17:42.862 line:-1 position:50%
To make it
an AutoFill-assisted request,


323
00:17:42,862 --> 00:17:47,900 line:-1
add the mediation: "conditional"
parameter to your options.


324
00:17:47,900 --> 00:17:53,406 line:0
Then, use navigator.credentials
.get to start the request.


325
00:17:53,406 --> 00:17:56,275 line:0
The .get call
returns a promise.


326
00:17:56,275 --> 00:17:59,845 line:0
If it resolves, you'll
receive an assertion object,


327
00:17:59,845 --> 00:18:02,682 line:0
which you can send back
to your server to verify,


328
00:18:02,682 --> 00:18:04,850 position:50%
then complete the sign-in.


329
00:18:04.850 --> 00:18:08.354 line:-1 position:50%
Like in apps, if someone
manually enters a user name


330
00:18:08.354 --> 00:18:12.058 line:-1 position:50%
for an account with a passkey,
you should use the API


331
00:18:12.058 --> 00:18:15.061 line:-1 position:50%
to present a modal
sign-in sheet.


332
00:18:15.061 --> 00:18:19.131 line:-1 position:50%
To switch to a modal request,
all you need to do is remove


333
00:18:19.131 --> 00:18:22.668 line:-1 position:50%
the mediation: "conditional"
parameter.


334
00:18:22.668 --> 00:18:24.837 line:-1 position:50%
One thing to note
when using WebAuthn


335
00:18:24,837 --> 00:18:29,809 line:-1
is how Apple platforms handle
user verification -- or UV.


336
00:18:29.809 --> 00:18:33.546 line:-1 position:50%
UV is a Boolean field
in a WebAuthn response


337
00:18:33.546 --> 00:18:35.581 line:-1 position:50%
that indicates whether
the authenticator


338
00:18:35,581 --> 00:18:37,883 line:-1
attempted to verify
that the current user


339
00:18:37,883 --> 00:18:39,952 line:-1
is the owner of the device.


340
00:18:39,952 --> 00:18:44,557 line:-1
On Apple devices, a value of
one indicates that biometrics,


341
00:18:44.557 --> 00:18:47.493 line:-1 position:50%
or a password
or passcode were used.


342
00:18:47,493 --> 00:18:50,963 line:-1
Apple platforms will always
require UV for passkeys


343
00:18:50,963 --> 00:18:52,932 line:-1
when biometrics are available,


344
00:18:52,932 --> 00:18:55,768 line:-1
so you don't have
to worry about that.


345
00:18:55,768 --> 00:18:57,770 line:-1
When making WebAuthn requests,


346
00:18:57,770 --> 00:19:02,108 line:-1
there's an option to specify
a user-verification requirement.


347
00:19:02,108 --> 00:19:06,145 line:-1
The default value is
userVerification: "preferred".


348
00:19:06,145 --> 00:19:10,483 line:-1
Always use the default value to
avoid creating a bad experience


349
00:19:10,483 --> 00:19:14,286 line:-1
on devices without biometrics.


350
00:19:14.286 --> 00:19:18.557 line:-1 position:50%
Here are some additional notes
for using passkeys on the web.


351
00:19:18,557 --> 00:19:20,960 line:-1
When you make
AutoFill-assisted requests,


352
00:19:20.960 --> 00:19:23.396 line:-1 position:50%
you should make them
early in the page lifetime,


353
00:19:23,396 --> 00:19:25,731 line:-1
just like in apps.


354
00:19:25.731 --> 00:19:28.768 line:-1 position:50%
For modal WebAuthn requests,
you should trigger them


355
00:19:28.768 --> 00:19:32.905 line:-1 position:50%
from a user gesture event,
such as a button click.


356
00:19:32,905 --> 00:19:36,108 line:-1
A modal request can be
triggered once per page load


357
00:19:36.108 --> 00:19:40.012 line:-1 position:50%
outside of a user gesture
event, but WebKit may limit


358
00:19:40.012 --> 00:19:44.083 line:-1 position:50%
subsequent calls
on that page if you do so.


359
00:19:44.083 --> 00:19:46.719 line:-1 position:50%
AutoFill requests
are not modal,


360
00:19:46.719 --> 00:19:49.088 line:-1 position:50%
so they don't require
a user gesture


361
00:19:49.088 --> 00:19:52.358 line:-1 position:50%
and have a much longer timeout.


362
00:19:52.358 --> 00:19:55.995 line:-1 position:50%
Finally, passkeys are
replacing Safari's legacy


363
00:19:55,995 --> 00:19:58,397 line:-1
platform authenticator.


364
00:19:58,397 --> 00:20:01,033 line:-1
Existing credentials
will still work


365
00:20:01,033 --> 00:20:04,270 line:-1
and still be bound to the
device they were created on,


366
00:20:04.270 --> 00:20:08.841 line:-1 position:50%
but new platform credentials
will be created as passkeys.


367
00:20:08.841 --> 00:20:11.310 line:-1 position:50%
They can be differentiated
from legacy credentials


368
00:20:11.310 --> 00:20:12.912 line:-1 position:50%
during registration,


369
00:20:12.912 --> 00:20:17.316 line:-1 position:50%
as passkeys will not provide
an attestation statement.


370
00:20:17.316 --> 00:20:19.985 line:-1 position:50%
That's passkeys and AutoFill.


371
00:20:19.985 --> 00:20:23.389 line:-1 position:50%
Next up, I'll go over some
additional platform features


372
00:20:23,389 --> 00:20:26,892 line:-1
that can further streamline
your sign-in experience.


373
00:20:26.892 --> 00:20:29.695 line:-1 position:50%
In addition to the
AutoFill-assisted sign-in,


374
00:20:29.695 --> 00:20:31.630 line:-1 position:50%
the ASAuthorization API


375
00:20:31.630 --> 00:20:34.467 line:-1 position:50%
provides many more
useful features.


376
00:20:34.467 --> 00:20:37.570 line:-1 position:50%
I'm going to cover three
additional features of the API


377
00:20:37.570 --> 00:20:39.772 line:-1 position:50%
and when you might
want to use them.


378
00:20:39,772 --> 00:20:43,075 position:50%
Starting with passkey
allow lists.


379
00:20:43,075 --> 00:20:45,478 position:50%
When presenting
a modal passkey sheet


380
00:20:45,478 --> 00:20:47,513 position:50%
after a user
name is entered,


381
00:20:47,513 --> 00:20:50,616 line:0
it's possible that there are
passkeys for multiple accounts


382
00:20:50,616 --> 00:20:52,184 position:50%
saved on the device.


383
00:20:52,184 --> 00:20:56,355 position:50%
All available passkeys will be
shown in the sheet by default.


384
00:20:56.355 --> 00:20:58.491 line:-1 position:50%
You can use
a passkey allow list


385
00:20:58,491 --> 00:21:01,660 line:-1
to restrict which passkeys
are shown in the sheet,


386
00:21:01,660 --> 00:21:05,131 line:-1
so that only the matching
account is offered.


387
00:21:05.131 --> 00:21:07.933 line:-1 position:50%
To add an allow list
to a modal request,


388
00:21:07,933 --> 00:21:10,603 line:-1
you'll first need
the user name.


389
00:21:10.603 --> 00:21:13.038 line:-1 position:50%
You can use that user name
to fetch a list


390
00:21:13,038 --> 00:21:17,776 line:-1
of matching credential IDs
and turn it into an allow list.


391
00:21:17,776 --> 00:21:22,014 line:-1
A credential ID is a unique
identifier for a passkey.


392
00:21:22.014 --> 00:21:25.718 line:-1 position:50%
A Webauthn server should have
a way to look up credential IDs


393
00:21:25,718 --> 00:21:28,154 line:-1
for a given user name.


394
00:21:28,154 --> 00:21:32,658 line:-1
From here, just proceed
with your request like before.


395
00:21:32,658 --> 00:21:35,961 line:0
Now, on my device which
has three Shiny accounts


396
00:21:35,961 --> 00:21:38,931 line:0
using passkeys,
the sheet only offers


397
00:21:38,931 --> 00:21:42,134 position:50%
the single account
I'm trying to use.


398
00:21:42,134 --> 00:21:45,571 position:50%
When making modal requests,
you should use an allow list


399
00:21:45,571 --> 00:21:48,507 line:0
when you have additional
context about which account


400
00:21:48,507 --> 00:21:50,809 line:0
the user is trying
to sign in with,


401
00:21:50,809 --> 00:21:54,213 position:50%
such as if they've already
typed in their user name.


402
00:21:54,213 --> 00:21:58,551 line:0
Next up, I'll cover what happens
you make a modal passkey request


403
00:21:58,551 --> 00:22:02,555 position:50%
if there are no passkeys
saved on the current device.


404
00:22:02,555 --> 00:22:05,224 position:50%
This also applies
if you use an allow list


405
00:22:05,224 --> 00:22:08,561 line:0
and none of the saved
passkeys match that list.


406
00:22:08,561 --> 00:22:12,364 line:0
By default, when you make
a modal passkey request,


407
00:22:12,364 --> 00:22:14,733 position:50%
if there are no matching
passkeys available,


408
00:22:14,733 --> 00:22:17,069 line:0
the modal sheet
will be displayed


409
00:22:17,069 --> 00:22:19,405 position:50%
and will immediately show
the QR code


410
00:22:19,405 --> 00:22:23,108 position:50%
for signing in with a passkey
from a nearby device.


411
00:22:23,108 --> 00:22:26,745 position:50%
This provides most
flexibility when signing in


412
00:22:26,745 --> 00:22:30,316 line:0
and is the best option when you
know a passkey is being used.


413
00:22:30,316 --> 00:22:34,019 position:50%
But there's a new option
in the API to prefer credentials


414
00:22:34,019 --> 00:22:37,256 position:50%
that are immediately available
and fall back silently


415
00:22:37,256 --> 00:22:39,925 line:0
with a delegate callback
if there aren't any.


416
00:22:39,925 --> 00:22:43,028 position:50%
This can be used to quickly
offer up existing credentials


417
00:22:43,028 --> 00:22:44,363 position:50%
when possible,


418
00:22:44,363 --> 00:22:47,700 position:50%
before even showing
a traditional sign-in form.


419
00:22:47.700 --> 00:22:50.569 line:-1 position:50%
This modal request
using the default options


420
00:22:50.569 --> 00:22:52.905 line:-1 position:50%
will fall back
to showing a QR code


421
00:22:52.905 --> 00:22:56.742 line:-1 position:50%
if there are no matching
passkeys on the current device.


422
00:22:56.742 --> 00:23:00.879 line:-1 position:50%
If you use the preferImmediately
AvailableCredentials option,


423
00:23:00.879 --> 00:23:02.915 line:-1 position:50%
instead of
getting a QR code,


424
00:23:02,915 --> 00:23:07,453 line:-1
you'll receive a delegate
callback with an error.


425
00:23:07.453 --> 00:23:10.155 line:-1 position:50%
If you receive
an ASAuthorizationError


426
00:23:10.155 --> 00:23:12.691 line:-1 position:50%
with a code of canceled,
that means


427
00:23:12,691 --> 00:23:16,729 line:-1
either the user saw the sheet
and manually dismissed it,


428
00:23:16,729 --> 00:23:20,633 line:-1
or you passed preferImmediately
AvailableCredentials


429
00:23:20.633 --> 00:23:23.936 line:-1 position:50%
and no credentials
were immediately available.


430
00:23:23,936 --> 00:23:26,405 line:-1
What you do from here
depends on the context


431
00:23:26.405 --> 00:23:28.707 line:-1 position:50%
where you were
calling this from.


432
00:23:28,707 --> 00:23:31,443 line:-1
For example, if you were
using this option


433
00:23:31.443 --> 00:23:33.879 line:-1 position:50%
as a way to test
for local credentials


434
00:23:33.879 --> 00:23:36.649 line:-1 position:50%
before showing
your normal sign-in form,


435
00:23:36,649 --> 00:23:40,219 line:-1
this is where would trigger
showing your form.


436
00:23:40,219 --> 00:23:43,455 position:50%
If there's at least one matching
credential on the device,


437
00:23:43,455 --> 00:23:45,958 line:0
the full modal sheet
will be displayed


438
00:23:45,958 --> 00:23:48,894 position:50%
regardless
of the options used.


439
00:23:48,894 --> 00:23:50,863 line:0
Make sure you're also using


440
00:23:50,863 --> 00:23:54,700 position:50%
either AutoFill-assisted
requests or modal requests


441
00:23:54,700 --> 00:23:57,936 position:50%
with the default fallback
somewhere in your app,


442
00:23:57,936 --> 00:24:00,806 line:0
so that the option to sign in
with a nearby device


443
00:24:00,806 --> 00:24:03,542 line:0
is still reachable
if there are no passkeys


444
00:24:03,542 --> 00:24:06,211 position:50%
on the current device.


445
00:24:06,211 --> 00:24:09,148 line:-1
The last feature
of the ASAuthorization API


446
00:24:09.148 --> 00:24:13.385 line:-1 position:50%
that I'll cover is making
combined credential requests.


447
00:24:13,385 --> 00:24:16,255 position:50%
In this example,
the app made a request


448
00:24:16,255 --> 00:24:21,193 position:50%
for passkeys, passwords,
and Sign in with Apple.


449
00:24:21,193 --> 00:24:24,263 position:50%
My device happens to have
three different credentials


450
00:24:24,263 --> 00:24:26,298 line:0
for three different
accounts saved,


451
00:24:26,298 --> 00:24:29,101 position:50%
so they're all
presented here.


452
00:24:29,101 --> 00:24:30,736 position:50%
But a more likely scenario


453
00:24:30,736 --> 00:24:34,006 position:50%
is that someone would only
have a single account.


454
00:24:34,006 --> 00:24:37,576 line:0
In that case, this same
combined credential request


455
00:24:37,576 --> 00:24:40,913 position:50%
will only offer one account
in the sheet.


456
00:24:40,913 --> 00:24:42,948 line:0
Adding additional
credential types


457
00:24:42,948 --> 00:24:47,853 position:50%
to an existing ASAuthorization
request is really easy.


458
00:24:47.853 --> 00:24:50.689 line:-1 position:50%
You just need to create
providers and requests


459
00:24:50,689 --> 00:24:52,491 line:-1
for the additional
request types,


460
00:24:52,491 --> 00:24:56,061 line:-1
then pass those new requests
to your controller.


461
00:24:56.061 --> 00:24:58.797 line:-1 position:50%
Now, the modal sheet will
offer whatever credentials


462
00:24:58.797 --> 00:25:02.935 line:-1 position:50%
are available from any
of these credential types.


463
00:25:02.935 --> 00:25:04.570 line:-1 position:50%
You'll get the same
delegate callback


464
00:25:04.570 --> 00:25:07.940 line:-1 position:50%
regardless of which
credential type is used.


465
00:25:07.940 --> 00:25:10.976 line:-1 position:50%
You should check the type
of the credential you received


466
00:25:10.976 --> 00:25:13.078 line:-1 position:50%
and finish the sign-in
as appropriate


467
00:25:13,078 --> 00:25:15,314 line:-1
for that credential type.


468
00:25:15.314 --> 00:25:18.016 line:-1 position:50%
So that covers a few
of the more advanced features


469
00:25:18.016 --> 00:25:21.387 line:-1 position:50%
of the ASAuthorization
API family.


470
00:25:21.387 --> 00:25:24.056 line:-1 position:50%
Now, I'm going to dig in
to some more technical details


471
00:25:24,056 --> 00:25:29,027 line:-1
about how passkeys actually work
and what makes them so secure.


472
00:25:29.027 --> 00:25:31.764 line:-1 position:50%
When you sign in
with a password today,


473
00:25:31.764 --> 00:25:34.233 line:-1 position:50%
generally what's actually
happening


474
00:25:34,233 --> 00:25:36,535 line:-1
is after you enter
that password,


475
00:25:36.535 --> 00:25:40.839 line:-1 position:50%
it gets hashed and salted, and
the resulting obfuscated value


476
00:25:40,839 --> 00:25:44,076 line:-1
is sent to the server,
which stores it.


477
00:25:44.076 --> 00:25:48.714 line:-1 position:50%
Later, if you can produce
the same hashed salted value,


478
00:25:48.714 --> 00:25:51.183 line:-1 position:50%
you're allowed into the account.


479
00:25:51.183 --> 00:25:53.852 line:-1 position:50%
This means the server
is responsible


480
00:25:53,852 --> 00:25:56,922 line:-1
for storing this derivation
of your password,


481
00:25:56.922 --> 00:25:59.858 line:-1 position:50%
which is highly valuable
to attackers.


482
00:25:59,858 --> 00:26:02,528 line:-1
If they can get it,
it's possible to figure out


483
00:26:02,528 --> 00:26:06,498 line:-1
what your password is
and gain access to your account.


484
00:26:06,498 --> 00:26:10,269 line:-1
Passkeys, however,
work very differently.


485
00:26:10.269 --> 00:26:13.205 line:-1 position:50%
Rather than having a single,
typeable string,


486
00:26:13.205 --> 00:26:16.575 line:-1 position:50%
a passkey is actually
a pair of related keys.


487
00:26:16.575 --> 00:26:19.411 line:-1 position:50%
These keys are generated
by your devices,


488
00:26:19,411 --> 00:26:23,549 line:-1
securely and uniquely,
for every account.


489
00:26:23,549 --> 00:26:27,586 line:-1
One is public
and is stored on the server.


490
00:26:27.586 --> 00:26:31.490 line:-1 position:50%
The other is private
and stays on your devices


491
00:26:31,490 --> 00:26:33,725 line:-1
even when signing in.


492
00:26:33,725 --> 00:26:36,728 line:-1
The public key
is not a secret.


493
00:26:36,728 --> 00:26:40,432 line:-1
It's just as public
as your user name.


494
00:26:40.432 --> 00:26:44.169 line:-1 position:50%
The private key is what is
needed to actually sign in.


495
00:26:44,169 --> 00:26:47,339 line:-1
The server never learns
what your private key is,


496
00:26:47,339 --> 00:26:50,976 line:-1
and your devices keep it safe.


497
00:26:50,976 --> 00:26:54,446 line:-1
When you go to sign in,
the server sends your device


498
00:26:54.446 --> 00:26:57.182 line:-1 position:50%
a single-use challenge.


499
00:26:57.182 --> 00:27:01.386 line:-1 position:50%
WebAuthn allows many different
challenge-response algorithms,


500
00:27:01,386 --> 00:27:07,326 line:-1
but passkeys on Apple
platforms use standard ES256.


501
00:27:07.326 --> 00:27:10.462 line:-1 position:50%
Only your private key
is capable of producing


502
00:27:10,462 --> 00:27:14,933 line:-1
a valid solution to
the challenge for your account.


503
00:27:14.933 --> 00:27:17.102 line:-1 position:50%
Your device produces
this solution --


504
00:27:17,102 --> 00:27:19,872 line:-1
called a signature -- locally,


505
00:27:19,872 --> 00:27:23,742 line:-1
and only sends the solution
back to the server.


506
00:27:23.742 --> 00:27:28.947 line:-1 position:50%
Your private key stays secret
and only on your devices.


507
00:27:28,947 --> 00:27:34,152 line:0
The server then validates the
solution using your public key.


508
00:27:34,152 --> 00:27:37,022 position:50%
If the solution your device
provided is valid,


509
00:27:37,022 --> 00:27:39,324 line:0
you're signed in!


510
00:27:39,324 --> 00:27:43,829 position:50%
A public key can be used
to check if a solution is valid


511
00:27:43,829 --> 00:27:47,566 line:0
but is not able to produce
a solution itself.


512
00:27:47,566 --> 00:27:49,801 position:50%
This means
the server can be sure


513
00:27:49,801 --> 00:27:51,970 position:50%
that you have
the right private key,


514
00:27:51,970 --> 00:27:55,974 line:0
without knowing what
the private key actually is.


515
00:27:55,974 --> 00:27:59,511 line:0
And since the server doesn't
know any private keys,


516
00:27:59,511 --> 00:28:02,014 position:50%
it's a less valuable target
for attackers,


517
00:28:02,014 --> 00:28:06,084 line:0
because there are
no user credentials to leak.


518
00:28:06.084 --> 00:28:08.754 line:-1 position:50%
All of this cryptography
and key protection


519
00:28:08.754 --> 00:28:13.191 line:-1 position:50%
is totally transparent
and performed by the devices.


520
00:28:13.191 --> 00:28:17.296 line:-1 position:50%
Your customers never have
to know or think about it.


521
00:28:17.296 --> 00:28:20.566 line:-1 position:50%
From their perspective,
passkeys are super simple


522
00:28:20.566 --> 00:28:23.569 line:-1 position:50%
and just work, everywhere.


523
00:28:23.569 --> 00:28:27.639 line:-1 position:50%
Passkeys can also be used
to sign in across devices


524
00:28:27,639 --> 00:28:30,709 line:-1
in a secure,
phishing-resistant manner.


525
00:28:30.709 --> 00:28:33.011 line:-1 position:50%
Here's how that works.


526
00:28:33,011 --> 00:28:34,813 line:-1
There are two devices here.


527
00:28:34,813 --> 00:28:37,649 line:-1
The client, which is the
device or web browser


528
00:28:37,649 --> 00:28:40,619 line:-1
where I'm signing in,
and the authenticator,


529
00:28:40.619 --> 00:28:44.289 line:-1 position:50%
which is the device
which has my passkey.


530
00:28:44.289 --> 00:28:46.892 line:-1 position:50%
First, the client
shows a QR code,


531
00:28:46.892 --> 00:28:49.294 line:-1 position:50%
which the
authenticator scans.


532
00:28:49.294 --> 00:28:51.797 line:-1 position:50%
This QR code contains a URL


533
00:28:51.797 --> 00:28:56.468 line:-1 position:50%
that encodes a pair
of single-use encryption keys.


534
00:28:56,468 --> 00:29:00,238 line:-1
Then, the authenticator produces
a Bluetooth advertisement


535
00:29:00,238 --> 00:29:04,443 line:-1
containing routing information
for a network relay server.


536
00:29:04,443 --> 00:29:07,179 line:-1
This local exchange
allows selecting a server


537
00:29:07.179 --> 00:29:09.214 line:-1 position:50%
and sharing routing
information,


538
00:29:09.214 --> 00:29:13.085 line:-1 position:50%
but also serves
two additional functions.


539
00:29:13,085 --> 00:29:15,621 line:-1
It performs an out-of-band
key agreement


540
00:29:15,621 --> 00:29:18,857 line:-1
that the server can't see,
so everything


541
00:29:18.857 --> 00:29:21.960 line:-1 position:50%
going over the network
is end-to-end encrypted


542
00:29:21.960 --> 00:29:25.163 line:-1 position:50%
and the server
can't read anything.


543
00:29:25.163 --> 00:29:27.699 line:-1 position:50%
It also provides a strong claim


544
00:29:27,699 --> 00:29:31,536 line:-1
that these two devices
are in physical proximity.


545
00:29:31,536 --> 00:29:35,273 line:-1
That means a QR code
sent in an email


546
00:29:35,273 --> 00:29:39,511 line:-1
or generated on a fake
website won't work,


547
00:29:39.511 --> 00:29:42.714 line:-1 position:50%
because a remote attacker
won't be able receive


548
00:29:42,714 --> 00:29:47,052 line:-1
the Bluetooth advertisement
and complete the local exchange.


549
00:29:47.052 --> 00:29:49.121 line:-1 position:50%
So that's the local part.


550
00:29:49,121 --> 00:29:52,457 line:-1
Once the local exchange
and key agreement have happened,


551
00:29:52.457 --> 00:29:54.993 line:-1 position:50%
the two devices connect
to a relay server


552
00:29:54.993 --> 00:29:57.029 line:-1 position:50%
picked by the phone.


553
00:29:57,029 --> 00:30:01,466 line:-1
From there, they perform
a standard FIDO CTAP operation,


554
00:30:01,466 --> 00:30:04,202 line:-1
which is encrypted using
the keys from earlier,


555
00:30:04.202 --> 00:30:07.539 line:-1 position:50%
so the relay server can't see
anything that's going on.


556
00:30:09,408 --> 00:30:12,444 line:-1
This whole process is
performed by the device


557
00:30:12,444 --> 00:30:14,179 line:-1
and the web browser.


558
00:30:14.179 --> 00:30:17.416 line:-1 position:50%
The website is not involved
at any point


559
00:30:17,416 --> 00:30:19,618 line:-1
in the cross-device
communication.


560
00:30:19.618 --> 00:30:23.655 line:-1 position:50%
Cross-device cross-platform
sign-in is a system feature


561
00:30:23.655 --> 00:30:28.260 line:-1 position:50%
that just works anywhere
passkeys can be used.


562
00:30:28,260 --> 00:30:31,663 line:-1
So that's a more technical
look into how passkeys work


563
00:30:31,663 --> 00:30:35,033 line:-1
and how they can make such
strong security guarantees,


564
00:30:35.033 --> 00:30:37.102 line:-1 position:50%
even across devices.


565
00:30:37,102 --> 00:30:40,706 line:-1
Next up,
multifactor authentication.


566
00:30:40,706 --> 00:30:44,042 line:-1
A common way to think about
authentication today


567
00:30:44,042 --> 00:30:46,411 line:-1
is in terms of factors.


568
00:30:46.411 --> 00:30:48.714 line:-1 position:50%
Different factors
are strong or weak


569
00:30:48.714 --> 00:30:51.083 line:-1 position:50%
against different kinds
of attacks,


570
00:30:51.083 --> 00:30:52.517 line:-1 position:50%
and combining factors


571
00:30:52,517 --> 00:30:55,353 line:-1
can provide better
collective coverage.


572
00:30:55.353 --> 00:30:59.925 line:-1 position:50%
But with passkeys, you don't
need to think like that anymore.


573
00:30:59.925 --> 00:31:02.027 line:-1 position:50%
Here are some
of the most common methods


574
00:31:02.027 --> 00:31:04.262 line:-1 position:50%
used to sign in today.


575
00:31:04,262 --> 00:31:05,630 position:50%
Passwords in your head


576
00:31:05,630 --> 00:31:08,467 line:0
are vulnerable
to pretty much everything.


577
00:31:08,467 --> 00:31:09,801 line:0
Password managers


578
00:31:09,801 --> 00:31:14,106 position:50%
are good at generating unique,
high-entropy strings,


579
00:31:14,106 --> 00:31:17,042 line:0
may have local protections
against device theft,


580
00:31:17,042 --> 00:31:20,779 line:0
and offer some hints
about phishing.


581
00:31:20,779 --> 00:31:23,715 line:0
Adding an SMS
or time-based code


582
00:31:23,715 --> 00:31:27,152 line:0
can help with theft or phishing
in some circumstances


583
00:31:27,152 --> 00:31:29,788 line:0
but doesn't really
solve either.


584
00:31:29,788 --> 00:31:31,223 line:0
With passkeys though,


585
00:31:31,223 --> 00:31:36,161 position:50%
every passkey is a unique,
device-generated key pair.


586
00:31:36,161 --> 00:31:39,698 position:50%
On Apple devices, they're
built on a strong foundation


587
00:31:39,698 --> 00:31:42,467 position:50%
of local device protections.


588
00:31:42,467 --> 00:31:45,771 position:50%
Passkeys also
completely eliminate


589
00:31:45,771 --> 00:31:48,073 position:50%
the human factor
from phishing.


590
00:31:48,073 --> 00:31:51,443 line:0
And they can't be leaked
by an app or website server,


591
00:31:51,443 --> 00:31:55,447 position:50%
because the servers
don't have the private keys.


592
00:31:55,447 --> 00:31:58,617 line:0
Adding factors to
a password-based sign-in flow


593
00:31:58,617 --> 00:32:01,653 position:50%
makes sense,
as together they can protect


594
00:32:01,653 --> 00:32:05,223 position:50%
against more types of attacks
than passwords alone.


595
00:32:05,223 --> 00:32:08,827 position:50%
But a passkey alone protects
against so much more


596
00:32:08,827 --> 00:32:12,464 line:0
that it doesn't need
additional factors.


597
00:32:12,464 --> 00:32:16,568 line:-1
I'm looking forward to
a future without passwords.


598
00:32:16.568 --> 00:32:20.705 line:-1 position:50%
Here's how you can get
started making that happen.


599
00:32:20,705 --> 00:32:24,242 line:-1
First off, you'll need to adopt
WebAuthn on your server,


600
00:32:24.242 --> 00:32:26.711 line:-1 position:50%
if you haven't already done so.


601
00:32:26.711 --> 00:32:27.979 line:-1 position:50%
Passkeys should work


602
00:32:27.979 --> 00:32:32.517 line:-1 position:50%
with any standard WebAuthn
server implementation.


603
00:32:32.517 --> 00:32:34.452 line:-1 position:50%
Once your server
is ready to go,


604
00:32:34.452 --> 00:32:38.223 line:-1 position:50%
adopt our new API
in your apps and websites.


605
00:32:38.223 --> 00:32:41.193 line:-1 position:50%
AutoFill-assisted passkey
requests can be dropped


606
00:32:41.193 --> 00:32:44.529 line:-1 position:50%
right in to your existing
sign-in flows,


607
00:32:44.529 --> 00:32:47.999 line:-1 position:50%
plus we have a range of more
advanced UI options as well,


608
00:32:47,999 --> 00:32:50,235 line:-1
if you need them.


609
00:32:50.235 --> 00:32:56.174 line:-1 position:50%
And finally, transition your
users away from passwords.


610
00:32:56.174 --> 00:32:59.511 line:-1 position:50%
Passkeys are
an industry-standard solution


611
00:32:59.511 --> 00:33:01.713 line:-1 position:50%
to the convenience
and security problem


612
00:33:01,713 --> 00:33:05,784 line:-1
of securely signing in
to apps and websites.


613
00:33:05.784 --> 00:33:08.486 line:-1 position:50%
By guiding your customers
to passkeys


614
00:33:08,486 --> 00:33:11,456 line:-1
and away from passwords,
you can give them


615
00:33:11.456 --> 00:33:15.327 line:-1 position:50%
an incredibly quick and
convenient sign-in experience


616
00:33:15.327 --> 00:33:18.496 line:-1 position:50%
while raising the security bar
for everyone.


617
00:33:18.496 --> 00:33:19.464 line:-1 position:50%
Thank you.


618
00:33:19,464 --> 00:33:23,301 size:2% line:0 align:right
♪

