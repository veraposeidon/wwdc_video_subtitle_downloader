2
00:00:00.501 --> 00:00:08.509 line:-1 align:center
♪ ♪


3
00:00:09,309 --> 00:00:10,844 line:-2
Jeremy:
Hi. I'm Jeremy,


4
00:00:10.878 --> 00:00:13.714 line:-2 align:center
and I'm here to show you how to create
a more responsive media app


5
00:00:13.747 --> 00:00:15.883 line:-1 align:center
using AVFoundation.


6
00:00:15,916 --> 00:00:17,584 line:-1
When using media assets in your app,


7
00:00:17.618 --> 00:00:19.553 line:-2 align:center
you might like to do more
than just play them.


8
00:00:19,586 --> 00:00:22,523 line:-1
You might like to show thumbnails,


9
00:00:22.556 --> 00:00:25.626 line:-1 align:center
combine media into new compositions,


10
00:00:25,659 --> 00:00:28,962 line:-1
or get information about your assets.


11
00:00:28.996 --> 00:00:31.031 line:-1 align:center
These tasks require loading data,


12
00:00:31,064 --> 00:00:35,269 line:-2
and with big files like video,
that might take some time to complete.


13
00:00:35,302 --> 00:00:38,472 line:-2
Unfortunately, it can be easy
to introduce latency issues in your app


14
00:00:38.505 --> 00:00:42.242 line:-2 align:center
if this work is done synchronously
on the main thread.


15
00:00:42.276 --> 00:00:45.479 line:-2 align:center
A great way to keep your app responsive
is to load data asynchronously,


16
00:00:45,512 --> 00:00:48,081 line:-1
and update your UI when it's finished.


17
00:00:48,115 --> 00:00:51,051 line:-1
AVFoundation has tools to make this easy.


18
00:00:51,084 --> 00:00:53,520 line:-1
So here's what we'll talk about today.


19
00:00:53.554 --> 00:00:58.225 line:-2 align:center
First, I'll introduce you
to some new async APIs in AVFoundation.


20
00:00:58.258 --> 00:01:00.561 line:-2 align:center
Then, I'll give you an update
on asset inspection


21
00:01:00.594 --> 00:01:04.164 line:-2 align:center
using the async load(_:) method
we introduced last year.


22
00:01:04,198 --> 00:01:07,000 line:-2
And I'll show you how to optimize
custom data loading for local


23
00:01:07.034 --> 00:01:10.871 line:-2 align:center
and cached media
using AVAssetResourceLoader.


24
00:01:10.904 --> 00:01:14.741 line:-2 align:center
But first,
let's jump into the new async API.


25
00:01:14.775 --> 00:01:18.312 line:-2 align:center
Grabbing still images from a video
with AVAssetImageGenerator


26
00:01:18.345 --> 00:01:20.547 line:-1 align:center
is a great way to create thumbnails.


27
00:01:20,581 --> 00:01:22,649 line:-1
But image generation isn't instantaneous.


28
00:01:24,017 --> 00:01:27,421 line:-2
To generate an image,
image generator needs to load frame data


29
00:01:27.454 --> 00:01:29.723 line:-1 align:center
from your video file.


30
00:01:29,756 --> 00:01:32,960 line:-2
And for media stored on a remote server,
or on the internet,


31
00:01:32,993 --> 00:01:35,329 line:-1
that loading will be much slower.


32
00:01:35,362 --> 00:01:39,433 line:-2
That's why it's important how
you generate your images.


33
00:01:39.466 --> 00:01:41.568 line:-2 align:center
Using a method
that loads data synchronously,


34
00:01:41.602 --> 00:01:44.104 line:-1 align:center
like copyCGImage, on the main thread


35
00:01:44.137 --> 00:01:48.141 line:-2 align:center
can cause your UI to freeze
as it waits for video to be loaded.


36
00:01:48,175 --> 00:01:51,211 line:-2
This year, we've added
the image(at: time) async method


37
00:01:51.245 --> 00:01:53.780 line:-2 align:center
which uses async/await
to free up the calling thread


38
00:01:53,814 --> 00:01:56,783 line:-1
while image generator loads data.


39
00:01:56,817 --> 00:01:59,186 line:-2
Image generator returns a tuple
with the image


40
00:01:59.219 --> 00:02:01.455 line:-1 align:center
and its actual time in the asset.


41
00:02:01.488 --> 00:02:05.025 line:-2 align:center
There are a few reasons the actual time
may vary from the time you requested,


42
00:02:05.058 --> 00:02:06.860 line:-1 align:center
but if you only want the image,


43
00:02:06.894 --> 00:02:10.964 line:-2 align:center
you can directly access it
with the .image property.


44
00:02:10.998 --> 00:02:14.501 line:-2 align:center
Some frames in compressed video
are easier to load than others.


45
00:02:14,535 --> 00:02:16,537 line:-1
iFrames can be decoded independently,


46
00:02:16.570 --> 00:02:20.174 line:-2 align:center
while other frames
rely on nearby frames to be decoded.


47
00:02:20.207 --> 00:02:23.210 line:-2 align:center
For your requested time,
image generator by default


48
00:02:23.243 --> 00:02:26.847 line:-2 align:center
will use the nearest iFrame
to generate your image.


49
00:02:26.880 --> 00:02:29.183 line:-2 align:center
It might be tempting
to set the tolerances to zero


50
00:02:29,216 --> 00:02:31,852 line:-2
to get the exact frame
for your requested time.


51
00:02:31.885 --> 00:02:34.788 line:-2 align:center
But keep in mind that
that frame will likely be dependent


52
00:02:34.821 --> 00:02:39.560 line:-2 align:center
on other nearby frames that
image generator will also need to load.


53
00:02:39,593 --> 00:02:42,062 line:-1
Instead, consider setting wide tolerances


54
00:02:42.095 --> 00:02:44.164 line:-2 align:center
that will still give you the result
you're looking for.


55
00:02:44.198 --> 00:02:47.367 line:-2 align:center
Wide tolerances help image generator
to minimize data loading


56
00:02:47,401 --> 00:02:49,803 line:-1
by giving it more frames to pick from.


57
00:02:49.837 --> 00:02:53.040 line:-2 align:center
The fewer frames it needs to load,
the faster it can return an image.


58
00:02:54,374 --> 00:02:57,344 line:-2
To get a series of images
at several times in an asset,


59
00:02:57.377 --> 00:03:02.082 line:-2 align:center
image generator has had
generateCGImagesAsynchronously(forTimes:).


60
00:03:02.115 --> 00:03:06.220 line:-2 align:center
However in Swift, there is some nuance
to watch out for to use it.


61
00:03:06,253 --> 00:03:10,224 line:-2
New this year we've added
the images(for: times) method.


62
00:03:10.257 --> 00:03:12.526 line:-1 align:center
It now takes an array of CMTimes,


63
00:03:12.559 --> 00:03:15.629 line:-2 align:center
so you don't need to map them
to NSValues first.


64
00:03:15.662 --> 00:03:18.899 line:-2 align:center
It also provides its results
using an Async Sequence.


65
00:03:18,932 --> 00:03:23,871 line:-2
In Swift, sequences let you iterate
over their items using a for in loop.


66
00:03:23.904 --> 00:03:26.874 line:-2 align:center
For a sequence of items
that aren't ready all at once,


67
00:03:26.907 --> 00:03:31.912 line:-2 align:center
an async sequence lets you await
the next element after each iteration.


68
00:03:31.945 --> 00:03:34.281 line:-1 align:center
For each successfully generated image,


69
00:03:34,314 --> 00:03:36,884 line:-2
the result includes
the originally requested time


70
00:03:36.917 --> 00:03:39.686 line:-1 align:center
and the actual time alongside the image.


71
00:03:39.720 --> 00:03:43.123 line:-2 align:center
If it fails,
the result has an error to explain why.


72
00:03:44.725 --> 00:03:46.927 line:-2 align:center
And if you are only interested
in the image,


73
00:03:46.960 --> 00:03:50.163 line:-2 align:center
the result has properties
to directly access its values,


74
00:03:50,197 --> 00:03:54,101 line:-2
which can also throw errors
if generation fails.


75
00:03:54.134 --> 00:03:55.836 line:-1 align:center
To learn more about async sequences,


76
00:03:55.869 --> 00:03:59.306 line:-2 align:center
I recommend checking out
the "meet async sequence" session.


77
00:03:59,339 --> 00:04:01,175 line:-1
For a task like image generation,


78
00:04:01.208 --> 00:04:03.844 line:-2 align:center
it's a little easier to see
how it involves loading data.


79
00:04:03,877 --> 00:04:06,780 line:-2
But there are some other
synchronous areas of AVFoundation


80
00:04:06.813 --> 00:04:09.016 line:-2 align:center
that are harder to pick out
as problem spots.


81
00:04:09.917 --> 00:04:13.253 line:-2 align:center
AVMutableComposition
is one of these areas.


82
00:04:13,287 --> 00:04:16,823 line:-2
Insert time range for asset
needs information about the asset's tracks


83
00:04:16.857 --> 00:04:19.793 line:-2 align:center
to add references to them
in the composition.


84
00:04:19,826 --> 00:04:21,962 line:-1
It synchronously inspects the tracks,


85
00:04:21,995 --> 00:04:24,198 line:-1
so if the tracks aren't already loaded,


86
00:04:24.231 --> 00:04:27.968 line:-2 align:center
they'll be synchronously loaded
to create the new composition tracks.


87
00:04:29,603 --> 00:04:33,540 line:-2
Previously, the solution would've been
to await loading the asset's tracks


88
00:04:33.574 --> 00:04:36.910 line:-2 align:center
before inserting them
into the composition.


89
00:04:36.944 --> 00:04:41.782 line:-2 align:center
However, this year, we're introducing
an async version of insertTimeRange,


90
00:04:41,815 --> 00:04:45,219 line:-2
which will async load the tracks for you,
as needed.


91
00:04:46.687 --> 00:04:49.556 line:-2 align:center
Video composition
and mutable video composition


92
00:04:49.590 --> 00:04:53.493 line:-2 align:center
have additional methods that require
loading the asset's properties too.


93
00:04:53.527 --> 00:04:56.496 line:-2 align:center
New this year,
the "propertiesOf asset" constructor,


94
00:04:56,530 --> 00:05:01,101 line:-2
and isValid(for:timeRange:) method
now also have async counterparts.


95
00:05:01,134 --> 00:05:05,472 line:-2
These new methods will asynchronously
load the tracks and duration of the asset,


96
00:05:05.506 --> 00:05:08.308 line:-2 align:center
so there's no need
for you to pre-load them either.


97
00:05:08,342 --> 00:05:11,778 line:-2
These new async methods
make it easier to interact with assets


98
00:05:11.812 --> 00:05:14.815 line:-2 align:center
by loading the properties they need
asynchronously.


99
00:05:14.848 --> 00:05:18.352 line:-2 align:center
But for when you need to load
the properties of an asset yourself,


100
00:05:18,385 --> 00:05:21,655 line:-2
let's get a refresher
of async asset inspection.


101
00:05:21.688 --> 00:05:25.292 line:-2 align:center
You may have noticed there are two ways
to inspect an asset's properties.


102
00:05:25.325 --> 00:05:27.094 line:-1 align:center
When AVFoundation was introduced,


103
00:05:27,127 --> 00:05:31,665 line:-2
the best way to inspect properties
was with async key value loading.


104
00:05:31,698 --> 00:05:34,468 line:-1
Last year, we introduced async load(_:).


105
00:05:34,501 --> 00:05:37,704 line:-2
It uses type safe keys
to identify the properties to load,


106
00:05:37,738 --> 00:05:43,477 line:-2
where the old async key value loading
technique used hard coded strings as keys.


107
00:05:43.510 --> 00:05:46.346 line:-2 align:center
Typos in these string keys
are difficult to catch.


108
00:05:46.380 --> 00:05:50.017 line:-2 align:center
Misspelling a key prevents it
from being loaded asynchronously,


109
00:05:50,050 --> 00:05:53,487 line:-2
and when the property is later used,
it'll block while it loads.


110
00:05:54.888 --> 00:05:59.626 line:-2 align:center
It's also very easy to forget to add
new properties to the keys to load


111
00:05:59.660 --> 00:06:03.664 line:-1 align:center
or to forget async loading them entirely.


112
00:06:03,697 --> 00:06:07,534 line:-2
For these reasons, this year,
we're deprecating async key value loading


113
00:06:07,568 --> 00:06:11,672 line:-2
and the synchronous properties in Swift,
in favor for async load.


114
00:06:11.705 --> 00:06:15.876 line:-2 align:center
Async load uses type safe identifiers
to prevent typos.


115
00:06:15,909 --> 00:06:18,579 line:-2
It directly returns property values
as requested


116
00:06:18,612 --> 00:06:21,648 line:-1
to avoid accessing unloaded properties.


117
00:06:21,682 --> 00:06:24,318 line:-2
And since all of this is checked
at compile time,


118
00:06:24,351 --> 00:06:28,222 line:-2
you'll prevent introducing
any new IO bound performance issues.


119
00:06:28.255 --> 00:06:32.526 line:-2 align:center
Async load is now the only recommended way
to asynchronously inspect properties


120
00:06:32.559 --> 00:06:35.262 line:-1 align:center
on AVAsset, AVAssetTrack,


121
00:06:35.295 --> 00:06:38.966 line:-1 align:center
AVMetadataItem, and their sub classes.


122
00:06:38,999 --> 00:06:40,667 line:-1
However, a handful of these classes


123
00:06:40.701 --> 00:06:43.637 line:-2 align:center
will still offer
synchronous property inspection.


124
00:06:43,670 --> 00:06:48,342 line:-2
That's because the data for their
properties is already available in memory.


125
00:06:48.375 --> 00:06:51.278 line:-2 align:center
Let's take another look at
mutable composition to see why.


126
00:06:52.613 --> 00:06:55.282 line:-2 align:center
We'll use a mutable composition
to splice together segments


127
00:06:55.315 --> 00:06:58.285 line:-1 align:center
of two existing video tracks.


128
00:06:58,318 --> 00:07:01,321 line:-2
We'll start by creating
an empty composition


129
00:07:01,355 --> 00:07:03,857 line:-1
and adding an empty video track.


130
00:07:03,891 --> 00:07:07,127 line:-2
Then, we can synchronously insert
part of the first video track


131
00:07:07,160 --> 00:07:09,830 line:-1
into the composition track.


132
00:07:09.863 --> 00:07:12.566 line:-2 align:center
Behind the scenes,
this step isn't loading any data.


133
00:07:12.599 --> 00:07:16.770 line:-2 align:center
Instead, it adds a new track segment
that points to the desired track.


134
00:07:18,572 --> 00:07:21,608 line:-2
Then we can append part of
the second track in the same way.


135
00:07:23.477 --> 00:07:26.446 line:-2 align:center
Since the composition itself
is backed by an in memory structure


136
00:07:26,480 --> 00:07:30,184 line:-2
and not a file, we can safely inspect
its properties synchronously


137
00:07:30,217 --> 00:07:33,587 line:-1
without needing to load them first.


138
00:07:33,620 --> 00:07:35,055 line:-1
Again, for this reason,


139
00:07:35.088 --> 00:07:39.326 line:-2 align:center
synchronous property inspection
will remain available on these classes


140
00:07:39,359 --> 00:07:43,363 line:-2
and all classes will use async load
for asynchronous inspection.


141
00:07:44,932 --> 00:07:47,501 line:-2
All of these new async methods
in AVFoundation


142
00:07:47.534 --> 00:07:51.104 line:-2 align:center
will make it easier to prevent blocking
while loading media data.


143
00:07:51,138 --> 00:07:55,142 align:center
But, introducing concurrency into your app
for the first time can be tricky.


144
00:07:55,175 --> 00:07:58,545 line:0
Check out these sessions from
WWDC 21 for help getting started


145
00:07:58,579 --> 00:08:04,718 line:-2
with Swift concurrency and for migrating
to AVFoundation's async load in your app.


146
00:08:04,751 --> 00:08:07,788 line:-2
For our last topic, let's talk about
optimizing custom data loading


147
00:08:07.821 --> 00:08:09.356 line:-1 align:center
for your assets.


148
00:08:09,389 --> 00:08:13,794 line:-2
To start, lets take a look
at how AVAsset loads data by default.


149
00:08:13,827 --> 00:08:15,929 line:-1
When you create an AVAsset with a URL,


150
00:08:15.963 --> 00:08:20.267 line:-2 align:center
the media can either be on the network,
or stored locally on device.


151
00:08:20.300 --> 00:08:23.403 line:-2 align:center
If it's on the network,
AVAsset will dynamically cache


152
00:08:23.437 --> 00:08:27.007 line:-2 align:center
a certain amount of data
to ensure smooth playback.


153
00:08:27,040 --> 00:08:30,143 line:-2
If the media is local,
AVAsset can bypass the cache


154
00:08:30,177 --> 00:08:32,813 line:-1
and load data as needed to play.


155
00:08:32.846 --> 00:08:34.815 line:-2 align:center
In some cases,
you might not be able to give


156
00:08:34,848 --> 00:08:37,551 line:-1
AVAsset a direct pointer to your media.


157
00:08:37,584 --> 00:08:42,289 line:-2
Maybe you store the raw bytes of an mp4
inside of a custom project file.


158
00:08:42.322 --> 00:08:47.661 line:-2 align:center
For situations like this,
AVAsset can use an AVAssetResourceLoader.


159
00:08:47.694 --> 00:08:50.864 line:-2 align:center
Resource loader provides the asset
with a way to request arbitrary bytes


160
00:08:50,898 --> 00:08:54,201 line:-2
from your media
that you have a special way to load.


161
00:08:54.234 --> 00:08:57.204 line:-2 align:center
But since the asset is no longer
handling reading in data,


162
00:08:57,237 --> 00:09:01,008 line:-2
it can't predict how long it'll take
each chunk to load.


163
00:09:01,041 --> 00:09:04,878 line:-2
So it assumes that accessing the media
involves network communication,


164
00:09:04,912 --> 00:09:09,183 line:-2
and waits until it caches data
before it becomes ready to play.


165
00:09:09.216 --> 00:09:11.952 line:-2 align:center
This year, if your media
is locally available,


166
00:09:11,985 --> 00:09:14,521 line:-2
you can enable
entireLengthAvailableOnDemand


167
00:09:14.555 --> 00:09:16.390 line:-1 align:center
for your resource loader.


168
00:09:16.423 --> 00:09:19.560 line:-2 align:center
Setting this flag tells the asset
that it can expect to receive data


169
00:09:19.593 --> 00:09:22.429 line:-2 align:center
as it's requested,
so it can skip caching.


170
00:09:25,232 --> 00:09:28,001 line:-2
For local media,
entireLengthAvailableOnDemand


171
00:09:28,035 --> 00:09:30,671 line:-2
can help reduce your app's memory usage
during playback,


172
00:09:30.704 --> 00:09:33.307 line:-1 align:center
since it won't need to cache extra data.


173
00:09:33.340 --> 00:09:35.943 line:-2 align:center
It can also decrease the time it takes
to start playback,


174
00:09:35,976 --> 00:09:39,847 line:-2
since the asset won't have to wait
for the cache to fill up first.


175
00:09:39,880 --> 00:09:42,349 line:-2
Use caution when enabling this flag,
though.


176
00:09:42,382 --> 00:09:44,484 line:-2
If loading requires
any network operations,


177
00:09:44,518 --> 00:09:46,286 line:-1
including network file storage,


178
00:09:46.320 --> 00:09:48.822 line:-1 align:center
it's likely playback will be unreliable.


179
00:09:50.390 --> 00:09:52.159 line:-2 align:center
That's the new enhancement
for resource loader.


180
00:09:52.192 --> 00:09:55.662 line:-2 align:center
Now lets wrap things up
with some next steps for your app.


181
00:09:56,797 --> 00:10:00,000 line:-2
When working with media, use async/await
to keep your app responsive


182
00:10:00.033 --> 00:10:02.503 line:-1 align:center
while it loads in the background.


183
00:10:02,536 --> 00:10:07,407 line:-2
Consider increasing tolerances when
using image generator for faster results.


184
00:10:07,441 --> 00:10:10,511 line:-2
And if you are using resource loader
for locally available media,


185
00:10:10.544 --> 00:10:14.314 line:-2 align:center
enable entire length available on demand
to help increase performance.


186
00:10:15,249 --> 00:10:16,717 line:-1
That's everything I have for today.


187
00:10:16,750 --> 00:10:20,654 line:-2
Thanks for watching,
and enjoy WWDC 22.

