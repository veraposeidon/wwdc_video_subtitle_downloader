2
00:00:00.000 --> 00:00:03.070 line:-1 position:50%
♪ Mellow instrumental
hip-hop music ♪


3
00:00:03,070 --> 00:00:09,943 line:0 size:2% align:right
♪


4
00:00:09,943 --> 00:00:14,047 line:-1
Hello, I'm Sara Frederixon,
an engineer on the Health app,


5
00:00:14,047 --> 00:00:18,051 line:-1
and I'm here to talk to you
about using SwiftUI with UIKit.


6
00:00:18,051 --> 00:00:22,189 line:-1
Like many of you,
I work on an existing UIKit app.


7
00:00:22.189 --> 00:00:25.158 line:-1 position:50%
For me, this is the Health app.


8
00:00:25,158 --> 00:00:27,494 line:-1
The Health app
has many visualizations


9
00:00:27,494 --> 00:00:30,430 line:-1
to help people understand
their health data,


10
00:00:30,430 --> 00:00:33,867 line:-1
but building these views
can be quite complex.


11
00:00:33.867 --> 00:00:36.803 line:-1 position:50%
I've been interested
in taking advantage of SwiftUI,


12
00:00:36,803 --> 00:00:39,740 line:-1
so I worked with the UIKit
and SwiftUI teams


13
00:00:39,740 --> 00:00:43,477 line:-1
to learn how to integrate
both into the same app.


14
00:00:43,477 --> 00:00:46,613 line:-1
In this video,
I will teach you how easy it is


15
00:00:46.613 --> 00:00:50.784 line:-1 position:50%
to start using SwiftUI
in your own UIKit apps.


16
00:00:50,784 --> 00:00:54,354 line:-1
First I'll cover the existing
UIHostingController,


17
00:00:54.354 --> 00:00:58.959 line:-1 position:50%
which has some new updates
that add even more flexibility.


18
00:00:58,959 --> 00:01:01,962 line:-1
Next I'll dive into populating
SwiftUI views


19
00:01:01,962 --> 00:01:05,165 line:-1
with data that already exist
in your app,


20
00:01:05,165 --> 00:01:07,935 line:-1
and how to ensure
the SwiftUI views update


21
00:01:07,935 --> 00:01:11,071 line:-1
when that data changes.


22
00:01:11,071 --> 00:01:14,107 line:-1
Then, I'll talk about
some exciting new functionality


23
00:01:14,107 --> 00:01:16,276 line:-1
that lets you build
UICollectionView


24
00:01:16.276 --> 00:01:20.514 line:-1 position:50%
and UITableView cells
using SwiftUI.


25
00:01:20.514 --> 00:01:24.251 line:-1 position:50%
Finally, I'll walk through
the unique aspects of data flow


26
00:01:24.251 --> 00:01:25.919 line:-1 position:50%
with collection and table views


27
00:01:25,919 --> 00:01:29,890 line:-1
when you're using SwiftUI
inside cells.


28
00:01:29,890 --> 00:01:33,727 line:-1
Let's get started by talking
about UIHostingController.


29
00:01:33.727 --> 00:01:36.763 line:-1 position:50%
UIHostingController
is a UIViewController


30
00:01:36,763 --> 00:01:39,967 line:-1
that contains a SwiftUI
view hierarchy.


31
00:01:39,967 --> 00:01:41,735 line:-1
You can use a hosting controller


32
00:01:41,735 --> 00:01:45,372 line:-1
anywhere you can use
a view controller in UIKit.


33
00:01:45,372 --> 00:01:46,974 line:-1
This makes UIHostingController


34
00:01:46,974 --> 00:01:50,444 line:-1
an easy way
to start using SwiftUI.


35
00:01:50.444 --> 00:01:53.814 line:-1 position:50%
Let's examine how
a hosting controller works.


36
00:01:53.814 --> 00:01:56.817 line:-1 position:50%
A hosting controller
is a view controller,


37
00:01:56.817 --> 00:02:01.355 line:-1 position:50%
which means it has a UIView
stored in its view property.


38
00:02:01.355 --> 00:02:02.589 line:-1 position:50%
And inside that view


39
00:02:02,589 --> 00:02:05,559 line:-1
is where your SwiftUI content
is rendered.


40
00:02:05,559 --> 00:02:09,696 line:-1
Let's go through an example of
how to use a hosting controller.


41
00:02:09,696 --> 00:02:14,434 line:-1
Here, we create a HeartRateView,
a SwiftUI view.


42
00:02:14,434 --> 00:02:17,571 line:-1
We then create a hosting
controller with HeartRateView


43
00:02:17,571 --> 00:02:21,041 line:-1
as its root view,
and present it.


44
00:02:21,041 --> 00:02:22,709 line:-1
UIHostingController works with


45
00:02:22,709 --> 00:02:26,880 line:-1
all of the UIKit
view controller APIs.


46
00:02:26.880 --> 00:02:30.484 line:-1 position:50%
Let's go through
another example.


47
00:02:30.484 --> 00:02:32.119 line:-1 position:50%
We have the same HeartRateView


48
00:02:32.119 --> 00:02:34.921 line:-1 position:50%
and hosting controller
as before.


49
00:02:34,921 --> 00:02:36,957 line:-1
Here we add
the hosting controller


50
00:02:36.957 --> 00:02:39.192 line:-1 position:50%
as a child view controller.


51
00:02:39,192 --> 00:02:43,830 line:-1
Then we can position and size
the hosting controller's view.


52
00:02:43.830 --> 00:02:47.968 line:-1 position:50%
When your SwiftUI content inside
UIHostingController changes,


53
00:02:47,968 --> 00:02:51,471 line:-1
it may cause the view
to need to be resized.


54
00:02:51,471 --> 00:02:54,908 line:-1
New in iOS 16,
UIHostingController


55
00:02:54,908 --> 00:02:57,511 line:-1
allows you to enable
automatic updates


56
00:02:57.511 --> 00:03:00.380 line:-1 position:50%
of the view controller's
preferred content size


57
00:03:00.380 --> 00:03:03.850 line:-1 position:50%
and the view's intrinsic
content size.


58
00:03:03,850 --> 00:03:07,220 line:-1
You can enable this using
the new sizingOptions property


59
00:03:07,220 --> 00:03:09,189 line:-1
on UIHostingController.


60
00:03:09.189 --> 00:03:12.292 line:-1 position:50%
Let's go through an example.


61
00:03:12,292 --> 00:03:14,795 line:-1
To start, we make
our HeartRateView,


62
00:03:14,795 --> 00:03:18,031 line:-1
and create
the hostingController.


63
00:03:18,031 --> 00:03:22,335 line:-1
We use the new sizingOptions API
to tell the hostingController


64
00:03:22,335 --> 00:03:27,641 line:-1
to automatically update
its preferredContentSize.


65
00:03:27,641 --> 00:03:30,077 line:-1
Then, we set
the modalPresentationStyle


66
00:03:30.077 --> 00:03:31.711 line:-1 position:50%
to popover.


67
00:03:31,711 --> 00:03:35,682 line:-1
Using the new sizingOptions API
ensures that the popover


68
00:03:35,682 --> 00:03:41,221 line:-1
is always sized appropriately
to fit the SwiftUI content.


69
00:03:41.221 --> 00:03:43.690 line:-1 position:50%
Now that you're familiar
with UIHostingController,


70
00:03:43,690 --> 00:03:46,827 line:-1
let's talk about
how to get data into SwiftUI


71
00:03:46.827 --> 00:03:49.729 line:-1 position:50%
from other parts
of your UIKit app,


72
00:03:49,729 --> 00:03:52,399 line:-1
and ensure that
your SwiftUI views update


73
00:03:52,399 --> 00:03:55,502 line:-1
when that data changes.


74
00:03:55.502 --> 00:03:58.438 line:-1 position:50%
Here's a diagram
of your UIKit app,


75
00:03:58,438 --> 00:04:00,440 line:-1
It contains
an existing model layer


76
00:04:00.440 --> 00:04:04.411 line:-1 position:50%
that owns and manages
your app's data model objects.


77
00:04:04,411 --> 00:04:07,848 line:-1
Your app also contains
a number of view controllers.


78
00:04:07.848 --> 00:04:11.585 line:-1 position:50%
If you want start using SwiftUI,
you'll need a hosting controller


79
00:04:11,585 --> 00:04:15,589 line:-1
with a SwiftUI view inside
one of the view controllers.


80
00:04:15,589 --> 00:04:18,892 line:-1
You will want to populate
this SwiftUI view with data


81
00:04:18,892 --> 00:04:22,496 line:-1
that is still owned
by your existing model layer.


82
00:04:22,496 --> 00:04:25,999 line:-1
In this section, we're going
to focus on how to bridge data


83
00:04:25,999 --> 00:04:30,370 line:-1
across the boundary
between UIKit and SwiftUI.


84
00:04:30,370 --> 00:04:33,573 line:-1
SwiftUI offers a variety
of data flow primitives


85
00:04:33,573 --> 00:04:36,443 line:-1
to help you manage the data
in your app.


86
00:04:36.443 --> 00:04:39.412 line:-1 position:50%
Let's go through
the different options.


87
00:04:39.412 --> 00:04:44.417 line:-1 position:50%
To store data that is created
and owned by a SwiftUI view,


88
00:04:44,417 --> 00:04:49,556 line:-1
SwiftUI provides the @State and
@StateObject property wrappers.


89
00:04:49,556 --> 00:04:52,993 line:-1
Since we're focused on data
owned outside of SwiftUI,


90
00:04:52,993 --> 00:04:56,296 line:-1
these property wrappers
aren't the right choice.


91
00:04:56,296 --> 00:04:58,765 line:0
So, I'm not going
to cover these in this video.


92
00:04:58,765 --> 00:05:01,434 position:50%
Watch
"Data Essentials in SwiftUI"


93
00:05:01,434 --> 00:05:06,039 line:0
to learn more about data
owned by a SwiftUI view.


94
00:05:06.039 --> 00:05:08.808 line:-1 position:50%
One way to handle data
external to SwiftUI


95
00:05:08,808 --> 00:05:12,846 line:-1
is to pass values directly
when you initialize your views.


96
00:05:12,846 --> 00:05:15,248 line:-1
Because you are
just passing raw data


97
00:05:15,248 --> 00:05:18,818 line:-1
that is not owned
or managed by SwiftUI,


98
00:05:18,818 --> 00:05:22,622 line:-1
you are responsible for manually
updating the UIHostingController


99
00:05:22,622 --> 00:05:25,225 line:-1
when the data changes.


100
00:05:25.225 --> 00:05:27.527 line:-1 position:50%
Let's go through an example.


101
00:05:27,527 --> 00:05:31,665 line:-1
Here is a SwiftUI view
named HeartRateView.


102
00:05:31.665 --> 00:05:33.600 line:-1 position:50%
This view has
a single property --


103
00:05:33.600 --> 00:05:37.003 line:-1 position:50%
the heart rate beatsPerMinute
stored as an integer --


104
00:05:37,003 --> 00:05:39,940 line:-1
and it displays
the value as text.


105
00:05:39,940 --> 00:05:41,608 line:-1
We're displaying
this HeartRateView


106
00:05:41,608 --> 00:05:43,777 line:-1
by embedding
a UIHostingController


107
00:05:43,777 --> 00:05:45,812 line:-1
inside an existing
view controller


108
00:05:45,812 --> 00:05:48,515 line:-1
named HeartRateViewController.


109
00:05:48.515 --> 00:05:50.684 line:-1 position:50%
We save a reference
to the hosting controller


110
00:05:50.684 --> 00:05:53.253 line:-1 position:50%
so we can update
its root view later.


111
00:05:53,253 --> 00:05:57,357 line:-1
Remember, the SwiftUI
HeartRateView is a value type,


112
00:05:57.357 --> 00:06:00.827 line:-1 position:50%
so storing it by itself
would create a separate copy,


113
00:06:00,827 --> 00:06:04,431 line:-1
and wouldn't allow us
to update the UI.


114
00:06:04.431 --> 00:06:06.900 line:-1 position:50%
The HeartRateViewController
owns the data


115
00:06:06,900 --> 00:06:09,769 line:-1
used to populate
the HeartRateView.


116
00:06:09,769 --> 00:06:13,240 line:0
This data is stored
in the beatsPerMinute property,


117
00:06:13,240 --> 00:06:15,542 position:50%
and when the beatsPerMinute
value changes,


118
00:06:15,542 --> 00:06:19,412 line:0
we call a method
to update the view.


119
00:06:19,412 --> 00:06:23,383 position:50%
Inside of the update method,
we create a new HeartRateView


120
00:06:23,383 --> 00:06:26,119 line:0
using the latest
beatsPerMinute value,


121
00:06:26,119 --> 00:06:28,154 line:0
and then assign that view
as the rootView


122
00:06:28,154 --> 00:06:31,224 position:50%
of our hosting controller.


123
00:06:31,224 --> 00:06:37,063 line:-1
This is a simple way to get data
from UIKit into SwiftUI,


124
00:06:37.063 --> 00:06:39.766 line:-1 position:50%
but it requires manually
updating the rootView


125
00:06:39,766 --> 00:06:43,870 line:-1
of the hosting controller
any time the data changes.


126
00:06:43,870 --> 00:06:46,539 line:-1
Let's go through some other
SwiftUI data primitives


127
00:06:46.539 --> 00:06:49.743 line:-1 position:50%
to make these updates
happen automatically.


128
00:06:49,743 --> 00:06:52,245 line:0
The @ObservedObject
and @EnvironmentObject


129
00:06:52,245 --> 00:06:54,547 line:0
property wrappers
allow you to reference


130
00:06:54,547 --> 00:06:56,283 line:0
an external model object


131
00:06:56,283 --> 00:06:59,853 line:0
that conforms to
the ObservableObject protocol.


132
00:06:59,853 --> 00:07:01,688 line:0
When you use
these property wrappers,


133
00:07:01,688 --> 00:07:07,294 line:0
SwiftUI automatically updates
your view when the data changes.


134
00:07:07,294 --> 00:07:10,363 line:0
We're going to focus on the
@ObservedObject property wrapper


135
00:07:10,363 --> 00:07:12,032 position:50%
in this video,


136
00:07:12,032 --> 00:07:14,901 line:-1
but you can learn more about
EnvironmentObject in the


137
00:07:14,901 --> 00:07:18,805 line:-1
"Data Essentials in SwiftUI"
video mentioned earlier.


138
00:07:18,805 --> 00:07:22,575 line:-1
Let's go through how to create
an @ObservedObject.


139
00:07:22,575 --> 00:07:25,078 line:-1
The first step
is to take a model object


140
00:07:25,078 --> 00:07:27,614 line:-1
that is owned by an existing
part of your app


141
00:07:27.614 --> 00:07:31.985 line:-1 position:50%
and make it conform to
the ObservableObject protocol.


142
00:07:31,985 --> 00:07:35,522 line:-1
Next, we store the model
as an @ObservedObject property


143
00:07:35,522 --> 00:07:38,758 line:-1
in our SwiftUI view.


144
00:07:38,758 --> 00:07:42,128 line:-1
Connecting the ObservableObject
to SwiftUI allows it


145
00:07:42,128 --> 00:07:46,566 line:-1
to update the view when
one of its properties change.


146
00:07:46.566 --> 00:07:48.768 line:-1 position:50%
Let's go back to our
HeartRateView example


147
00:07:48.768 --> 00:07:51.037 line:-1 position:50%
and wire this up.


148
00:07:51,037 --> 00:07:53,340 line:-1
Our app has a class named
HeartData


149
00:07:53.340 --> 00:07:56.776 line:-1 position:50%
that contains the property
beatsPerMinute.


150
00:07:56,776 --> 00:08:01,548 line:-1
We make it an ObservableObject
by conforming to the protocol.


151
00:08:01,548 --> 00:08:04,217 line:-1
Then we add
the @Published property wrapper


152
00:08:04,217 --> 00:08:06,720 line:-1
to the beatsPerMinute property.


153
00:08:06,720 --> 00:08:09,456 line:-1
This property wrapper
is what triggers SwiftUI


154
00:08:09,456 --> 00:08:12,926 line:-1
to update our views on changes.


155
00:08:12,926 --> 00:08:15,462 line:-1
In the HeartRateView,
we store the HeartData


156
00:08:15.462 --> 00:08:17.397 line:-1 position:50%
in a property annotated with


157
00:08:17.397 --> 00:08:20.567 line:-1 position:50%
the @ObservedObject
property wrapper.


158
00:08:20.567 --> 00:08:23.636 line:-1 position:50%
In the body of the view,
we display the beatsPerMinute


159
00:08:23.636 --> 00:08:26.239 line:-1 position:50%
directly from the HeartData.


160
00:08:26.239 --> 00:08:30.043 line:-1 position:50%
Now, let's use these together
in our view controller.


161
00:08:30,043 --> 00:08:33,346 line:-1
Here is our
HeartRateViewController.


162
00:08:33.346 --> 00:08:37.751 line:-1 position:50%
It stores the HeartData
ObservableObject in a property.


163
00:08:37,751 --> 00:08:40,820 line:-1
Because this property
is not inside a SwiftUI view,


164
00:08:40,820 --> 00:08:44,157 line:-1
we don't need to use
a property wrapper here.


165
00:08:44.157 --> 00:08:46.192 line:-1 position:50%
The HeartRateViewController
is initialized


166
00:08:46.192 --> 00:08:47.894 line:-1 position:50%
with a HeartData instance,


167
00:08:47,894 --> 00:08:50,130 line:-1
which is used to create
a HeartRateView


168
00:08:50.130 --> 00:08:54.467 line:-1 position:50%
that becomes the rootView
of the hosting controller.


169
00:08:54,467 --> 00:08:57,670 position:50%
The diagram illustrates
how this comes together.


170
00:08:57,670 --> 00:09:00,306 line:0
We fetch the current
HeartData instance,


171
00:09:00,306 --> 00:09:04,277 line:0
which contains a heart rate
of 78 beat per minute.


172
00:09:04,277 --> 00:09:07,747 line:0
Then we create a new
HeartRateViewController


173
00:09:07,747 --> 00:09:09,949 line:0
with that HeartData instance,


174
00:09:09,949 --> 00:09:14,554 line:0
which wires it up
to the SwiftUI HeartRateView.


175
00:09:14,554 --> 00:09:15,922 line:0
After a few seconds,


176
00:09:15,922 --> 00:09:18,691 position:50%
when the next heart rate
data sample arrives,


177
00:09:18,691 --> 00:09:24,230 line:0
the heart data's beatsPerMinute
property is updated to 94.


178
00:09:24,230 --> 00:09:26,433 line:0
Because this changes
a published property


179
00:09:26,433 --> 00:09:29,035 position:50%
on an ObservableObject,
the HeartRateView


180
00:09:29,035 --> 00:09:33,306 line:0
is automatically updated
to display the new value.


181
00:09:33.306 --> 00:09:36.443 line:-1 position:50%
We no longer need to manually
update the hosting controller


182
00:09:36.443 --> 00:09:38.178 line:-1 position:50%
when the data changes.


183
00:09:38.178 --> 00:09:41.781 line:-1 position:50%
This is why ObservableObject
is a great way to bridge data


184
00:09:41.781 --> 00:09:44.784 line:-1 position:50%
from UIKit to SwiftUI.


185
00:09:44,784 --> 00:09:48,888 line:-1
Next, let's talk about
using SwiftUI in collection view


186
00:09:48.888 --> 00:09:52.292 line:-1 position:50%
and table view cells.


187
00:09:52.292 --> 00:09:56.296 line:-1 position:50%
New in iOS 16
is UIHostingConfiguration,


188
00:09:56,296 --> 00:09:58,998 line:-1
which lets you harness
the power of SwiftUI


189
00:09:58,998 --> 00:10:03,470 line:-1
inside your existing UIKit,
collection, and table views.


190
00:10:03,470 --> 00:10:06,272 line:-1
UIHostingConfiguration
makes it easy to implement


191
00:10:06.272 --> 00:10:09.642 line:-1 position:50%
custom cells using SwiftUI,
without needing to worry


192
00:10:09,642 --> 00:10:13,513 line:-1
about embedding an extra view
or view controller.


193
00:10:13,513 --> 00:10:16,382 line:-1
Before we dive deeper
on UIHostingConfiguration,


194
00:10:16.382 --> 00:10:20.420 line:-1 position:50%
let's review
cell configurations in UIKit.


195
00:10:20.420 --> 00:10:23.189 line:-1 position:50%
Cell configurations
are a modern way


196
00:10:23,189 --> 00:10:28,228 line:-1
to define the content, styling,
and behavior of cells in UIKit.


197
00:10:28,228 --> 00:10:31,197 line:-1
Unlike a UIView
or UIViewController,


198
00:10:31.197 --> 00:10:34.100 line:-1 position:50%
a configuration is just
a lightweight struct.


199
00:10:34,100 --> 00:10:36,769 line:-1
It's inexpensive to create.


200
00:10:36.769 --> 00:10:38.972 line:-1 position:50%
A configuration
is only a description


201
00:10:38.972 --> 00:10:41.741 line:-1 position:50%
of a cell's appearance,
so it needs to be applied


202
00:10:41.741 --> 00:10:45.078 line:-1 position:50%
to a cell to have an effect.


203
00:10:45.078 --> 00:10:46.880 line:-1 position:50%
Configurations are composable,


204
00:10:46,880 --> 00:10:48,882 line:-1
and work with both
UICollectionView


205
00:10:48,882 --> 00:10:51,384 line:-1
and UITableView cells.


206
00:10:51,384 --> 00:10:56,122 line:0
For more details, you can watch
"Modern cell configuration."


207
00:10:56,122 --> 00:10:58,324 line:-1
With that in mind, let's dive in


208
00:10:58.324 --> 00:11:02.428 line:-1 position:50%
and start using
UIHostingConfiguration!


209
00:11:02,428 --> 00:11:05,331 line:-1
UIHostingConfiguration
is a content configuration


210
00:11:05,331 --> 00:11:08,902 line:-1
that is initialized
with a SwiftUI ViewBuilder.


211
00:11:08.902 --> 00:11:11.304 line:-1 position:50%
That means we can start
writing SwiftUI code


212
00:11:11,304 --> 00:11:15,141 line:-1
to create views
directly inside it.


213
00:11:15,141 --> 00:11:17,744 line:-1
In order to render
the hosting configuration,


214
00:11:17,744 --> 00:11:20,346 line:-1
we set it to the
contentConfiguration property


215
00:11:20,346 --> 00:11:23,950 line:-1
of the UICollectionView
or UITableView cell.


216
00:11:23,950 --> 00:11:25,985 line:-1
Let's start writing
some SwiftUI code


217
00:11:25,985 --> 00:11:30,623 line:-1
in this hosting configuration to
build a custom heart rate cell.


218
00:11:30.623 --> 00:11:34.394 line:-1 position:50%
We'll start by creating a label
with the text "Heart Rate"


219
00:11:34,394 --> 00:11:36,462 line:-1
and the image of a heart.


220
00:11:36.462 --> 00:11:38.998 line:-1 position:50%
SwiftUI views
receive default styling


221
00:11:38.998 --> 00:11:41.834 line:-1 position:50%
based on the context
they are used in.


222
00:11:41.834 --> 00:11:43.770 line:-1 position:50%
But we can start
customizing the styling


223
00:11:43,770 --> 00:11:47,840 line:-1
using standard
SwiftUI view modifiers.


224
00:11:47,840 --> 00:11:51,344 line:-1
Let's make the image
and text pink with a bold font,


225
00:11:51.344 --> 00:11:55.648 line:-1 position:50%
by adding the foregroundStyle
and font modifiers to our label.


226
00:11:55.648 --> 00:11:58.484 line:-1 position:50%
Since we're just writing
regular SwiftUI code,


227
00:11:58.484 --> 00:12:01.020 line:-1 position:50%
we can factor out our code
into a standalone view


228
00:12:01.020 --> 00:12:03.856 line:-1 position:50%
anytime we want.


229
00:12:03,856 --> 00:12:06,826 line:-1
Here, we create
a new SwiftUI view


230
00:12:06,826 --> 00:12:09,696 line:-1
named HeartRateTitleView,


231
00:12:09,696 --> 00:12:12,298 line:-1
moved the code we had
into its body,


232
00:12:12.298 --> 00:12:14.634 line:-1 position:50%
and then used
that HeartRateTitleView


233
00:12:14,634 --> 00:12:16,636 line:-1
in the hosting configuration.


234
00:12:16,636 --> 00:12:17,837 line:-1
As shown in the cell,


235
00:12:17,837 --> 00:12:22,275 line:-1
it produces
the exact same result.


236
00:12:22,275 --> 00:12:24,811 line:-1
Now we can start
adding more views


237
00:12:24.811 --> 00:12:27.513 line:-1 position:50%
inside the HeartRateTitleView.


238
00:12:27,513 --> 00:12:32,151 line:-1
I've put the label inside
of an HStack with a spacer,


239
00:12:32,151 --> 00:12:36,155 line:-1
then added the current time
in a Text view next to it.


240
00:12:36.155 --> 00:12:38.391 line:-1 position:50%
That's looking
pretty good so far.


241
00:12:38.391 --> 00:12:41.427 line:-1 position:50%
Let's add some more content
to this custom cell


242
00:12:41.427 --> 00:12:44.864 line:-1 position:50%
below the HeartRateTitleView.


243
00:12:44,864 --> 00:12:47,433 line:-1
To do this,
we'll insert a VStack


244
00:12:47,433 --> 00:12:49,202 line:-1
inside the hosting
configuration


245
00:12:49,202 --> 00:12:53,773 line:-1
so we can add more content
below the HeartRateTitleView.


246
00:12:53,773 --> 00:12:56,609 line:-1
Then we'll put
two Text views together


247
00:12:56,609 --> 00:13:00,713 line:-1
in a HStack to display 90 BPM


248
00:13:00,713 --> 00:13:05,318 line:-1
and then apply a few modifiers
to style them the way we want.


249
00:13:05.318 --> 00:13:08.154 line:-1 position:50%
Just like we did before
with the HeartRateTitleView,


250
00:13:08,154 --> 00:13:14,293 line:-1
we can move this new code
into its own SwiftUI view.


251
00:13:14,293 --> 00:13:17,430 line:-1
Now the same code
is extracted into the body


252
00:13:17,430 --> 00:13:20,033 line:-1
of the HeartRateBPMView.


253
00:13:20,033 --> 00:13:21,768 line:-1
Our cell is looking great,


254
00:13:21,768 --> 00:13:25,304 line:-1
but I have an idea
for another thing we could add.


255
00:13:25.304 --> 00:13:29.742 line:-1 position:50%
New in iOS 16 is
the Swift Charts framework,


256
00:13:29.742 --> 00:13:33.112 line:-1 position:50%
which lets you visualize data
with beautiful graphs


257
00:13:33,112 --> 00:13:35,815 line:-1
in only a few lines of code.


258
00:13:35,815 --> 00:13:38,551 line:-1
Let's try using it to display
a small line chart


259
00:13:38.551 --> 00:13:41.888 line:-1 position:50%
right inside the cell.


260
00:13:41.888 --> 00:13:45.458 line:-1 position:50%
Using the new Chart view,
we create a small line chart


261
00:13:45.458 --> 00:13:47.894 line:-1 position:50%
that visualizes
recent heart rate samples


262
00:13:47.894 --> 00:13:52.565 line:-1 position:50%
and display that next
to the BPM view in the cell.


263
00:13:52.565 --> 00:13:53.700 line:-1 position:50%
To generate the chart,


264
00:13:53.700 --> 00:13:56.936 line:-1 position:50%
we pass in a collection
of heart rate samples,


265
00:13:56,936 --> 00:14:01,074 line:-1
and draw a LineMark that
connects all of the samples.


266
00:14:01,074 --> 00:14:02,608 line:-1
We can add a circle symbol


267
00:14:02,608 --> 00:14:04,811 line:-1
to indicate each sample
on the line


268
00:14:04.811 --> 00:14:07.213 line:-1 position:50%
and apply
a pink foreground style,


269
00:14:07.213 --> 00:14:11.284 line:-1 position:50%
to tint the chart to match
the HeartRateTitleView.


270
00:14:11,284 --> 00:14:14,153 position:50%
We're only scratching
the surface of what you can do


271
00:14:14,153 --> 00:14:16,889 position:50%
with the new
Swift Charts framework,


272
00:14:16,889 --> 00:14:20,259 line:0
so be sure to check out
the video "Hello Swift Charts"


273
00:14:20,259 --> 00:14:22,228 position:50%
to learn more about it.


274
00:14:22,228 --> 00:14:25,732 line:-1
Not only does our finished
heart rate cell look awesome,


275
00:14:25,732 --> 00:14:29,268 line:-1
but it was easy to make
in just a couple of minutes.


276
00:14:29,268 --> 00:14:32,038 line:-1
That's how easy it is
to start building custom cells


277
00:14:32,038 --> 00:14:35,508 line:-1
with UIHostingConfiguration
and SwiftUI.


278
00:14:35.508 --> 00:14:37.376 line:-1 position:50%
Let's talk about
four special features


279
00:14:37,376 --> 00:14:40,847 line:-1
that UIHostingConfiguration
supports.


280
00:14:40,847 --> 00:14:44,417 position:50%
By default,
the root-level SwiftUI content


281
00:14:44,417 --> 00:14:46,686 line:0
is inset from the edges
of the cell,


282
00:14:46,686 --> 00:14:50,690 line:0
based on the cell's layout
margins in UIKit.


283
00:14:50,690 --> 00:14:52,625 line:0
This ensures
that the cell content


284
00:14:52,625 --> 00:14:55,728 position:50%
is properly aligned with
the content of adjacent cells


285
00:14:55,728 --> 00:14:59,899 position:50%
and other UI elements,
such as the navigation bar.


286
00:14:59,899 --> 00:15:02,935 line:0
Sometimes, you may want to use
different margins,


287
00:15:02,935 --> 00:15:07,073 position:50%
or have the content extend
to the edges of the cell.


288
00:15:07,073 --> 00:15:10,176 line:0
For these cases, you can change
the default margins


289
00:15:10,176 --> 00:15:15,414 line:0
by using the margins modifier
on UIHostingConfiguration.


290
00:15:15,414 --> 00:15:18,050 line:0
If you want to customize
a cell's background appearance


291
00:15:18,050 --> 00:15:21,587 position:50%
using SwiftUI, you can use
the background modifier


292
00:15:21,587 --> 00:15:24,490 line:0
on the UIHostingConfiguration.


293
00:15:24,490 --> 00:15:26,559 line:0
There are a few
key differences between


294
00:15:26,559 --> 00:15:31,631 line:0
a UIHostingConfiguration's
background and its content.


295
00:15:31,631 --> 00:15:34,734 line:0
The background is hosted
at the the back of the cell,


296
00:15:34,734 --> 00:15:39,172 position:50%
underneath your SwiftUI content
in the cell's content view.


297
00:15:39,172 --> 00:15:41,507 line:0
Additionally,
while content is typically


298
00:15:41,507 --> 00:15:43,943 line:0
inset from the cell's edges,


299
00:15:43,943 --> 00:15:48,181 position:50%
backgrounds extend
edge to edge in the cell.


300
00:15:48,181 --> 00:15:51,150 line:0
Finally, when using
self-sizing cells,


301
00:15:51,150 --> 00:15:56,689 line:0
only the cell content influences
the size of the cell.


302
00:15:56.689 --> 00:15:59.625 line:-1 position:50%
Next, let's examine
two more special features


303
00:15:59,625 --> 00:16:02,094 line:-1
of UIHostingConfiguration
that you can use


304
00:16:02,094 --> 00:16:04,730 line:-1
when you have a cell
inside a collection view list


305
00:16:04,730 --> 00:16:06,699 line:-1
or table view.


306
00:16:06,699 --> 00:16:08,968 position:50%
In a list, the separator
below the cell


307
00:16:08,968 --> 00:16:11,904 line:0
is automatically aligned
to the SwiftUI text


308
00:16:11,904 --> 00:16:14,874 line:0
in your hosting configuration
by default.


309
00:16:14,874 --> 00:16:18,177 line:0
In this example, notice how the
leading edge of the separator


310
00:16:18,177 --> 00:16:21,914 position:50%
is inset past the image
so that it aligns with the text


311
00:16:21,914 --> 00:16:23,382 position:50%
in the cell.


312
00:16:23,382 --> 00:16:24,984 line:0
If you need to align
the separator


313
00:16:24,984 --> 00:16:28,421 position:50%
to a different SwiftUI view
in your hosting configuration,


314
00:16:28,421 --> 00:16:32,225 line:0
use the alignmentGuide
modifier.


315
00:16:32,225 --> 00:16:34,994 line:0
When inside a collection view
list or table view,


316
00:16:34,994 --> 00:16:40,299 position:50%
you can configure swipe actions
for a row directly with SwiftUI.


317
00:16:40,299 --> 00:16:43,769 line:0
By creating your buttons inside
the swipeActions modifier,


318
00:16:43,769 --> 00:16:45,638 position:50%
you'll be able to swipe the cell


319
00:16:45,638 --> 00:16:49,141 position:50%
to reveal and perform
your custom actions.


320
00:16:49,141 --> 00:16:50,910 line:0
Download the sample code
for this video


321
00:16:50,910 --> 00:16:53,713 position:50%
to find a complete example.


322
00:16:53,713 --> 00:16:55,481 position:50%
When defining swipe actions,


323
00:16:55,481 --> 00:16:57,984 line:0
make sure your buttons
perform their actions


324
00:16:57,984 --> 00:17:01,754 line:0
using a stable identifier
for the item represented.


325
00:17:01,754 --> 00:17:03,522 line:0
Do not use the index path,


326
00:17:03,522 --> 00:17:06,058 position:50%
as it may change
while the cell is visible,


327
00:17:06,058 --> 00:17:10,596 position:50%
causing the swipe actions
to act on the wrong item.


328
00:17:10.596 --> 00:17:12.899 line:-1 position:50%
When you're using
UIHostingConfiguration


329
00:17:12,899 --> 00:17:16,369 line:-1
in a cell, keep in mind
that the cell interactions


330
00:17:16,369 --> 00:17:18,804 line:-1
such as tap handling,
highlighting,


331
00:17:18.804 --> 00:17:21.207 line:-1 position:50%
and selection
will still be handled


332
00:17:21.207 --> 00:17:24.410 line:-1 position:50%
by the collection view
or table view.


333
00:17:24.410 --> 00:17:27.280 line:-1 position:50%
If you need to customize
your SwiftUI views


334
00:17:27.280 --> 00:17:29.682 line:-1 position:50%
for any of these
UIKit cell states,


335
00:17:29,682 --> 00:17:32,084 line:-1
you can create
your hosting configuration


336
00:17:32,084 --> 00:17:35,922 line:-1
inside of the cell's
configurationUpdateHandler,


337
00:17:35.922 --> 00:17:40.393 line:-1 position:50%
and use the state provided
in your SwiftUI code.


338
00:17:40.393 --> 00:17:43.029 line:-1 position:50%
The configurationUpdateHandler
runs again


339
00:17:43,029 --> 00:17:45,698 line:-1
any time
the cell's state changes,


340
00:17:45.698 --> 00:17:47.867 line:-1 position:50%
creating a new
UIHostingConfiguration


341
00:17:47.867 --> 00:17:51.203 line:-1 position:50%
for the new state
and applying it to the cell.


342
00:17:51.203 --> 00:17:54.540 line:-1 position:50%
In this example, we use the
state to add a checkmark image


343
00:17:54,540 --> 00:17:57,510 line:-1
when the cell is selected.


344
00:17:57.510 --> 00:18:00.012 line:-1 position:50%
Now that you're familiar
with UIHostingConfiguration,


345
00:18:00.012 --> 00:18:04.216 line:-1 position:50%
let's discuss how to manage
data flow from your model layer


346
00:18:04.216 --> 00:18:07.019 line:-1 position:50%
to a UICollectionView
or UITableView


347
00:18:07.019 --> 00:18:10.556 line:-1 position:50%
filled with cells using SwiftUI.


348
00:18:10,556 --> 00:18:14,560 line:-1
Our goal is to build
this list of medical conditions.


349
00:18:14.560 --> 00:18:17.930 line:-1 position:50%
In this example,
we're using a UICollectionView,


350
00:18:17,930 --> 00:18:22,768 line:-1
but everything we discuss
applies equally to UITableView.


351
00:18:22.768 --> 00:18:25.938 line:-1 position:50%
Let's go through
the components involved.


352
00:18:25,938 --> 00:18:30,376 line:-1
Our app has a collection of
MedicalCondition model objects,


353
00:18:30.376 --> 00:18:33.346 line:-1 position:50%
which we are going to display
in the collection view.


354
00:18:33.346 --> 00:18:35.614 line:-1 position:50%
For each item
in this collection,


355
00:18:35,614 --> 00:18:38,317 line:-1
we want to create a cell
in the collection view


356
00:18:38,317 --> 00:18:41,587 line:-1
to display that
medical condition.


357
00:18:41.587 --> 00:18:44.991 line:-1 position:50%
In order to do this, we'll
create a diffable data source


358
00:18:44.991 --> 00:18:47.560 line:-1 position:50%
connected
to the collection view.


359
00:18:47.560 --> 00:18:51.964 line:-1 position:50%
Then, we need to populate
a diffable data source snapshot


360
00:18:51,964 --> 00:18:55,668 line:-1
with the identifiers of the
MedicalCondition model objects


361
00:18:55,668 --> 00:18:58,738 line:-1
in the data collection.


362
00:18:58,738 --> 00:19:01,774 line:-1
It's important that the diffable
data source snapshot


363
00:19:01,774 --> 00:19:05,544 line:-1
contains the unique identifier
of each MedicalCondition,


364
00:19:05,544 --> 00:19:08,881 line:-1
and not the MedicalCondition
objects themselves.


365
00:19:08,881 --> 00:19:13,052 line:-1
This ensures that the diffable
data source can accurately track


366
00:19:13,052 --> 00:19:15,187 line:-1
the identity of each item,


367
00:19:15,187 --> 00:19:17,757 line:-1
and compute the correct changes


368
00:19:17,757 --> 00:19:20,626 line:-1
when new snapshots
are applied later.


369
00:19:20.626 --> 00:19:23.496 line:-1 position:50%
By applying a snapshot
with these item identifiers


370
00:19:23,496 --> 00:19:25,364 line:-1
to the diffable data source,


371
00:19:25.364 --> 00:19:28.067 line:-1 position:50%
it will automatically update
the collection view,


372
00:19:28,067 --> 00:19:32,238 line:-1
which will create a new cell
for each item.


373
00:19:32,238 --> 00:19:36,375 line:-1
Each cell is configured
to display one MedicalCondition,


374
00:19:36,375 --> 00:19:42,281 line:-1
using a SwiftUI view
in a UIHostingConfiguration.


375
00:19:42,281 --> 00:19:45,017 line:-1
Now that we're displaying cells
built with SwiftUI,


376
00:19:45,017 --> 00:19:49,321 line:-1
we need to handle updating
the UI when the data changes.


377
00:19:49.321 --> 00:19:51.057 line:-1 position:50%
There are two different
types of changes


378
00:19:51.057 --> 00:19:54.060 line:-1 position:50%
that we need
to handle separately.


379
00:19:54,060 --> 00:19:58,464 line:-1
The first type is when the
data collection itself changes.


380
00:19:58,464 --> 00:20:04,537 line:-1
For example, when items are
inserted, reordered, or deleted.


381
00:20:04.537 --> 00:20:07.840 line:-1 position:50%
These changes are handled
by applying a new snapshot


382
00:20:07.840 --> 00:20:10.843 line:-1 position:50%
to the diffable data source.


383
00:20:10,843 --> 00:20:14,747 line:-1
Diffable data source will diff
the old and new snapshots,


384
00:20:14.747 --> 00:20:18.217 line:-1 position:50%
and perform the necessary
updates to the collection view,


385
00:20:18,217 --> 00:20:23,255 line:-1
causing cells to be inserted,
moved, or deleted.


386
00:20:23,255 --> 00:20:25,891 line:-1
Because changes to the
collection of data itself


387
00:20:25,891 --> 00:20:28,761 line:-1
don't affect anything
inside of cells,


388
00:20:28.761 --> 00:20:31.363 line:-1 position:50%
you handle these types
of changes the same,


389
00:20:31,363 --> 00:20:35,801 line:-1
whether you build your cells
using UIKit or SwiftUI.


390
00:20:35.801 --> 00:20:37.970 line:-1 position:50%
The second type of change
we need to handle


391
00:20:37,970 --> 00:20:43,342 line:-1
are when the properties of
individual model objects change.


392
00:20:43.342 --> 00:20:46.145 line:-1 position:50%
These changes often require
updating the views


393
00:20:46,145 --> 00:20:48,114 line:-1
in existing cells.


394
00:20:48.114 --> 00:20:49.882 line:-1 position:50%
Because the diffable data source


395
00:20:49,882 --> 00:20:53,119 line:-1
only contains item identifiers
in its snapshot,


396
00:20:53.119 --> 00:20:55.087 line:-1 position:50%
it doesn't know
when the properties


397
00:20:55,087 --> 00:20:57,990 line:-1
of existing items change.


398
00:20:57.990 --> 00:21:01.560 line:-1 position:50%
Traditionally, when using UIKit,
you would need to manually


399
00:21:01.560 --> 00:21:04.997 line:-1 position:50%
tell the diffable data source
about these changes


400
00:21:04,997 --> 00:21:08,801 line:-1
by reconfiguring or reloading
items in the snapshot.


401
00:21:08,801 --> 00:21:13,372 line:-1
But when using SwiftUI in cells,
this isn't necessary anymore.


402
00:21:13.372 --> 00:21:16.408 line:-1 position:50%
By storing
the ObservableObject model


403
00:21:16,408 --> 00:21:20,446 line:-1
in an ObservedObject property
in our SwiftUI view,


404
00:21:20,446 --> 00:21:22,581 line:-1
changes to published properties


405
00:21:22.581 --> 00:21:25.684 line:-1 position:50%
of the model will automatically
trigger SwiftUI


406
00:21:25.684 --> 00:21:27.253 line:-1 position:50%
to refresh the view.


407
00:21:27.253 --> 00:21:30.789 line:-1 position:50%
This establishes a direct
connection between the model


408
00:21:30.789 --> 00:21:34.160 line:-1 position:50%
and the SwiftUI view
inside of the cell.


409
00:21:34,160 --> 00:21:35,427 line:-1
When a change is made,


410
00:21:35.427 --> 00:21:38.931 line:-1 position:50%
the SwiftUI views in the cell
are updated directly,


411
00:21:38.931 --> 00:21:41.333 line:-1 position:50%
without going through
the diffable data source


412
00:21:41,333 --> 00:21:44,403 line:-1
or the UICollectionView.


413
00:21:44,403 --> 00:21:45,971 line:-1
When a cell's data changes,


414
00:21:45,971 --> 00:21:48,674 line:-1
it may cause the cell
to need to grow or shrink


415
00:21:48.674 --> 00:21:51.143 line:-1 position:50%
to fit the new content.


416
00:21:51.143 --> 00:21:54.980 line:-1 position:50%
But if the SwiftUI cell content
is being updated directly


417
00:21:54.980 --> 00:21:56.916 line:-1 position:50%
without going through UIKit,


418
00:21:56.916 --> 00:22:00.753 line:-1 position:50%
how does the collection view
know to resize the cell?


419
00:22:00.753 --> 00:22:04.356 line:-1 position:50%
UIHostingConfiguration takes
advantage of a brand-new feature


420
00:22:04.356 --> 00:22:07.326 line:-1 position:50%
in UIKit to make this work.


421
00:22:07,326 --> 00:22:11,997 line:-1
In iOS 16, self-sizing cells
in UICollectionView


422
00:22:11.997 --> 00:22:16.535 line:-1 position:50%
and UITableView
are now also self-resizing!


423
00:22:16,535 --> 00:22:18,170 line:-1
This is enabled by default,


424
00:22:18.170 --> 00:22:21.040 line:-1 position:50%
so that when you're using
UIHostingConfiguration


425
00:22:21.040 --> 00:22:24.410 line:-1 position:50%
and the SwiftUI content changes,
the containing cell


426
00:22:24.410 --> 00:22:28.681 line:-1 position:50%
is automatically resized
if necessary.


427
00:22:28,681 --> 00:22:31,150 position:50%
You can learn more
about how this new feature works


428
00:22:31,150 --> 00:22:37,690 position:50%
in the "What's New in UIKit"
video from WWDC 2022.


429
00:22:37,690 --> 00:22:39,491 line:-1
There's one more aspect
of data flow


430
00:22:39.491 --> 00:22:43.462 line:-1 position:50%
that you may need to handle,
and that's sending data out


431
00:22:43.462 --> 00:22:48.033 line:-1 position:50%
from a SwiftUI view
back to other parts of your app.


432
00:22:48,033 --> 00:22:52,605 line:-1
Once again, ObservableObject
has got you covered!


433
00:22:52,605 --> 00:22:55,641 line:-1
You can create a two-way binding
to a published property


434
00:22:55,641 --> 00:22:57,910 line:-1
of an ObservableObject.


435
00:22:57.910 --> 00:23:02.681 line:-1 position:50%
Not only will data flow from the
ObservableObject into SwiftUI,


436
00:23:02.681 --> 00:23:06.018 line:-1 position:50%
but SwiftUI can write back
changes to the property


437
00:23:06.018 --> 00:23:08.754 line:-1 position:50%
on the model object.


438
00:23:08,754 --> 00:23:10,489 line:-1
Let's go through
a simple example


439
00:23:10,489 --> 00:23:12,224 line:-1
of creating a two-way binding


440
00:23:12,224 --> 00:23:16,996 line:-1
by making the text in our
MedicalCondition cell editable.


441
00:23:16,996 --> 00:23:21,400 line:-1
Here is our ObservableObject,
MedicalCondition.


442
00:23:21.400 --> 00:23:25.671 line:-1 position:50%
It stores a unique identifier
in an ID property.


443
00:23:25,671 --> 00:23:27,673 line:-1
This is the identifier
used to populate


444
00:23:27,673 --> 00:23:30,709 line:-1
the diffable
data source snapshot.


445
00:23:30,709 --> 00:23:33,045 line:-1
And this published property
stores the text


446
00:23:33,045 --> 00:23:35,914 line:-1
of the medical condition.


447
00:23:35,914 --> 00:23:37,650 line:-1
Here's the MedicalConditionView


448
00:23:37.650 --> 00:23:42.421 line:-1 position:50%
that displays the medical
condition text inside each cell.


449
00:23:42,421 --> 00:23:44,890 line:-1
Right now this text
is read-only,


450
00:23:44.890 --> 00:23:47.593 line:-1 position:50%
so let's make it editable.


451
00:23:47.593 --> 00:23:52.398 line:-1 position:50%
All we need to do is to change
the Text view to a TextField


452
00:23:52,398 --> 00:23:54,933 line:-1
and create a binding
to the text property


453
00:23:54.933 --> 00:23:59.438 line:-1 position:50%
of our MedicalCondition
by adding a dollar sign prefix.


454
00:23:59,438 --> 00:24:01,140 line:-1
When you type
into the text field,


455
00:24:01,140 --> 00:24:04,643 line:-1
this binding allows SwiftUI
to write back changes


456
00:24:04.643 --> 00:24:07.479 line:-1 position:50%
directly to
the ObservableObject.


457
00:24:07,479 --> 00:24:09,181 line:-1
That's really how simple it is


458
00:24:09,181 --> 00:24:14,453 line:-1
to set up two-way
data flow with SwiftUI.


459
00:24:14,453 --> 00:24:16,922 line:0
UIHostingController
is a powerful way


460
00:24:16,922 --> 00:24:21,593 position:50%
to embed SwiftUI content
into your UIKit app.


461
00:24:21,593 --> 00:24:23,395 line:0
Your SwiftUI view is rendered


462
00:24:23,395 --> 00:24:25,831 position:50%
inside the hosting
controller's view,


463
00:24:25,831 --> 00:24:27,599 line:0
and you can use
the hosting controller


464
00:24:27,599 --> 00:24:33,439 line:0
anywhere that you can use
a view controller in UIKit.


465
00:24:33,439 --> 00:24:35,341 line:0
When using UIHostingController,


466
00:24:35,341 --> 00:24:37,943 position:50%
make sure to always
add the view controller


467
00:24:37,943 --> 00:24:41,380 position:50%
together with the view
to your app.


468
00:24:41,380 --> 00:24:45,751 position:50%
Many SwiftUI features, such as
toolbars, keyboard shortcuts,


469
00:24:45,751 --> 00:24:49,088 line:0
and views that use
UIViewControllerRepresentable,


470
00:24:49,088 --> 00:24:51,990 position:50%
require a connection
to the view controller hierarchy


471
00:24:51,990 --> 00:24:54,993 line:0
in UIKit to integrate properly,


472
00:24:54,993 --> 00:24:57,663 position:50%
so never separate
a hosting controller's view


473
00:24:57,663 --> 00:25:01,166 position:50%
from the hosting controller
itself.


474
00:25:01,166 --> 00:25:03,068 position:50%
For comparison, when you apply


475
00:25:03,068 --> 00:25:05,938 line:0
a UIHostingConfiguration
to a cell,


476
00:25:05,938 --> 00:25:08,307 position:50%
your SwiftUI view
is hosted in the cell


477
00:25:08,307 --> 00:25:11,110 line:0
without a UIViewController.


478
00:25:11,110 --> 00:25:14,079 line:0
UIHostingConfiguration supports
the vast majority


479
00:25:14,079 --> 00:25:16,048 position:50%
of SwiftUI features.


480
00:25:16,048 --> 00:25:18,283 line:0
But keep in mind
that SwiftUI views


481
00:25:18,283 --> 00:25:20,986 line:0
that depend on
UIViewControllerRepresentable


482
00:25:20,986 --> 00:25:23,589 line:0
can't be used inside of cells.


483
00:25:23,589 --> 00:25:26,859 position:50%
With UIHostingController
and UIHostingConfiguration,


484
00:25:26,859 --> 00:25:29,895 position:50%
you have two great ways
to incorporate SwiftUI


485
00:25:29,895 --> 00:25:32,965 position:50%
into your UIKit app.


486
00:25:32.965 --> 00:25:37.636 line:-1 position:50%
SwiftUI integrates seamlessly
into existing UIKit apps


487
00:25:37.636 --> 00:25:42.941 line:-1 position:50%
Use UIHostingController to add
SwiftUI throughout your app.


488
00:25:42,941 --> 00:25:46,044 line:-1
Create custom cells in
your collection and table view


489
00:25:46,044 --> 00:25:49,448 line:-1
using UIHostingConfiguration.


490
00:25:49,448 --> 00:25:51,950 line:-1
And take advantage
of ObservableObject,


491
00:25:51,950 --> 00:25:55,421 line:-1
so your data and UI
is always in sync.


492
00:25:55.421 --> 00:25:59.258 line:-1 position:50%
Add SwiftUI to your app today!


493
00:25:59.258 --> 00:26:00.726 line:-1 position:50%
Thank you for watching!


494
00:26:00,726 --> 00:26:05,564 position:90% line:0 align:right
♪

