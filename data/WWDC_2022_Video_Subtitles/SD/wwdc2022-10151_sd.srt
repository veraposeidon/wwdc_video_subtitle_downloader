2
00:00:00.334 --> 00:00:07.341 line:-1 align:center
â™ª â™ª


3
00:00:09.309 --> 00:00:12.112 line:-2 align:center
Hello everyone,
my name is Eric,


4
00:00:12,145 --> 00:00:17,050 line:-2
and I'm excited to tell you how to add
accessibility to your Unity games.


5
00:00:18,085 --> 00:00:22,723 line:-2
Accessibility is about
allowing everyone to use our products.


6
00:00:22,756 --> 00:00:27,361 line:-2
And today marks a huge leap forward
for accessible gaming


7
00:00:27.394 --> 00:00:31.398 line:-2 align:center
with the Apple Accessibility
plug-in for Unity developers.


8
00:00:31,431 --> 00:00:36,637 line:-2
We will focus on three Apple technologies
for making your games accessible.


9
00:00:37.738 --> 00:00:43.210 line:-2 align:center
VoiceOver is a screen reader which helps
users who are blind or low vision.


10
00:00:43,243 --> 00:00:47,581 line:-2
It reads items on the screen
and provides custom gestures


11
00:00:47.614 --> 00:00:50.617 line:-1 align:center
for users to interact with controls.


12
00:00:51.985 --> 00:00:55.522 line:-2 align:center
Switch control, which allows someone
with low motor control


13
00:00:55.556 --> 00:00:59.593 line:-2 align:center
to use an external switch
for device interaction.


14
00:00:59,626 --> 00:01:03,397 line:-2
And dynamic type,
which allows people to set


15
00:01:03.430 --> 00:01:06.800 line:-2 align:center
the text size
according to their reading ability.


16
00:01:07,801 --> 00:01:10,904 line:-1
To get started, clone the repository


17
00:01:10,938 --> 00:01:13,407 line:-1
and build all Apple's plug-ins


18
00:01:13,440 --> 00:01:17,344 line:-2
using the build script
in the root of the repository.


19
00:01:17,377 --> 00:01:20,914 line:-2
This will produce a Build folder
that is ready for integration


20
00:01:20.948 --> 00:01:23.784 line:-1 align:center
into your Unity projects.


21
00:01:23,817 --> 00:01:27,888 line:-2
Finally, add the Accessibility plug-in
to your own project


22
00:01:27.921 --> 00:01:30.924 line:-1 align:center
using the Unity Package Manager.


23
00:01:30.958 --> 00:01:35.362 line:-4 align:center
For more details, look at
the documentation in the repository


24
00:01:35.395 --> 00:01:39.166 line:-4 align:center
and watch the video about
all of Apple's Unity plug-ins,


25
00:01:39,199 --> 00:01:44,671 line:-4
called "Plug-in and play: Add Apple
frameworks to your Unity game projects"


26
00:01:45,539 --> 00:01:50,410 line:-2
Now that you have the plug-in,
I will guide you through three areas.


27
00:01:50,444 --> 00:01:53,313 line:-1
First is accessibility elements.


28
00:01:53,347 --> 00:01:56,683 line:-2
This allows you to add support
to assistive technologies


29
00:01:56,717 --> 00:02:00,954 line:-2
like VoiceOver or Switch Control
for your games.


30
00:02:00,988 --> 00:02:03,857 line:-1
Next is Dynamic Type.


31
00:02:03,891 --> 00:02:08,095 line:-2
We create this easy-to-use utility
that helps you scale text


32
00:02:08.128 --> 00:02:10.964 line:-1 align:center
according to user preferences.


33
00:02:10.998 --> 00:02:13.600 line:-1 align:center
And UI Accommodations.


34
00:02:13.634 --> 00:02:18.772 line:-2 align:center
These are utilities that helps you read
other user preferences.


35
00:02:18.805 --> 00:02:21.775 line:-1 align:center
Let's start with accessibility elements.


36
00:02:22,876 --> 00:02:27,548 line:-2
I built a simple card game
to help illustrate this concept.


37
00:02:27.581 --> 00:02:30.551 line:-2 align:center
You might see that you should tap
the "flip" button


38
00:02:30,584 --> 00:02:33,654 line:-1
to draw two random cards.


39
00:02:33.687 --> 00:02:36.957 line:-2 align:center
However, VoiceOver would not read
the text on screen


40
00:02:36,990 --> 00:02:40,561 line:-2
and an external switch
would not tap the button


41
00:02:40.594 --> 00:02:44.097 line:-2 align:center
since these are just pixels
on a screen right now.


42
00:02:44,131 --> 00:02:49,136 line:-2
We need to help the system understand
what can be interacted with.


43
00:02:49.169 --> 00:02:52.039 line:-1 align:center
Accessibility elements define the things


44
00:02:52.072 --> 00:02:55.542 line:-2 align:center
that assistive technologies can
interact with.


45
00:02:57.244 --> 00:03:00.781 line:-1 align:center
The text, cards, and the button on screen


46
00:03:00,814 --> 00:03:03,750 line:-1
should be accessibility elements.


47
00:03:03,784 --> 00:03:07,221 line:-2
And we can describe
each element with a label.


48
00:03:07,254 --> 00:03:12,693 line:-2
VoiceOver will read each label so the user
can understand what's on the screen.


49
00:03:14,261 --> 00:03:17,064 line:-2
And if the game supports
multiple languages,


50
00:03:17,097 --> 00:03:19,466 line:-1
we should localize these labels as well.


51
00:03:21,535 --> 00:03:24,538 align:center
Now VoiceOver can describe
what is on the screen,


52
00:03:24,571 --> 00:03:29,576 line:0
but it doesn't recognize that there's
a button that can be tapped.


53
00:03:29,610 --> 00:03:32,346 line:0
We can use another property
called "traits"


54
00:03:32,379 --> 00:03:36,183 line:0
to inform the system
of the element's type.


55
00:03:36,216 --> 00:03:39,186 line:0
We should add the "Button" trait here.


56
00:03:39,219 --> 00:03:43,156 align:center
Now, VoiceOver will read "Flip button,"


57
00:03:43,190 --> 00:03:46,393 align:center
and an external switch
can control this button.


58
00:03:48,428 --> 00:03:53,800 line:-2
We can also add "Static Text" trait
on our text elements.


59
00:03:53,834 --> 00:03:59,173 line:-2
The "Static Text" trait is
usually given to labels and text areas


60
00:03:59,206 --> 00:04:03,443 line:-2
so that VoiceOver can provide
a better text interaction experience.


61
00:04:04.878 --> 00:04:07.581 line:-2 align:center
And there are many more traits
beyond "Button"


62
00:04:07.614 --> 00:04:10.317 line:-1 align:center
and "Static Text" that you can explore.


63
00:04:11,919 --> 00:04:15,422 line:-1
So what trait should we use for the cards?


64
00:04:15,455 --> 00:04:21,094 line:-2
Well, we don't need to use traits
on every accessibility element.


65
00:04:21.128 --> 00:04:24.464 line:-1 align:center
Our cards don't need any traits.


66
00:04:25.098 --> 00:04:28.168 line:-1 align:center
However, there's still a part of each card


67
00:04:28.202 --> 00:04:31.071 line:-1 align:center
that VoiceOver is not aware of:


68
00:04:31.104 --> 00:04:33.473 line:-1 align:center
the face value.


69
00:04:33.507 --> 00:04:38.078 line:-2 align:center
There's another property that we can
use for this called "Value."


70
00:04:39.680 --> 00:04:44.184 line:-2 align:center
Once we add a "Value" for each card,
VoiceOver will now read


71
00:04:44.218 --> 00:04:47.654 line:-1 align:center
"Card 1 with value 3 of clubs,


72
00:04:47.688 --> 00:04:51.458 line:-1 align:center
card 2 with value Ace of clubs."


73
00:04:51,491 --> 00:04:53,260 line:-1
And that's it.


74
00:04:54,194 --> 00:04:58,065 line:-2
Now that you understand the basics,
let's open Unity


75
00:04:58.098 --> 00:05:00.934 line:-1 align:center
to see how to add them to our project.


76
00:05:02,336 --> 00:05:05,906 line:-1
Here I am in a Unity Editor for this game.


77
00:05:05.939 --> 00:05:08.275 line:-2 align:center
I have already added
the Apple Accessibility


78
00:05:08.308 --> 00:05:09.843 line:-1 align:center
plugin to this project.


79
00:05:11,311 --> 00:05:15,649 line:-2
First we have the usual
scene objects like camera,


80
00:05:15,682 --> 00:05:19,386 line:-1
direct light, and a UI Canvas.


81
00:05:19.419 --> 00:05:22.756 line:-2 align:center
Under the canvas,
we have two text elements


82
00:05:22,789 --> 00:05:24,925 line:-1
and a button.


83
00:05:24.958 --> 00:05:28.428 line:-2 align:center
After that,
we have two game objects for cards.


84
00:05:31,798 --> 00:05:35,235 line:-1
Each is composed of two mesh components,


85
00:05:35.269 --> 00:05:39.806 line:-2 align:center
each rendering the front and back texture
for the card on each side.


86
00:05:39.840 --> 00:05:44.311 line:-2 align:center
Let's start by defining
our accessibility elements.


87
00:05:44.344 --> 00:05:49.416 line:-2 align:center
To do this, we need the Accessibility Node
component from this plugin.


88
00:05:50,851 --> 00:05:55,055 line:-2
Select all the objects in the hierarchy
that should be accessible.


89
00:05:57,925 --> 00:06:02,763 line:-2
And add the Accessibility Node component
to make them accessibility elements.


90
00:06:06,366 --> 00:06:08,502 line:-1
Next, we add labels.


91
00:06:09.236 --> 00:06:12.072 line:-1 align:center
Select the card object,


92
00:06:12.105 --> 00:06:15.676 line:-2 align:center
go to "Accessibility Node" component
on the right,


93
00:06:15,709 --> 00:06:18,045 line:-1
and find the "Label" field.


94
00:06:19,213 --> 00:06:24,251 line:-2
And make sure the label field checkbox
is checked to provide a custom label.


95
00:06:26,186 --> 00:06:28,388 line:-1
Then type "Card 1."


96
00:06:31,859 --> 00:06:35,329 line:-1
And the same for Card 2.


97
00:06:40,434 --> 00:06:43,604 line:-1
Text and buttons need labels too,


98
00:06:43.637 --> 00:06:47.975 line:-2 align:center
but we don't have to provide
an explicit accessibility labels for them


99
00:06:48.008 --> 00:06:52.546 line:-2 align:center
if we are using the standard controls
from Unity UI.


100
00:06:52,579 --> 00:06:56,083 line:-2
The plug-in already has
default implementations for those.


101
00:06:57,384 --> 00:07:00,354 line:-2
Next, we need
to add a trait to our button.


102
00:07:02.422 --> 00:07:05.492 line:-1 align:center
Select the flip button


103
00:07:05,526 --> 00:07:09,229 line:-2
and change the "Traits"
from "None" to "Button."


104
00:07:13,567 --> 00:07:15,802 line:-1
Select the two text elements...


105
00:07:18,138 --> 00:07:21,241 line:-1
And change "Traits" to "static text."


106
00:07:23,911 --> 00:07:25,312 line:-1
Great.


107
00:07:25.345 --> 00:07:29.950 line:-2 align:center
Lastly, we need to set an accessibility
Value for the card faces.


108
00:07:29,983 --> 00:07:33,954 line:-2
Since the cards are randomly drawn,
I need to add a script


109
00:07:33,987 --> 00:07:36,023 line:-1
to set the Value dynamically.


110
00:07:37,424 --> 00:07:42,396 line:-2
Select the two cards and add
a new script called AccessibleCard.


111
00:07:44.831 --> 00:07:48.101 line:-1 align:center
First, in one of my other C Sharp files,


112
00:07:48,135 --> 00:07:53,607 line:-2
I already have an enum for all
the card faces called Playing Card.


113
00:07:53,640 --> 00:07:57,578 line:-2
In my new AccessibleCard mono
behavior script,


114
00:07:57.611 --> 00:07:59.847 line:-1 align:center
we have a variable for the card type


115
00:07:59,880 --> 00:08:03,350 line:-2
and a boolean
for whether the card is facing up or down.


116
00:08:05,552 --> 00:08:10,457 line:-2
So now let's add
accessibilityValue to these cards.


117
00:08:10.490 --> 00:08:15.762 line:-2 align:center
First, we get the accessibilityNode
component attached to this gameObject.


118
00:08:17,064 --> 00:08:21,401 line:-2
Next, set the accessibilityValue
delegate to a function


119
00:08:21,435 --> 00:08:23,837 line:-2
that returns the card face value
dynamically.


120
00:08:25,339 --> 00:08:28,809 line:-2
Inside this function,
if the card is covered,


121
00:08:28,842 --> 00:08:32,713 line:-2
we return the "covered"
for the accessibilityValue.


122
00:08:32.746 --> 00:08:36.817 line:-2 align:center
Or if not covered,
we will enumerate all card faces


123
00:08:36,850 --> 00:08:41,822 line:-2
and return a description for each,
like "Ace of Spades."


124
00:08:41.855 --> 00:08:44.191 line:-1 align:center
And that's it.


125
00:08:44,224 --> 00:08:48,395 line:-2
Now let's build our project
and see it in action.


126
00:08:48.428 --> 00:08:51.532 line:-2 align:center
Here's our game.
Let's turn on VoiceOver.


127
00:08:55,335 --> 00:08:57,804 line:-2
Automated voice: VoiceOver on.
Eric's Game.


128
00:08:57.838 --> 00:08:59.740 line:-1 align:center
Card 2, covered.


129
00:08:59,773 --> 00:09:03,076 line:-2
Eric: I could swipe right
to move to the next element.


130
00:09:03,744 --> 00:09:05,546 line:-1
Automated voice: Card 1, covered.


131
00:09:07,314 --> 00:09:08,982 line:-1
Eric's card game.


132
00:09:10,884 --> 00:09:12,386 line:-1
Flip the cards.


133
00:09:14,087 --> 00:09:16,256 line:-1
Flip. Button.


134
00:09:16,290 --> 00:09:20,661 line:-2
Eric: You see that all five objects
are now accessible through VoiceOver,


135
00:09:20,694 --> 00:09:23,163 line:-1
which is awesome.


136
00:09:23,197 --> 00:09:27,568 line:-2
To tap the button when VoiceOver is on,
do a double-tap.


137
00:09:28.335 --> 00:09:30.504 line:-1 align:center
Automated voice: Flip.


138
00:09:30,537 --> 00:09:32,339 line:-1
Eric: Let's check the cards again.


139
00:09:34.441 --> 00:09:36.743 line:-1 align:center
Automated voice: Card 1, Two of Clubs.


140
00:09:38.378 --> 00:09:40.681 line:-1 align:center
Card 2, Ace of Clubs.


141
00:09:40,714 --> 00:09:45,352 line:-2
Eric: VoiceOver now reads
the updated card faces correctly.


142
00:09:45.385 --> 00:09:46.386 line:-1 align:center
Cool.


143
00:09:46,420 --> 00:09:50,357 line:-2
So we just made our game accessible
to millions of VoiceOver users


144
00:09:50,390 --> 00:09:52,326 line:-1
who can now fall in love with it.


145
00:09:52.359 --> 00:09:57.097 line:-2 align:center
And people who use external switch control
can also play our game.


146
00:09:57,130 --> 00:10:00,367 line:-1
So that was accessibility elements.


147
00:10:00,400 --> 00:10:03,504 line:-1
Next, let's talk about Dynamic Type.


148
00:10:04,838 --> 00:10:07,975 line:-2
Games can be difficult to play
for many people


149
00:10:08,008 --> 00:10:10,978 line:-1
because text is too small to read.


150
00:10:11,011 --> 00:10:14,748 line:-1
On iOS and tvOS, everyone can choose


151
00:10:14.781 --> 00:10:17.985 line:-2 align:center
the right text size
for their reading ability in Settings.


152
00:10:20.120 --> 00:10:23.423 line:-2 align:center
With the Accessibility Plugin,
you can read this setting


153
00:10:23.457 --> 00:10:28.095 line:-2 align:center
to make sure the text in your game
is displayed at the expected size.


154
00:10:30.264 --> 00:10:35.169 line:-2 align:center
Let's take a look at our game example
to see how we can use Dynamic Type.


155
00:10:36.370 --> 00:10:41.441 line:-2 align:center
Create a mono behavior script
called DynamicTextSize.cs.


156
00:10:41,475 --> 00:10:46,213 line:-2
In the start function, first store
the default text size into a variable.


157
00:10:47,181 --> 00:10:51,852 line:-2
Then inside the OnEnable function,
subscribe to setting changed event


158
00:10:51.885 --> 00:10:57.057 line:-2 align:center
using AccessibilitySettings.
onPreferredTextSizesChanged.


159
00:10:57.891 --> 00:11:02.429 line:-2 align:center
This allows us to update the UI as soon
as the user changes the text setting.


160
00:11:03,830 --> 00:11:07,334 align:center
Next, inside the settingsChanged function,


161
00:11:07,367 --> 00:11:11,205 line:0
first read the
PreferredContentSizeMultiplier.


162
00:11:11,238 --> 00:11:14,541 align:center
Then multiply by your original text size


163
00:11:14,575 --> 00:11:17,544 align:center
and assign it back to the text element.


164
00:11:18.512 --> 00:11:21.949 line:-2 align:center
Inside Unity Editor,
select all game objects


165
00:11:21.982 --> 00:11:25.052 line:-1 align:center
that have a Text element.


166
00:11:25,085 --> 00:11:28,956 line:-2
And add the DynamicTextSize component
that we just created.


167
00:11:32,492 --> 00:11:36,730 line:-2
Now our game is all set
for Dynamic type support.


168
00:11:37,397 --> 00:11:41,168 line:-2
Before we see the result in action,
first I am going to show you


169
00:11:41,201 --> 00:11:45,205 line:-2
a trick to quickly test
Dynamic Type in your games.


170
00:11:45.239 --> 00:11:49.376 line:-1 align:center
Open Settings, and find Control Center.


171
00:11:54,214 --> 00:11:58,986 line:-2
Scroll down until you see Text Size,
and add it to Control Center.


172
00:12:02,422 --> 00:12:06,827 line:-2
Now we can adjust text sizes quickly
by opening Control Center


173
00:12:06,860 --> 00:12:08,996 line:-1
and change the text size options.


174
00:12:17.905 --> 00:12:23.744 line:-2 align:center
Greatâ€“as I change the text size,
our game adjusts font sizes in real time.


175
00:12:24.811 --> 00:12:27.648 line:-2 align:center
The text percentage value shown
in Control Center


176
00:12:27.681 --> 00:12:30.817 line:-2 align:center
is exactly what we are reading
from that multiplier.


177
00:12:30.851 --> 00:12:35.689 line:-2 align:center
You can also adopt this setting
on non-text objects.


178
00:12:35.722 --> 00:12:39.226 line:-2 align:center
For example,
I can swap the card face assets


179
00:12:39,259 --> 00:12:42,496 line:-1
to Large Print when the size is increased.


180
00:12:45,265 --> 00:12:50,137 line:-2
First I create a script called
DynamicCardFaces.


181
00:12:50.170 --> 00:12:54.741 line:-2 align:center
Then same thing as before,
subscribe to the TextSizeChanged event.


182
00:12:55.809 --> 00:13:01.481 line:-2 align:center
Instead of reading a multiplier,
I read an enum of text size category


183
00:13:01.515 --> 00:13:05.619 line:-2 align:center
that is mapped to the ticks
on the Control Center slider.


184
00:13:05,652 --> 00:13:10,624 line:-2
I could swap the asset whenever
someone selects a larger text size.


185
00:13:11.825 --> 00:13:14.728 line:-2 align:center
And I simply choose
between a regular material


186
00:13:14,761 --> 00:13:16,563 line:-1
and a large print material.


187
00:13:17,464 --> 00:13:20,734 line:-1
Now if we select a really large size...


188
00:13:26,273 --> 00:13:30,010 line:-2
Users would see a large print version
of the cards,


189
00:13:30,043 --> 00:13:35,282 line:-2
which are great card faces that are much
easier to read for people with low vision.


190
00:13:36.783 --> 00:13:40.754 line:-2 align:center
Lastly, I want to talk to you
about UI accommodation settings


191
00:13:40.787 --> 00:13:43.223 line:-1 align:center
that you can access with this plug-in.


192
00:13:44,224 --> 00:13:48,662 line:-1
The first setting is Reduce Transparency.


193
00:13:48,695 --> 00:13:52,933 line:-2
When this setting is on,
the background is turned opaque,


194
00:13:52.966 --> 00:13:56.670 line:-1 align:center
instead of a blur or transparent effect.


195
00:13:56.703 --> 00:14:01.108 line:-2 align:center
It can help improve legibility when
those effects makes text hard to read.


196
00:14:02,042 --> 00:14:04,344 align:center
To check this preference, call


197
00:14:04,378 --> 00:14:08,482 line:0
AccessibilitySettings.
IsReduceTransparencyEnabled.


198
00:14:10.284 --> 00:14:13.887 line:-1 align:center
Next, the Increase Contrast setting.


199
00:14:13.921 --> 00:14:18.926 line:-2 align:center
Notice how the switches have
a darker grey that helps them stand out,


200
00:14:18.959 --> 00:14:23.230 line:-2 align:center
making controls easier to recognize
across the entire device.


201
00:14:24,464 --> 00:14:28,802 line:0
You can increase contrast
for your own UI when this is enabled


202
00:14:28,836 --> 00:14:31,405 align:center
by checking this setting using


203
00:14:31,438 --> 00:14:35,442 line:0
AccessibilitySettings.
IsIncreaseContrastEnabled.


204
00:14:37.144 --> 00:14:40.614 line:-1 align:center
Next, the Reduce Motion setting.


205
00:14:40,647 --> 00:14:45,586 line:-2
Some people are sensitive to motion
like we have in this card flip animation.


206
00:14:46,854 --> 00:14:50,791 line:-2
We should remove that animation
when Reduce Motion is enabled.


207
00:14:51,892 --> 00:14:54,061 line:-1
Let's look at the code to do this.


208
00:14:55.362 --> 00:15:00.701 line:-2 align:center
In our CardController script,
we have this Flip function.


209
00:15:00.734 --> 00:15:05.539 line:-2 align:center
First we check if user's
reduce motion setting is on.


210
00:15:05,572 --> 00:15:11,211 line:-2
If not on, we should flip the card by
invoking an animation through Coroutine.


211
00:15:12,145 --> 00:15:16,283 line:-2
Otherwise we just set the rotation,
and no animations.


212
00:15:16.316 --> 00:15:17.851 line:-1 align:center
And that's it.


213
00:15:17.885 --> 00:15:22.422 line:-2 align:center
Now people who are sensitive to motion
would enjoy our game.


214
00:15:23.357 --> 00:15:27.494 line:-2 align:center
To recap, get started
with the Apple Accessibility plugin


215
00:15:27.528 --> 00:15:31.932 line:-2 align:center
by cloning the GitHub repository
linked in this session's resources.


216
00:15:33.000 --> 00:15:36.603 line:-2 align:center
Add accessibility elements
so that people can use VoiceOver


217
00:15:36.637 --> 00:15:38.805 line:-1 align:center
and Switch Control with your games.


218
00:15:40.007 --> 00:15:42.943 line:-1 align:center
Adapt your text size with Dynamic Type.


219
00:15:44.478 --> 00:15:46.947 line:-1 align:center
And check for UI accommodations


220
00:15:46,980 --> 00:15:50,250 line:-2
so everyone can have a great experience
with your game.


221
00:15:51.385 --> 00:15:53.620 line:-1 align:center
Thank you so much for joining me.


222
00:15:53,654 --> 00:15:57,624 line:-2
We look forward to seeing how you make
games available for everyone


223
00:15:57.658 --> 00:16:00.961 line:-1 align:center
with a great accessibility experience.

