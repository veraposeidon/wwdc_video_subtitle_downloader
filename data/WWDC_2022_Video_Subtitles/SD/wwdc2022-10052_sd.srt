2
00:00:00.000 --> 00:00:03.003 line:-1 position:50%
â™ª instrumental hip hop music â™ª


3
00:00:03,003 --> 00:00:10,310 align:right size:2% position:90%
â™ª


4
00:00:10,310 --> 00:00:12,446 line:-1
Hi, I'm Nick.


5
00:00:12.446 --> 00:00:13.480 line:-1 position:50%
And I'm Franck,


6
00:00:13,480 --> 00:00:15,382 line:-1
and we are SwiftUI engineers.


7
00:00:15.382 --> 00:00:19.753 line:-1 position:50%
Today, we're going to
cover "What's new in SwiftUI."


8
00:00:19.753 --> 00:00:23.891 line:-1 position:50%
SwiftUI is growing alongside
our operating systems,


9
00:00:23,891 --> 00:00:28,028 line:-1
each pushing the bounds
of the other.


10
00:00:28,028 --> 00:00:31,164 line:-1
We continue to be amazed
and delighted


11
00:00:31,164 --> 00:00:34,301 line:-1
by what you are making
with SwiftUI.


12
00:00:34.301 --> 00:00:38.472 line:-1 position:50%
We take to heart all flavors of
feedback from the community.


13
00:00:38,472 --> 00:00:40,607 line:-1
That's why we're especially
excited to share


14
00:00:40,607 --> 00:00:44,411 line:-1
what we've focused
on this year.


15
00:00:44,411 --> 00:00:47,814 line:-1
With this year's APIs,
we've gone deeper.


16
00:00:47.814 --> 00:00:50.784 line:-1 position:50%
We've made more custom
experiences possible.


17
00:00:50.784 --> 00:00:54.688 line:-1 position:50%
We've introduced some amazing
new graphical techniques.


18
00:00:54.688 --> 00:01:01.261 line:-1 position:50%
We've architected a new SwiftUI
app structure, and much more.


19
00:01:01,261 --> 00:01:04,965 line:-1
SwiftUI enabled us to build
designs and features


20
00:01:04,965 --> 00:01:07,834 line:-1
that reflect the future
of our platforms.


21
00:01:07,834 --> 00:01:11,838 line:-1
From redesigns of classic apps
to completely new features


22
00:01:11,838 --> 00:01:14,508 line:-1
to deep system integrations.


23
00:01:14.508 --> 00:01:17.311 line:-1 position:50%
This comprehensive adoption
within Apple


24
00:01:17.311 --> 00:01:20.747 line:-1 position:50%
further pushes evolution
of SwiftUI.


25
00:01:20.747 --> 00:01:23.150 line:-1 position:50%
Many of these new designs
and features


26
00:01:23,150 --> 00:01:26,954 line:-1
are only possible because
of how SwiftUI has evolved


27
00:01:26,954 --> 00:01:29,890 line:-1
how we write apps at Apple.


28
00:01:29.890 --> 00:01:32.726 line:-1 position:50%
Today we're celebrating
these APIs,


29
00:01:32,726 --> 00:01:34,328 line:-1
[NOISE MAKER BLOWS]


30
00:01:34,328 --> 00:01:37,597 line:-1
And we're also celebrating
SwiftUI's birthday,


31
00:01:37,597 --> 00:01:40,167 line:-1
[NOISE MAKER BLOWS]


32
00:01:40,167 --> 00:01:42,402 line:-1
Franck and I are
the lucky cochairs


33
00:01:42.402 --> 00:01:44.338 line:-1 position:50%
of the party-planning committee.


34
00:01:44,338 --> 00:01:46,306 line:-1
Let me tell you
about the activities


35
00:01:46,306 --> 00:01:49,042 line:-1
we've got planned
for the party.


36
00:01:49.042 --> 00:01:51.611 line:-1 position:50%
I'll introduce you
to a brand-new framework


37
00:01:51.611 --> 00:01:54.348 line:-1 position:50%
called Swift Charts
that allows you to create


38
00:01:54,348 --> 00:02:00,187 line:-1
delightful data visualizations
across all of our platforms.


39
00:02:00.187 --> 00:02:02.756 line:-1 position:50%
I'll show off SwiftUI's
data-driven,


40
00:02:02,756 --> 00:02:05,892 line:-1
strongly-typed model
for navigation


41
00:02:05.892 --> 00:02:09.029 line:-1 position:50%
and new window techniques.


42
00:02:09,029 --> 00:02:12,065 line:-1
Franck will take you
through a suite of new controls


43
00:02:12.065 --> 00:02:16.269 line:-1 position:50%
and deeper customizations
of existing controls.


44
00:02:16.269 --> 00:02:19.306 line:-1 position:50%
Then he'll show you how
we've brought sharing elegantly


45
00:02:19,306 --> 00:02:24,378 line:-1
into the universe of SwiftUI
with the Transferable protocol.


46
00:02:24,378 --> 00:02:27,347 line:-1
Finally, I'll close with
whimsical new graphics APIs


47
00:02:27.347 --> 00:02:31.351 line:-1 position:50%
and advanced
new layout APIs.


48
00:02:31.351 --> 00:02:35.122 line:-1 position:50%
Let's get going
with Swift Charts.


49
00:02:35.122 --> 00:02:37.824 line:-1 position:50%
Swift Charts
is a declarative framework


50
00:02:37.824 --> 00:02:42.162 line:-1 position:50%
for building beautiful
state-driven charts.


51
00:02:42.162 --> 00:02:44.097 line:-1 position:50%
The fundamental
design principles


52
00:02:44,097 --> 00:02:48,735 line:-1
that make SwiftUI great
and the process of plotting data


53
00:02:48.735 --> 00:02:52.606 line:-1 position:50%
have been composed harmoniously
to create Swift Charts --


54
00:02:52.606 --> 00:02:57.744 line:-1 position:50%
a world-class data-visualization
framework.


55
00:02:57.744 --> 00:03:01.114 line:-1 position:50%
This is a bar chart plotting
the number of party tasks


56
00:03:01,114 --> 00:03:04,818 line:-1
Franck and I need to complete
before the party can start.


57
00:03:04.818 --> 00:03:07.254 line:-1 position:50%
Swift Charts has built
a magnificent,


58
00:03:07,254 --> 00:03:11,291 line:-1
customizable chart from
only a few lines of code.


59
00:03:11,291 --> 00:03:15,495 line:-1
Like SwiftUI, Swift Charts
picks intelligent defaults.


60
00:03:15,495 --> 00:03:18,565 line:-1
Here, the framework chose
satisfyingly round numbers


61
00:03:18,565 --> 00:03:20,767 line:-1
for the y-axis values,


62
00:03:20,767 --> 00:03:23,370 line:-1
and provided a default color
for the bar marks.


63
00:03:26.273 --> 00:03:30.210 line:-1 position:50%
If you know SwiftUI, you can
already read the declarative,


64
00:03:30,210 --> 00:03:33,580 line:-1
state-driven syntax
of Swift Charts.


65
00:03:33,580 --> 00:03:36,950 line:-1
Chart is just some View,


66
00:03:36,950 --> 00:03:40,587 line:-1
and you declare it just like
you do lists and tables --


67
00:03:40.587 --> 00:03:44.024 line:-1 position:50%
by providing data and then
building the chart content


68
00:03:44,024 --> 00:03:47,627 line:-1
with that data.


69
00:03:47.627 --> 00:03:50.397 line:-1 position:50%
For this chart,
I've chosen a BarMark,


70
00:03:50,397 --> 00:03:54,367 line:-1
but if I switch to a LineMark
and add a foreground style


71
00:03:54,367 --> 00:03:57,771 line:-1
to group by category,
I can see more to the story


72
00:03:57,771 --> 00:04:02,576 line:-1
as Swift Charts draws individual
lines for each category


73
00:04:02.576 --> 00:04:07.347 line:-1 position:50%
and adds a legend
to the chart automatically.


74
00:04:07,347 --> 00:04:10,517 line:-1
It's fun to give these
charts a little personality.


75
00:04:10.517 --> 00:04:13.553 line:-1 position:50%
I can add points to the line
with the symbol modifier


76
00:04:13,553 --> 00:04:16,223 line:-1
on the LineMark.


77
00:04:16.223 --> 00:04:21.328 line:-1 position:50%
These modifiers are no different
from SwiftUI modifiers.


78
00:04:21,328 --> 00:04:25,832 line:-1
You can even use
SwiftUI views within a chart.


79
00:04:25.832 --> 00:04:28.435 line:-1 position:50%
Like List,
the data argument to Chart


80
00:04:28.435 --> 00:04:32.606 line:-1 position:50%
can instead be passed
to a ForEach.


81
00:04:32,606 --> 00:04:36,343 line:-1
This allows adding
more marks to the Chart builder,


82
00:04:36.343 --> 00:04:39.179 line:-1 position:50%
like a RuleMark
to show our daily goal.


83
00:04:41,715 --> 00:04:44,851 line:-1
The spirit of SwiftUI
shines through again,


84
00:04:44,851 --> 00:04:48,688 line:-1
as Swift Charts handles
localization, Dark Mode,


85
00:04:48,688 --> 00:04:51,658 line:-1
and Dynamic Type automatically,


86
00:04:51,658 --> 00:04:56,563 line:-1
and of course, works across
all of our platforms.


87
00:04:56,563 --> 00:04:59,032 line:-1
If you want to see how
to make your own charts,


88
00:04:59.032 --> 00:05:01.334 line:-1 position:50%
check out "Hello
Swift Charts."


89
00:05:01,334 --> 00:05:04,237 position:50%
If you're interested in advanced
plotting techniques,


90
00:05:04,237 --> 00:05:07,941 position:50%
follow it up with
the "Raise the bar" session.


91
00:05:07.941 --> 00:05:11.978 line:-1 position:50%
Next up, let's talk about
navigation and windows.


92
00:05:11.978 --> 00:05:13.847 line:-1 position:50%
SwiftUI already supports


93
00:05:13.847 --> 00:05:16.583 line:-1 position:50%
the most common app
navigation patterns,


94
00:05:16.583 --> 00:05:20.820 line:-1 position:50%
such as immersive
push-and-pop navigation stacks;


95
00:05:20,820 --> 00:05:24,024 line:-1
expansive,
detail-rich split views;


96
00:05:24.024 --> 00:05:27.027 line:-1 position:50%
and powerful,
multi-window experiences.


97
00:05:31,131 --> 00:05:34,267 line:-1
This year,
SwiftUI has big updates


98
00:05:34,267 --> 00:05:37,304 line:-1
for all three of these patterns.


99
00:05:37.304 --> 00:05:40.674 line:-1 position:50%
Let's start with stacks.


100
00:05:40,674 --> 00:05:43,944 line:-1
SwiftUI is introducing
a new container view,


101
00:05:43.944 --> 00:05:46.947 line:-1 position:50%
simply called
NavigationStack,


102
00:05:46,947 --> 00:05:51,218 line:-1
for supporting
push-and-pop-style navigation.


103
00:05:51,218 --> 00:05:54,321 line:-1
A NavigationStack wraps
a root content view,


104
00:05:54.321 --> 00:05:58.992 line:-1 position:50%
like this food inventory list
for our party-planning app.


105
00:05:58,992 --> 00:06:02,495 line:-1
As you'd expect, it works great
with existing APIs


106
00:06:02,495 --> 00:06:06,700 line:-1
like NavigationLink
and navigationTitle().


107
00:06:06,700 --> 00:06:08,134 line:-1
When we select a link,


108
00:06:08,134 --> 00:06:14,874 line:-1
SwiftUI pushes its detail view
on top of the stack.


109
00:06:14.874 --> 00:06:18.511 line:-1 position:50%
In our app, each detail view
contains more links


110
00:06:18.511 --> 00:06:21.047 line:-1 position:50%
for related food items
for quick browsing.


111
00:06:25.819 --> 00:06:28.521 line:-1 position:50%
This approach might be
all you need.


112
00:06:28.521 --> 00:06:31.024 line:-1 position:50%
But there is a new way
to present views


113
00:06:31.024 --> 00:06:35.762 line:-1 position:50%
and have programmatic control
over that presented state.


114
00:06:35,762 --> 00:06:39,733 line:-1
If you need control
of a navigation stack's state,


115
00:06:39,733 --> 00:06:43,970 line:-1
adopt the new data-driven APIs.


116
00:06:43,970 --> 00:06:47,140 line:-1
The new navigationDestination()
modifier


117
00:06:47.140 --> 00:06:49.876 line:-1 position:50%
lets us associate
navigation destinations


118
00:06:49.876 --> 00:06:52.279 line:-1 position:50%
with specific data types.


119
00:06:54,914 --> 00:06:57,484 line:-1
And this year,
we taught NavigationLink


120
00:06:57,484 --> 00:07:01,588 line:-1
a new party trick:
instead of a destination view,


121
00:07:01.588 --> 00:07:04.958 line:-1 position:50%
it can take a value
that represents a destination.


122
00:07:04,958 --> 00:07:11,598 line:-1
When tapping on a link, SwiftUI
will use its value's type


123
00:07:11,598 --> 00:07:14,968 line:-1
to find the right destination
and push it on the stack,


124
00:07:14,968 --> 00:07:18,838 line:-1
just like before.


125
00:07:18,838 --> 00:07:21,841 line:-1
Because we now use data
to drive our stack,


126
00:07:21.841 --> 00:07:24.844 line:-1 position:50%
it's possible to represent
the current navigation path


127
00:07:24,844 --> 00:07:27,247 line:-1
as explicit state.


128
00:07:27.247 --> 00:07:30.817 line:-1 position:50%
In this case, the navigation
path is simply an array


129
00:07:30,817 --> 00:07:35,555 line:-1
of all the food items
that we've visited.


130
00:07:35,555 --> 00:07:37,724 line:-1
With direct access
to this state,


131
00:07:37.724 --> 00:07:39.993 line:-1 position:50%
it couldn't be easier
to add a button


132
00:07:39.993 --> 00:07:45.031 line:-1 position:50%
for quickly jumping back
to the first selected item.


133
00:07:45,031 --> 00:07:47,400 line:-1
As views are pushed
onto the stack,


134
00:07:47,400 --> 00:07:50,870 line:-1
items are appended to
the selectedFoodItems array.


135
00:07:50.870 --> 00:07:54.774 line:-1 position:50%
In the button's action,
we can just remove all the items


136
00:07:54,774 --> 00:07:57,811 line:-1
from the path
except for the first one.


137
00:08:00,547 --> 00:08:04,017 line:-1
And with a tap, we're right back
where we started.


138
00:08:07.687 --> 00:08:13.760 line:-1 position:50%
Now let's talk about split views
for multicolumn navigation.


139
00:08:13.760 --> 00:08:15.762 line:-1 position:50%
We're introducing
another new container


140
00:08:15,762 --> 00:08:20,333 line:-1
called NavigationSplitView
for multicolumn navigation.


141
00:08:20.333 --> 00:08:25.004 line:-1 position:50%
NavigationSplitView can declare
two- and three-column layouts.


142
00:08:25,004 --> 00:08:27,507 line:-1
Party Planner uses
a simple two-column layout,


143
00:08:27,507 --> 00:08:31,077 line:-1
wrapping a sidebar list
of our party-planning tasks


144
00:08:31,077 --> 00:08:33,680 line:-1
and a detail view
that changes its content


145
00:08:33,680 --> 00:08:37,450 line:-1
with the selected task.


146
00:08:37.450 --> 00:08:41.788 line:-1 position:50%
Split views work great with the
new value-based NavigationLinks


147
00:08:41,788 --> 00:08:44,557 line:-1
we saw earlier,
using the link's value


148
00:08:44,557 --> 00:08:49,362 line:-1
to drive
the list's selection.


149
00:08:49,362 --> 00:08:52,065 line:-1
NavigationSplitView will
automatically collapse


150
00:08:52.065 --> 00:08:55.802 line:-1 position:50%
into a stack on smaller-size
classes or devices,


151
00:08:55.802 --> 00:08:58.705 line:-1 position:50%
making it a great tool
for building adaptive,


152
00:08:58,705 --> 00:09:02,409 line:-1
multiplatform apps.


153
00:09:02,409 --> 00:09:05,278 line:-1
NavigationSplitView
and NavigationStack


154
00:09:05,278 --> 00:09:09,916 line:-1
are designed to work together
and can be directly composed


155
00:09:09,916 --> 00:09:15,455 line:-1
to build more complex
navigation structures.


156
00:09:15,455 --> 00:09:19,426 line:-1
We use this in the Party Planner
app to turn the detail column


157
00:09:19,426 --> 00:09:23,563 line:-1
into its own, self-contained
navigation stack,


158
00:09:23.563 --> 00:09:25.865 line:-1 position:50%
which also shows off
the new support


159
00:09:25,865 --> 00:09:29,202 line:-1
for navigation stacks
on macOS.


160
00:09:35,141 --> 00:09:38,044 position:50%
Well, we've talked a lot
about food,


161
00:09:38,044 --> 00:09:41,314 line:0
but I hear that my colleague
Curt is cooking up a storm


162
00:09:41,314 --> 00:09:45,418 position:50%
over in his talk, "The SwiftUI
cookbook for navigation."


163
00:09:45,418 --> 00:09:49,055 line:0
Check it out to learn even
more about navigation stacks


164
00:09:49,055 --> 00:09:51,624 line:0
and navigation split views.


165
00:09:51.624 --> 00:09:54.461 line:-1 position:50%
But for now,
let's step outside the box


166
00:09:54.461 --> 00:09:58.331 line:-1 position:50%
and talk about new scene APIs.


167
00:09:58,331 --> 00:10:00,800 line:-1
You're likely already familiar
with WindowGroup,


168
00:10:00.800 --> 00:10:04.037 line:-1 position:50%
which is a great way to build
the main interface of your app,


169
00:10:04.037 --> 00:10:06.105 line:-1 position:50%
and can generate
multiple windows


170
00:10:06,105 --> 00:10:10,743 line:-1
to allow different perspectives
into your app's data.


171
00:10:10,743 --> 00:10:13,980 line:-1
New this year,
we're adding window,


172
00:10:13.980 --> 00:10:16.950 line:-1 position:50%
which -- you guessed it --
declares a single,


173
00:10:16,950 --> 00:10:19,853 line:-1
unique window for your app.


174
00:10:19,853 --> 00:10:22,222 line:-1
Here, I've added
a Party Budget window


175
00:10:22.222 --> 00:10:24.624 line:-1 position:50%
that shows the total cost
of the party.


176
00:10:26.893 --> 00:10:30.363 line:-1 position:50%
By default the window
is available and can be shown


177
00:10:30.363 --> 00:10:34.868 line:-1 position:50%
by selecting its name
in the app's Window menu.


178
00:10:34,868 --> 00:10:37,570 line:-1
But we can make
that even easier by assigning


179
00:10:37.570 --> 00:10:43.009 line:-1 position:50%
a Command-0 keyboard
shortcut to open the window.


180
00:10:43,009 --> 00:10:45,879 line:-1
To make sure I stay a
budget-conscious party planner,


181
00:10:45,879 --> 00:10:47,680 line:-1
I'll add a toolbar button


182
00:10:47,680 --> 00:10:50,884 line:-1
with an action
that also shows this window.


183
00:10:50,884 --> 00:10:53,453 line:-1
Using the environment action
openWindow,


184
00:10:53,453 --> 00:11:00,393 line:-1
I can now programmatically open
new SwiftUI-managed windows.


185
00:11:00.393 --> 00:11:03.029 line:-1 position:50%
In fact, we've added
a whole suite


186
00:11:03.029 --> 00:11:05.665 line:-1 position:50%
of new window customizations
this year,


187
00:11:05,665 --> 00:11:08,101 line:-1
including modifiers
for default size,


188
00:11:08.101 --> 00:11:13.406 line:-1 position:50%
position, resizability,
and more.


189
00:11:13.406 --> 00:11:15.909 line:-1 position:50%
I don't want the party budget
getting in the way,


190
00:11:15,909 --> 00:11:19,479 line:-1
so by default it appears
as a small corner window.


191
00:11:19,479 --> 00:11:22,248 line:-1
But if I adjust
its position or size,


192
00:11:22,248 --> 00:11:24,450 line:-1
SwiftUI will automatically
remember that


193
00:11:24.450 --> 00:11:27.654 line:-1 position:50%
across app launches.


194
00:11:27.654 --> 00:11:30.056 line:-1 position:50%
The new standalone
window scene is great


195
00:11:30,056 --> 00:11:33,426 line:-1
for little auxiliary windows
like this one on the Mac,


196
00:11:33.426 --> 00:11:36.429 line:-1 position:50%
but Party Planner
is a multiplatform app,


197
00:11:36.429 --> 00:11:40.500 line:-1 position:50%
and we need a better design
for smaller screens.


198
00:11:40,500 --> 00:11:44,470 line:-1
For example, on iOS we've chosen
to display our budget


199
00:11:44.470 --> 00:11:47.340 line:-1 position:50%
within a resizable sheet
instead.


200
00:11:47.340 --> 00:11:51.544 line:-1 position:50%
This is possible with the new
presentationDetents() modifier.


201
00:11:51.544 --> 00:11:53.947 line:-1 position:50%
In this case, I configured
a resizable sheet


202
00:11:53,947 --> 00:11:59,152 line:-1
that sticks to two different
sizes: one at 250 points,


203
00:11:59,152 --> 00:12:03,856 line:-1
and another at a system-defined
medium height.


204
00:12:03,856 --> 00:12:06,960 line:-1
It is simple to iterate
between platforms this year


205
00:12:06,960 --> 00:12:09,329 line:-1
with multiplatform targets
in Xcode


206
00:12:09.329 --> 00:12:12.532 line:-1 position:50%
powering up
your SwiftUI-based apps.


207
00:12:12,532 --> 00:12:17,003 line:-1
One target can be deployed
to multiple platforms.


208
00:12:17,003 --> 00:12:19,973 line:-1
Just pick your platform
from the usual pull-down menu


209
00:12:19,973 --> 00:12:23,142 line:-1
in Xcode's toolbar.


210
00:12:23,142 --> 00:12:26,045 line:0
Watch "What's new in Xcode"
and follow it up


211
00:12:26,045 --> 00:12:28,881 line:0
with "Use Xcode to develop
a multiplatform app"


212
00:12:28,881 --> 00:12:31,951 line:0
to learn more.


213
00:12:31,951 --> 00:12:33,786 line:-1
For the final new scene type,


214
00:12:33.786 --> 00:12:36.322 line:-1 position:50%
we can turn our attention
to the menu bar.


215
00:12:36,322 --> 00:12:39,759 line:-1
With macOS Ventura, you can
now build MenuBarExtras


216
00:12:39,759 --> 00:12:44,163 line:-1
entirely in SwiftUI!


217
00:12:44,163 --> 00:12:46,399 line:-1
These can be defined
alongside other scene types


218
00:12:46,399 --> 00:12:49,969 line:-1
in your application and will
always be shown in the menu bar


219
00:12:49.969 --> 00:12:53.206 line:-1 position:50%
while your app is running.


220
00:12:53.206 --> 00:12:57.777 line:-1 position:50%
Or, you can build an entire app
using just a MenuBarExtra!


221
00:12:57.777 --> 00:13:01.247 line:-1 position:50%
These are such a fun way to
bring even the simplest of ideas


222
00:13:01.247 --> 00:13:04.450 line:-1 position:50%
to life on macOS.


223
00:13:04,450 --> 00:13:07,053 line:0
"Bring Multiple Windows
to your SwiftUI App"


224
00:13:07,053 --> 00:13:09,122 position:50%
has more detail
on how to take advantage


225
00:13:09,122 --> 00:13:12,392 position:50%
of all the new scene types
and features.


226
00:13:12,392 --> 00:13:14,627 line:-1
Now that we've got control
of windows,


227
00:13:14.627 --> 00:13:18.331 line:-1 position:50%
I'll pass it over to Franck,
to put controls in windows.


228
00:13:18.331 --> 00:13:19.499 line:-1 position:50%
Franck: Thanks, Nick!


229
00:13:19,499 --> 00:13:21,934 line:-1
This year, we have
a variety of enhancements


230
00:13:21,934 --> 00:13:26,806 line:-1
across all our APIs for building
interactive content.


231
00:13:26.806 --> 00:13:30.109 line:-1 position:50%
We have a lot to cover,
so let's get this party started


232
00:13:30.109 --> 00:13:33.413 line:-1 position:50%
with some fun enhancements
to forms.


233
00:13:33.413 --> 00:13:36.949 line:-1 position:50%
macOS Ventura comes with a
brand-new System Settings app,


234
00:13:36,949 --> 00:13:40,219 line:-1
that features a streamlined
navigation structure,


235
00:13:40.219 --> 00:13:42.722 line:-1 position:50%
built using the navigation
split view and stacks


236
00:13:42.722 --> 00:13:46.192 line:-1 position:50%
that Nick just
walked us through.


237
00:13:46.192 --> 00:13:50.263 line:-1 position:50%
It also sports a fresh
and modern interface style.


238
00:13:50,263 --> 00:13:53,099 line:-1
Settings interfaces
are control-heavy,


239
00:13:53,099 --> 00:13:55,802 line:-1
so this style was
specifically designed


240
00:13:55.802 --> 00:13:58.204 line:-1 position:50%
to present forms
containing many controls


241
00:13:58,204 --> 00:14:02,341 line:-1
in a consistent and
well-organized fashion.


242
00:14:02,341 --> 00:14:04,177 line:-1
We've also adopted
this new design


243
00:14:04,177 --> 00:14:06,112 line:-1
within our Party Planner app.


244
00:14:06,112 --> 00:14:08,381 line:-1
Let's take a look.


245
00:14:08,381 --> 00:14:10,783 line:-1
Our Event Details view
also features


246
00:14:10,783 --> 00:14:13,920 line:-1
many different types of controls
grouped into sections,


247
00:14:13.920 --> 00:14:18.825 line:-1 position:50%
serving a similar purpose
as a settings interface.


248
00:14:18.825 --> 00:14:22.228 line:-1 position:50%
This makes it a great candidate
to adopt the new visual style


249
00:14:22,228 --> 00:14:23,596 line:-1
from System Settings.


250
00:14:25,865 --> 00:14:27,633 line:-1
You can enable this design


251
00:14:27,633 --> 00:14:31,838 line:-1
using the new grouped
formStyle on macOS.


252
00:14:31.838 --> 00:14:35.842 line:-1 position:50%
And thanks to the flexibility
of SwiftUI's declarative APIs,


253
00:14:35.842 --> 00:14:38.211 line:-1 position:50%
content and controls
within the form


254
00:14:38.211 --> 00:14:42.482 line:-1 position:50%
will automatically adapt
to the new style.


255
00:14:42,482 --> 00:14:45,785 line:-1
For example, sections will
visually group their content


256
00:14:45,785 --> 00:14:47,653 line:-1
below their headers;


257
00:14:47.653 --> 00:14:51.390 line:-1 position:50%
and controls will consistently
align their labels and values


258
00:14:51.390 --> 00:14:54.594 line:-1 position:50%
to the leading
and trailing edges.


259
00:14:54.594 --> 00:14:57.964 line:-1 position:50%
Some controls may adapt
their visual appearance as well,


260
00:14:57,964 --> 00:15:01,768 line:-1
such as how toggles display
as trailing mini switches


261
00:15:01.768 --> 00:15:05.905 line:-1 position:50%
for consistent layout
and alignment.


262
00:15:05.905 --> 00:15:07.406 line:-1 position:50%
And since the form
itself provides


263
00:15:07.406 --> 00:15:09.575 line:-1 position:50%
a lot of visual structure,


264
00:15:09,575 --> 00:15:10,743 line:-1
other controls adapt
to this context


265
00:15:10.743 --> 00:15:14.247 line:-1 position:50%
with a lighter-weight
visual appearance,


266
00:15:14.247 --> 00:15:18.317 line:-1 position:50%
and reveal more prominent
control backings on rollover.


267
00:15:18.317 --> 00:15:21.154 line:-1 position:50%
SwiftUI makes it easy to align
other types of content


268
00:15:21.154 --> 00:15:25.224 line:-1 position:50%
to this new style, using the new
LabeledContent view,


269
00:15:25.224 --> 00:15:27.693 line:-1 position:50%
which can be used
to build new controls


270
00:15:27.693 --> 00:15:32.031 line:-1 position:50%
or even just display
some read-only information.


271
00:15:32,031 --> 00:15:33,166 line:-1
In this case,


272
00:15:33.166 --> 00:15:36.269 line:-1 position:50%
we're displaying some text
for the location of the event,


273
00:15:36.269 --> 00:15:39.138 line:-1 position:50%
and SwiftUI automatically
adjusts the styling


274
00:15:39.138 --> 00:15:41.340 line:-1 position:50%
and allows selection
of that text.


275
00:15:43.976 --> 00:15:48.014 line:-1 position:50%
But LabeledContent can
also wrap any kind of view,


276
00:15:48.014 --> 00:15:50.516 line:-1 position:50%
like if we wanted
to use a custom view


277
00:15:50.516 --> 00:15:54.587 line:-1 position:50%
for displaying
more entire addresses.


278
00:15:54.587 --> 00:15:58.424 line:-1 position:50%
SwiftUI is now smarter about
applying default styling to text


279
00:15:58,424 --> 00:16:00,860 line:-1
in other cases too.


280
00:16:00.860 --> 00:16:04.363 line:-1 position:50%
It will hierarchically format
multiple pieces of text


281
00:16:04,363 --> 00:16:10,469 line:-1
within a control's label
to form titles and subtitles.


282
00:16:10.469 --> 00:16:13.239 line:-1 position:50%
This new form design
looks great on macOS,


283
00:16:13.239 --> 00:16:15.842 line:-1 position:50%
but we can also share
a lot of this same code


284
00:16:15,842 --> 00:16:17,777 line:-1
with the iOS version of our app.


285
00:16:19,846 --> 00:16:23,349 line:-1
You'll notice some improved
designs on iOS as well,


286
00:16:23.349 --> 00:16:26.219 line:-1 position:50%
like these pop-up menu
pickers with a visual style


287
00:16:26,219 --> 00:16:29,989 line:-1
inspired by macOS,
but with their interactions


288
00:16:29,989 --> 00:16:32,825 line:-1
and appearance optimized
to fit beautifully


289
00:16:32,825 --> 00:16:37,496 line:-1
within a touch-based interface.


290
00:16:37,496 --> 00:16:42,001 line:-1
Of course, the same code works
great on iPad's larger screen,


291
00:16:42,001 --> 00:16:43,502 line:-1
and together with the Mac,


292
00:16:43,502 --> 00:16:46,505 line:-1
you can see how SwiftUI's
declarative model helps you


293
00:16:46,505 --> 00:16:49,642 line:-1
share code when building
shared interfaces,


294
00:16:49,642 --> 00:16:53,980 line:-1
helping you bring the party
to every platform.


295
00:16:53.980 --> 00:16:56.148 line:-1 position:50%
Of course, we're also
improving controls


296
00:16:56.148 --> 00:16:59.185 line:-1 position:50%
beyond just form styles.


297
00:16:59.185 --> 00:17:00.920 line:-1 position:50%
So let's take
a lightning-round tour


298
00:17:00.920 --> 00:17:03.589 line:-1 position:50%
of some other new control
features we're using


299
00:17:03.589 --> 00:17:06.392 line:-1 position:50%
in the Party Planner app.


300
00:17:06,392 --> 00:17:10,963 line:-1
Let's start with the New
Activity page in our iOS app.


301
00:17:10,963 --> 00:17:14,166 line:-1
Text fields can be configured
to expand vertically


302
00:17:14,166 --> 00:17:16,669 line:-1
using the new axis parameter,


303
00:17:16.669 --> 00:17:19.272 line:-1 position:50%
growing their height
to fit the text


304
00:17:19.272 --> 00:17:24.343 line:-1 position:50%
and, if specified, capping
their height to the line limit.


305
00:17:24,343 --> 00:17:27,046 line:-1
But the lineLimit modifier
now also supports


306
00:17:27,046 --> 00:17:30,783 line:-1
more advanced behaviors,
like reserving a minimum amount


307
00:17:30.783 --> 00:17:35.187 line:-1 position:50%
of space and expanding
as more content is added,


308
00:17:35.187 --> 00:17:41.394 line:-1 position:50%
and then scrolling once the
content exceeds the upper limit.


309
00:17:41.394 --> 00:17:44.664 line:-1 position:50%
Below our text fields,
we also see an example


310
00:17:44,664 --> 00:17:47,833 line:-1
of the new
MultiDatePicker control,


311
00:17:47.833 --> 00:17:50.569 line:-1 position:50%
supporting noncontiguous
date selection


312
00:17:50.569 --> 00:17:53.673 line:-1 position:50%
to help us spread our party
activities throughout the week.


313
00:17:55,608 --> 00:17:58,711 line:-1
Now at this point, maybe you're
having some mixed feelings


314
00:17:58,711 --> 00:18:01,614 line:-1
about the party theme
for this talk.


315
00:18:01,614 --> 00:18:04,250 line:-1
The great news is you can
now express those feelings


316
00:18:04.250 --> 00:18:08.955 line:-1 position:50%
in SwiftUI,
using mixed-state controls!


317
00:18:08,955 --> 00:18:12,058 line:-1
Here we have a group of toggles
that can be collapsed


318
00:18:12,058 --> 00:18:16,062 line:-1
into a single aggregate toggle.


319
00:18:16,062 --> 00:18:19,398 line:-1
The inner toggles
each take a single binding


320
00:18:19,398 --> 00:18:22,435 line:-1
whereas the aggregate Toggle
takes a collection


321
00:18:22.435 --> 00:18:25.738 line:-1 position:50%
of all the bindings
displaying a mixed state


322
00:18:25,738 --> 00:18:27,974 line:-1
if their values don't all match.


323
00:18:30,109 --> 00:18:32,645 line:-1
Pickers work the same way.


324
00:18:32,645 --> 00:18:35,247 line:-1
This decoration theme picker
changes its value


325
00:18:35.247 --> 00:18:38.851 line:-1 position:50%
to reflect the currently
selected decoration.


326
00:18:38.851 --> 00:18:41.587 line:-1 position:50%
But if we select
multiple decorations,


327
00:18:41.587 --> 00:18:43.789 line:-1 position:50%
it will show the themes
for all them


328
00:18:43,789 --> 00:18:47,159 line:-1
using a mixed-state indicator.


329
00:18:47.159 --> 00:18:51.998 line:-1 position:50%
Now, let's switch back
to our iOS app.


330
00:18:51.998 --> 00:18:54.166 line:-1 position:50%
We have a few
button-style toggles


331
00:18:54.166 --> 00:18:57.870 line:-1 position:50%
for choosing the event hashtags.


332
00:18:57.870 --> 00:18:59.872 line:-1 position:50%
We can help
differentiate each toggle


333
00:18:59.872 --> 00:19:04.010 line:-1 position:50%
by simply adding
a bordered button style.


334
00:19:04,010 --> 00:19:07,213 line:-1
Button styles like this will
now apply to any control


335
00:19:07.213 --> 00:19:10.116 line:-1 position:50%
that supports
a button-like appearance,


336
00:19:10.116 --> 00:19:15.054 line:-1 position:50%
including toggles,
menus, and pickers.


337
00:19:15,054 --> 00:19:17,023 line:-1
Moving on to steppers,


338
00:19:17.023 --> 00:19:20.893 line:-1 position:50%
you can now provide
a format for its value.


339
00:19:20,893 --> 00:19:24,964 line:-1
On macOS, a formatted stepper
will display its value


340
00:19:24.964 --> 00:19:27.733 line:-1 position:50%
in an editable field.


341
00:19:27.733 --> 00:19:33.506 line:-1 position:50%
And steppers are also now
available on watchOS.


342
00:19:33,506 --> 00:19:36,709 line:-1
Apple Watch sports
one of my favorite new features:


343
00:19:36,709 --> 00:19:40,246 line:-1
Accessibility Quick Actions,
an alternative way


344
00:19:40,246 --> 00:19:44,683 line:-1
to perform actions
by clenching your hand.


345
00:19:44.683 --> 00:19:49.688 line:-1 position:50%
A Quick Action can be defined
just like any other UI action,


346
00:19:49.688 --> 00:19:53.793 line:-1 position:50%
using a button, allowing us
to share the same code


347
00:19:53,793 --> 00:19:59,298 line:-1
for both visible buttons and
their equivalent Quick Actions.


348
00:19:59.298 --> 00:20:03.436 line:-1 position:50%
All right, we just covered
a lot of different controls,


349
00:20:03,436 --> 00:20:06,272 line:-1
but of course, controls
are not the only sources


350
00:20:06,272 --> 00:20:08,240 line:-1
of interactivity.


351
00:20:08,240 --> 00:20:09,742 line:-1
So let's take a look
at what's new


352
00:20:09,742 --> 00:20:12,144 line:-1
with larger interactive
containers,


353
00:20:12.144 --> 00:20:13.779 line:-1 position:50%
like tables and lists.


354
00:20:14.847 --> 00:20:15.881 line:-1 position:50%
I am excited to share


355
00:20:15,881 --> 00:20:20,586 line:-1
that tables are now
supported on iPadOS.


356
00:20:20,586 --> 00:20:24,256 line:-1
As you would expect,
tables on iPadOS are defined


357
00:20:24.256 --> 00:20:29.228 line:-1 position:50%
using the same Table API we
introduced last year for macOS,


358
00:20:29.228 --> 00:20:32.865 line:-1 position:50%
making it easy to share code
between platforms.


359
00:20:32.865 --> 00:20:36.702 line:-1 position:50%
Our Invitations table shows
three columns for the name,


360
00:20:36,702 --> 00:20:40,539 line:-1
city, and invitation status
of each person,


361
00:20:40,539 --> 00:20:45,644 line:-1
taking advantage
of the iPad's large display.


362
00:20:45,644 --> 00:20:48,681 line:-1
But this table will also render
appropriately


363
00:20:48.681 --> 00:20:52.318 line:-1 position:50%
in compact size classes,
including on iPhone,


364
00:20:52.318 --> 00:20:58.090 line:-1 position:50%
showing just the primary column
within the smaller screen space.


365
00:20:58,090 --> 00:21:02,561 line:-1
Let's switch contexts and
check out this table on macOS.


366
00:21:02,561 --> 00:21:03,896 line:-1
It's looking great!


367
00:21:03,896 --> 00:21:07,633 line:-1
But speaking on contexts, I'd
love to add some context menus


368
00:21:07,633 --> 00:21:11,904 line:-1
for performing common actions
within the table.


369
00:21:11,904 --> 00:21:12,805 line:-1
This is a job


370
00:21:12.805 --> 00:21:17.376 line:-1 position:50%
for the new selection-based
contentMenu modifier.


371
00:21:17,376 --> 00:21:19,745 line:-1
The modifier takes
a selection type,


372
00:21:19.745 --> 00:21:22.781 line:-1 position:50%
and will be enabled
within any compatible table


373
00:21:22.781 --> 00:21:26.519 line:-1 position:50%
or list that supports selection.


374
00:21:26.519 --> 00:21:29.655 line:-1 position:50%
Within the menu builder,
you are given a collection


375
00:21:29,655 --> 00:21:32,758 line:-1
of the current selection,
allowing you to build


376
00:21:32.758 --> 00:21:35.661 line:-1 position:50%
advanced context menus
that can operate


377
00:21:35.661 --> 00:21:39.198 line:-1 position:50%
on a single selected row,
multiple selected rows,


378
00:21:39,198 --> 00:21:41,267 line:-1
or even no row selected,


379
00:21:41,267 --> 00:21:46,005 line:-1
such as when clicking
on the empty area of the table.


380
00:21:46.005 --> 00:21:49.608 line:-1 position:50%
Context menus reveal actions
directly within the table,


381
00:21:49,608 --> 00:21:52,778 line:-1
which is great for speed
and efficiency.


382
00:21:52.778 --> 00:21:57.149 line:-1 position:50%
But I would also like to make
these actions more discoverable.


383
00:21:57.149 --> 00:21:59.919 line:-1 position:50%
A great way to improve
discoverability


384
00:21:59.919 --> 00:22:04.023 line:-1 position:50%
is by displaying common actions
as buttons in the toolbar,


385
00:22:04.023 --> 00:22:07.626 line:-1 position:50%
and iPadOS has a new
and improved toolbar design


386
00:22:07,626 --> 00:22:12,932 line:-1
to help achieve
that extra level of polish.


387
00:22:12.932 --> 00:22:16.302 line:-1 position:50%
iPad toolbars can now support
user customization


388
00:22:16.302 --> 00:22:18.103 line:-1 position:50%
and reordering,


389
00:22:18.103 --> 00:22:22.341 line:-1 position:50%
which your app can implement by
providing explicit identifiers


390
00:22:22.341 --> 00:22:28.681 line:-1 position:50%
for each toolbar item,
the same API available on macOS.


391
00:22:28.681 --> 00:22:32.351 line:-1 position:50%
These identifiers allow SwiftUI
to automatically save


392
00:22:32,351 --> 00:22:35,287 line:-1
and restore custom
toolbar configurations


393
00:22:35,287 --> 00:22:37,790 line:-1
across app launches.


394
00:22:37,790 --> 00:22:39,558 line:-1
Note that on iPadOS,


395
00:22:39.558 --> 00:22:44.196 line:-1 position:50%
not all toolbar items
allow customization.


396
00:22:44.196 --> 00:22:46.365 line:-1 position:50%
Customizable actions
are configured


397
00:22:46,365 --> 00:22:50,703 line:-1
using the new secondaryAction
toolbar item placement,


398
00:22:50,703 --> 00:22:54,139 line:-1
which shows up in the center
of the toolbar by default,


399
00:22:54.139 --> 00:22:58.577 line:-1 position:50%
or in an overflow menu
in compact-size classes.


400
00:22:58,577 --> 00:22:59,778 line:-1
All right!


401
00:22:59.778 --> 00:23:02.014 line:-1 position:50%
The word is spreading around
and it looks like


402
00:23:02.014 --> 00:23:06.352 line:-1 position:50%
the number of attendees
is growing exponentially.


403
00:23:06.352 --> 00:23:08.487 line:-1 position:50%
Let's help our table
manage the scale


404
00:23:08.487 --> 00:23:12.191 line:-1 position:50%
by adding support for search.


405
00:23:12.191 --> 00:23:14.660 line:-1 position:50%
SwiftUI already
supports basic search


406
00:23:14.660 --> 00:23:17.930 line:-1 position:50%
with a searchable modifier.


407
00:23:17,930 --> 00:23:21,900 line:0
And new this year, search fields
can support tokenized inputs


408
00:23:21,900 --> 00:23:28,007 line:0
and suggestions to help build
more structured search queries.


409
00:23:28,007 --> 00:23:31,543 position:50%
To help with filtering results,
SwiftUI now supports


410
00:23:31,543 --> 00:23:34,780 line:0
search scopes,
which appear in a scope bar


411
00:23:34,780 --> 00:23:39,485 line:0
beneath the toolbar on macOS
and as a segmented control


412
00:23:39,485 --> 00:23:43,289 position:50%
within the navigation bar
on iOS.


413
00:23:43,289 --> 00:23:45,057 line:0
We have only scratched
the surface


414
00:23:45,057 --> 00:23:48,794 line:0
of what is possible with SwiftUI
on iPad this year.


415
00:23:48,794 --> 00:23:52,531 line:0
Check out the "SwiftUI on iPad"
series and learn more.


416
00:23:52.531 --> 00:23:55.067 line:-1 position:50%
Now that we have a bit more
control over the event details


417
00:23:55,067 --> 00:23:57,603 line:-1
and logistics,
let's share the news


418
00:23:57,603 --> 00:24:00,873 line:-1
and get people
even more excited.


419
00:24:00.873 --> 00:24:02.975 line:-1 position:50%
Sharing content
with other people,


420
00:24:02,975 --> 00:24:05,611 line:-1
as well as sharing data
across applications


421
00:24:05,611 --> 00:24:09,148 line:-1
are essential parts
of many apps.


422
00:24:09.148 --> 00:24:11.150 line:-1 position:50%
Taking advantage
of these features


423
00:24:11,150 --> 00:24:13,719 line:-1
makes your app even more
integrated into the workflows


424
00:24:13.719 --> 00:24:16.889 line:-1 position:50%
of the people who use them.


425
00:24:16.889 --> 00:24:19.892 line:-1 position:50%
This year we have
a few exciting areas


426
00:24:19.892 --> 00:24:22.928 line:-1 position:50%
to make that even easier.


427
00:24:22,928 --> 00:24:26,265 line:-1
Let's start with PhotosPicker,
a new multiplatform


428
00:24:26,265 --> 00:24:31,737 line:-1
and privacy-preserving API
for picking photos and videos.


429
00:24:31,737 --> 00:24:35,708 line:-1
Since photos are an essential
part of any party,


430
00:24:35.708 --> 00:24:38.544 line:-1 position:50%
I've added a feature
to the Party Planner app


431
00:24:38.544 --> 00:24:43.716 line:-1 position:50%
that adds fun birthday effects
to photos that were taken.


432
00:24:43,716 --> 00:24:48,220 line:-1
The new PhotosPicker view can
be placed anywhere in your app,


433
00:24:48,220 --> 00:24:52,424 line:-1
and on activation, presents
the standard photos-picking UI


434
00:24:52,424 --> 00:24:57,696 line:-1
to select photos or videos
from the user's library.


435
00:24:57.696 --> 00:25:01.900 line:-1 position:50%
PhotosPicker take a binding
to a selected item,


436
00:25:01.900 --> 00:25:05.671 line:-1 position:50%
which provides access to
the actual photo and video data.


437
00:25:07,206 --> 00:25:10,676 line:-1
It also has additional
rich configuration options,


438
00:25:10.676 --> 00:25:13.345 line:-1 position:50%
such as filtering
the type of content,


439
00:25:13,345 --> 00:25:16,181 line:-1
preferred photo encoding,
and more.


440
00:25:18,450 --> 00:25:22,454 line:-1
This is the most photogenic
cupcake I have ever seen.


441
00:25:22,454 --> 00:25:25,324 line:-1
But one cupcake
isn't enough.


442
00:25:25,324 --> 00:25:29,762 line:-1
Let's apply the special effect
as we move on.


443
00:25:29,762 --> 00:25:32,231 line:-1
Now that we have
our customized photo,


444
00:25:32,231 --> 00:25:36,769 line:-1
we're ready to share it
with the new ShareLink API.


445
00:25:36,769 --> 00:25:40,706 line:-1
Each platform has a standard
interface for allowing people


446
00:25:40.706 --> 00:25:43.742 line:-1 position:50%
to share content from your apps.


447
00:25:43.742 --> 00:25:47.813 line:-1 position:50%
With watchOS 9, you can now
also present the share sheet


448
00:25:47,813 --> 00:25:50,883 line:-1
from within your watch apps.


449
00:25:50,883 --> 00:25:53,585 line:-1
The new ShareLink view
enables presenting


450
00:25:53,585 --> 00:25:57,423 line:-1
that system share sheet
from within your app.


451
00:25:57,423 --> 00:26:00,592 line:-1
You can simply provide it
with the content to be shared


452
00:26:00,592 --> 00:26:04,029 line:-1
and a preview to use
in the share sheet,


453
00:26:04,029 --> 00:26:08,033 line:-1
and it automatically creates
a standard share icon button.


454
00:26:10,068 --> 00:26:13,071 line:-1
On tap, it presents
the standard share sheet


455
00:26:13.071 --> 00:26:15.774 line:-1 position:50%
to send off the content.


456
00:26:15.774 --> 00:26:18.811 line:-1 position:50%
Share links adapt to the
context they're applied to,


457
00:26:18.811 --> 00:26:23.782 line:-1 position:50%
such as in context menus
and across platforms.


458
00:26:23.782 --> 00:26:28.086 line:-1 position:50%
PhotosPicker, ShareLink,
and more all take advantage


459
00:26:28.086 --> 00:26:30.823 line:-1 position:50%
of the new
Transferable protocol,


460
00:26:30,823 --> 00:26:34,693 line:-1
a Swift-first declarative way
to describe how types


461
00:26:34,693 --> 00:26:37,563 line:-1
are transferred
across applications.


462
00:26:37.563 --> 00:26:41.266 line:-1 position:50%
Transferable types are used
to power SwiftUI features


463
00:26:41.266 --> 00:26:45.571 line:-1 position:50%
like drag-and-drop, which
makes it easy to drop images


464
00:26:45.571 --> 00:26:50.375 line:-1 position:50%
from other apps into
the Party Planner gallery.


465
00:26:50.375 --> 00:26:53.846 line:-1 position:50%
This makes use of the new
dropDestination API,


466
00:26:53,846 --> 00:26:58,617 line:-1
which accepts a payload type,
in this case, just an image.


467
00:26:58,617 --> 00:27:00,986 line:-1
The completion block
provides a collection


468
00:27:00.986 --> 00:27:04.957 line:-1 position:50%
of the received images together
with the drop location.


469
00:27:07,493 --> 00:27:10,796 line:-1
Many standard types,
such as string and image,


470
00:27:10,796 --> 00:27:14,066 line:-1
already conform to Transferable.


471
00:27:14.066 --> 00:27:17.836 line:-1 position:50%
So it wasn't much work to get
the ball rolling in our app,


472
00:27:17,836 --> 00:27:20,038 line:-1
but you can easily
take things further


473
00:27:20,038 --> 00:27:23,575 line:-1
and implement Transferable
in your own custom types.


474
00:27:23.575 --> 00:27:26.879 line:-1 position:50%
When it's time to do that,
your conformance declares


475
00:27:26.879 --> 00:27:29.982 line:-1 position:50%
the representations
appropriate for your type,


476
00:27:29.982 --> 00:27:34.853 line:-1 position:50%
such as using Codable support
and a custom content type.


477
00:27:34,853 --> 00:27:36,955 line:0
To learn more
about Transferable,


478
00:27:36,955 --> 00:27:41,026 line:0
other representations,
and advanced tips and tricks,


479
00:27:41,026 --> 00:27:44,029 position:50%
check out the
"Meet Transferable" talk.


480
00:27:44.029 --> 00:27:46.365 line:-1 position:50%
While we were preparing
the cupcakes,


481
00:27:46.365 --> 00:27:49.067 line:-1 position:50%
Nick was laying out
all the supplies.


482
00:27:49,067 --> 00:27:51,336 line:-1
Nick, how's it
going over there?


483
00:27:51.336 --> 00:27:53.672 line:-1 position:50%
Nick: Almost done!


484
00:27:53,672 --> 00:27:56,775 line:-1
I'm arranging these party horns
in a completely custom layout,


485
00:27:56.775 --> 00:27:59.077 line:-1 position:50%
but I'll need
a little more time.


486
00:27:59.077 --> 00:28:02.481 line:-1 position:50%
Let's talk graphics first.


487
00:28:02,481 --> 00:28:04,550 line:-1
ShapeStyle has new APIs


488
00:28:04,550 --> 00:28:08,253 line:-1
to achieve rich
graphical effects this year.


489
00:28:08,253 --> 00:28:14,159 line:-1
We'll use these APIs to give
this guest card some party pop!


490
00:28:14.159 --> 00:28:16.361 line:-1 position:50%
Color has a new
gradient property


491
00:28:16.361 --> 00:28:21.099 line:-1 position:50%
that adds a subtle gradient
derived from the color.


492
00:28:21,099 --> 00:28:23,769 line:-1
These look great
with the system colors.


493
00:28:25,837 --> 00:28:30,208 line:-1
ShapeStyle also got
a new shadow modifier.


494
00:28:30.208 --> 00:28:32.144 line:-1 position:50%
Adding it to the white
foreground style


495
00:28:32,144 --> 00:28:36,315 line:-1
adds a shadow to the text
and to the symbol.


496
00:28:36,315 --> 00:28:39,418 line:-1
And the detail of this shadow
is remarkable.


497
00:28:39.418 --> 00:28:42.220 line:-1 position:50%
The drop shadow has applied
to every element


498
00:28:42,220 --> 00:28:43,855 line:-1
of the Calendar symbol.


499
00:28:47.192 --> 00:28:49.828 line:-1 position:50%
With the whole world
of SF Symbols


500
00:28:49.828 --> 00:28:52.564 line:-1 position:50%
and the new SwiftUI
ShapeStyle extensions,


501
00:28:52,564 --> 00:28:55,567 line:-1
you can make some
absolutely gorgeous icons.


502
00:28:57.736 --> 00:29:03.208 line:-1 position:50%
Now, it's time to bring that
grid of SF Symbols to the party.


503
00:29:03,208 --> 00:29:06,945 line:-1
We'll iterate quickly on it
using SwiftUI Previews,


504
00:29:06,945 --> 00:29:10,916 line:-1
which has some fantastic
improvements this year.


505
00:29:10,916 --> 00:29:13,318 line:-1
Previews have always been
a convenient way


506
00:29:13,318 --> 00:29:17,823 line:-1
to see a view in multiple
configurations at the same time.


507
00:29:17.823 --> 00:29:21.493 line:-1 position:50%
With Xcode 14, we're making
this easier than ever


508
00:29:21,493 --> 00:29:23,929 line:-1
with preview variants.


509
00:29:23,929 --> 00:29:27,432 line:-1
These let you develop your view
in multiple appearances,


510
00:29:27,432 --> 00:29:30,669 line:-1
type sizes, or orientations
at the same time


511
00:29:30.669 --> 00:29:34.840 line:-1 position:50%
without writing
any configuration code.


512
00:29:34,840 --> 00:29:37,009 position:50%
We can use that
same gradient again,


513
00:29:37,009 --> 00:29:39,344 line:0
or we can style it
as an elliptical gradient


514
00:29:39,344 --> 00:29:41,213 position:50%
to give these images
a soft glow.


515
00:29:41,213 --> 00:29:43,815 position:50%
and preview it in dark
and light appearances.


516
00:29:46,985 --> 00:29:50,489 position:50%
Previews now runs
in live mode by default.


517
00:29:50,489 --> 00:29:52,224 line:0
It can't be a great
birthday party


518
00:29:52,224 --> 00:29:54,259 position:50%
without a little dancing,


519
00:29:54,259 --> 00:29:57,696 position:50%
so let's get these
SF Symbols dancing.


520
00:29:57,696 --> 00:30:01,867 position:50%
â™ª Electronic dance music â™ª


521
00:30:01,867 --> 00:30:10,442 line:0 position:90% size:2%
â™ª


522
00:30:12,010 --> 00:30:16,682 line:-1
Those jovial icons
demonstrate something profound.


523
00:30:16,682 --> 00:30:22,054 line:-1
SwiftUI has taken text and image
animations to the next level.


524
00:30:22,054 --> 00:30:26,358 line:-1
Let's watch that text animate
again in slow motion.


525
00:30:26,358 --> 00:30:29,828 line:-1
Text can now be beautifully
animated between weights,


526
00:30:29,828 --> 00:30:32,164 line:-1
styles, and even layouts.


527
00:30:32,164 --> 00:30:34,900 line:-1
And the best part:
this takes advantage


528
00:30:34.900 --> 00:30:40.439 line:-1 position:50%
of the same animation APIs used
throughout the rest of SwiftUI.


529
00:30:40.439 --> 00:30:43.675 line:-1 position:50%
Let's close by talking about
my absolute favorite part


530
00:30:43,675 --> 00:30:46,912 line:-1
of UI programming,
applied geometry --


531
00:30:46,912 --> 00:30:49,114 line:-1
or as we call it, Layout.


532
00:30:49.114 --> 00:30:53.085 line:-1 position:50%
SwiftUI has added new ways
to lay out views.


533
00:30:53.085 --> 00:30:56.621 line:-1 position:50%
Grid is a new container view
that arranges views


534
00:30:56.621 --> 00:30:59.024 line:-1 position:50%
in a two-dimensional grid.


535
00:30:59,024 --> 00:31:01,626 line:-1
Grid will measure its subviews
up front to enable cells


536
00:31:01.626 --> 00:31:05.530 line:-1 position:50%
that span multiple columns
and enable automatic alignments


537
00:31:05.530 --> 00:31:07.999 line:-1 position:50%
across rows and columns.


538
00:31:07.999 --> 00:31:11.703 line:-1 position:50%
In fact, you already
got a look at grid earlier.


539
00:31:14,973 --> 00:31:19,444 line:-1
Using Grid, GridRow, and
the gridCellColumns modifier,


540
00:31:19.444 --> 00:31:21.980 line:-1 position:50%
you can build up
a grid piecemeal.


541
00:31:21.980 --> 00:31:24.883 line:-1 position:50%
Of course, just like all
layouts in SwiftUI,


542
00:31:24.883 --> 00:31:27.919 line:-1 position:50%
they're built for composition.


543
00:31:27.919 --> 00:31:31.490 line:-1 position:50%
We introduced SwiftUI's layout
model with the first release,


544
00:31:31,490 --> 00:31:34,226 line:-1
providing a toolbox
of primitive layout types


545
00:31:34,226 --> 00:31:38,630 line:-1
to achieve some
of the most common layouts.


546
00:31:38,630 --> 00:31:41,666 line:-1
Most of the time,
you can get the job done


547
00:31:41.666 --> 00:31:45.604 line:-1 position:50%
with these primitive layout
types, but sometimes,


548
00:31:45,604 --> 00:31:48,106 line:-1
sometimes, you want
that imperative layout code:


549
00:31:48,106 --> 00:31:50,108 line:-1
the size, the minX,


550
00:31:50.108 --> 00:31:56.848 line:-1 position:50%
the frame.origin.x minus
frame.midX divided by 2 plus 3.


551
00:31:56.848 --> 00:31:58.483 line:-1 position:50%
It's times like these


552
00:31:58.483 --> 00:32:03.155 line:-1 position:50%
when you should reach
for the new Layout protocol.


553
00:32:03.155 --> 00:32:07.225 line:-1 position:50%
With it, you have the full power
and flexibility we used


554
00:32:07,225 --> 00:32:10,395 line:-1
to implement SwiftUI's
stacks and grids


555
00:32:10,395 --> 00:32:15,200 line:-1
to build your own first-class
layout abstractions.


556
00:32:15.200 --> 00:32:18.403 line:-1 position:50%
Using Layout, I built this
bespoke seating chart layout


557
00:32:18.403 --> 00:32:21.940 line:-1 position:50%
for the guests
at our birthday party.


558
00:32:21.940 --> 00:32:25.076 line:-1 position:50%
Should our party guests
sit in rows or pods?


559
00:32:25.076 --> 00:32:29.281 line:-1 position:50%
With the power of Layout,
we don't have to choose.


560
00:32:29.281 --> 00:32:31.950 line:-1 position:50%
Using the Layout protocol,
you can build


561
00:32:31,950 --> 00:32:36,221 line:-1
all kinds of efficient layouts,
tailored to the specific needs


562
00:32:36.221 --> 00:32:39.391 line:-1 position:50%
of your view hierarchies.


563
00:32:39,391 --> 00:32:40,992 position:50%
To learn how to adopt Layout


564
00:32:40,992 --> 00:32:44,563 position:50%
and about other new,
great layout techniques,


565
00:32:44,563 --> 00:32:49,301 line:0
check out the "Compose custom
layouts with SwiftUI" session.


566
00:32:49.301 --> 00:32:53.905 line:-1 position:50%
I've prepared a taste of Layout
especially for you.


567
00:32:53,905 --> 00:32:56,074 line:-1
Using the new AnyLayout type,


568
00:32:56,074 --> 00:32:58,310 line:-1
I can switch
between the Grid layout


569
00:32:58.310 --> 00:33:01.513 line:-1 position:50%
and a custom scattered
layout I've written.


570
00:33:01,513 --> 00:33:03,481 line:-1
As this session
draws to a close,


571
00:33:03,481 --> 00:33:06,017 line:-1
there's one surprise left:


572
00:33:06,017 --> 00:33:08,353 line:-1
You're invited!


573
00:33:08,353 --> 00:33:10,522 line:0 size:2% align:right
â™ª


574
00:33:10,522 --> 00:33:13,725 line:-1
You are invited to celebrate
SwiftUI's birthday


575
00:33:13,725 --> 00:33:17,896 line:-1
and all of the new APIs
with us this week.


576
00:33:17.896 --> 00:33:21.600 line:-1 position:50%
There is a lot of detail left to
explore in the APIs we covered,


577
00:33:21,600 --> 00:33:25,804 line:-1
and even more APIs that
we didn't have time to include.


578
00:33:25.804 --> 00:33:29.741 line:-1 position:50%
Enjoy the party,
and enjoy WWDC 2022.


579
00:33:29.741 --> 00:33:36.314 line:-1 position:50%
And we are going
to enjoy some cake.


580
00:33:36,314 --> 00:33:38,550 line:-1
â™ª instrumental hip hop music â™ª


581
00:33:38,550 --> 00:33:41,219 position:90% size:2% line:0
â™ª

