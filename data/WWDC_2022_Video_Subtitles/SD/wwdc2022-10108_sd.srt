2
00:00:00.334 --> 00:00:07.341 line:-1 align:center
â™ª â™ª


3
00:00:09,843 --> 00:00:12,946 line:-2
Felix Acero: Hi, my name is Felix Acero,
and I am a Software Engineer


4
00:00:12.980 --> 00:00:15.916 line:-2 align:center
with the Security Engineering
and Architecture team.


5
00:00:15,949 --> 00:00:17,684 line:-1
In this video, I am going to show you


6
00:00:17,718 --> 00:00:19,786 line:-2
how you can use
the LocalAuthentication framework


7
00:00:19,820 --> 00:00:23,423 line:-2
to improve the authentication
and authorization flows of your app.


8
00:00:23,457 --> 00:00:25,659 line:-2
We will start by taking a look
at the generic concepts


9
00:00:25.692 --> 00:00:28.262 line:-1 align:center
of authentication and authorization


10
00:00:28,295 --> 00:00:31,164 line:-1
and how they apply to your application.


11
00:00:31,198 --> 00:00:34,902 line:-2
Then we will review
how the existing LocalAuthentication API,


12
00:00:34.935 --> 00:00:37.004 line:-1 align:center
and in particular the LAContext,


13
00:00:37.037 --> 00:00:41.108 line:-2 align:center
can help you implement a wide range
of authorization schemes.


14
00:00:41.141 --> 00:00:43.110 line:-1 align:center
And finally we will see how the new APIs


15
00:00:43,143 --> 00:00:45,312 line:-2
we are adding to LocalAuthentication
this year


16
00:00:45,345 --> 00:00:48,348 line:-2
can help you further streamline
your authorization code.


17
00:00:50,017 --> 00:00:53,954 line:-2
So let's start by talking
about authentication and authorization.


18
00:00:53,987 --> 00:00:56,857 line:-2
Authentication and authorization
are distinct


19
00:00:56.890 --> 00:00:59.326 line:-1 align:center
yet closely related security concepts.


20
00:00:59,359 --> 00:01:04,264 line:0
On the one hand, authentication is the act
of verifying the identity of the user.


21
00:01:04,298 --> 00:01:08,535 line:0
On the other hand, authorization is
the act of verifying whether a given user


22
00:01:08,569 --> 00:01:13,040 line:0
is allowed to perform a specific operation
on a concrete resource.


23
00:01:13,073 --> 00:01:16,410 align:center
Put together, we can see that,
since we first need to verify


24
00:01:16,443 --> 00:01:19,413 align:center
that the user is who they claim to be
before we can evaluate


25
00:01:19,446 --> 00:01:22,149 align:center
what resources and operations
are available to them,


26
00:01:22,182 --> 00:01:26,587 align:center
we can say that authentication
in fact enables authorization.


27
00:01:26,620 --> 00:01:28,322 line:0
To help illustrate these concepts,


28
00:01:28,355 --> 00:01:31,124 align:center
let's look at a concrete example
involving a common security resource


29
00:01:31,158 --> 00:01:34,361 align:center
managed by your applications,
such as Secure Enclave keys.


30
00:01:35.562 --> 00:01:38.498 line:-2 align:center
Secure Enclave keys are special types
of asymmetric keys


31
00:01:38,532 --> 00:01:41,268 line:-2
that are bound to a specific device
and which are protected


32
00:01:41,301 --> 00:01:46,173 line:-2
by a hardware-based key manager
that is isolated from the main processor.


33
00:01:46,206 --> 00:01:49,042 line:-2
What makes these keys special
is that when you store a private key


34
00:01:49,076 --> 00:01:51,578 line:-2
in the Secure Enclave,
you never actually handle the key


35
00:01:51.612 --> 00:01:56.350 line:-2 align:center
but instead instruct the Secure Enclave
to perform operations with it.


36
00:01:56,383 --> 00:01:59,486 line:-2
Secure Enclave keys can be associated
with access control lists


37
00:01:59.520 --> 00:02:02.322 line:-1 align:center
or ACLs for short.


38
00:02:02,356 --> 00:02:05,859 line:-2
An access control list specifies
the requirements that need to be satisfied


39
00:02:05,893 --> 00:02:10,130 line:-2
in order to perform specific operations
such as signing or decrypting a blob.


40
00:02:11,532 --> 00:02:14,535 line:-2
They can specify
when a given item is available,


41
00:02:14,568 --> 00:02:18,539 line:-2
for example after device unlock,
as well as the authentication requirements


42
00:02:18,572 --> 00:02:21,842 line:-2
needed to allow the execution
of certain operations.


43
00:02:21,875 --> 00:02:24,444 line:-2
For this example,
let's say that your app wants to protect


44
00:02:24.478 --> 00:02:28.282 line:-2 align:center
the sign and decrypt operations
of its key with biometric authentication,


45
00:02:28,315 --> 00:02:31,185 line:-2
while also ensuring
that the key is only available


46
00:02:31,218 --> 00:02:33,620 line:-1
after the device has been unlocked.


47
00:02:34,454 --> 00:02:37,224 line:-2
Now let's see how an authorization flow
would look like


48
00:02:37,257 --> 00:02:39,560 line:-1
for a sign operation involving this key.


49
00:02:40,661 --> 00:02:44,731 line:-2
First, your application issues a request
to sign a blob using the private key.


50
00:02:45,899 --> 00:02:49,503 line:-2
Then, after verifying
that your application can access the key,


51
00:02:49.536 --> 00:02:52.773 line:-2 align:center
the system proceeds to identify
the authorization requirements


52
00:02:52.806 --> 00:02:54.408 line:-1 align:center
for the sign operation.


53
00:02:54,441 --> 00:02:58,312 align:center
In this case, the sign operation requires
a successful biometric authentication


54
00:02:58,345 --> 00:03:01,815 align:center
from any of the currently enrolled users.


55
00:03:01,849 --> 00:03:03,584 line:1
The system will then walk the user


56
00:03:03,617 --> 00:03:07,855 line:1
through the biometric authentication
process via the standard UI.


57
00:03:07,888 --> 00:03:09,690 line:1
Upon a successful authentication,


58
00:03:09,723 --> 00:03:10,858 line:1
the system verifies


59
00:03:10,891 --> 00:03:15,195 line:1
that all the remaining authorization
requirements have been satisfied


60
00:03:15,229 --> 00:03:18,265 line:1
before finally performing
the sign operation


61
00:03:18,298 --> 00:03:20,834 line:-1
and returning a signed blob to your app.


62
00:03:21,969 --> 00:03:24,171 line:-2
Let's break down the main components
involved in this flow


63
00:03:24.204 --> 00:03:26.840 line:-2 align:center
to see how they fit
into our initial definitions.


64
00:03:26,874 --> 00:03:30,811 line:-2
First, we have a resource:
the Secure Enclave key.


65
00:03:30,844 --> 00:03:35,382 line:-2
Second, we have an operation
that can be performed with the key.


66
00:03:35.415 --> 00:03:38.685 line:-2 align:center
And third, we have a set of requirements
that, among other things,


67
00:03:38,719 --> 00:03:41,388 line:-2
specify who is allowed to perform
the operation


68
00:03:41,421 --> 00:03:43,690 line:-2
as well as the means of authentication
that should be used


69
00:03:43,724 --> 00:03:46,426 line:-1
to verify their identity.


70
00:03:46.460 --> 00:03:50.764 line:-2 align:center
Plugging the parameters of this example
into our definitions, we can see that


71
00:03:50,797 --> 00:03:54,168 align:center
for authentication, the question
of whether this is the right user


72
00:03:54,201 --> 00:03:57,571 align:center
is answered by means
of a biometric authentication;


73
00:03:57,604 --> 00:04:01,241 line:1
while for authorization, the question
of whether the user is allowed


74
00:04:01,275 --> 00:04:04,611 align:center
to perform a signature operation
using the private key


75
00:04:04,645 --> 00:04:09,750 align:center
is answered by verifying the requirements
specified in the access control list.


76
00:04:09,783 --> 00:04:12,653 line:-2
Now that we have seen how this works
at a high level,


77
00:04:12.686 --> 00:04:15.722 line:-2 align:center
we can take a look at the way
a flow like this can be implemented


78
00:04:15,756 --> 00:04:18,725 line:-2
using the current API
of LocalAuthentication.


79
00:04:18.759 --> 00:04:22.429 line:-2 align:center
Let's start by quickly reviewing
the features offered by the LAContext,


80
00:04:22.462 --> 00:04:25.699 line:-2 align:center
which is one of the core components
of the framework.


81
00:04:25,732 --> 00:04:29,303 line:-2
An LAContext can be used to evaluate
the user's identity.


82
00:04:29,336 --> 00:04:33,907 line:-2
It handles user interaction when biometric
or passcode authentication is required.


83
00:04:33.941 --> 00:04:36.143 line:-2 align:center
And it also interfaces
with the Secure Enclave


84
00:04:36,176 --> 00:04:39,346 line:-2
to enable the secure management
of biometric data.


85
00:04:39.379 --> 00:04:41.648 line:-2 align:center
From this perspective,
the LAContext can be used


86
00:04:41,682 --> 00:04:44,785 line:-1
to support your authentication use cases.


87
00:04:44.818 --> 00:04:48.355 line:-2 align:center
The LAContext can also be used
in association with other frameworks


88
00:04:48,388 --> 00:04:50,924 line:-1
to support authorization flows.


89
00:04:50.958 --> 00:04:54.094 line:-2 align:center
For instance, you could use it
to evaluate access control lists


90
00:04:54.127 --> 00:04:56.630 line:-2 align:center
like the one we saw
in our previous example.


91
00:04:56,663 --> 00:04:58,732 line:-1
Let's take a closer look.


92
00:04:58,765 --> 00:05:02,035 align:center
The first thing we need to do
is to get access the ACL


93
00:05:02,069 --> 00:05:05,038 line:1
associated with our private key.


94
00:05:05,072 --> 00:05:08,542 line:1
We can do this with the help
of the SecItemCopyMatching API


95
00:05:08,575 --> 00:05:10,644 line:1
offered by the Security framework,


96
00:05:10,677 --> 00:05:14,748 align:center
making sure that we provide the
return-attributes key inside of our query.


97
00:05:15,782 --> 00:05:18,619 line:-2
Once we obtain access
to the access control list,


98
00:05:18.652 --> 00:05:21.455 line:-2 align:center
we can evaluate it directly
using the LAContext


99
00:05:21,488 --> 00:05:24,958 line:-1
and the evaluateAccessControl API.


100
00:05:24,992 --> 00:05:28,128 line:-2
The biggest advantage that this approach
gives you is that it lets you decide


101
00:05:28,161 --> 00:05:30,664 line:-2
the right moment and the right place
in your application


102
00:05:30.697 --> 00:05:33.700 line:-1 align:center
to prompt the user for this authorization.


103
00:05:33.734 --> 00:05:36.370 line:-2 align:center
In this case,
since the access control list requires


104
00:05:36,403 --> 00:05:39,306 line:-2
biometric authentication
for the signature operation,


105
00:05:39.339 --> 00:05:43.143 line:-2 align:center
the LAContext will present
the familiar Face ID or Touch ID UI.


106
00:05:44,845 --> 00:05:48,582 align:center
Once the ACL has been authorized
inside our LAContext,


107
00:05:48,615 --> 00:05:50,918 align:center
we will be able to use it
as part of our query


108
00:05:50,951 --> 00:05:53,754 line:1
for obtaining a reference to our key.


109
00:05:53,787 --> 00:05:57,024 line:1
We do this by appending
the LAContext to our SecItem query


110
00:05:57,057 --> 00:05:59,293 align:center
under the use-authentication-context key.


111
00:06:01,261 --> 00:06:04,131 line:-2
By binding the LAContext
to our private key reference,


112
00:06:04,164 --> 00:06:06,600 line:-2
we ensure that executing
the signature operation


113
00:06:06,633 --> 00:06:08,902 line:-1
will not trigger another authentication,


114
00:06:08.936 --> 00:06:13.473 line:-2 align:center
while allowing the operation to continue
without unnecessary prompts.


115
00:06:13.507 --> 00:06:16.443 line:-2 align:center
These binding also means
that no additional user interactions


116
00:06:16,476 --> 00:06:20,480 line:-2
will be required for future signatures
until the LAContext is invalidated.


117
00:06:22.649 --> 00:06:25.252 line:-2 align:center
The LAContext offers
a great deal of flexibility


118
00:06:25,285 --> 00:06:27,621 line:-2
and it lets you control
each of the steps and parameters


119
00:06:27,654 --> 00:06:30,157 line:-1
involved in your authorization flows.


120
00:06:30.190 --> 00:06:33.827 line:-2 align:center
It can be used in combination with other
frameworks such as the Security framework,


121
00:06:33,861 --> 00:06:37,831 line:-2
which in turn unlocks
a wide range of use cases.


122
00:06:37,865 --> 00:06:42,169 line:-2
This versatility, however, comes
at the cost of higher code complexity,


123
00:06:42.202 --> 00:06:47.040 line:-2 align:center
requiring you to carefully orchestrate
the APIs offered by several frameworks.


124
00:06:47,074 --> 00:06:48,242 line:-1
Depending on your use case,


125
00:06:48,275 --> 00:06:50,410 line:-2
the LAContext might be
the right tool for you,


126
00:06:50.444 --> 00:06:53.046 line:-2 align:center
especially if the main value proposition
of your app


127
00:06:53,080 --> 00:06:56,250 line:-2
requires low-level access
to keys, secrets,


128
00:06:56,283 --> 00:06:58,652 line:-1
contexts, and access control lists.


129
00:06:58.685 --> 00:07:03.824 line:-2 align:center
However, if all you need for your app is
a way of authorizing access to content


130
00:07:03.857 --> 00:07:07.461 line:-2 align:center
or a sensitive resource, then you may want
to trade off some of this flexibility


131
00:07:07.494 --> 00:07:09.363 line:-1 align:center
for a simpler API.


132
00:07:09.396 --> 00:07:13.634 line:-2 align:center
This brings us
to our last topic, streamline your app.


133
00:07:13.667 --> 00:07:18.839 line:-2 align:center
New to iOS 16 and macOS 13,
LocalAuthentication is introducing


134
00:07:18.872 --> 00:07:22.643 line:-1 align:center
a higher level, authorization focused API.


135
00:07:22.676 --> 00:07:26.747 line:-2 align:center
The new API builds on top of existing
concepts in LocalAuthentication


136
00:07:26,780 --> 00:07:31,118 line:-2
such as the LAContext and is geared
towards simplifying the implementation


137
00:07:31.151 --> 00:07:35.289 line:-2 align:center
of common authorization flows,
allowing you to focus all your energy


138
00:07:35,322 --> 00:07:38,725 line:-2
in the core value proposition
of your apps.


139
00:07:38,759 --> 00:07:42,896 line:-2
The most important abstraction introduced
by the new API is the LARight.


140
00:07:44,431 --> 00:07:46,333 align:center
The simplest use case
you can give a LARight


141
00:07:46,366 --> 00:07:51,405 align:center
is to help you authorize operations
on application defined resources.


142
00:07:51,438 --> 00:07:54,408 line:1
For instance, you could use a right
to help you gate access


143
00:07:54,441 --> 00:07:57,010 align:center
to the user profile section
of your application


144
00:07:57,044 --> 00:08:01,114 line:1
by first requiring a successful
biometric authentication from your user.


145
00:08:02,950 --> 00:08:06,854 line:-2
By default, rights are protected by a set
of authentication requirements


146
00:08:06,887 --> 00:08:10,257 line:-2
that allow your users to authenticate
using Touch ID,


147
00:08:10,290 --> 00:08:13,427 line:-2
Face ID, Apple Watch,
or their device passcode


148
00:08:13.460 --> 00:08:15.295 line:-1 align:center
depending on the device they are using.


149
00:08:16,997 --> 00:08:19,099 line:-2
You can also choose
to associate your rights


150
00:08:19,132 --> 00:08:20,868 line:-1
with more granular requirements,


151
00:08:20,901 --> 00:08:24,571 line:-2
which allow you to further constrain
the means of authentication.


152
00:08:24,605 --> 00:08:27,608 line:-2
Let's have a look
at how we can use LARights in code.


153
00:08:29,109 --> 00:08:32,546 line:-2
The first thing that we need to do
is to instantiate our right.


154
00:08:32,579 --> 00:08:35,782 line:-1
We do this by specifying its requirements.


155
00:08:35,816 --> 00:08:39,253 line:-2
In this case, our login right will
require users to authenticate


156
00:08:39,286 --> 00:08:43,457 line:-2
using biometry
or providing the device passcode.


157
00:08:43,490 --> 00:08:48,328 line:-2
We then proceed to verify that the current
user can obtain the login right.


158
00:08:48,362 --> 00:08:50,430 line:-1
We use this information to determine


159
00:08:50.464 --> 00:08:52.866 line:-2 align:center
whether we can continue
with the login operation


160
00:08:52,900 --> 00:08:57,971 line:-2
or if instead we need to redirect
the user to the public section of our app.


161
00:08:58,005 --> 00:09:01,408 line:-2
Finally, we can proceed
with the actual authorize operation


162
00:09:01,441 --> 00:09:04,745 line:-2
providing a localized reason
that will be visible to the user


163
00:09:04,778 --> 00:09:06,380 line:-1
in the authorization UI.


164
00:09:08,081 --> 00:09:09,850 align:center
When authorizing a right in this way,


165
00:09:09,883 --> 00:09:12,986 line:0
a brand-new,
system-driven UI is presented.


166
00:09:13,020 --> 00:09:15,722 align:center
The UI is rendered
inside your application window


167
00:09:15,756 --> 00:09:17,991 line:0
and provides users
with relevant information


168
00:09:18,025 --> 00:09:21,461 line:0
to help them understand
the origin and purpose of the operation.


169
00:09:21,495 --> 00:09:25,165 line:-2
We believe that the new look will
allow you to craft authorization flows


170
00:09:25.199 --> 00:09:27.768 line:-2 align:center
that integrate more seamlessly
with your application


171
00:09:27,801 --> 00:09:31,471 line:-2
and that provide more context
and information for your users.


172
00:09:32.573 --> 00:09:35.242 line:-2 align:center
Now that we have seen how to create
and authorize a right,


173
00:09:35.275 --> 00:09:38.445 line:-1 align:center
let's take a closer look at its lifecycle.


174
00:09:38.478 --> 00:09:42.249 line:-2 align:center
Rights start their lifecycle
in an unknown state.


175
00:09:42.282 --> 00:09:45.018 line:-2 align:center
As soon as your application issues
the authorize request,


176
00:09:45.052 --> 00:09:48.255 line:-2 align:center
the state of the right changes
to authorizing.


177
00:09:48,288 --> 00:09:51,658 line:-2
It is at this point that the user will be
presented with the authorization UI


178
00:09:51,692 --> 00:09:53,393 line:-1
that we saw in the previous slide.


179
00:09:54,595 --> 00:09:57,364 align:center
Depending on the success or failure
of the operation,


180
00:09:57,397 --> 00:10:01,468 line:0
the right may transition
to authorized or notAuthorized state.


181
00:10:01,502 --> 00:10:05,305 line:0
This is the most important
state transition for your application.


182
00:10:05,339 --> 00:10:07,841 line:0
Finally, the right can also move
from the authorized


183
00:10:07,875 --> 00:10:09,910 line:0
to the notAuthorized state.


184
00:10:09,943 --> 00:10:12,279 align:center
This occurs
when your application explicitly issues


185
00:10:12,312 --> 00:10:16,583 align:center
a deauthorize request on the right,
or when the right instance is deallocated.


186
00:10:17,751 --> 00:10:20,187 line:0
Be sure to keep
a strong reference to your right


187
00:10:20,220 --> 00:10:22,723 line:0
in order to preserve its authorized state.


188
00:10:23,924 --> 00:10:27,194 line:0
After a right has been deauthorized,
your application can continue


189
00:10:27,227 --> 00:10:31,098 line:0
to issue authorization requests
to restart the cycle.


190
00:10:31,131 --> 00:10:34,968 line:-2
All the previous state transitions
can be queried and observed.


191
00:10:35,002 --> 00:10:37,104 line:-2
If you have access
to the LARight instance,


192
00:10:37,137 --> 00:10:40,274 line:-1
you can query its state property directly.


193
00:10:40.307 --> 00:10:44.611 line:-2 align:center
You can also observe all state transitions
using KVO or Combine.


194
00:10:44,645 --> 00:10:47,514 line:-2
Additionally, if your application
handles several rights,


195
00:10:47,548 --> 00:10:49,983 line:-2
you can observe the state of all them
from a single place


196
00:10:50.017 --> 00:10:52.119 line:-1 align:center
by listening to the didBecomeAuthorized


197
00:10:52.152 --> 00:10:54.755 line:-2 align:center
and the didBecomeUnauthorized
notifications,


198
00:10:54,788 --> 00:10:57,357 line:-2
which are published
to the default NotificationCenter


199
00:10:57.391 --> 00:11:00.294 line:-2 align:center
after a change
in the authorization state is detected.


200
00:11:01,728 --> 00:11:04,598 line:-2
Before we move on,
let's jump back to our example


201
00:11:04.631 --> 00:11:08.535 line:-2 align:center
and add a logout operation
to deauthorize our login right.


202
00:11:08,569 --> 00:11:11,705 line:-2
By doing this, we guarantee
that a new authorization will be required


203
00:11:11,738 --> 00:11:13,974 line:-1
the next time the user wants to log in.


204
00:11:15.909 --> 00:11:19.346 line:-2 align:center
So far, we have seen
how to use right instances


205
00:11:19.379 --> 00:11:23.517 line:-2 align:center
to authorize operations
on application-defined resources.


206
00:11:23.550 --> 00:11:26.687 line:-2 align:center
We have also seen how the lifecycle
and state of these rights


207
00:11:26,720 --> 00:11:28,789 line:-1
is ultimately tied to the runtime,


208
00:11:28,822 --> 00:11:31,725 line:-2
which means that on every session
of your application,


209
00:11:31,758 --> 00:11:35,963 line:-2
you need to instantiate
and configure these rights correctly.


210
00:11:35,996 --> 00:11:38,265 line:-2
So let's take a look
at how rights can be persisted


211
00:11:38,298 --> 00:11:41,034 line:-2
and what sort of possibilities
this enables for your app.


212
00:11:42,703 --> 00:11:46,073 line:-2
LARights can be persisted
with the help of the right store.


213
00:11:47,608 --> 00:11:51,245 line:-2
When persisted, rights are backed
by a unique Secure Enclave key


214
00:11:51.278 --> 00:11:54.014 line:-2 align:center
that is protected
with an access control list or ACL


215
00:11:54,047 --> 00:11:57,584 line:-2
that matches the authorization
requirements of the right.


216
00:11:57.618 --> 00:12:00.687 line:-2 align:center
This approach helps us ensure
that the authorization requirements


217
00:12:00.721 --> 00:12:03.757 line:-2 align:center
will remain immutable
after the right has been persisted.


218
00:12:05.125 --> 00:12:07.961 line:-2 align:center
You can also access the private key
that backs your right


219
00:12:07,995 --> 00:12:11,331 line:-2
and use it to perform
protected cryptographic operations


220
00:12:11,365 --> 00:12:15,602 line:-2
such as decryption, signature,
and key exchanges.


221
00:12:17.337 --> 00:12:19.773 line:-2 align:center
The corresponding public key
is also accessible


222
00:12:19,806 --> 00:12:21,642 line:-1
and can be used to perform operations


223
00:12:21.675 --> 00:12:25.779 line:-2 align:center
such as encryption
and signature verification.


224
00:12:25.812 --> 00:12:30.350 line:-2 align:center
Because this is a public key, you can
also export the bytes associated with it.


225
00:12:31.885 --> 00:12:33.987 line:-1 align:center
Private key operations are only allowed


226
00:12:34,021 --> 00:12:36,790 line:-2
after the right has been
successfully authorized.


227
00:12:36,823 --> 00:12:40,194 line:-2
In contrast,
public key operations are always allowed.


228
00:12:42,129 --> 00:12:44,965 line:-2
When persisting your right,
you also have a chance of storing


229
00:12:44,998 --> 00:12:48,368 line:-1
a single, immutable secret along with it.


230
00:12:48.402 --> 00:12:51.605 line:-2 align:center
The secret is also associated
with an access control list


231
00:12:51,638 --> 00:12:54,408 line:-2
that matches the authorization
requirements of your right


232
00:12:54,441 --> 00:12:57,978 line:-2
and it only becomes accessible
after the right has been authorized.


233
00:12:59,146 --> 00:13:01,982 line:-2
To summarize,
LAPersistedRights are created


234
00:13:02,015 --> 00:13:03,917 line:-1
with the help of the right store.


235
00:13:03.951 --> 00:13:05.619 line:-1 align:center
They are configured only once


236
00:13:05,652 --> 00:13:08,856 line:-2
and their authorization requirements
are immutable.


237
00:13:08,889 --> 00:13:10,791 line:-1
Because they are stored, they can be used


238
00:13:10,824 --> 00:13:13,260 line:-2
across different sessions
of your application.


239
00:13:13,293 --> 00:13:15,963 line:-2
Internally,
they are bound to a specific device


240
00:13:15,996 --> 00:13:18,665 line:-2
and are backed by a unique
Secure Enclave key


241
00:13:18,699 --> 00:13:21,668 line:-2
which can be used to perform
different cryptographic operations,


242
00:13:21,702 --> 00:13:25,305 line:-2
depending on the authorization status
of the right.


243
00:13:25,339 --> 00:13:28,775 line:-2
Finally, they can be used to protect
a single, immutable secret


244
00:13:28.809 --> 00:13:32.446 line:-2 align:center
that only becomes available
after the right has been authorized.


245
00:13:33,313 --> 00:13:36,817 line:-2
Now that we understand some of
the features offered by persisted rights,


246
00:13:36,850 --> 00:13:38,519 line:-1
let's see how they can help us implement


247
00:13:38,552 --> 00:13:41,255 line:-2
the scenario we discussed
at the beginning of the presentation,


248
00:13:41,288 --> 00:13:43,891 line:-2
where we wanted to authorize
a signature operation.


249
00:13:44,691 --> 00:13:49,730 line:-2
We start by instantiating a regular right
specifying its authorization requirements.


250
00:13:49,763 --> 00:13:52,900 line:-2
In this case, we want to ensure
that the right would only be granted


251
00:13:52.933 --> 00:13:56.003 line:-2 align:center
to users that have biometric enrollments
in the device


252
00:13:56,036 --> 00:13:58,939 line:-2
at the moment of the creation
of our right.


253
00:13:58.972 --> 00:14:01.742 line:-2 align:center
Therefore, we use
the biometryCurrentSet requirement.


254
00:14:03,177 --> 00:14:06,013 line:-2
We can then persist the right
with the help of the right store,


255
00:14:06.046 --> 00:14:08.615 line:-1 align:center
providing a unique identifier.


256
00:14:08.649 --> 00:14:12.119 line:-2 align:center
This identifier will be useful
the next time we need to fetch the right


257
00:14:12,152 --> 00:14:14,254 line:-1
in future sessions of our application.


258
00:14:15,622 --> 00:14:19,126 line:-2
Once the right is persisted,
we get immediate access to its public key


259
00:14:19,159 --> 00:14:22,095 line:-2
and can start performing
unprotected operations with it,


260
00:14:22,129 --> 00:14:25,199 line:-2
without the need
for an explicit authorization.


261
00:14:25,232 --> 00:14:28,535 line:-2
In this example, we are simply
exporting its public bytes.


262
00:14:30,437 --> 00:14:33,540 line:-2
Later on, when it's time to perform
a signature operation,


263
00:14:33.574 --> 00:14:35.642 line:-1 align:center
we can retrieve our right from the store


264
00:14:35.676 --> 00:14:39.813 line:-2 align:center
using the unique identifier we provided
during creation.


265
00:14:39,847 --> 00:14:42,149 line:-2
We can then proceed to authorize
the current user


266
00:14:42,182 --> 00:14:45,085 line:-2
through the authorize operation
on our right.


267
00:14:45.118 --> 00:14:48.388 line:-2 align:center
At this point, the system will walk the
user through the authentication process


268
00:14:48.422 --> 00:14:52.226 line:-2 align:center
and will verify that all the authorization
requirements are satisfied.


269
00:14:53.227 --> 00:14:55.996 line:-2 align:center
After the right has been authorized,
we can use its private key


270
00:14:56.029 --> 00:14:59.299 line:-2 align:center
to perform
protected cryptographic operations.


271
00:14:59,333 --> 00:15:02,236 line:-2
In this case, we are using the private key
to sign a challenge


272
00:15:02,269 --> 00:15:05,172 line:-2
issued by the backend server
of our application.


273
00:15:06.106 --> 00:15:09.376 line:-2 align:center
To wrap up, we talked about
the relationship that exists


274
00:15:09,409 --> 00:15:13,013 line:-2
between the generic concepts
of authentication and authorization,


275
00:15:13.046 --> 00:15:17.885 line:-2 align:center
and particularly how authentication
enables authorization.


276
00:15:17.918 --> 00:15:20.988 line:-2 align:center
We went over some of the features
offered by the LAContext


277
00:15:21,021 --> 00:15:23,657 line:-2
and how it can be combined
with frameworks such as Security


278
00:15:23,690 --> 00:15:27,561 line:-2
to unlock very powerful
and extensible authorization flows.


279
00:15:27.594 --> 00:15:30.697 line:-2 align:center
And finally, we looked into how
the newly added LARight


280
00:15:30.731 --> 00:15:32.332 line:-1 align:center
could help you streamline the code


281
00:15:32.366 --> 00:15:35.302 line:-2 align:center
to implement
certain authorization use cases.


282
00:15:35,335 --> 00:15:39,306 line:-2
We invite you take a look
at existing usages of LocalAuthentication


283
00:15:39.339 --> 00:15:42.843 line:-2 align:center
in your app and consider whether
some of the features we discussed today


284
00:15:42,876 --> 00:15:44,578 line:-1
can help you simplify your code


285
00:15:44.611 --> 00:15:48.215 line:-2 align:center
while still protecting
the privacy and security of your users.


286
00:15:48,248 --> 00:15:49,249 line:-1
Thanks.

