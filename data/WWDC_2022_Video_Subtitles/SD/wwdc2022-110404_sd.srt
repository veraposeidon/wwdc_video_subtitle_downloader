2
00:00:00.334 --> 00:00:06.340 line:-1 align:center
♪ instrumental hip hop music ♪


3
00:00:09.309 --> 00:00:11.245 line:-1 align:center
Hi, I’m David Wendland,


4
00:00:11.278 --> 00:00:14.414 line:-2 align:center
a Commerce Technical Advocate
for the App Store.


5
00:00:14.448 --> 00:00:18.452 line:-2 align:center
Today, I’ll show you how your app
can deliver a first class experience


6
00:00:18.485 --> 00:00:21.555 line:-2 align:center
by proactively identifying
a customer's new, current,


7
00:00:21,588 --> 00:00:25,859 line:-2
and past purchases,
without the customer taking any action.


8
00:00:25.893 --> 00:00:30.330 line:-2 align:center
I’ll cover how to do this with StoreKit 2
and the original StoreKit,


9
00:00:30,364 --> 00:00:33,100 line:-2
so you can optimize
your app's onboarding experience


10
00:00:33.133 --> 00:00:36.003 line:-1 align:center
for all your customers.


11
00:00:36.036 --> 00:00:39.907 line:-2 align:center
Let me start by defining
proactive in-app purchase restore.


12
00:00:39.940 --> 00:00:42.309 line:-2 align:center
This means that when
a customer launches your app,


13
00:00:42.342 --> 00:00:45.946 line:-2 align:center
you use the data readily available,
on device,


14
00:00:45,979 --> 00:00:48,582 line:-1
to proactively check for the transactions


15
00:00:48.615 --> 00:00:53.420 line:-2 align:center
in order to determine
if they are a new or existing customer


16
00:00:53.453 --> 00:00:56.557 line:-2 align:center
and doing so
without requiring any customer action,


17
00:00:56.590 --> 00:01:01.328 line:-2 align:center
not even tapping a "Restore Purchases"
button or entering a password.


18
00:01:01,361 --> 00:01:04,164 line:-2
This enables you
to tailor your app experience


19
00:01:04.198 --> 00:01:07.801 line:-2 align:center
to your customer's purchase history
and state


20
00:01:07,835 --> 00:01:12,039 line:-2
so your app unlocks products or services
for your current customers,


21
00:01:12.072 --> 00:01:16.743 line:-2 align:center
or your app merchandises your latest
product offering to new customers,


22
00:01:16,777 --> 00:01:18,345 line:-1
or for those past subscribers,


23
00:01:18.378 --> 00:01:21.815 line:-2 align:center
you present them subscription offers
to win them back.


24
00:01:21,849 --> 00:01:24,418 line:-1
This is what proactive restore is about,


25
00:01:24.451 --> 00:01:27.221 line:-2 align:center
using StoreKit to optimize
your app's experience


26
00:01:27.254 --> 00:01:33.360 line:-2 align:center
for new, existing, and past customers,
on all of their devices, automatically.


27
00:01:33.393 --> 00:01:35.462 line:-1 align:center
Let’s look at this example.


28
00:01:35.495 --> 00:01:38.232 line:-1 align:center
Here we have our Ocean Journal app.


29
00:01:38,265 --> 00:01:40,667 line:-1
This is a common merchandising experience,


30
00:01:40.701 --> 00:01:44.304 line:-2 align:center
where the customer has a few different
calls to action to choose from.


31
00:01:44,338 --> 00:01:47,107 align:center
Either I can attempt
to buy the in-app purchase


32
00:01:47,140 --> 00:01:50,777 line:0
and authenticate with biometrics,
such as FaceID,


33
00:01:50,811 --> 00:01:52,412 line:0
or if I’ve created an app account,


34
00:01:52,446 --> 00:01:56,250 line:0
I could sign in and possibly use Keychain
to enter my password,


35
00:01:56,283 --> 00:01:58,652 line:0
or if I believe I’m an active subscriber,


36
00:01:58,685 --> 00:02:01,388 line:0
I could use the "Restore Purchases"
button.


37
00:02:01.421 --> 00:02:03.757 line:-2 align:center
For your active subscribers
on a new device,


38
00:02:03.790 --> 00:02:07.427 line:-2 align:center
knowing which option to choose
isn’t always clear to them.


39
00:02:07.461 --> 00:02:10.297 line:-2 align:center
And with the data readily available
to your app,


40
00:02:10,330 --> 00:02:12,199 line:-1
this experience can be streamlined


41
00:02:12,232 --> 00:02:15,469 line:-2
with our proactive in-app
purchase restore best practice.


42
00:02:16,036 --> 00:02:21,475 line:-2
So, if I launched this app on a new device
but was already an active subscriber,


43
00:02:21,508 --> 00:02:26,013 line:-2
upon launch, the app would proactively
restore my service, automatically,


44
00:02:26,046 --> 00:02:28,649 line:-1
without requiring any action from me.


45
00:02:28,682 --> 00:02:31,318 line:-2
So here the app recognized
my Pro subscription


46
00:02:31,351 --> 00:02:34,488 line:-2
and loaded my favorite beach,
complete with surf conditions


47
00:02:34,521 --> 00:02:36,990 line:-1
and enabled the live cam feature.


48
00:02:37.024 --> 00:02:41.061 line:-2 align:center
This experience differentiates
your app from the others


49
00:02:41.094 --> 00:02:45.899 line:-2 align:center
and I will cover how to do this
with StoreKit 2 on iOS 15 and newer.


50
00:02:45.933 --> 00:02:49.636 line:-2 align:center
Additionally, if your app supports
previous versions of iOS,


51
00:02:49,670 --> 00:02:51,905 line:-2
I will cover how to create this same
great experience


52
00:02:51.939 --> 00:02:55.542 line:-2 align:center
with original StoreKit
and the verifyReceipt endpoint.


53
00:02:55.576 --> 00:02:58.178 line:-2 align:center
With that background,
here’s what I’ll cover.


54
00:02:58,212 --> 00:03:02,149 line:-2
First, I’ll describe in detail
the core customer product states


55
00:03:02,182 --> 00:03:06,019 line:-2
that your app uses
to generate personalized experiences


56
00:03:06,053 --> 00:03:10,257 line:-2
based on the customer's in-app purchases
with StoreKit.


57
00:03:10,290 --> 00:03:14,194 line:-2
Then I'll review the steps to implement,
using StoreKit 2,


58
00:03:14.228 --> 00:03:19.132 line:-2 align:center
complete with sample code
using the SK Demo app.


59
00:03:19.166 --> 00:03:21.335 line:-2 align:center
Let’s look at each in-app purchase type,
their core customer product states,


60
00:03:23,370 --> 00:03:27,975 line:-2
and review a few examples of
a personalized onboarding experience.


61
00:03:28.008 --> 00:03:30.711 line:-2 align:center
To start,
the in-app purchase types that apply


62
00:03:30.744 --> 00:03:35.148 line:-2 align:center
to proactive restore are non-consumables,
non-renewing subscriptions,


63
00:03:35.182 --> 00:03:37.217 line:-1 align:center
and auto-renewable subscriptions,


64
00:03:37,251 --> 00:03:40,454 line:-2
as they are all persistent
in the customer's transaction history


65
00:03:40,487 --> 00:03:43,056 line:-2
and will always be available
with StoreKit.


66
00:03:43.090 --> 00:03:46.994 line:-2 align:center
Therefore your app can identify
per customer their purchase state


67
00:03:47,027 --> 00:03:51,298 line:-1
for each product or subscription group.


68
00:03:51.331 --> 00:03:54.001 line:-2 align:center
For non-renewing and auto-renewable
subscriptions,


69
00:03:54,034 --> 00:03:57,104 line:-2
I will use the term "subscriptions"
to reference them both


70
00:03:57.137 --> 00:04:01.608 line:-1 align:center
as we review the customer product states.


71
00:04:01.642 --> 00:04:05.078 line:-2 align:center
Here are the three core states your app
can personalize against.


72
00:04:05.112 --> 00:04:08.549 line:-1 align:center
Let’s review in-depth new customers.


73
00:04:08,582 --> 00:04:11,785 line:-2
This state represents
a signed in App Store Apple ID


74
00:04:11,818 --> 00:04:16,456 line:-2
that does not have any current
or past in-app purchase transactions.


75
00:04:16.490 --> 00:04:21.328 line:-2 align:center
This state is typically used as the app’s
default merchandising experience.


76
00:04:21,361 --> 00:04:25,599 line:-2
Our Ocean Journal app is merchandising
its monthly and annual subscription


77
00:04:25.632 --> 00:04:28.268 line:-1 align:center
with a one month free trial.


78
00:04:28.302 --> 00:04:33.307 line:-2 align:center
Looking at our second core state,
we have Purchased and Active Subscriber.


79
00:04:33,340 --> 00:04:36,210 line:-2
In this state,
a customer has an active transaction


80
00:04:36,243 --> 00:04:39,046 line:-2
and your app is obligated
to grant the customer access


81
00:04:39,079 --> 00:04:41,548 line:-1
to the purchased product or service.


82
00:04:41,582 --> 00:04:44,852 line:-2
Here, our Ocean Journal app
immediately presents the customer


83
00:04:44.885 --> 00:04:48.722 line:-2 align:center
their preferred beach
with the premium live beach cam.


84
00:04:48,755 --> 00:04:53,560 line:-2
No buy buttons are visible,
as service was proactively restored.


85
00:04:53.594 --> 00:04:56.263 line:-2 align:center
For each purchased product
or active subscription,


86
00:04:56.296 --> 00:05:00.501 line:-2 align:center
the transaction has a static
and unique original transaction ID,


87
00:05:00,534 --> 00:05:04,505 line:-2
which persists for the customer's
Apple ID and storefront.


88
00:05:04.538 --> 00:05:07.274 line:-2 align:center
To maintain status
of the customer's transactions,


89
00:05:07.307 --> 00:05:12.012 line:-2 align:center
associate the original transaction IDs
with an account on your system.


90
00:05:12.045 --> 00:05:14.147 line:-1 align:center
It can be either an anonymous account,


91
00:05:14.181 --> 00:05:17.017 line:-2 align:center
or an account that the user created
with your system.


92
00:05:17.050 --> 00:05:20.053 line:-2 align:center
Knowing the original transaction ID
is critical


93
00:05:20,087 --> 00:05:23,290 line:-2
when leveraging the power
of App Store Server Notifications,


94
00:05:23.323 --> 00:05:27.194 line:-2 align:center
allowing your server to remain current
on the transaction status.


95
00:05:27.227 --> 00:05:30.397 line:-2 align:center
One scenario to highlight
is when a customer's subscription


96
00:05:30.430 --> 00:05:32.199 line:-1 align:center
failed to auto-renew,


97
00:05:32,232 --> 00:05:35,836 line:-2
therefore it falls into
what we call the billing retry state,


98
00:05:35.869 --> 00:05:39.740 line:-2 align:center
where we attempt to recover
the subscription for up to 60 days.


99
00:05:39.773 --> 00:05:43.544 line:-2 align:center
If you have opted in to the Billing
grace period feature in App Store Connect,


100
00:05:43.577 --> 00:05:46.046 line:-2 align:center
then subscribers in billing retry
with grace period


101
00:05:46.079 --> 00:05:48.949 line:-2 align:center
would continue to have access
to their subscription service,


102
00:05:48.982 --> 00:05:52.119 line:-2 align:center
while we attempt to recover
their subscription.


103
00:05:52.152 --> 00:05:54.688 line:-2 align:center
And while they have still access
to your service,


104
00:05:54.721 --> 00:05:57.291 line:-2 align:center
be sure to present them
a simple call to action


105
00:05:57,324 --> 00:05:59,459 line:-1
to resolve their payment issue.


106
00:05:59.493 --> 00:06:02.596 line:-2 align:center
To learn more about Billing retry and
Billing grace period,


107
00:06:02,629 --> 00:06:04,598 line:-1
check out our sessions links and resources


108
00:06:04.631 --> 00:06:08.569 line:-2 align:center
about reducing involuntary
subscriber loss.


109
00:06:08,602 --> 00:06:13,574 line:-2
The final core state is the inactive
purchase or inactive subscriber.


110
00:06:13,607 --> 00:06:17,678 line:-2
This state represents customers
who previously made in-app purchases,


111
00:06:17,711 --> 00:06:20,747 line:-2
but are no longer entitled
to that product or service,


112
00:06:20.781 --> 00:06:23.984 line:-1 align:center
due to expiry or if revoked.


113
00:06:24.017 --> 00:06:28.188 line:-2 align:center
These transactions are persistent
and contain an original transaction ID,


114
00:06:28.222 --> 00:06:32.893 line:-2 align:center
which allows you to maintain status
across devices and platforms.


115
00:06:32,926 --> 00:06:37,130 line:-2
For Subscriptions, inactive is determined
by the expires date.


116
00:06:37,164 --> 00:06:38,966 line:-1
And for all in-app purchase types,


117
00:06:38,999 --> 00:06:42,135 line:-2
they can be inactive
if there is a revocation date.


118
00:06:42.169 --> 00:06:44.638 line:-2 align:center
This occurs when a transaction
has been refunded


119
00:06:44,671 --> 00:06:48,575 line:-2
or if access granted through
Family Sharing has been revoked.


120
00:06:48,609 --> 00:06:52,746 line:-2
For your inactive subscribers,
due to expiration or revoked,


121
00:06:52.779 --> 00:06:56.250 line:-2 align:center
consider presenting
subscription offers to win them back.


122
00:06:56.283 --> 00:06:58.519 line:-1 align:center
And for those in the billing retry state,


123
00:06:58.552 --> 00:07:01.221 line:-2 align:center
don’t forget to present them
that same call to action


124
00:07:01,255 --> 00:07:03,891 line:-1
to resolve their payment details.


125
00:07:03,924 --> 00:07:08,562 line:-2
In review, here are the three core
customer product states your app will use


126
00:07:08,595 --> 00:07:11,465 line:-1
to proactively restore in-app purchases


127
00:07:11,498 --> 00:07:15,068 line:-2
and tailor your app's experience
to your customers.


128
00:07:15.102 --> 00:07:19.473 line:-2 align:center
Let's see how these experiences look
side-by-side with our Ocean Journal app.


129
00:07:21,475 --> 00:07:26,146 line:0
New customers will see your latest
product offering and introductory offers.


130
00:07:26,180 --> 00:07:29,616 align:center
Your current active customers
will have the feeling it just works,


131
00:07:29,650 --> 00:07:33,187 align:center
as your app has streamlined access
to your products and services


132
00:07:33,220 --> 00:07:35,289 align:center
on all of their devices.


133
00:07:35,322 --> 00:07:37,257 line:0
And for your inactive subscribers,


134
00:07:37,291 --> 00:07:39,826 align:center
you can present them
your latest win-back offers


135
00:07:39,860 --> 00:07:42,763 line:0
using offer codes or promotional offers.


136
00:07:43,363 --> 00:07:46,967 line:-2
Okay, we’ve covered
the three core customer product states,


137
00:07:47.000 --> 00:07:50.971 line:-2 align:center
and how supporting these states alone
is a huge win for your customers.


138
00:07:51,004 --> 00:07:54,775 line:-2
But of course, there are opportunities
to take the experience further.


139
00:07:54,808 --> 00:07:57,611 line:-2
Your app could expand
or refine the customer experience


140
00:07:57.644 --> 00:08:00.414 line:-2 align:center
to fit your product offering,
business model,


141
00:08:00.447 --> 00:08:02.883 line:-1 align:center
policies, and prioritizations.


142
00:08:02.916 --> 00:08:04.885 line:-1 align:center
But here are few things to consider


143
00:08:04,918 --> 00:08:08,655 line:-2
when preparing to implement
proactive restore into your app.


144
00:08:09,756 --> 00:08:12,726 line:-2
If you support multiple products
or subscription groups,


145
00:08:12.759 --> 00:08:18.098 line:-2 align:center
the customer's state is determined for
each product and each subscription group.


146
00:08:18,131 --> 00:08:20,567 line:-2
Therefore, you may need
to account for hybrid states


147
00:08:20.601 --> 00:08:23.937 line:-1 align:center
or any other dependencies.


148
00:08:23,971 --> 00:08:26,240 line:-1
Consider any off-platform activity


149
00:08:26,273 --> 00:08:30,377 line:-2
and how that factors into
your customer's product state.


150
00:08:30.410 --> 00:08:33.280 line:-2 align:center
And be sure to check out
App Store Server Notifications,


151
00:08:33.313 --> 00:08:36.683 line:-2 align:center
as these are critical to maintaining
status, server-to-server,


152
00:08:36,717 --> 00:08:39,319 line:-1
for all in-app purchase types.


153
00:08:39,353 --> 00:08:43,090 line:-2
And with Version
2, the new notification types and subtypes


154
00:08:43.123 --> 00:08:45.292 line:-1 align:center
support 28 unique events,


155
00:08:45.325 --> 00:08:48.929 line:-2 align:center
sent securely to your server
in near real time.


156
00:08:48,962 --> 00:08:52,399 line:0
Learn more about integrating
or migrating to Version 2


157
00:08:52,432 --> 00:08:56,970 align:center
in the session, "Explore in-app purchase
integration and migration."


158
00:08:57,004 --> 00:09:00,274 align:center
Alex and Gabriel also cover compatibility
with StoreKit 2


159
00:09:00,307 --> 00:09:04,278 align:center
and the original StoreKit framework,
and best practices.


160
00:09:04.311 --> 00:09:07.614 line:-2 align:center
We’ve talked through
the customer product states to support


161
00:09:07.648 --> 00:09:11.151 line:-2 align:center
and what that experience can be
for your customers.


162
00:09:11.185 --> 00:09:14.221 line:-2 align:center
Now let’s walk through
the implementation details.


163
00:09:14.254 --> 00:09:16.323 line:-1 align:center
I’ll be using our SK Demo App


164
00:09:16.356 --> 00:09:20.027 line:-2 align:center
that we’ve updated with proactive restore
using StoreKit 2.


165
00:09:20.060 --> 00:09:24.565 line:-2 align:center
Note that the SK Demo app will be
available for download with this session.


166
00:09:24.598 --> 00:09:28.569 line:-2 align:center
Let's review the SK Demo’s
default experience for new customers,


167
00:09:28,602 --> 00:09:31,405 line:-1
those without any active in-app purchases.


168
00:09:31,438 --> 00:09:34,942 align:center
To view our products,
tap the “Shop” button,


169
00:09:34,975 --> 00:09:38,045 line:-2
where up top we have our inventory
of available cars


170
00:09:38,078 --> 00:09:41,114 line:-1
as non-consumable in-app purchases.


171
00:09:41,148 --> 00:09:45,519 line:-2
And then we have our navigation service
as a monthly auto-renewable subscription,


172
00:09:45.552 --> 00:09:50.190 line:-2 align:center
which offers three different levels
of service for customers to choose from.


173
00:09:50,224 --> 00:09:53,293 line:0
And down below, we have
a non-renewing subscription option,


174
00:09:53,327 --> 00:09:55,729 line:0
providing one-time access.


175
00:09:55,762 --> 00:09:58,398 align:center
This covers our app's
new customer experience,


176
00:09:58,432 --> 00:10:00,901 line:0
when no products have been purchased.


177
00:10:00.934 --> 00:10:03.904 line:-2 align:center
Now let's look at
how our app is able to determine


178
00:10:03.937 --> 00:10:07.708 line:-2 align:center
if the customer has current
or past purchases.


179
00:10:07,741 --> 00:10:10,310 line:-2
It requires your app
to execute three steps


180
00:10:10.344 --> 00:10:12.646 line:-1 align:center
immediately upon app launch.


181
00:10:12,679 --> 00:10:15,649 line:-2
What is most important
is that these steps are completed


182
00:10:15.682 --> 00:10:19.119 line:-2 align:center
before a "Buy" button is merchandised
to the customer.


183
00:10:19.853 --> 00:10:22.456 line:-2 align:center
The first step is your app
will need to begin listening


184
00:10:22,489 --> 00:10:25,425 line:-1
for transactions from the App Store.


185
00:10:25,459 --> 00:10:30,430 line:-2
This is an App Store best practice,
as transactions can show up at any time


186
00:10:30.464 --> 00:10:33.166 line:-2 align:center
from features such as
Family Sharing Ask to Buy,


187
00:10:33.200 --> 00:10:35.936 line:-2 align:center
code redemptions,
subscription auto-renewals,


188
00:10:35.969 --> 00:10:38.539 line:-1 align:center
or when a purchase gets interrupted.


189
00:10:38.572 --> 00:10:41.975 line:-2 align:center
In addition, your app can receive revoked
transactions,


190
00:10:42.009 --> 00:10:44.211 line:-1 align:center
where access is lost due to a refund


191
00:10:44,244 --> 00:10:47,347 line:-1
or is no longer shared via Family sharing.


192
00:10:47,381 --> 00:10:49,883 line:-2
This will apply more
in subsequent app launches,


193
00:10:49.917 --> 00:10:52.152 line:-1 align:center
when access has already been granted


194
00:10:52.186 --> 00:10:56.356 line:-2 align:center
and their state is moving
from active to inactive.


195
00:10:56.390 --> 00:11:00.527 line:-2 align:center
If transactions are found, they are
considered unfinished transactions,


196
00:11:00.561 --> 00:11:03.330 line:-2 align:center
and need to be validated,
delivered to the customer,


197
00:11:03,363 --> 00:11:05,599 line:-1
and marked as finished.


198
00:11:05.632 --> 00:11:08.435 line:-2 align:center
This ensures your app
won’t miss any transactions


199
00:11:08,468 --> 00:11:10,971 line:-1
and delivers a great customer experience.


200
00:11:11,004 --> 00:11:16,043 line:-2
Now let’s look at how our SK Demo app
listens for transactions in StoreKit 2.


201
00:11:16.076 --> 00:11:18.946 line:-2 align:center
Here I’m using the function
listenForTransactions.


202
00:11:18.979 --> 00:11:23.684 line:-2 align:center
It will return any unfinished transactions
or updates to a transaction


203
00:11:23.717 --> 00:11:26.787 line:-1 align:center
for the signed-in App Store customer.


204
00:11:26,820 --> 00:11:28,622 line:-1
For any transactions found,


205
00:11:28.655 --> 00:11:32.626 line:-2 align:center
here, StoreKit 2 will verify
the authenticity of these transactions.


206
00:11:32.659 --> 00:11:35.696 line:-2 align:center
And then,
after my app delivers the content,


207
00:11:35,729 --> 00:11:38,765 line:-2
grants access,
or updates the customer product status,


208
00:11:38,799 --> 00:11:40,667 line:-1
I will then finish the transaction


209
00:11:40,701 --> 00:11:44,872 line:-2
to indicate to the App Store
that the purchase has been delivered.


210
00:11:44.905 --> 00:11:48.642 line:-2 align:center
Once a transaction is finished,
it will no longer be returned to your app,


211
00:11:48.675 --> 00:11:51.812 line:-1 align:center
on any device, via StoreKit.


212
00:11:51.845 --> 00:11:54.448 line:-1 align:center
That first step is critical for all apps


213
00:11:54.481 --> 00:11:58.185 line:-2 align:center
and will occur on every app launch
going forward.


214
00:11:58.218 --> 00:12:01.922 line:-2 align:center
Step 2 is determining
that customer product state,


215
00:12:01.955 --> 00:12:06.326 line:-2 align:center
and this is done by proactively requesting
the customer's active transactions


216
00:12:06.360 --> 00:12:08.529 line:-1 align:center
using currentEntitlements.


217
00:12:08,562 --> 00:12:11,365 line:-2
And specifically for auto-renewable
subscriptions,


218
00:12:11.398 --> 00:12:13.367 line:-2 align:center
to account for
the customer's renewal state,


219
00:12:13.400 --> 00:12:16.737 line:-2 align:center
such as cancelled,
billing retry, or pending downgrades,


220
00:12:16.770 --> 00:12:22.576 line:-2 align:center
you will additionally use
Product.SubscriptionInfo.RenewalState.


221
00:12:22.609 --> 00:12:27.214 line:-2 align:center
Let’s look at the SK Demo app
and see how we accomplish this.


222
00:12:27.247 --> 00:12:30.651 line:-2 align:center
This starts with the function,
updateCustomerProductStatus,


223
00:12:30,684 --> 00:12:33,687 line:-2
which keeps track
of the customer's product states


224
00:12:33,720 --> 00:12:37,758 line:-2
for each of our persistent
in-app purchase types.


225
00:12:37.791 --> 00:12:40.427 line:-2 align:center
I then loop through
each of the purchase types


226
00:12:40,460 --> 00:12:43,997 line:-2
using StoreKit 2’s
currentEntitlements method.


227
00:12:44,031 --> 00:12:49,603 line:-2
This returns transactions for products
that the customer may be entitled to.


228
00:12:49,636 --> 00:12:52,940 align:center
And we record these transactions
per product type.


229
00:12:52,973 --> 00:12:55,642 line:0
Here, for our non-consumables products,


230
00:12:55,676 --> 00:12:58,846 line:0
and here for our non-renewing
subscription product.


231
00:12:58,879 --> 00:13:03,350 align:center
In order to determine if they are
an active, or inactive subscriber,


232
00:13:03,383 --> 00:13:06,553 align:center
I’ve added additional logic
to calculate an expiration date


233
00:13:06,587 --> 00:13:09,423 align:center
for our non-renewing subscription.


234
00:13:09.456 --> 00:13:14.294 line:-2 align:center
And lastly, I will check for
an active auto-renewable subscription,


235
00:13:14,328 --> 00:13:17,731 line:-2
and apply that state to
the subscription group.


236
00:13:17,764 --> 00:13:22,202 line:-2
To account for inactive states such as
billing retry, expired, and revoked,


237
00:13:22.236 --> 00:13:24.738 line:-2 align:center
our variable subscription
group status uses


238
00:13:24,771 --> 00:13:29,176 line:-1
Product.SubscriptionInfo.RenewalState


239
00:13:29.209 --> 00:13:31.411 line:-2 align:center
Now that we've retrieved
the user's transactions


240
00:13:31.445 --> 00:13:35.682 line:-2 align:center
and determined the customer status
for each product or subscription group,


241
00:13:35.716 --> 00:13:38.519 line:-2 align:center
our app has logic
to personalize the app experience


242
00:13:38.552 --> 00:13:40.687 line:-1 align:center
for the various use cases.


243
00:13:40,721 --> 00:13:44,791 line:-2
Let’s take a look at
the SK Demo app source code.


244
00:13:44.825 --> 00:13:46.994 line:-1 align:center
If no active transactions are determined


245
00:13:47,027 --> 00:13:49,796 line:-2
for all three in-app purchase
product types,


246
00:13:49.830 --> 00:13:52.900 line:-2 align:center
the customer will then see
the default new customer experience


247
00:13:52.933 --> 00:13:54.868 line:-1 align:center
that we reviewed earlier,


248
00:13:54.902 --> 00:13:58.672 line:-2 align:center
where they will have a simple
call to action to our "Shop" page.


249
00:13:58,705 --> 00:14:01,175 line:-1
If the customer has any active purchases,


250
00:14:01,208 --> 00:14:04,144 line:-2
then upon app launch,
they will see their purchases


251
00:14:04.178 --> 00:14:08.015 line:-2 align:center
and update "Buy" buttons
on all products accordingly.


252
00:14:08.048 --> 00:14:11.585 line:-2 align:center
So here for non-consumables,
we present what they’ve purchased


253
00:14:11.618 --> 00:14:14.421 line:-2 align:center
and the app either shows
their purchased non-consumables,


254
00:14:14.454 --> 00:14:16.190 line:-1 align:center
or the app provides a call to action


255
00:14:16,223 --> 00:14:19,092 line:-2
for the customer to visit
the shop experience.


256
00:14:19.126 --> 00:14:21.695 line:-2 align:center
For active products,
here we handle if the customer is


257
00:14:21.728 --> 00:14:25.199 line:-2 align:center
an active subscriber
of the navigation service


258
00:14:25,232 --> 00:14:29,102 line:-2
for non-renewable subscriptions
and auto-renewable subscriptions.


259
00:14:29.136 --> 00:14:32.439 line:-2 align:center
And in our last portion,
we account for inactive subscribers.


260
00:14:32,472 --> 00:14:35,676 line:-2
Those with subscriptions
that have expired, been revoked,


261
00:14:35.709 --> 00:14:38.612 line:-1 align:center
or are in the billing retry state.


262
00:14:38.645 --> 00:14:41.915 line:-1 align:center
Okay, let's now go to the SK Demo app.


263
00:14:41.949 --> 00:14:44.184 line:-1 align:center
We want to simulate an active customer


264
00:14:44.218 --> 00:14:48.422 line:-2 align:center
for both a non-consumable
and auto-renewable subscription.


265
00:14:48.455 --> 00:14:52.226 line:-2 align:center
So if I purchase the race car
and subscribe to the pro navigation,


266
00:14:52,259 --> 00:14:54,595 line:-1
the demo app will apply green checkmarks


267
00:14:54,628 --> 00:14:59,132 line:-2
to indicate the app has confirmed
those purchases were successful, verified,


268
00:14:59.166 --> 00:15:01.068 line:-1 align:center
and has enabled them.


269
00:15:01.101 --> 00:15:03.570 line:-2 align:center
With these purchases,
my customer product state


270
00:15:03.604 --> 00:15:06.440 line:-1 align:center
for the non-consumable is purchased.


271
00:15:06.473 --> 00:15:10.177 line:-2 align:center
And for our subscription,
I’m an active subscriber.


272
00:15:10.210 --> 00:15:12.546 line:-1 align:center
Now, if I install the app on a new device,


273
00:15:12.579 --> 00:15:15.349 line:-2 align:center
when I launch the SK Demo app
for the first time,


274
00:15:15.382 --> 00:15:19.720 line:-2 align:center
it will proactively perform
steps one, two, and three.


275
00:15:19,753 --> 00:15:24,324 line:-2
Here you see our demo app has proactively
restored access to both of my purchases,


276
00:15:24,358 --> 00:15:26,360 line:-1
without any action from me.


277
00:15:26.393 --> 00:15:27.828 line:-1 align:center
As this is a demo app,


278
00:15:27,861 --> 00:15:30,597 line:-2
that is the extent of products
being delivered.


279
00:15:30.631 --> 00:15:33.800 line:-2 align:center
But in your app, this process would ensure
these active customers


280
00:15:33.834 --> 00:15:37.337 line:-2 align:center
are not offered products to purchase
that they already own,


281
00:15:37,371 --> 00:15:41,308 line:-2
and that those products and services
are enabled for them automatically.


282
00:15:41,875 --> 00:15:44,111 line:-1
For your current customers, this is great.


283
00:15:44,144 --> 00:15:48,015 line:-2
No need to require customers to sign-in
or tap "Restore Purchases."


284
00:15:48.048 --> 00:15:49.316 line:-1 align:center
It just worked.


285
00:15:49.349 --> 00:15:53.921 line:-2 align:center
Your app can use
the APIs and data readily available.


286
00:15:53,954 --> 00:15:57,391 line:-2
So we’ve covered the three steps
to do this with StoreKit 2.


287
00:15:57,424 --> 00:16:01,328 line:-2
Now I want to discuss how to implement
this same experience for your customers


288
00:16:01,361 --> 00:16:03,430 line:-1
on previous versions of iOS


289
00:16:03.463 --> 00:16:05.999 line:-2 align:center
where you cannot leverage
the power of StoreKit 2.


290
00:16:06.800 --> 00:16:10.437 line:-2 align:center
With original StoreKit, you will perform
the same steps as StoreKit 2


291
00:16:10,470 --> 00:16:12,172 line:-1
to determine the customer product state


292
00:16:12.206 --> 00:16:17.411 line:-2 align:center
by proactively restoring in-app purchases
on iOS 7 or later.


293
00:16:17.444 --> 00:16:22.015 line:-2 align:center
To do this, it will require your server
to use the verifyReceipt endpoint


294
00:16:22,049 --> 00:16:25,352 line:-2
to validate and retrieve
the latest transactions


295
00:16:25,385 --> 00:16:29,556 line:-2
in order to determine
customer's product state.


296
00:16:29.590 --> 00:16:34.294 line:-2 align:center
The app receipt is present on-device
when an app is installed from App Store.


297
00:16:34,328 --> 00:16:37,998 line:-2
But keep in mind,
when testing with Sandbox or TestFlight,


298
00:16:38.031 --> 00:16:39.867 line:-1 align:center
the app receipt is only present


299
00:16:39.900 --> 00:16:43.704 line:-2 align:center
after an in-app purchase
has been completed or restored.


300
00:16:43,737 --> 00:16:48,509 line:-2
If your app finds no app receipt present,
this should only occur in Sandbox


301
00:16:48.542 --> 00:16:52.312 line:-2 align:center
and your app can consider this scenario
the same as a new customer


302
00:16:52.346 --> 00:16:55.883 line:-1 align:center
where no in-app purchases are found.


303
00:16:55.916 --> 00:16:58.252 line:-2 align:center
An app receipt
created in the past is sufficient


304
00:16:58,285 --> 00:17:01,555 line:-2
to retrieve the latest transactions
from the App Store.


305
00:17:01.588 --> 00:17:04.424 line:-2 align:center
Therefore, no customer actions
like a "Restore Purchase,"


306
00:17:04,458 --> 00:17:06,693 line:-1
or receiptRefresh are necessary.


307
00:17:06,727 --> 00:17:10,631 line:-2
Just include the shared secret
with your request to verifyReceipt


308
00:17:10,664 --> 00:17:13,367 line:-2
in order to receive
transactions


309
00:17:13.400 --> 00:17:16.136 line:-2 align:center
for non-consumables,
non-renewing subscriptions,


310
00:17:16.170 --> 00:17:19.006 line:-1 align:center
and auto-renewable subscriptions.


311
00:17:19.039 --> 00:17:23.610 line:-2 align:center
Let’s look back at the three
implementation steps we reviewed earlier.


312
00:17:23,644 --> 00:17:25,712 line:-1
The difference lies within Step 2,


313
00:17:25,746 --> 00:17:29,683 line:-2
where you identify
the customer's product state.


314
00:17:29,716 --> 00:17:34,121 line:-2
How we determine customer product state
starts with the app receipt on device,


315
00:17:34,154 --> 00:17:38,992 line:-2
that, in turn, your server validates
with the App Store verifyReceipt endpoint.


316
00:17:39.026 --> 00:17:41.528 line:-1 align:center
Let’s look at this process.


317
00:17:41,562 --> 00:17:44,031 line:-2
First, we need to retrieve
the App Receipt,


318
00:17:44.064 --> 00:17:48.335 line:-2 align:center
and be sure you are using
the appStoreReceiptURL property,


319
00:17:48,368 --> 00:17:52,706 line:-2
as you can see in this sample
from our developer documentation.


320
00:17:52,739 --> 00:17:55,976 line:-2
With the app receipt,
let’s see how this is sent from the device


321
00:17:56.009 --> 00:18:00.047 line:-1 align:center
to your server and the App Store.


322
00:18:00.080 --> 00:18:02.683 line:-1 align:center
Your app on a device is here on the left.


323
00:18:02,716 --> 00:18:05,686 line:-1
it will first, retrieve the app receipt,


324
00:18:05,719 --> 00:18:08,088 line:-1
and send it to your server,


325
00:18:08.121 --> 00:18:12.159 line:-2 align:center
then validate it with
the App Store verifyReceipt endpoint.


326
00:18:12.192 --> 00:18:16.129 line:-2 align:center
From that response,
you will determine customer product state,


327
00:18:16.163 --> 00:18:19.867 line:-1 align:center
and send those states to your app.


328
00:18:19,900 --> 00:18:22,002 line:-1
To determine customer product state,


329
00:18:22.035 --> 00:18:23.904 line:-1 align:center
we used the Entitlement Engine


330
00:18:23,937 --> 00:18:26,673 line:-1
from WWDC2020.


331
00:18:26,707 --> 00:18:31,011 line:-2
It’s updated to support non-consumables
and non-renewing subscriptions,


332
00:18:31.044 --> 00:18:35.182 line:-2 align:center
and now handles the new customer state
when there are no in-app purchases.


333
00:18:36,517 --> 00:18:39,119 align:center
To learn more about
using our Entitlement Engine,


334
00:18:39,152 --> 00:18:42,990 align:center
I encourage you to check out the
"Architecting for subscriptions" session


335
00:18:43,023 --> 00:18:45,092 line:0
and download the sample project.


336
00:18:45,125 --> 00:18:50,364 line:0
You can find links to this session
and more with this video’s resources.


337
00:18:50,864 --> 00:18:52,533 line:-1
That completes Step 2,


338
00:18:52,566 --> 00:18:55,769 line:-2
where your app will receive the customer
product state from your server.


339
00:18:56,336 --> 00:19:00,507 line:-2
Now your app will personalize
the app experience immediately on launch


340
00:19:00,541 --> 00:19:05,345 line:-2
using the StoreKit 2
and original StoreKit frameworks.


341
00:19:05,379 --> 00:19:08,148 line:-1
I want to share some final best practices.


342
00:19:08.182 --> 00:19:12.653 line:-2 align:center
First, continue providing a "Restore
Purchases" button within your app.


343
00:19:12,686 --> 00:19:13,854 line:-1
While not used often,


344
00:19:13,887 --> 00:19:16,723 line:-2
it does give customers an opportunity to
force an app


345
00:19:16.757 --> 00:19:20.694 line:-2 align:center
to restore their Apple ID’s transactions
in case of an issue


346
00:19:20,727 --> 00:19:24,831 line:-2
or if the customer uses
a different Apple ID.


347
00:19:24.865 --> 00:19:29.770 line:-2 align:center
When your app first proactively restores
a customer's in-app purchases on a device,


348
00:19:29.803 --> 00:19:33.574 line:-2 align:center
it’s recommended to optimize your app
and store data securely


349
00:19:33.607 --> 00:19:36.643 line:-2 align:center
to assist in determining
customer product state.


350
00:19:36.677 --> 00:19:40.647 line:-2 align:center
CloudKit is a feature to consider
with its flexibility, security,


351
00:19:40.681 --> 00:19:45.052 line:-2 align:center
and ability to sync
across a customer's devices.


352
00:19:45,085 --> 00:19:48,388 line:-2
Testing your implementation
is critical when using StoreKit.


353
00:19:48,422 --> 00:19:52,259 line:-2
And with StoreKit 2, you can test
your proactive restore implementation


354
00:19:52.292 --> 00:19:57.364 line:-2 align:center
with Sandbox, TestFlight
and Xcode StoreKit testing.


355
00:19:57.397 --> 00:19:59.766 line:-1 align:center
And if you are using original StoreKit,


356
00:19:59.800 --> 00:20:03.070 line:-2 align:center
it’s important to remember an app receipt
may not be present


357
00:20:03,103 --> 00:20:06,206 line:-1
when testing in Sandbox and TestFlight,


358
00:20:06.240 --> 00:20:10.077 line:-2 align:center
while it is always present when the app
is installed from the App Store.


359
00:20:10.110 --> 00:20:11.945 line:-1 align:center
If an app receipt isn’t present,


360
00:20:11,979 --> 00:20:16,083 line:-2
it is suggested your app uses
its default new customer experience,


361
00:20:16,116 --> 00:20:20,220 line:-2
and ensure you have a Restore Purchases
button readily available.


362
00:20:20.254 --> 00:20:23.857 line:-2 align:center
In conclusion, update your app
to proactively check for purchases


363
00:20:23,891 --> 00:20:28,529 line:-2
without any customer action,
no taps or authentication.


364
00:20:28.562 --> 00:20:33.300 line:-2 align:center
Allow your app to tailor the customer's
experience immediately at launch


365
00:20:33.333 --> 00:20:38.839 line:-2 align:center
to fit your new, active,
and inactive customers' product states.


366
00:20:38.872 --> 00:20:42.009 line:-2 align:center
Maintain status on
all your customer's transactions,


367
00:20:42.042 --> 00:20:45.145 line:-2 align:center
server to server,
for all in-app purchase types,


368
00:20:45.179 --> 00:20:49.583 line:-2 align:center
by implementing App Store
Server Notifications Version 2.


369
00:20:49.616 --> 00:20:52.886 line:-2 align:center
This enables your backend
to know in near real-time


370
00:20:52.920 --> 00:20:55.556 line:-2 align:center
any change that has occurred
with a transaction,


371
00:20:55.589 --> 00:20:58.625 line:-1 align:center
such as refunds, or revoked transactions,


372
00:20:58.659 --> 00:21:02.963 line:-2 align:center
or subscription renewals,
billing retry, and expirations.


373
00:21:03,597 --> 00:21:05,933 line:0
Thank you for watching,
and be sure to check out


374
00:21:05,966 --> 00:21:09,069 align:center
this additional session,
"What's new with in-app purchases”,


375
00:21:09,102 --> 00:21:11,772 align:center
where Dani and Ian will tell you
about all the great updates


376
00:21:11,805 --> 00:21:15,776 align:center
to StoreKit, the Server API,
and Server Notifications Version 2.


377
00:21:16.243 --> 00:21:18.111 line:-1 align:center
Thank you. Take care.


378
00:21:18,145 --> 00:21:21,148 line:-1
♪ ♪

