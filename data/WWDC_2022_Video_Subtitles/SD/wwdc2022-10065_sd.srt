2
00:00:00.033 --> 00:00:03.036 line:-1 position:50%
♪ Mellow instrumental
hip-hop music ♪


3
00:00:03,036 --> 00:00:09,443 position:90% size:2% line:0
♪


4
00:00:09.443 --> 00:00:13.981 line:-1 position:50%
Hi, I'm Jared Marsau and I work
on Game Technologies at Apple.


5
00:00:13,981 --> 00:00:16,416 line:-1
Today, I'll be talking to you
about how you can use


6
00:00:16.416 --> 00:00:19.186 line:-1 position:50%
select Apple frameworks
to add new features


7
00:00:19.186 --> 00:00:21.655 line:-1 position:50%
to your Unity-based games.


8
00:00:21,655 --> 00:00:25,525 line:-1
We know that many of you
are using tools, such as Unity,


9
00:00:25,525 --> 00:00:27,427 line:-1
to build your games.


10
00:00:27,427 --> 00:00:29,696 line:-1
Our goal is to bring you
the latest features,


11
00:00:29.696 --> 00:00:32.165 line:-1 position:50%
no matter what tool
you're using.


12
00:00:32,165 --> 00:00:34,334 line:-1
Starting today,
enhance your games


13
00:00:34,334 --> 00:00:37,237 line:-1
with a new set
of Unity plug-ins.


14
00:00:37.237 --> 00:00:39.940 line:-1 position:50%
Use the Game Center plug-in
to add GameKit features like


15
00:00:39,940 --> 00:00:43,710 line:-1
player authentication,
leaderboards, and matchmaking.


16
00:00:43.710 --> 00:00:46.613 line:-1 position:50%
Use the Game Controller plug-in
for input customizations and


17
00:00:46.613 --> 00:00:51.385 line:-1 position:50%
glyphs, along with support for
MFi and third-party controllers.


18
00:00:51,385 --> 00:00:54,321 line:-1
Use the Accessibility plug-in
to improve accessibility


19
00:00:54.321 --> 00:00:58.659 line:-1 position:50%
through system features,
like VoiceOver and Dynamic Type.


20
00:00:58,659 --> 00:01:02,429 line:-1
Integrate Apple's data-driven
rich haptic feedback system


21
00:01:02.429 --> 00:01:04.965 line:-1 position:50%
with the Core Haptics plug-in.


22
00:01:04,965 --> 00:01:07,634 line:-1
Add advanced geometry-aware
spatial audio


23
00:01:07,634 --> 00:01:09,202 line:-1
with the PHASE plug-in.


24
00:01:09,202 --> 00:01:12,873 line:0
Finally, use the Apple.Core
plug-in to manage build settings


25
00:01:12,873 --> 00:01:16,576 position:50%
and simplify the build process.


26
00:01:16.576 --> 00:01:18.745 line:-1 position:50%
This initial set of plug-ins
will let you add


27
00:01:18,745 --> 00:01:22,282 line:-1
new gameplay mechanics,
make your games more accessible,


28
00:01:22.282 --> 00:01:24.151 line:-1 position:50%
and help you more rapidly tap


29
00:01:24,151 --> 00:01:27,054 line:-1
into the latest features
and services.


30
00:01:27,054 --> 00:01:29,423 line:-1
I am extremely excited
to see the amazing games


31
00:01:29.423 --> 00:01:32.592 line:-1 position:50%
you create with this new set
of Unity plug-ins.


32
00:01:32.592 --> 00:01:35.662 line:-1 position:50%
Now, I'll get into the details
of the project.


33
00:01:35.662 --> 00:01:38.966 line:-1 position:50%
First, I'll discuss the design
principles of the project.


34
00:01:38.966 --> 00:01:42.169 line:-1 position:50%
Then, I'll cover project
concepts and organization.


35
00:01:42,169 --> 00:01:44,504 line:-1
Next, I'll offer
some key pointers


36
00:01:44,504 --> 00:01:47,140 line:-1
on interacting
with the project repository.


37
00:01:47.140 --> 00:01:50.544 line:-1 position:50%
And finally, I'll go into detail
for each plug-in.


38
00:01:50.544 --> 00:01:52.279 line:-1 position:50%
As you may know,


39
00:01:52.279 --> 00:01:56.450 line:-1 position:50%
Apple frameworks encapsulate
functionality in a modular way.


40
00:01:56,450 --> 00:01:58,819 line:-1
This lets you pick and choose
the right technologies


41
00:01:58.819 --> 00:02:03.290 line:-1 position:50%
for your apps while maintaining
compact, efficient code.


42
00:02:03.290 --> 00:02:06.893 line:-1 position:50%
With the Unity plug-ins,
a similar pattern is followed;


43
00:02:06.893 --> 00:02:10.163 line:-1 position:50%
each plug-in maps to a single
underlying framework.


44
00:02:10.163 --> 00:02:12.332 line:-1 position:50%
This lets you pick and choose
the set of plug-ins


45
00:02:12,332 --> 00:02:15,669 line:-1
you want to use based upon
your game's needs.


46
00:02:15,669 --> 00:02:19,373 line:-1
Each plug-in exposes
C#-based Unity script,


47
00:02:19,373 --> 00:02:21,274 line:-1
which maps as directly
as possible


48
00:02:21,274 --> 00:02:23,443 line:-1
to the underlying framework.


49
00:02:23,443 --> 00:02:26,580 line:-1
Doing this means that any
familiarity that you might have


50
00:02:26.580 --> 00:02:29.950 line:-1 position:50%
with the underlying framework
carries over to the plug-in.


51
00:02:29.950 --> 00:02:33.186 line:-1 position:50%
Concepts, and in many cases
the framework API,


52
00:02:33.186 --> 00:02:35.022 line:-1 position:50%
carry directly over.


53
00:02:35.022 --> 00:02:38.525 line:-1 position:50%
Conversely, this also means
that by learning the plug-in,


54
00:02:38.525 --> 00:02:42.162 line:-1 position:50%
you'll be implicitly learning
the underlying framework.


55
00:02:42,162 --> 00:02:44,598 line:-1
Another important detail
is that these plug-ins


56
00:02:44.598 --> 00:02:48.201 line:-1 position:50%
are built as Apple platform
native libraries.


57
00:02:48.201 --> 00:02:51.638 line:-1 position:50%
These libraries act as
the glue between the C# script


58
00:02:51.638 --> 00:02:55.242 line:-1 position:50%
and the underlying
framework API.


59
00:02:55,242 --> 00:02:59,346 line:-1
Apple Unity plug-ins are
organized as Unity packages,


60
00:02:59.346 --> 00:03:02.082 line:-1 position:50%
so managing their integration
to your project can be done


61
00:03:02,082 --> 00:03:05,952 line:-1
with the Unity Editor's
built-in Package Manager.


62
00:03:05.952 --> 00:03:09.356 line:-1 position:50%
In some cases, plug-ins also
include additional Editor


63
00:03:09,356 --> 00:03:12,793 line:-1
functionality that makes working
with the plug-in even easier


64
00:03:12.793 --> 00:03:15.629 line:-1 position:50%
and aligns with the Unity
inspector-driven workflows


65
00:03:15.629 --> 00:03:18.265 line:-1 position:50%
that you're already
familiar with.


66
00:03:18.265 --> 00:03:21.701 line:-1 position:50%
Of course, each plug-in
is paired with detailed readmes,


67
00:03:21,701 --> 00:03:25,038 line:-1
samples, and links
to additional resources,


68
00:03:25.038 --> 00:03:28.842 line:-1 position:50%
such as associated Apple
Developer documentation.


69
00:03:28.842 --> 00:03:32.412 line:-1 position:50%
Next, I'll briefly examine
some key workflow concepts


70
00:03:32.412 --> 00:03:35.315 line:-1 position:50%
to help you get started.


71
00:03:35.315 --> 00:03:38.652 line:-1 position:50%
The first step is to clone
the source from GitHub.


72
00:03:38,652 --> 00:03:42,456 line:-1
You can find all of the project
source and documentation there.


73
00:03:42.456 --> 00:03:44.758 line:-1 position:50%
This is the starting point
for everyone who will be using


74
00:03:44.758 --> 00:03:47.260 line:-1 position:50%
the Apple Unity plug-ins.


75
00:03:47,260 --> 00:03:48,962 line:-1
Once you've cloned
the repository,


76
00:03:48.962 --> 00:03:52.299 line:-1 position:50%
building the plug-ins will be
one of your first tasks.


77
00:03:52.299 --> 00:03:55.135 line:-1 position:50%
To simplify this process,
the repository includes


78
00:03:55,135 --> 00:03:59,806 line:-1
a Python script at
the repository root: build.py.


79
00:03:59,806 --> 00:04:02,175 line:-1
This script handles
building native libraries,


80
00:04:02.175 --> 00:04:04.511 line:-1 position:50%
copying them
to the correct locations,


81
00:04:04.511 --> 00:04:08.081 line:-1 position:50%
updating Unity meta files,
packing the plug-ins,


82
00:04:08.081 --> 00:04:10.250 line:-1 position:50%
and building plug-in tests.


83
00:04:10.250 --> 00:04:13.353 line:-1 position:50%
The script is organized such
that the simplest invocation


84
00:04:13,353 --> 00:04:17,090 line:-1
builds all of the plug-ins,
packages them into tarballs,


85
00:04:17,090 --> 00:04:18,959 line:-1
and saves them
to a build folder


86
00:04:18,959 --> 00:04:22,729 line:-1
ready for integration
into your Unity projects.


87
00:04:22,729 --> 00:04:25,665 line:-1
It's important to note
that fully building and packing


88
00:04:25,665 --> 00:04:32,239 line:-1
the plug-ins will require Xcode,
Python3, npm, and Unity.


89
00:04:32,239 --> 00:04:34,241 line:-1
Finally,
we have detailed documentation


90
00:04:34,241 --> 00:04:38,879 line:-1
for using build.py
in the project repository.


91
00:04:38,879 --> 00:04:40,614 line:-1
Now it's time
to dive into details


92
00:04:40,614 --> 00:04:42,549 line:-1
with each of the plug-ins.


93
00:04:42.549 --> 00:04:44.718 line:-1 position:50%
For each plug-in,
I'll cover how to add them


94
00:04:44.718 --> 00:04:49.055 line:-1 position:50%
to your Unity projects, a brief
overview of included features,


95
00:04:49.055 --> 00:04:51.825 line:-1 position:50%
key scripting concepts,
and some code snippets


96
00:04:51.825 --> 00:04:54.060 line:-1 position:50%
or examples
in the Unity Editor


97
00:04:54.060 --> 00:04:57.797 line:-1 position:50%
highlighting how to integrate
them into your projects.


98
00:04:57.797 --> 00:04:59.999 line:-1 position:50%
Let's start
with the foundational plug-in,


99
00:04:59.999 --> 00:05:01.768 line:-1 position:50%
Apple.Core.


100
00:05:01,768 --> 00:05:04,838 line:-1
Apple.Core unifies build
settings for each plug-in into


101
00:05:04.838 --> 00:05:09.276 line:-1 position:50%
a single preference pane within
Unity's Project Settings window.


102
00:05:09.276 --> 00:05:12.412 line:-1 position:50%
Because you compile each
plug-in's native libraries,


103
00:05:12.412 --> 00:05:15.215 line:-1 position:50%
Apple.Core also includes
an asset processor,


104
00:05:15,215 --> 00:05:17,884 line:-1
which ensures that each
plug-in library is configured


105
00:05:17,884 --> 00:05:21,021 line:-1
for the appropriate platform
on import.


106
00:05:21.021 --> 00:05:24.024 line:-1 position:50%
When building your projects,
Apple.Core also contains


107
00:05:24.024 --> 00:05:26.660 line:-1 position:50%
scripts that run as
a post-process to your build


108
00:05:26.660 --> 00:05:29.696 line:-1 position:50%
to ensure that native libraries
are referenced correctly


109
00:05:29.696 --> 00:05:32.399 line:-1 position:50%
in your intermediate
Xcode projects.


110
00:05:32,399 --> 00:05:35,669 line:-1
Because each plug-in interacts
with an underlying framework,


111
00:05:35.669 --> 00:05:37.103 line:-1 position:50%
Apple.Core also defines


112
00:05:37,103 --> 00:05:40,707 line:-1
a handful of runtime inter-op
types, which ease data passing


113
00:05:40.707 --> 00:05:44.311 line:-1 position:50%
between the C# script
and native code layers.


114
00:05:44.311 --> 00:05:46.646 line:-1 position:50%
Finally,
Apple.Core is a dependency


115
00:05:46.646 --> 00:05:49.516 line:-1 position:50%
for all other
Apple Unity plug-ins.


116
00:05:49,516 --> 00:05:51,585 line:-1
This means that Apple.Core
should be imported


117
00:05:51,585 --> 00:05:55,889 line:-1
into your projects before
any of the other plug-ins.


118
00:05:55.889 --> 00:05:57.924 line:-1 position:50%
In this demo,
I'll show you how to import


119
00:05:57.924 --> 00:06:00.460 line:-1 position:50%
the Apple.Core plug-in
into a new project


120
00:06:00.460 --> 00:06:04.965 line:-1 position:50%
and briefly explore the Apple
Build Settings preferences.


121
00:06:04,965 --> 00:06:07,467 line:-1
Once the plug-ins
are built and packed,


122
00:06:07,467 --> 00:06:11,738 line:-1
Apple.Core can be imported
with the Unity Package Manager.


123
00:06:11.738 --> 00:06:14.708 line:-1 position:50%
Just choose the option
to add package from tarball


124
00:06:14.708 --> 00:06:17.978 line:-1 position:50%
and browse
to the packaged plug-in.


125
00:06:23.183 --> 00:06:26.920 line:-1 position:50%
The Editor will then load the
package and compile the scripts.


126
00:06:26.920 --> 00:06:31.391 line:-1 position:50%
Once complete,
Apple.Core is ready to use.


127
00:06:34,761 --> 00:06:37,264 line:-1
Apple.Core's primary
user-facing feature


128
00:06:37.264 --> 00:06:39.633 line:-1 position:50%
is the addition
of the Apple Build Settings tab


129
00:06:39.633 --> 00:06:43.536 line:-1 position:50%
in the Editor's
Project Settings window.


130
00:06:46.539 --> 00:06:49.009 line:-1 position:50%
When you import
an Apple Unity plug-in,


131
00:06:49.009 --> 00:06:52.612 line:-1 position:50%
all of it's available build
options will be visible here.


132
00:06:52,612 --> 00:06:53,780 line:-1
Out of the box,


133
00:06:53.780 --> 00:06:56.783 line:-1 position:50%
Apple.Core comes with some
default configuration options,


134
00:06:56,783 --> 00:07:00,754 line:-1
such as minimum
supported OS version.


135
00:07:00.754 --> 00:07:03.156 line:-1 position:50%
It's also useful to note
that you can disable


136
00:07:03.156 --> 00:07:07.127 line:-1 position:50%
the post-process
build steps for any plug-in.


137
00:07:10.530 --> 00:07:13.466 line:-1 position:50%
Finally, you can configure
common security settings,


138
00:07:13,466 --> 00:07:18,438 line:-1
which will propagate to your
intermediate Xcode projects.


139
00:07:18.438 --> 00:07:21.107 line:-1 position:50%
Use the Game Center plug-in
to bring even more fun


140
00:07:21,107 --> 00:07:23,843 line:-1
and connection to your games
with Game Center,


141
00:07:23.843 --> 00:07:26.413 line:-1 position:50%
Apple's social gaming network.


142
00:07:26,413 --> 00:07:29,015 line:-1
Game Center lets players
build an identity across


143
00:07:29,015 --> 00:07:32,085 line:-1
Apple platforms and enables
features like safe,


144
00:07:32.085 --> 00:07:35.822 line:-1 position:50%
secure player authentication,
in-game achievements,


145
00:07:35.822 --> 00:07:39.559 line:-1 position:50%
shared leaderboards,
challenges sent between players,


146
00:07:39,559 --> 00:07:41,995 line:-1
and multiplayer matchmaking.


147
00:07:41.995 --> 00:07:44.331 line:-1 position:50%
You can pick and choose
which Game Center features


148
00:07:44,331 --> 00:07:45,999 line:-1
to integrate into your games,


149
00:07:45.999 --> 00:07:49.202 line:-1 position:50%
but everything starts
with player authentication.


150
00:07:49.202 --> 00:07:51.671 line:-1 position:50%
Add Game Center player
authentication to your game


151
00:07:51.671 --> 00:07:53.840 line:-1 position:50%
and the Game Center widget
can feature your game


152
00:07:53,840 --> 00:07:57,977 line:-1
on the player's Home Screen
or within the App Store.


153
00:07:57,977 --> 00:07:59,813 line:-1
It also requires
very little code


154
00:07:59.813 --> 00:08:02.182 line:-1 position:50%
to add player authentication.


155
00:08:02.182 --> 00:08:04.617 line:-1 position:50%
The first step
is to add the Apple.Core


156
00:08:04.617 --> 00:08:06.786 line:-1 position:50%
and GameKit plug-ins
to your project.


157
00:08:06,786 --> 00:08:10,457 line:-1
The GameKit plug-in connects
the Game Center service.


158
00:08:10,457 --> 00:08:13,593 line:-1
When authenticating, connect
with the Game Center service


159
00:08:13.593 --> 00:08:16.963 line:-1 position:50%
and initialize
a GKLocalPlayer object.


160
00:08:16.963 --> 00:08:19.733 line:-1 position:50%
Once initialized,
query for player restrictions


161
00:08:19,733 --> 00:08:22,335 line:-1
based upon
the local player's profile.


162
00:08:22,335 --> 00:08:26,139 line:-1
These restrictions include
limiting access to adult


163
00:08:26.139 --> 00:08:29.342 line:-1 position:50%
or explicit content
for underage players,


164
00:08:29.342 --> 00:08:32.078 line:-1 position:50%
limiting access
to multiplayer features,


165
00:08:32,078 --> 00:08:34,814 line:-1
or disabling
in-game communication.


166
00:08:34.814 --> 00:08:37.684 line:-1 position:50%
A simple way to manage
a GKLocalPlayer


167
00:08:37.684 --> 00:08:40.153 line:-1 position:50%
and it's interactions
with the Game Center service


168
00:08:40,153 --> 00:08:43,189 line:-1
is to define a component
within Unity.


169
00:08:43,189 --> 00:08:44,391 line:-1
Here, for example,


170
00:08:44,391 --> 00:08:47,660 line:-1
is a simple Game Manager
component definition.


171
00:08:47.660 --> 00:08:50.864 line:-1 position:50%
This component holds
a reference to a GKLocalPlayer.


172
00:08:50.864 --> 00:08:53.566 line:-1 position:50%
It also handles both
authentication and query


173
00:08:53.566 --> 00:08:56.002 line:-1 position:50%
for player restrictions
in its start method;


174
00:08:56.002 --> 00:08:58.605 line:-1 position:50%
player authentication
only needs to happen once


175
00:08:58,605 --> 00:09:01,074 line:-1
during the lifetime of the game.


176
00:09:01.074 --> 00:09:04.210 line:-1 position:50%
This is the GameManager
component's script.


177
00:09:04,210 --> 00:09:07,213 line:-1
Here's the field for caching
a GKLocalPlayer.


178
00:09:07,213 --> 00:09:09,315 line:-1
Within the component's
start method


179
00:09:09.315 --> 00:09:12.986 line:-1 position:50%
is the one-time call to
GKLocalPlayer.Authenticate,


180
00:09:12.986 --> 00:09:17.123 line:-1 position:50%
a static method that returns
the GKLocalPlayer instance.


181
00:09:17,123 --> 00:09:19,926 line:-1
Once the local player
is successfully authenticated,


182
00:09:19,926 --> 00:09:22,962 line:-1
it's time to check
their player restrictions.


183
00:09:22,962 --> 00:09:24,798 line:-1
Checking player restrictions
in code


184
00:09:24.798 --> 00:09:27.734 line:-1 position:50%
resolves to a series of
Boolean checks and can be added


185
00:09:27,734 --> 00:09:31,571 line:-1
to the try block in the
GameManager component's script.


186
00:09:31.571 --> 00:09:33.773 line:-1 position:50%
True here means
your local player should have


187
00:09:33,773 --> 00:09:36,276 line:-1
limited access
to explicit content.


188
00:09:36.276 --> 00:09:38.044 line:-1 position:50%
True here means
that your local player


189
00:09:38.044 --> 00:09:40.847 line:-1 position:50%
should have a restricted
multiplayer experience.


190
00:09:40,847 --> 00:09:43,950 position:50%
And finally, true here means
that in-game communication


191
00:09:43,950 --> 00:09:46,319 position:50%
should be disabled.


192
00:09:46,319 --> 00:09:48,455 line:-1
And that's all
the code changes necessary


193
00:09:48.455 --> 00:09:51.324 line:-1 position:50%
to add player authentication
to your game.


194
00:09:51.324 --> 00:09:54.327 line:-1 position:50%
From here, there are two
additional steps necessary


195
00:09:54.327 --> 00:09:58.631 line:-1 position:50%
to fully prepare your game to
take advantage of Game Center.


196
00:09:58.631 --> 00:10:01.534 line:-1 position:50%
First, you'll need to add
the Game Center capability


197
00:10:01.534 --> 00:10:04.304 line:-1 position:50%
to your intermediate
Xcode projects.


198
00:10:04.304 --> 00:10:07.440 line:-1 position:50%
This is done from within
the Xcode project UI.


199
00:10:07.440 --> 00:10:09.175 line:-1 position:50%
More information can be found


200
00:10:09,175 --> 00:10:11,644 line:-1
in the Apple Developer
documentation article


201
00:10:11.644 --> 00:10:14.881 line:-1 position:50%
"Enabling and Configuring
Game Center."


202
00:10:14,881 --> 00:10:17,817 line:-1
Next, you'll need to add
Game Center features to your app


203
00:10:17.817 --> 00:10:20.019 line:-1 position:50%
using App Store Connect.


204
00:10:20,019 --> 00:10:23,923 line:-1
Check out the App Store Connect
portal for more information.


205
00:10:23.923 --> 00:10:26.626 line:-1 position:50%
With these steps complete,
you're ready to authenticate


206
00:10:26.626 --> 00:10:30.196 line:-1 position:50%
players and ensure
a safe gaming environment.


207
00:10:30.196 --> 00:10:33.299 line:-1 position:50%
Player authentication
only scratches the surface


208
00:10:33,299 --> 00:10:34,901 line:-1
of the features made available


209
00:10:34,901 --> 00:10:37,537 line:-1
by the Game Center Unity
plug-in.


210
00:10:37,537 --> 00:10:40,640 position:50%
To learn more about improving
discoverability of your game,


211
00:10:40,640 --> 00:10:42,141 line:0
check out the session


212
00:10:42,141 --> 00:10:45,345 position:50%
"Reach new players
with Game Center dashboard."


213
00:10:45,345 --> 00:10:47,981 line:0
To learn more about multiplayer
and matchmaking,


214
00:10:47,981 --> 00:10:52,485 line:0
watch the "What's new in Game
Center" session from last year.


215
00:10:52.485 --> 00:10:56.122 line:-1 position:50%
Controllers are the primary way
for players to interact


216
00:10:56,122 --> 00:10:58,424 line:-1
with the worlds
that you'll create.


217
00:10:58,424 --> 00:11:02,061 line:-1
Easily bring reliable and
flexible game controller support


218
00:11:02.061 --> 00:11:04.998 line:-1 position:50%
to your games with
the Game Controller plug-in.


219
00:11:04.998 --> 00:11:08.067 line:-1 position:50%
The Game Controller plug-in
brings a handful of features,


220
00:11:08,067 --> 00:11:11,137 line:-1
like support for game controller
customizations,


221
00:11:11.137 --> 00:11:13.106 line:-1 position:50%
which allow players
to remap buttons


222
00:11:13.106 --> 00:11:15.842 line:-1 position:50%
in one place for all games.


223
00:11:15.842 --> 00:11:19.712 line:-1 position:50%
Button glyphs, to ensure
consistent user experience.


224
00:11:19.712 --> 00:11:22.115 line:-1 position:50%
And support for all
MFi controllers,


225
00:11:22,115 --> 00:11:23,783 line:-1
as well as
third-party controllers


226
00:11:23.783 --> 00:11:27.353 line:-1 position:50%
like select Sony
and Microsoft controllers.


227
00:11:27.353 --> 00:11:29.022 line:-1 position:50%
Just as with the other plug-ins,


228
00:11:29,022 --> 00:11:31,324 line:-1
use the Package Manager
to add the Apple.Core


229
00:11:31.324 --> 00:11:34.227 line:-1 position:50%
and Game Controller plug-ins
to your project.


230
00:11:34.227 --> 00:11:36.195 line:-1 position:50%
With the Game Controller
plug-in loaded,


231
00:11:36,195 --> 00:11:40,500 line:-1
the first step is to initialize
the GCControllerService.


232
00:11:40,500 --> 00:11:43,403 line:-1
As we'll see shortly,
this service is how controllers


233
00:11:43.403 --> 00:11:46.472 line:-1 position:50%
and their connection events
are accessed.


234
00:11:46.472 --> 00:11:49.208 line:-1 position:50%
Once initialized,
query GCControllerService


235
00:11:49.208 --> 00:11:52.545 line:-1 position:50%
for all controllers currently
connected to the system.


236
00:11:52,545 --> 00:11:54,581 line:0
Connected controllers
are represented


237
00:11:54,581 --> 00:11:58,918 position:50%
by GCController objects
in the Game Controller plug-in.


238
00:11:58,918 --> 00:12:01,387 position:50%
For each GCController
that's connected,


239
00:12:01,387 --> 00:12:03,756 position:50%
poll for updated
controller state.


240
00:12:03,756 --> 00:12:06,659 position:50%
Polling can happen as little
or as often as is needed


241
00:12:06,659 --> 00:12:08,861 line:0
by your game,
but a good place to start


242
00:12:08,861 --> 00:12:11,631 line:0
is in Unity's
regular update loop.


243
00:12:11,631 --> 00:12:13,666 position:50%
Once controller state
is updated,


244
00:12:13,666 --> 00:12:15,969 line:0
test for input
on each of the controller's


245
00:12:15,969 --> 00:12:19,405 line:0
individual elements,
such as buttons, thumb sticks,


246
00:12:19,405 --> 00:12:20,907 line:0
and so on.


247
00:12:20,907 --> 00:12:23,409 line:-1
Not to be forgotten,
controllers may come and go


248
00:12:23,409 --> 00:12:26,512 line:-1
during your game's lifecycle --
register callbacks


249
00:12:26.512 --> 00:12:30.049 line:-1 position:50%
to handle controller connect
and disconnect events.


250
00:12:30,049 --> 00:12:32,619 line:-1
A quick way to get
the Game Controller plug-in


251
00:12:32.619 --> 00:12:36.556 line:-1 position:50%
integrated is to create a simple
input manager component.


252
00:12:36.556 --> 00:12:39.292 line:-1 position:50%
This component
has three key elements:


253
00:12:39,292 --> 00:12:40,793 line:-1
a container which holds


254
00:12:40.793 --> 00:12:43.696 line:-1 position:50%
all of the currently
connected controllers,


255
00:12:43,696 --> 00:12:46,065 line:-1
a start method
for initialization,


256
00:12:46.065 --> 00:12:48.267 line:-1 position:50%
and an update method
for handling polling


257
00:12:48,267 --> 00:12:50,637 line:-1
and testing for input.


258
00:12:50.637 --> 00:12:53.940 line:-1 position:50%
First, let's take a closer look
at the start method.


259
00:12:53,940 --> 00:12:56,476 line:-1
This is a great place
to do all of the necessary


260
00:12:56,476 --> 00:12:58,911 line:-1
one-time setup tasks.


261
00:12:58,911 --> 00:13:01,314 line:-1
Initialization of
the game controller service


262
00:13:01,314 --> 00:13:02,749 line:-1
should happen here,


263
00:13:02,749 --> 00:13:05,985 line:-1
along with the initial check
for connected controllers


264
00:13:05.985 --> 00:13:07.887 line:-1 position:50%
and registration of callbacks


265
00:13:07,887 --> 00:13:11,124 line:-1
for connection
and disconnection events.


266
00:13:11.124 --> 00:13:14.494 line:-1 position:50%
Here's the input manager
component's script.


267
00:13:14.494 --> 00:13:16.062 line:-1 position:50%
All of the one-time setup code


268
00:13:16,062 --> 00:13:19,699 line:-1
goes in the component's
start method, including a call


269
00:13:19.699 --> 00:13:23.369 line:-1 position:50%
to GCControllerService.
Initialize().


270
00:13:23.369 --> 00:13:26.639 line:-1 position:50%
Calling GetConnectedControllers
gets an enumerable container


271
00:13:26,639 --> 00:13:30,176 line:-1
of all the currently connected
controllers.


272
00:13:30,176 --> 00:13:33,446 position:50%
The final initialization step
is to register callbacks


273
00:13:33,446 --> 00:13:37,550 position:50%
for controller connect
and disconnect events.


274
00:13:37.550 --> 00:13:39.886 line:-1 position:50%
Now that initialization
is complete,


275
00:13:39,886 --> 00:13:42,722 line:-1
the input manager also needs
an update method


276
00:13:42.722 --> 00:13:45.158 line:-1 position:50%
in order to poll
each connected controller


277
00:13:45.158 --> 00:13:48.094 line:-1 position:50%
to update input state,
and to handle input state


278
00:13:48.094 --> 00:13:50.830 line:-1 position:50%
for each of the controller's
inputs.


279
00:13:50.830 --> 00:13:53.066 line:-1 position:50%
To poll for input,
start by iterating


280
00:13:53.066 --> 00:13:55.601 line:-1 position:50%
through the set
of connected controllers.


281
00:13:55.601 --> 00:13:57.770 line:-1 position:50%
Call the
GCController's Poll method


282
00:13:57,770 --> 00:13:59,739 line:-1
to gather the latest state.


283
00:13:59.739 --> 00:14:05.011 line:-1 position:50%
Then check each button state
and respond accordingly.


284
00:14:05.011 --> 00:14:08.347 line:-1 position:50%
And that's a quick look at how to
use the Game Controller plug-in


285
00:14:08,347 --> 00:14:12,785 line:-1
to access connected controllers
and get controller input.


286
00:14:12,785 --> 00:14:15,988 line:0
To get into more detail about
the Game Controller framework


287
00:14:15,988 --> 00:14:18,725 position:50%
and learn about topics
like third-party controllers


288
00:14:18,725 --> 00:14:22,795 line:0
and nonstandard inputs,
check out prior years' sessions:


289
00:14:22,795 --> 00:14:24,530 position:50%
"Supporting New
Game Controllers"


290
00:14:24,530 --> 00:14:27,333 line:0
and "Advancements
in Game Controllers."


291
00:14:27.333 --> 00:14:30.837 line:-1 position:50%
Accessibility is about
making technologies available


292
00:14:30.837 --> 00:14:32.638 line:-1 position:50%
for everyone.


293
00:14:32,638 --> 00:14:36,175 line:-1
Use the Accessibility plug-in
to integrate a wide range


294
00:14:36,175 --> 00:14:38,478 line:-1
of Apple's assistive
technologies


295
00:14:38,478 --> 00:14:41,247 line:-1
into your Unity-based games.


296
00:14:41,247 --> 00:14:43,750 line:-1
The Accessibility plug-in
gives you the ability


297
00:14:43.750 --> 00:14:46.519 line:-1 position:50%
to add key features,
such as VoiceOver,


298
00:14:46.519 --> 00:14:50.189 line:-1 position:50%
which can read programmatically
tagged content to your users;


299
00:14:50.189 --> 00:14:51.357 line:-1 position:50%
Switch Control,


300
00:14:51,357 --> 00:14:54,794 line:-1
allowing for a wide range
of assistive input devices;


301
00:14:54.794 --> 00:14:57.797 line:-1 position:50%
Dynamic Type,
to easily scale in-game text


302
00:14:57.797 --> 00:15:00.867 line:-1 position:50%
and UI based upon
user preferences;


303
00:15:00,867 --> 00:15:03,736 line:-1
and UI accommodation
settings in order to adhere


304
00:15:03.736 --> 00:15:07.273 line:-1 position:50%
to system-wide
accessibility preferences.


305
00:15:07,273 --> 00:15:09,876 line:0
There's a lot to cover
with the Accessibility plug-in,


306
00:15:09,876 --> 00:15:11,878 position:50%
so I encourage you to check out
the session


307
00:15:11,878 --> 00:15:14,781 position:50%
"Add accessibility
to Unity games"


308
00:15:14,781 --> 00:15:18,684 position:50%
for a deep dive into the
Accessibility Unity plug-in.


309
00:15:18,684 --> 00:15:21,921 line:-1
In that session you'll not only
get examples and use cases,


310
00:15:21.921 --> 00:15:23.756 line:-1 position:50%
but you'll also build
an understanding


311
00:15:23,756 --> 00:15:26,159 line:-1
of what's possible
with accessibility


312
00:15:26,159 --> 00:15:28,261 line:-1
on Apple platforms.


313
00:15:28,261 --> 00:15:32,331 line:-1
Be sure to check it out as soon
as you have the opportunity.


314
00:15:32.331 --> 00:15:34.801 line:-1 position:50%
Adding haptic feedback
to your games is a great way


315
00:15:34.801 --> 00:15:38.671 line:-1 position:50%
to increase immersion and
enhance the gameplay experience.


316
00:15:38.671 --> 00:15:41.407 line:-1 position:50%
Integrate Apple's advanced
haptic capabilities


317
00:15:41,407 --> 00:15:43,810 line:-1
with the Core Haptics plug-in.


318
00:15:43.810 --> 00:15:47.079 line:-1 position:50%
Use the Core Haptics plug-in
to build custom haptic patterns


319
00:15:47.079 --> 00:15:49.916 line:-1 position:50%
from a set of haptic
and audio events.


320
00:15:49.916 --> 00:15:52.885 line:-1 position:50%
Play back synchronized
custom audio and haptics.


321
00:15:52.885 --> 00:15:55.955 line:-1 position:50%
Programmatically define
or update haptic feedback


322
00:15:55,955 --> 00:15:58,624 line:-1
by adjusting parameters
in real time.


323
00:15:58.624 --> 00:16:02.495 line:-1 position:50%
Use the Apple Haptic and Audio
Pattern file format, or AHAP,


324
00:16:02.495 --> 00:16:04.764 line:-1 position:50%
for a file-based approach
to designing and storing


325
00:16:04.764 --> 00:16:07.133 line:-1 position:50%
your patterns as assets.


326
00:16:07,133 --> 00:16:09,702 line:-1
Tune your Core Haptics patterns
in the Unity Editor


327
00:16:09.702 --> 00:16:12.471 line:-1 position:50%
with inspector support.


328
00:16:12.471 --> 00:16:14.841 line:-1 position:50%
To get the most out of
the Core Haptics plug-in,


329
00:16:14.841 --> 00:16:17.210 line:-1 position:50%
you'll need to understand
four fundamental elements


330
00:16:17,210 --> 00:16:20,680 line:-1
of Core Haptics and their
relationship to one another.


331
00:16:20.680 --> 00:16:24.517 line:-1 position:50%
The highest-level element
is the CHHapticEngine.


332
00:16:24.517 --> 00:16:27.320 line:-1 position:50%
The haptic engine represents
the link to the haptic server


333
00:16:27.320 --> 00:16:31.858 line:-1 position:50%
on the device and is required
to play any haptic patterns.


334
00:16:31,858 --> 00:16:35,895 line:-1
The CHHapticEngine creates
CHHapticPatternPlayers.


335
00:16:35,895 --> 00:16:39,065 line:-1
Pattern players are used
for playback of CHHapticPatterns


336
00:16:39,065 --> 00:16:44,136 line:-1
with controls like start,
stop, pause, and resume.


337
00:16:44,136 --> 00:16:47,273 line:-1
A CHHapticPattern
is a logical grouping


338
00:16:47,273 --> 00:16:50,509 line:-1
of one or more haptic
and audio events.


339
00:16:50,509 --> 00:16:54,881 line:-1
The CHHapticEngine uses patterns
to create players.


340
00:16:54,881 --> 00:16:57,250 line:-1
CHHapticEvents
are the building blocks


341
00:16:57.250 --> 00:17:00.553 line:-1 position:50%
used to define
a haptic experience.


342
00:17:00.553 --> 00:17:02.989 line:-1 position:50%
Core Haptics
is a data-driven API,


343
00:17:02.989 --> 00:17:06.626 line:-1 position:50%
which allows for haptic patterns
to be defined programmatically,


344
00:17:06.626 --> 00:17:11.330 line:-1 position:50%
directly in your scripts,
or by leveraging AHAP files.


345
00:17:11.330 --> 00:17:13.833 line:-1 position:50%
One easy way
to add Core Haptics support


346
00:17:13.833 --> 00:17:16.636 line:-1 position:50%
to your projects is to create
a Haptics component


347
00:17:16.636 --> 00:17:20.706 line:-1 position:50%
that manages each of the
necessary Core Haptics objects.


348
00:17:20,706 --> 00:17:22,909 line:-1
Here is an example
Haptics component


349
00:17:22,909 --> 00:17:25,011 line:-1
that contains a CHHapticEngine,


350
00:17:25,011 --> 00:17:29,282 line:-1
a CHHapticPatternPlayer,
and an AHAP Asset.


351
00:17:29,282 --> 00:17:31,851 line:-1
The AHAP asset
is a custom Unity asset


352
00:17:31.851 --> 00:17:34.654 line:-1 position:50%
defined by
the Core Haptics plug-in.


353
00:17:34,654 --> 00:17:38,024 line:-1
This allows for easy import
and export to AHAP files,


354
00:17:38.024 --> 00:17:40.059 line:-1 position:50%
as well as
a custom editor extension


355
00:17:40,059 --> 00:17:43,229 line:-1
to manage pattern creation
and customization.


356
00:17:43.229 --> 00:17:46.365 line:-1 position:50%
Let's take a closer look.


357
00:17:46.365 --> 00:17:48.801 line:-1 position:50%
I'll begin by ensuring
that both Apple.Core


358
00:17:48.801 --> 00:17:52.605 line:-1 position:50%
and the Core Haptics plug-ins
are installed in my project.


359
00:17:52,605 --> 00:17:53,739 line:-1
With those added,


360
00:17:53.739 --> 00:17:59.345 line:-1 position:50%
I can start enhancing my game
with haptics.


361
00:17:59.345 --> 00:18:01.547 line:-1 position:50%
Here's the haptics component
that I've created


362
00:18:01.547 --> 00:18:03.783 line:-1 position:50%
based upon the previous diagram.


363
00:18:03.783 --> 00:18:06.152 line:-1 position:50%
We'll check out the
implementation in just a moment,


364
00:18:06.152 --> 00:18:09.655 line:-1 position:50%
but for now,
I'll attach it to my airplane.


365
00:18:12.358 --> 00:18:13.559 line:-1 position:50%
Once attached,


366
00:18:13,559 --> 00:18:16,762 line:-1
I now see that the component
requires an AHAP asset,


367
00:18:16.762 --> 00:18:20.166 line:-1 position:50%
but my AHAP Assets folder
is empty.


368
00:18:20.166 --> 00:18:21.701 line:-1 position:50%
I'll create a new one by going


369
00:18:21.701 --> 00:18:29.709 line:-1 position:50%
to Assets > Create > Apple >
CoreHaptics > AHAP.


370
00:18:29,709 --> 00:18:31,677 line:-1
Once created,
I'll give it a fantastic


371
00:18:31.677 --> 00:18:39.218 line:-1 position:50%
and original name:
MyHapticPattern.


372
00:18:39.218 --> 00:18:41.954 line:-1 position:50%
The Core Haptics plug-in
comes with editor extensions


373
00:18:41,954 --> 00:18:46,726 line:-1
that let me tune my new pattern
right in the inspector window.


374
00:18:46.726 --> 00:18:49.095 line:-1 position:50%
This is where I define
the CHHapticEvents


375
00:18:49.095 --> 00:18:50.930 line:-1 position:50%
that are part of
the CHHapticPattern


376
00:18:50.930 --> 00:18:53.099 line:-1 position:50%
that can be played.


377
00:18:53.099 --> 00:18:55.701 line:-1 position:50%
By default,
there's a transient event,


378
00:18:55,701 --> 00:19:01,774 line:-1
but I can easily add
a continuous event as well.


379
00:19:01,774 --> 00:19:06,779 line:-1
There are also Import, Export,
and Reset buttons in the UI.


380
00:19:06.779 --> 00:19:08.881 line:-1 position:50%
Reset clears any events
that I've added


381
00:19:08,881 --> 00:19:13,452 line:-1
and returns the pattern
to its default state.


382
00:19:13,452 --> 00:19:16,088 line:-1
Import and Export
are great features.


383
00:19:16,088 --> 00:19:23,095 line:-1
These allow your project to load
and save AHAP files.


384
00:19:23,095 --> 00:19:25,998 line:-1
Here I've imported a predefined
AHAP called Rumble,


385
00:19:25.998 --> 00:19:28.567 line:-1 position:50%
which triggers
a nice vibration effect,


386
00:19:28,567 --> 00:19:34,874 line:-1
but I think it needs
to be tweaked just a little.


387
00:19:34.874 --> 00:19:36.475 line:-1 position:50%
Now that I've updated
the pattern,


388
00:19:36.475 --> 00:19:38.644 line:-1 position:50%
I can export it
to a new AHAP file


389
00:19:38,644 --> 00:19:40,813 line:-1
in order to share
this improved haptic pattern


390
00:19:40,813 --> 00:19:45,151 line:-1
with the rest of my team.


391
00:19:51,157 --> 00:19:53,225 line:-1
Now that my asset
is created and tuned,


392
00:19:53,225 --> 00:19:59,231 line:-1
I'll go back to my airplane
and point it to MyHapticPattern.


393
00:19:59,231 --> 00:20:03,335 line:-1
Great! Everything is wired up.


394
00:20:03,335 --> 00:20:06,205 line:-1
With the haptic pattern defined
and properly referenced,


395
00:20:06,205 --> 00:20:08,240 line:-1
all that remains
is to add some logic


396
00:20:08.240 --> 00:20:11.811 line:-1 position:50%
to the Haptics component
so it can play a haptic pattern.


397
00:20:11.811 --> 00:20:14.413 line:-1 position:50%
This can be divided
into two methods:


398
00:20:14,413 --> 00:20:17,616 line:-1
PrepareHaptics and Play.


399
00:20:17.616 --> 00:20:21.253 line:-1 position:50%
PrepareHaptics is where the
haptic engine is initialized,


400
00:20:21,253 --> 00:20:24,390 line:-1
and the haptic pattern
player is created.


401
00:20:24.390 --> 00:20:25.925 line:-1 position:50%
Play will simply call


402
00:20:25,925 --> 00:20:30,830 line:-1
the CHHapticPatternPlayer's
start method to begin playback.


403
00:20:30.830 --> 00:20:34.100 line:-1 position:50%
And here's
the Haptics component script.


404
00:20:34.100 --> 00:20:36.869 line:-1 position:50%
Fields are defined
for a haptic engine


405
00:20:36.869 --> 00:20:39.105 line:-1 position:50%
and a haptic player.


406
00:20:39.105 --> 00:20:41.941 line:-1 position:50%
Importantly,
add a serializeField attribute


407
00:20:41,941 --> 00:20:46,145 line:-1
to allow the AHAP asset
to be set in the editor UI.


408
00:20:46.145 --> 00:20:50.883 line:-1 position:50%
Next, add the code to create
a CHHapticEngine, start it,


409
00:20:50,883 --> 00:20:52,852 line:-1
and create
a haptic pattern player


410
00:20:52.852 --> 00:20:56.922 line:-1 position:50%
by accessing the AHAP directly
from the referenced asset.


411
00:20:56,922 --> 00:20:59,225 position:50%
Of course,
calling Start on the player


412
00:20:59,225 --> 00:21:02,294 line:0
will play the haptic pattern.


413
00:21:02,294 --> 00:21:05,097 line:-1
The Core Haptics Unity plug-in
gives you the tools you need


414
00:21:05,097 --> 00:21:08,934 line:-1
to add an entirely new level
of immersion into your games.


415
00:21:08.934 --> 00:21:11.670 line:-1 position:50%
Use the Core Haptics plug-in
to create magical game moments


416
00:21:11.670 --> 00:21:15.741 line:-1 position:50%
that look, sound, and feel real.


417
00:21:15,741 --> 00:21:17,643 line:0
For a deep dive
into Core Haptics,


418
00:21:17,643 --> 00:21:21,547 line:0
check out the session
"Introducing Core Haptics."


419
00:21:21,547 --> 00:21:25,151 position:50%
For details on designing
engaging haptics experiences


420
00:21:25,151 --> 00:21:28,621 line:0
be sure to watch "Designing
Audio-Haptic Experiences"


421
00:21:28,621 --> 00:21:32,057 line:0
and "Practice audio
haptic design."


422
00:21:32.057 --> 00:21:34.994 line:-1 position:50%
Immersive audio is an incredibly
important aspect


423
00:21:34.994 --> 00:21:37.196 line:-1 position:50%
of great game experiences.


424
00:21:37.196 --> 00:21:41.167 line:-1 position:50%
Use the PHASE Unity plug-in to
unlock your creative potential


425
00:21:41.167 --> 00:21:45.571 line:-1 position:50%
and build lush soundscapes
into your game worlds.


426
00:21:45,571 --> 00:21:47,907 line:-1
With PHASE,
you can provide complex


427
00:21:47.907 --> 00:21:51.277 line:-1 position:50%
and dynamic audio experiences
to your games.


428
00:21:51.277 --> 00:21:54.480 line:-1 position:50%
Geometry-aware audio means
that sounds emanate from


429
00:21:54,480 --> 00:21:57,249 line:-1
and interact with
meshes in the scene.


430
00:21:57.249 --> 00:21:59.685 line:-1 position:50%
Environments in your game
will sound more realistic


431
00:21:59,685 --> 00:22:02,788 line:-1
through reverberation
and reflection.


432
00:22:02.788 --> 00:22:05.291 line:-1 position:50%
You can build hierarchical
audio graphs


433
00:22:05,291 --> 00:22:09,762 line:-1
that allow for dynamic audio
control during gameplay


434
00:22:09,762 --> 00:22:13,132 line:-1
The PHASE plug-in includes
a set of predefined components


435
00:22:13.132 --> 00:22:14.934 line:-1 position:50%
that are game-ready.


436
00:22:14,934 --> 00:22:17,102 line:-1
Simply attach them
to your game objects


437
00:22:17,102 --> 00:22:18,370 line:-1
and you can start using PHASE


438
00:22:18,370 --> 00:22:21,207 line:-1
without writing
a single line of code.


439
00:22:21.207 --> 00:22:24.677 line:-1 position:50%
The first component is the
PHASEListener component.


440
00:22:24.677 --> 00:22:27.246 line:-1 position:50%
It acts as the "ears"
of your game scene


441
00:22:27,246 --> 00:22:31,483 line:-1
and processes audio based
upon its position, orientation,


442
00:22:31.483 --> 00:22:33.786 line:-1 position:50%
and reverb preset.


443
00:22:33,786 --> 00:22:36,789 line:-1
Next is the
PHASEOccluder component.


444
00:22:36.789 --> 00:22:38.958 line:-1 position:50%
PHASEOccluders
attach to game objects


445
00:22:38,958 --> 00:22:41,594 line:-1
with geometry data
and dampen audio


446
00:22:41.594 --> 00:22:46.098 line:-1 position:50%
when they come between sources
and the listener in the scene.


447
00:22:46.098 --> 00:22:48.834 line:-1 position:50%
Next is the
PHASESource component.


448
00:22:48.834 --> 00:22:50.369 line:-1 position:50%
These are attached
to game objects


449
00:22:50,369 --> 00:22:53,005 line:-1
and use the object's transform
to position sounds


450
00:22:53.005 --> 00:22:55.040 line:-1 position:50%
in your game world.


451
00:22:55.040 --> 00:22:57.376 line:-1 position:50%
In addition to
the built-in components,


452
00:22:57,376 --> 00:23:00,579 line:-1
the PHASE plug-in also defines
a custom asset,


453
00:23:00,579 --> 00:23:02,748 line:-1
the SoundEvent asset.


454
00:23:02,748 --> 00:23:06,151 line:-1
Sound events are objects which
describe audio playback events


455
00:23:06.151 --> 00:23:09.955 line:-1 position:50%
and define the audio played
by sources in the scene.


456
00:23:09,955 --> 00:23:11,824 line:-1
To start using
the PHASE plug-in,


457
00:23:11.824 --> 00:23:14.260 line:-1 position:50%
the first step is to make sure
that both the Apple.Core


458
00:23:14.260 --> 00:23:17.896 line:-1 position:50%
and PHASE plug-ins
are added to the project.


459
00:23:17.896 --> 00:23:21.133 line:-1 position:50%
Once installed, I can start
adding the included components


460
00:23:21,133 --> 00:23:22,635 line:-1
to the scene.


461
00:23:22,635 --> 00:23:23,936 line:-1
In this example project,


462
00:23:23.936 --> 00:23:26.739 line:-1 position:50%
I have three game objects
of interest:


463
00:23:26.739 --> 00:23:31.744 line:-1 position:50%
an airplane, a building,
and then the camera.


464
00:23:31.744 --> 00:23:34.146 line:-1 position:50%
First, I'll attach
the PHASEListener component


465
00:23:34.146 --> 00:23:36.282 line:-1 position:50%
to the camera.


466
00:23:36,282 --> 00:23:40,085 line:-1
By doing that, I've added
the "ears" to the scene.


467
00:23:40,085 --> 00:23:42,121 line:-1
Next, I'll make
the building an occluder


468
00:23:42,121 --> 00:23:45,824 line:-1
by attaching
the PHASEOccluder component.


469
00:23:48,827 --> 00:23:51,630 line:-1
Finally, I'll add a source
to the scene by adding


470
00:23:51.630 --> 00:23:55.834 line:-1 position:50%
the PHASESource component
to the airplane.


471
00:23:55.834 --> 00:23:59.104 line:-1 position:50%
Now that I've added a source
it needs some audio to play,


472
00:23:59,104 --> 00:24:01,440 line:-1
so I need to attach
a sound event,


473
00:24:01,440 --> 00:24:04,743 line:-1
but the Sound Events folder
is empty.


474
00:24:04,743 --> 00:24:06,545 line:-1
I can create one by going to


475
00:24:06,545 --> 00:24:14,286 line:-1
Assets > Create > Apple >
PHASE > SoundEvent.


476
00:24:14.286 --> 00:24:15.921 line:-1 position:50%
After creating a sound event,


477
00:24:15.921 --> 00:24:17.790 line:-1 position:50%
the PHASE plug-in
will immediately open


478
00:24:17,790 --> 00:24:20,859 line:-1
the PHASE sound event
composer window.


479
00:24:20.859 --> 00:24:24.596 line:-1 position:50%
This is the canvas
used to build sound events.


480
00:24:24.596 --> 00:24:27.533 line:-1 position:50%
I start by right-clicking
anywhere in the window.


481
00:24:27,533 --> 00:24:31,370 line:-1
This shows a pop-up that allows
me to add a node to the event.


482
00:24:31.370 --> 00:24:36.108 line:-1 position:50%
Because I want to play back
a clip I’ll create a sampler node.


483
00:24:36.108 --> 00:24:39.144 line:-1 position:50%
I've already added an audio clip
of an idling airplane


484
00:24:39,144 --> 00:24:45,617 line:-1
to the project,
so I can reference that here.


485
00:24:45.617 --> 00:24:47.086 line:-1 position:50%
I'll keep looping enabled


486
00:24:47,086 --> 00:24:50,155 line:-1
so that the airplane
keeps humming along.


487
00:24:50.155 --> 00:24:53.792 line:-1 position:50%
To hear the airplane,
I need to route it to a mixer.


488
00:24:53.792 --> 00:24:55.060 line:-1 position:50%
I can create a mixer


489
00:24:55.060 --> 00:24:58.964 line:-1 position:50%
by dragging the output line onto
the event composer's canvas,


490
00:24:58.964 --> 00:25:02.468 line:-1 position:50%
where it will show me
the option to create a mixer.


491
00:25:05,471 --> 00:25:10,943 line:-1
My sound event is now
complete and ready to use.


492
00:25:10.943 --> 00:25:13.212 line:-1 position:50%
By clicking on the sound event,


493
00:25:13.212 --> 00:25:16.582 line:-1 position:50%
I can see its settings
directly in the inspector.


494
00:25:16.582 --> 00:25:19.785 line:-1 position:50%
This allows me to adjust values
without having to go back


495
00:25:19,785 --> 00:25:22,287 line:-1
into the sound event composer.


496
00:25:22.287 --> 00:25:23.789 line:-1 position:50%
With the sound event created,


497
00:25:23,789 --> 00:25:26,291 line:-1
I can now reference it
in the PHASESource component


498
00:25:26.291 --> 00:25:30.963 line:-1 position:50%
I attached
to the airplane earlier.


499
00:25:30.963 --> 00:25:33.365 line:-1 position:50%
And with that,
audio in the scene is routed


500
00:25:33,365 --> 00:25:35,968 line:-1
and configured for playback.


501
00:25:35.968 --> 00:25:39.104 line:-1 position:50%
The PHASE Unity plug-in
opens totally new possibilities


502
00:25:39.104 --> 00:25:41.440 line:-1 position:50%
for in-game audio design.


503
00:25:41,440 --> 00:25:43,742 position:50%
To learn more about PHASE
and to dive deeper


504
00:25:43,742 --> 00:25:45,944 position:50%
into the concepts
I've introduced today,


505
00:25:45,944 --> 00:25:49,281 line:0
be sure to check out the Apple
Developer documentation site


506
00:25:49,281 --> 00:25:54,887 position:50%
and last year's introductory
WWDC session video.


507
00:25:54,887 --> 00:25:59,558 line:-1
And that concludes our overview
of the new Apple Unity plug-ins.


508
00:25:59.558 --> 00:26:02.161 line:-1 position:50%
I've covered a lot today,
but if you would like


509
00:26:02.161 --> 00:26:05.397 line:-1 position:50%
to know more about any
of the Apple Unity plug-ins,


510
00:26:05,397 --> 00:26:09,635 line:-1
the repository on GitHub
is the best place to start.


511
00:26:09.635 --> 00:26:12.237 line:-1 position:50%
That's where you'll find
the source,


512
00:26:12.237 --> 00:26:17.309 line:-1 position:50%
detailed documentation,
and samples for each of the plug-ins.


513
00:26:17,309 --> 00:26:19,978 line:0
Find out more
about integrating accessibility


514
00:26:19,978 --> 00:26:21,847 position:50%
into your Unity games with the


515
00:26:21,847 --> 00:26:24,950 position:50%
"Add accessibility
to Unity games" session


516
00:26:24,950 --> 00:26:26,351 position:50%
and be sure to check out


517
00:26:26,351 --> 00:26:29,254 line:0
"Reach new players
with Game Center dashboard"


518
00:26:29,254 --> 00:26:32,324 position:50%
to learn how to boost
your game's visibility.


519
00:26:32,324 --> 00:26:34,026 line:-1
Thank you for watching.


520
00:26:34,026 --> 00:26:38,597 size:2% position:90% align:right
♪

