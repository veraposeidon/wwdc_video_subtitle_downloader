2
00:00:00.501 --> 00:00:08.509 line:-1 align:center
â™ª â™ª


3
00:00:09,877 --> 00:00:13,747 line:-2
Adam: Hi, my name's Adam
and I'm an engineer on the SharePlay team.


4
00:00:13.780 --> 00:00:16.316 line:-2 align:center
I'm excited to talk to you
about what's new in SharePlay


5
00:00:16,350 --> 00:00:18,485 line:-1
and how you can adopt it in your app.


6
00:00:18,519 --> 00:00:24,091 line:-2
To start, we'll talk about some new APIs
for starting SharePlay from your app.


7
00:00:24,124 --> 00:00:28,595 line:-2
Next, we'll get into some exciting
GroupSessionMessenger updates.


8
00:00:28,629 --> 00:00:34,201 line:-2
Finally, some best practices around
implementing a SharePlay experience.


9
00:00:34.234 --> 00:00:36.303 line:-1 align:center
Starting SharePlay from your app.


10
00:00:36,336 --> 00:00:38,805 line:-1
We heard your feedback and we delivered,


11
00:00:38.839 --> 00:00:44.211 line:-2 align:center
As of iOS 15.4 you can now leverage new
API to allow your app to start SharePlay


12
00:00:44.244 --> 00:00:46.813 line:-1 align:center
without an existing FaceTime call.


13
00:00:46,847 --> 00:00:48,782 line:-1
So let's see what that looks like.


14
00:00:48,815 --> 00:00:52,386 line:-2
So now all we have to do
is find our favorite SharePlay app.


15
00:00:52,419 --> 00:00:54,621 line:-1
Let's say the Music app.


16
00:00:54,655 --> 00:00:56,723 line:-2
And we'll find a song that
we want to SharePlay,


17
00:00:56,757 --> 00:01:00,227 line:-2
like Viral Hits,
and press and hold it.


18
00:01:00.260 --> 00:01:01.728 line:-1 align:center
Now in the contextual menu,


19
00:01:01.762 --> 00:01:03.730 line:-2 align:center
you'll see that we now have
a new SharePlay button.


20
00:01:03,764 --> 00:01:05,899 line:-1
So I'll go ahead and press that,


21
00:01:05,933 --> 00:01:07,634 line:-1
and it brings up the people picker.


22
00:01:07.668 --> 00:01:11.238 line:-2 align:center
So we can select Sue
and start a FaceTime call.


23
00:01:13.507 --> 00:01:16.076 line:-2 align:center
And, as you can see,
we now have a pill here


24
00:01:16.109 --> 00:01:17.511 line:-1 align:center
with the staged activity.


25
00:01:17,544 --> 00:01:20,480 line:-2
So if Sue joins,
we can go ahead and start,


26
00:01:20,514 --> 00:01:22,216 line:-1
and we'll have group session.


27
00:01:24.151 --> 00:01:26.520 line:-1 align:center
Well, I thought that was all pretty cool,


28
00:01:26.553 --> 00:01:29.189 line:-2 align:center
but let's break that down
into some more detail.


29
00:01:30,257 --> 00:01:34,094 line:-2
Here we have the ability for users
to start SharePlay from share sheet,


30
00:01:34.127 --> 00:01:37.898 line:-2 align:center
and you may be wondering
what you need to do for this to work.


31
00:01:37,931 --> 00:01:41,602 line:-2
Well, the answer is that
if your app is entitled for SharePlay


32
00:01:41.635 --> 00:01:44.972 line:-2 align:center
then you get this button for free
with our zero adoption flow,


33
00:01:45.005 --> 00:01:47.774 line:-1 align:center
but this isn't the optimal user experience


34
00:01:47.808 --> 00:01:52.312 line:-2 align:center
since the user won't be able to start
the GroupActivity through system UI


35
00:01:52.346 --> 00:01:55.449 line:-2 align:center
and will, instead,
need to re-interact with your app


36
00:01:55,482 --> 00:01:58,352 line:-1
to pick the content to SharePlay.


37
00:01:58.385 --> 00:02:03.023 line:-2 align:center
So let's see how you'd adopt
our new APIs for your app.


38
00:02:03.056 --> 00:02:06.360 line:-2 align:center
The answer is, it's as simple as
registering your GroupActivity


39
00:02:06.393 --> 00:02:08.061 line:-1 align:center
on NSItemProvider


40
00:02:08,095 --> 00:02:11,698 line:-2
and then providing the ItemProvider
to the share sheet.


41
00:02:13,500 --> 00:02:15,202 line:-1
Want to still offer the SharePlay button


42
00:02:15.235 --> 00:02:17.204 line:-1 align:center
but not display it as prominently?


43
00:02:17,237 --> 00:02:18,539 line:-1
No problem.


44
00:02:18,572 --> 00:02:21,441 line:-2
You can tune the behavior
with allowsProminentActivity


45
00:02:21.475 --> 00:02:23.911 line:-1 align:center
on the UIActivityViewController.


46
00:02:23.944 --> 00:02:26.747 line:-2 align:center
Just set allowsProminentActivity
to false.


47
00:02:27.981 --> 00:02:31.785 line:-2 align:center
Or what if you have a piece of content in
your app that doesn't support SharePlay?


48
00:02:31.818 --> 00:02:35.022 line:-2 align:center
Well, while we'd love for everything
to support SharePlay,


49
00:02:35.055 --> 00:02:37.791 line:-2 align:center
you can make SharePlay not show up
in the share sheet


50
00:02:37.824 --> 00:02:42.229 line:-2 align:center
by telling UIActivityViewController
to exclude the SharePlay activity type.


51
00:02:44.164 --> 00:02:46.733 line:-2 align:center
And if you want to place a button
directly within your app,


52
00:02:46.767 --> 00:02:50.304 line:-2 align:center
then you can use our new API
GroupActivitySharingController


53
00:02:50,337 --> 00:02:54,208 line:-2
to create our UIViewController
and then, just present it!


54
00:02:55.909 --> 00:02:58.011 line:-2 align:center
Once someone
presses your in-app experience


55
00:02:58,045 --> 00:03:00,314 line:-2
and starts a FaceTime
or SharePlay session,


56
00:03:00.347 --> 00:03:05.252 line:-2 align:center
they'll then be presented with the ability
to activate the staged GroupActivity.


57
00:03:05.285 --> 00:03:08.355 line:-2 align:center
Once activated,
your app will receive the GroupSession.


58
00:03:08.388 --> 00:03:10.591 line:-2 align:center
And don't worry if you're saying
to yourself "Wait, Adam,


59
00:03:10,624 --> 00:03:12,726 line:-1
did you just say 'Staged GroupActivity'?"


60
00:03:12.759 --> 00:03:14.628 line:-1 align:center
Why, yes. Yes, I did!


61
00:03:14,661 --> 00:03:17,898 line:-2
But let's hold onto that thought
and dive deeper into that later


62
00:03:17,931 --> 00:03:20,367 line:-1
when we're talking about best practices.


63
00:03:20,400 --> 00:03:24,605 line:-2
For now, let's see how we can adopt this
in our DrawTogether app.


64
00:03:25,706 --> 00:03:27,274 line:-1
This is our DrawTogether app.


65
00:03:27.307 --> 00:03:31.211 line:-2 align:center
It's the same app
from our previous WWDC talk from 2021


66
00:03:31.245 --> 00:03:34.014 line:-2 align:center
"Build custom experiences
with Group Activities,"


67
00:03:34.047 --> 00:03:39.219 line:-2 align:center
so if you haven't seen it already,
I highly recommend checking it out.


68
00:03:39.253 --> 00:03:41.321 line:-1 align:center
Now that you've gone ahead and seen that,


69
00:03:41,355 --> 00:03:44,124 line:-2
you'll remember there weren't
any share buttons in our app,


70
00:03:44,157 --> 00:03:46,159 line:-1
but we did have a SharePlay button


71
00:03:46,193 --> 00:03:48,762 line:-2
when you were eligible for
a GroupSession.


72
00:03:48,795 --> 00:03:51,098 line:-1
Let's go ahead and modify that behavior


73
00:03:51.131 --> 00:03:54.268 line:-2 align:center
so that even when
isEligibleForGroupSession is false,


74
00:03:54.301 --> 00:03:58.539 line:-2 align:center
we show the button and, now, allow
the user to start a SharePlay session.


75
00:04:00.040 --> 00:04:02.876 line:-2 align:center
And now we can go ahead
and see it in action.


76
00:04:02.910 --> 00:04:05.712 line:-2 align:center
Let's go ahead
and go to our ControlBar code.


77
00:04:05,746 --> 00:04:07,848 line:-2
Now, as you can see here,
we have an â€˜ifâ€™ statement


78
00:04:07.881 --> 00:04:10.050 line:-2 align:center
that makes sure
that we don't have a group session


79
00:04:10.083 --> 00:04:13.053 line:-2 align:center
and that we're eligible
for a group session.


80
00:04:13.086 --> 00:04:16.990 line:-2 align:center
So let's go ahead
and remove the latter statement,


81
00:04:17,024 --> 00:04:18,859 line:-1
and move it down here.


82
00:04:24,865 --> 00:04:27,234 line:-2
And now what we have to do
is register a new variable


83
00:04:27,267 --> 00:04:30,404 line:-2
so that we know when to present
our GroupActivity sharing controller.


84
00:04:30.437 --> 00:04:34.942 line:-1 align:center
So we'll have a new variable up here,


85
00:04:34,975 --> 00:04:39,513 line:-2
and now let's handle when that variable
changes to true.


86
00:04:43.150 --> 00:04:45.452 line:-1 align:center
And we have to have a wrapper now


87
00:04:45,485 --> 00:04:49,389 line:-2
so we can present the GroupActivity
sharing controller in SwiftUI.


88
00:04:55,562 --> 00:04:59,700 line:-2
And now, finally, all we have to do
is have an 'else' statement


89
00:04:59.733 --> 00:05:02.603 line:-2 align:center
to set isSharingControllerPresented
to true


90
00:05:02,636 --> 00:05:05,005 line:-1
if we're not eligible for a GroupSession.


91
00:05:08.008 --> 00:05:10.177 line:-1 align:center
And now we can see our code in action.


92
00:05:10,210 --> 00:05:12,546 line:-2
So we'll go ahead
and go to the DrawTogether app.,


93
00:05:12.579 --> 00:05:14.681 line:-2 align:center
and you can see,
we have our SharePlay button.


94
00:05:14,715 --> 00:05:17,751 line:-2
So we can now press it,
and we're given the people picker.


95
00:05:19.920 --> 00:05:24.157 line:-2 align:center
And now we've got a great experience
for starting SharePlay from your app.


96
00:05:24.191 --> 00:05:26.660 line:-1 align:center
But that's not the only update we made.


97
00:05:26,693 --> 00:05:30,864 line:-2
So now let's talk about some of the
GroupSessionMessenger updates we've made.


98
00:05:30.898 --> 00:05:34.768 line:-2 align:center
We've got two exciting new updates
in our GroupSessionMessenger.


99
00:05:34,801 --> 00:05:38,839 line:-2
For the first update,
you may have run into this magical number.


100
00:05:38.872 --> 00:05:43.310 line:-2 align:center
It's the payload size you're able to send
over the GroupSessionMessenger.


101
00:05:43,343 --> 00:05:45,646 line:-1
Well, not anymore.


102
00:05:45.679 --> 00:05:51.885 line:-2 align:center
We've now made it so that the payload size
is four times larger at 256KB.


103
00:05:51.919 --> 00:05:53.887 line:-2 align:center
With this change,
your app doesn't need to worry


104
00:05:53,921 --> 00:05:57,024 line:-2
about breaking up your message
into smaller messages.


105
00:05:57.057 --> 00:06:01.795 line:-2 align:center
You can simply send your message
and focus on building a great experience.


106
00:06:01.828 --> 00:06:03.497 line:-1 align:center
And if that didn't excite you enough,


107
00:06:03.530 --> 00:06:06.066 line:-1 align:center
then I'm sure our next update will.


108
00:06:06.099 --> 00:06:08.202 line:-1 align:center
Unreliable messaging.


109
00:06:08,235 --> 00:06:10,003 line:-1
As part of the GroupSessionMessenger,


110
00:06:10.037 --> 00:06:13.006 line:-2 align:center
you can now choose
your messages' reliability.


111
00:06:13.040 --> 00:06:16.810 line:-2 align:center
This allows you to choose
between reliable or unreliable messaging


112
00:06:16.844 --> 00:06:19.513 line:-1 align:center
depending on your desired experience.


113
00:06:20,948 --> 00:06:23,617 line:-2
All we have to do
is leverage the new initializer


114
00:06:23,650 --> 00:06:25,085 line:-1
on GroupSessionMessenger


115
00:06:25.118 --> 00:06:28.488 line:-2 align:center
that allows us to specify
the MessageReliability.


116
00:06:30,524 --> 00:06:32,960 line:-1
Now that we understand how to use the API,


117
00:06:32.993 --> 00:06:35.429 line:-1 align:center
what about the experience?


118
00:06:35,462 --> 00:06:38,398 line:-2
When would we want to use
unreliable messaging?


119
00:06:38,432 --> 00:06:40,634 line:-1
Well, that's a great question


120
00:06:41,802 --> 00:06:46,240 line:-2
People are performing real-time actions
on FaceTime and SharePlay.


121
00:06:46.273 --> 00:06:48.909 line:-2 align:center
So let's imagine that we have
three people in a session.


122
00:06:48.942 --> 00:06:51.912 line:-1 align:center
Amy, Brian, and Chris.


123
00:06:51,945 --> 00:06:54,348 line:-2
They're all joined into a session
and synced


124
00:06:54,381 --> 00:06:58,485 line:-1
so as time progresses so does our movie.


125
00:06:58,519 --> 00:07:00,787 line:-2
But what happens
if Amy wants to do something


126
00:07:00.821 --> 00:07:04.925 line:-2 align:center
relevant to the specific time
that they're at in that moment?


127
00:07:04,958 --> 00:07:07,094 line:-1
Well, if you use reliable messaging,


128
00:07:07.127 --> 00:07:11.131 line:-2 align:center
then we guarantee that messages
will be received on all the devices,


129
00:07:11.164 --> 00:07:13.333 line:-2 align:center
but that doesn't mean
that they'll be received


130
00:07:13,367 --> 00:07:16,003 line:-1
at the time that they're expecting it.


131
00:07:16.036 --> 00:07:18.572 line:-2 align:center
For example,
Chris received the message,


132
00:07:18.605 --> 00:07:21.041 line:-2 align:center
but Brian has the message dropped
the first time


133
00:07:21,074 --> 00:07:23,377 line:-1
and receives it properly after that.


134
00:07:23,410 --> 00:07:26,947 line:-1
But remember, the movie is still playing.


135
00:07:26,980 --> 00:07:30,484 line:-2
So now we get to where Amy intended
the message to be reflected


136
00:07:30.517 --> 00:07:32.085 line:-1 align:center
and Brian doesn't have it.


137
00:07:32,119 --> 00:07:35,756 line:-2
He receives it later,
but at that point, it's too late.


138
00:07:35.789 --> 00:07:39.493 line:-2 align:center
Well, this is a perfect case
for unreliable networking.


139
00:07:39,526 --> 00:07:42,429 line:-2
It allows you, the developer,
to know what information


140
00:07:42.462 --> 00:07:44.965 line:-2 align:center
needs to be reliably received
on the other side


141
00:07:44.998 --> 00:07:46.733 line:-1 align:center
and what information doesn't.


142
00:07:46.767 --> 00:07:50.204 line:-2 align:center
This is an important concept to understand
when designing protocols


143
00:07:50.237 --> 00:07:53.707 line:-2 align:center
that have the user experience
deeply affected by latency.


144
00:07:53.740 --> 00:07:56.043 line:-1 align:center
Unreliable messages are using UDP


145
00:07:56,076 --> 00:07:59,713 line:-2
and have less latency and overhead
with each message involved


146
00:07:59,746 --> 00:08:02,616 line:-2
and, as a result of that,
you'll have a more real-time experience


147
00:08:02,649 --> 00:08:05,185 line:-1
when sending messages through them.


148
00:08:05,219 --> 00:08:08,889 line:-2
So now let's talk about how we're going
to use this for our DrawTogether app


149
00:08:08.922 --> 00:08:12.693 line:-2 align:center
You may remember this screen
from WWDC '21,


150
00:08:12.726 --> 00:08:15.963 line:-2 align:center
especially with my beautifully drawn
smiley face.


151
00:08:15,996 --> 00:08:18,632 line:-2
Let's dive a bit into what happens
when you're drawing


152
00:08:18,665 --> 00:08:20,534 line:-1
your smiley face on the screen.


153
00:08:22.769 --> 00:08:26.673 line:-2 align:center
In our app we have some code
that listens to a GestureRecognizer


154
00:08:26.707 --> 00:08:30.777 line:-2 align:center
and then we sent messages
each time we noticed a change.


155
00:08:30,811 --> 00:08:33,647 line:-2
This meant that as we were drawing
our smiley face,


156
00:08:33,680 --> 00:08:35,682 line:-1
we were constantly sending new messages


157
00:08:35.716 --> 00:08:38.719 line:-2 align:center
for each point
our GestureRecognizer gives us.


158
00:08:38,752 --> 00:08:40,787 line:-1
That's a lot of messages!


159
00:08:40.821 --> 00:08:44.491 line:-2 align:center
Well, we can now change our protocol
to use unreliable messaging


160
00:08:44.525 --> 00:08:47.027 line:-2 align:center
to make a more seamless
drawing experience.


161
00:08:48,562 --> 00:08:51,698 line:-2
What we'll do here is make it so that
each time we receive an update


162
00:08:51,732 --> 00:08:53,133 line:-1
from our GestureRecognizer,


163
00:08:53.166 --> 00:08:57.504 line:-2 align:center
we'll send our newly added point
using unreliable messaging.


164
00:08:57.538 --> 00:09:00.674 line:-2 align:center
Once the gesture is complete,
we'll then use reliable messaging


165
00:09:00,707 --> 00:09:05,779 line:-2
and give all of the points so a client can
catch up with any points that they missed.


166
00:09:05,812 --> 00:09:08,482 line:-2
This allows us to take advantage
of the lower latency


167
00:09:08,515 --> 00:09:13,353 line:-2
provided by unreliable messaging to have
a more immediate drawing experience.


168
00:09:13,387 --> 00:09:16,089 line:-2
So let's see how we would do this
in code.


169
00:09:16.123 --> 00:09:19.059 line:-1 align:center
So first let's go to our messages file.


170
00:09:20.427 --> 00:09:24.331 line:-2 align:center
And we'll go ahead and define
our new message type.


171
00:09:25.132 --> 00:09:28.302 line:-2 align:center
As you can see, this new message type
is pretty much the same as our old one,


172
00:09:28.335 --> 00:09:32.573 line:-2 align:center
but this time, will contain all
of the points for our stroke.


173
00:09:32,606 --> 00:09:35,609 line:-1
Now we'll go over to our canvas file.


174
00:09:40,514 --> 00:09:42,683 line:-1
And we need to set up a handler function


175
00:09:42,716 --> 00:09:45,385 line:-2
to handle the new message
that we're gonna get.


176
00:09:50,791 --> 00:09:54,294 line:-2
And let's go ahead and create
our unreliable messenger.


177
00:09:54,328 --> 00:09:56,897 line:-1
First, we'll create a variable.


178
00:09:59.833 --> 00:10:02.102 line:-1 align:center
And now, let's just initialize it.


179
00:10:06.006 --> 00:10:08.742 line:-2 align:center
Now we'll listen
for the finished stroke message.


180
00:10:12,846 --> 00:10:16,650 line:-2
And mark the previous message
as unreliable messenger as well.


181
00:10:19,720 --> 00:10:21,522 line:-1
But we need a way to send the message.


182
00:10:21,555 --> 00:10:24,291 line:-1
So we'll go up to finishedStroke.


183
00:10:26.360 --> 00:10:29.296 line:-2 align:center
And we'll go ahead and send
our new message type.


184
00:10:31,365 --> 00:10:34,635 line:-2
And let's change our old function
for sending all of the points


185
00:10:34,668 --> 00:10:37,104 line:-1
to use the unreliable messenger.


186
00:10:39.039 --> 00:10:41.575 line:-1 align:center
And now we can see our code in action.


187
00:10:41,608 --> 00:10:43,744 line:-1
So we go over to the DrawTogether app


188
00:10:43.777 --> 00:10:47.080 line:-1 align:center
and we can see how seamless it is.


189
00:10:47.114 --> 00:10:48.415 line:-1 align:center
And that's it!


190
00:10:49.816 --> 00:10:53.320 line:-2 align:center
And now, as promised,
let's talk about some best practices


191
00:10:53.353 --> 00:10:55.956 line:-1 align:center
for your SharePlay implementation.


192
00:10:55.989 --> 00:10:58.425 line:-1 align:center
You may remember this term from earlier:


193
00:10:58.458 --> 00:11:00.460 line:-1 align:center
Staged GroupActivity.


194
00:11:00.494 --> 00:11:02.930 line:-1 align:center
What does that term mean for your app?


195
00:11:02,963 --> 00:11:05,132 line:-1
Well, let's talk through a scenario.


196
00:11:07,100 --> 00:11:09,636 line:-2
Let's say that the device
on our left, "Adam",


197
00:11:09,670 --> 00:11:12,806 line:-2
starts SharePlay
with the device on our right, "Brian".


198
00:11:12,840 --> 00:11:15,475 line:-2
But Adam is trying to resume the show
they were watching.


199
00:11:15,509 --> 00:11:18,078 line:-2
So when someone activates
the staged GroupActivity,


200
00:11:18.111 --> 00:11:21.982 line:-2 align:center
we want to jump into that resumed show
at a specific time,


201
00:11:22.015 --> 00:11:24.117 line:-1 align:center
rather than starting over.


202
00:11:24.151 --> 00:11:27.855 line:-2 align:center
This poses a problem because
"Adam" knew we had 11 minutes remaining


203
00:11:27,888 --> 00:11:31,024 line:-2
in the show,
but Brian's device didn't.


204
00:11:31.058 --> 00:11:35.295 line:-2 align:center
This means that if Brian's device
activated the staged GroupActivity,


205
00:11:35.329 --> 00:11:37.631 line:-1 align:center
the show may start over.


206
00:11:37.664 --> 00:11:39.366 line:-1 align:center
So what can we do here?


207
00:11:39.399 --> 00:11:42.202 line:-2 align:center
It really depends on your app
and experience.


208
00:11:43,203 --> 00:11:45,305 line:-1
So let's walk through some ideas.


209
00:11:45.339 --> 00:11:46.640 line:-1 align:center
For the playback case,


210
00:11:46.673 --> 00:11:49.977 line:-2 align:center
we'll want to have each device
contribute its initial playback state


211
00:11:50.010 --> 00:11:52.613 line:-1 align:center
to the others in catch-up.


212
00:11:52.646 --> 00:11:57.317 line:-2 align:center
This means that since Adam's device
knew the playback state was 23 seconds,


213
00:11:57.351 --> 00:12:00.087 line:-2 align:center
when he joins the session,
he'll tell all the other devices


214
00:12:00.120 --> 00:12:02.222 line:-1 align:center
his intended playback state,


215
00:12:02,256 --> 00:12:05,359 line:-2
and they'll use that
as the source of truth.


216
00:12:05,392 --> 00:12:09,830 line:-2
This same principle applies to any
experience you create using SharePlay.


217
00:12:09.863 --> 00:12:12.499 line:-2 align:center
Each person that joins a session
should contribute


218
00:12:12,533 --> 00:12:15,602 line:-2
their understanding of the session
to the others.


219
00:12:15,636 --> 00:12:18,805 line:-2
This is because sessions are peer-to-peer
and ownerless.


220
00:12:18,839 --> 00:12:21,375 line:-1
So let's talk a bit more about that.


221
00:12:21.408 --> 00:12:24.711 line:-2 align:center
Ownerless sessions
are a hard concept to grasp,


222
00:12:24,745 --> 00:12:29,583 line:-2
but they're important when
designing a proper SharePlay experience.


223
00:12:29.616 --> 00:12:31.752 line:-1 align:center
In this case, Adam, on the left,


224
00:12:31.785 --> 00:12:34.721 line:-2 align:center
wants to hand off his session
to his Apple TV.


225
00:12:34.755 --> 00:12:39.860 line:-2 align:center
This results in his phone dropping off
the GroupSession and his TV joining.


226
00:12:39,893 --> 00:12:42,429 line:-2
But what happens
if we had ownership implemented?


227
00:12:42,462 --> 00:12:46,600 line:-1
Well, the owner dropped off, so...


228
00:12:46.633 --> 00:12:49.636 line:-1 align:center
And remember, this isn't just for TVs.


229
00:12:50.771 --> 00:12:53.874 line:-2 align:center
In iOS 16 we now have
FaceTime handoff.


230
00:12:53.907 --> 00:12:56.810 line:-1 align:center
So Adam goes ahead and hands off his iPad,


231
00:12:56.844 --> 00:12:59.046 line:-1 align:center
and well, same thing.


232
00:12:59,079 --> 00:13:00,180 line:-1
Boom


233
00:13:00.214 --> 00:13:01.682 line:-1 align:center
And that isn't all.


234
00:13:01,715 --> 00:13:04,418 line:-2
We just talked about some examples
of a user flow


235
00:13:04,451 --> 00:13:08,322 line:-2
where someone tries to move the session
from one device to another,


236
00:13:08,355 --> 00:13:10,891 line:-1
but there's other cases to think about.


237
00:13:10,924 --> 00:13:14,895 line:-2
Okay, don't worry, we'll keep it short
with just one more example.


238
00:13:14.928 --> 00:13:17.664 line:-1 align:center
This screen may seem a little familiar.


239
00:13:17.698 --> 00:13:19.366 line:-1 align:center
It's the FaceTime HUD.


240
00:13:19.399 --> 00:13:22.202 line:-2 align:center
But what happens
if we click the SharePlay button?


241
00:13:23,437 --> 00:13:25,973 line:-2
We're now presented with a button,
End SharePlay,


242
00:13:26,006 --> 00:13:30,410 line:-2
that allows you, you guessed it,
end SharePlay.


243
00:13:30.444 --> 00:13:32.779 line:-2 align:center
This allows you
to end SharePlay for everyone,


244
00:13:32,813 --> 00:13:35,549 line:-2
essentially the system calling .end()
on the GroupSession


245
00:13:35,582 --> 00:13:38,018 line:-1
on your application's behalf.


246
00:13:38.051 --> 00:13:41.288 line:-2 align:center
This means that no matter how careful
you are about not calling .end()


247
00:13:41,321 --> 00:13:44,691 line:-2
unless that device is the owner,
the system is still able to call .end()


248
00:13:44,725 --> 00:13:47,895 line:-1
on the GroupSession on your behalf.


249
00:13:47,928 --> 00:13:50,931 line:-2
So remember,
while it may be a hard concept to grasp,


250
00:13:50.964 --> 00:13:54.301 line:-2 align:center
making sure that your application
doesn't have a sense of ownership


251
00:13:54.334 --> 00:13:58.672 line:-2 align:center
means that it'll, overall,
result in a much better experience.


252
00:13:58.705 --> 00:14:00.507 line:-2 align:center
Now that you've listened
to the whole session,


253
00:14:00,541 --> 00:14:04,444 line:-2
go and adopt our new APIs for starting
SharePlay from within your app,


254
00:14:04,478 --> 00:14:06,847 line:0
and explore ways for your app
to communicate


255
00:14:06,880 --> 00:14:10,717 align:center
in new, low latency, ways
using unreliable messaging.


256
00:14:11,952 --> 00:14:14,955 line:0
We love hearing from you all,
so please continue to file feedback


257
00:14:14,988 --> 00:14:16,690 align:center
using the Feedback Assistant.


258
00:14:16,723 --> 00:14:19,426 line:-2
I hope you enjoyed
all the changes that we've made


259
00:14:19.459 --> 00:14:22.829 line:-2 align:center
and we look forward to seeing all
the amazing experiences that you build.


260
00:14:22.863 --> 00:14:25.999 line:-2 align:center
If you haven't already,
check out our other WWDC talk,


261
00:14:26,033 --> 00:14:28,635 line:-1
"Make a great SharePlay experience".


262
00:14:28,669 --> 00:14:31,471 line:-2
Or, if you're looking for
some amazing enhancements we've made


263
00:14:31,505 --> 00:14:32,873 line:-1
around media playback,


264
00:14:32.906 --> 00:14:36.777 line:-2 align:center
check out "Display ads
and other interstitials in SharePlay".


265
00:14:36,810 --> 00:14:39,980 line:-2
If you have any questions, please find us
at the GroupActivities labs


266
00:14:40.013 --> 00:14:41.315 line:-1 align:center
and challenges.


267
00:14:41.348 --> 00:14:44.985 line:-2 align:center
As always, thank you all for tuning in,
and have a great WWDC.


268
00:14:45.018 --> 00:14:46.987 line:-1 align:center
We can't wait to see what you build.

